var MarkdownInput = (function (exports) {
   'use strict';

   /**
   The data structure for documents. @nonabstract
   */
   class Text {
       /**
       @internal
       */
       constructor() { }
       /**
       Get the line description around the given position.
       */
       lineAt(pos) {
           if (pos < 0 || pos > this.length)
               throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
           return this.lineInner(pos, false, 1, 0);
       }
       /**
       Get the description for the given (1-based) line number.
       */
       line(n) {
           if (n < 1 || n > this.lines)
               throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
           return this.lineInner(n, true, 1, 0);
       }
       /**
       Replace a range of the text with the given content.
       */
       replace(from, to, text) {
           let parts = [];
           this.decompose(0, from, parts, 2 /* To */);
           if (text.length)
               text.decompose(0, text.length, parts, 1 /* From */ | 2 /* To */);
           this.decompose(to, this.length, parts, 1 /* From */);
           return TextNode.from(parts, this.length - (to - from) + text.length);
       }
       /**
       Append another document to this one.
       */
       append(other) {
           return this.replace(this.length, this.length, other);
       }
       /**
       Retrieve the text between the given points.
       */
       slice(from, to = this.length) {
           let parts = [];
           this.decompose(from, to, parts, 0);
           return TextNode.from(parts, to - from);
       }
       /**
       Test whether this text is equal to another instance.
       */
       eq(other) {
           if (other == this)
               return true;
           if (other.length != this.length || other.lines != this.lines)
               return false;
           let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
           let a = new RawTextCursor(this), b = new RawTextCursor(other);
           for (let skip = start, pos = start;;) {
               a.next(skip);
               b.next(skip);
               skip = 0;
               if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                   return false;
               pos += a.value.length;
               if (a.done || pos >= end)
                   return true;
           }
       }
       /**
       Iterate over the text. When `dir` is `-1`, iteration happens
       from end to start. This will return lines and the breaks between
       them as separate strings.
       */
       iter(dir = 1) { return new RawTextCursor(this, dir); }
       /**
       Iterate over a range of the text. When `from` > `to`, the
       iterator will run in reverse.
       */
       iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
       /**
       Return a cursor that iterates over the given range of lines,
       _without_ returning the line breaks between, and yielding empty
       strings for empty lines.
       
       When `from` and `to` are given, they should be 1-based line numbers.
       */
       iterLines(from, to) {
           let inner;
           if (from == null) {
               inner = this.iter();
           }
           else {
               if (to == null)
                   to = this.lines + 1;
               let start = this.line(from).from;
               inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
           }
           return new LineCursor(inner);
       }
       /**
       @internal
       */
       toString() { return this.sliceString(0); }
       /**
       Convert the document to an array of lines (which can be
       deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
       */
       toJSON() {
           let lines = [];
           this.flatten(lines);
           return lines;
       }
       /**
       Create a `Text` instance for the given array of lines.
       */
       static of(text) {
           if (text.length == 0)
               throw new RangeError("A document must have at least one line");
           if (text.length == 1 && !text[0])
               return Text.empty;
           return text.length <= 32 /* Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
       }
   }
   // Leaves store an array of line strings. There are always line breaks
   // between these strings. Leaves are limited in size and have to be
   // contained in TextNode instances for bigger documents.
   class TextLeaf extends Text {
       constructor(text, length = textLength(text)) {
           super();
           this.text = text;
           this.length = length;
       }
       get lines() { return this.text.length; }
       get children() { return null; }
       lineInner(target, isLine, line, offset) {
           for (let i = 0;; i++) {
               let string = this.text[i], end = offset + string.length;
               if ((isLine ? line : end) >= target)
                   return new Line$1(offset, end, line, string);
               offset = end + 1;
               line++;
           }
       }
       decompose(from, to, target, open) {
           let text = from <= 0 && to >= this.length ? this
               : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
           if (open & 1 /* From */) {
               let prev = target.pop();
               let joined = appendText(text.text, prev.text.slice(), 0, text.length);
               if (joined.length <= 32 /* Branch */) {
                   target.push(new TextLeaf(joined, prev.length + text.length));
               }
               else {
                   let mid = joined.length >> 1;
                   target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
               }
           }
           else {
               target.push(text);
           }
       }
       replace(from, to, text) {
           if (!(text instanceof TextLeaf))
               return super.replace(from, to, text);
           let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
           let newLen = this.length + text.length - (to - from);
           if (lines.length <= 32 /* Branch */)
               return new TextLeaf(lines, newLen);
           return TextNode.from(TextLeaf.split(lines, []), newLen);
       }
       sliceString(from, to = this.length, lineSep = "\n") {
           let result = "";
           for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
               let line = this.text[i], end = pos + line.length;
               if (pos > from && i)
                   result += lineSep;
               if (from < end && to > pos)
                   result += line.slice(Math.max(0, from - pos), to - pos);
               pos = end + 1;
           }
           return result;
       }
       flatten(target) {
           for (let line of this.text)
               target.push(line);
       }
       scanIdentical() { return 0; }
       static split(text, target) {
           let part = [], len = -1;
           for (let line of text) {
               part.push(line);
               len += line.length + 1;
               if (part.length == 32 /* Branch */) {
                   target.push(new TextLeaf(part, len));
                   part = [];
                   len = -1;
               }
           }
           if (len > -1)
               target.push(new TextLeaf(part, len));
           return target;
       }
   }
   // Nodes provide the tree structure of the `Text` type. They store a
   // number of other nodes or leaves, taking care to balance themselves
   // on changes. There are implied line breaks _between_ the children of
   // a node (but not before the first or after the last child).
   class TextNode extends Text {
       constructor(children, length) {
           super();
           this.children = children;
           this.length = length;
           this.lines = 0;
           for (let child of children)
               this.lines += child.lines;
       }
       lineInner(target, isLine, line, offset) {
           for (let i = 0;; i++) {
               let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
               if ((isLine ? endLine : end) >= target)
                   return child.lineInner(target, isLine, line, offset);
               offset = end + 1;
               line = endLine + 1;
           }
       }
       decompose(from, to, target, open) {
           for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
               let child = this.children[i], end = pos + child.length;
               if (from <= end && to >= pos) {
                   let childOpen = open & ((pos <= from ? 1 /* From */ : 0) | (end >= to ? 2 /* To */ : 0));
                   if (pos >= from && end <= to && !childOpen)
                       target.push(child);
                   else
                       child.decompose(from - pos, to - pos, target, childOpen);
               }
               pos = end + 1;
           }
       }
       replace(from, to, text) {
           if (text.lines < this.lines)
               for (let i = 0, pos = 0; i < this.children.length; i++) {
                   let child = this.children[i], end = pos + child.length;
                   // Fast path: if the change only affects one child and the
                   // child's size remains in the acceptable range, only update
                   // that child
                   if (from >= pos && to <= end) {
                       let updated = child.replace(from - pos, to - pos, text);
                       let totalLines = this.lines - child.lines + updated.lines;
                       if (updated.lines < (totalLines >> (5 /* BranchShift */ - 1)) &&
                           updated.lines > (totalLines >> (5 /* BranchShift */ + 1))) {
                           let copy = this.children.slice();
                           copy[i] = updated;
                           return new TextNode(copy, this.length - (to - from) + text.length);
                       }
                       return super.replace(pos, end, updated);
                   }
                   pos = end + 1;
               }
           return super.replace(from, to, text);
       }
       sliceString(from, to = this.length, lineSep = "\n") {
           let result = "";
           for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
               let child = this.children[i], end = pos + child.length;
               if (pos > from && i)
                   result += lineSep;
               if (from < end && to > pos)
                   result += child.sliceString(from - pos, to - pos, lineSep);
               pos = end + 1;
           }
           return result;
       }
       flatten(target) {
           for (let child of this.children)
               child.flatten(target);
       }
       scanIdentical(other, dir) {
           if (!(other instanceof TextNode))
               return 0;
           let length = 0;
           let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
               : [this.children.length - 1, other.children.length - 1, -1, -1];
           for (;; iA += dir, iB += dir) {
               if (iA == eA || iB == eB)
                   return length;
               let chA = this.children[iA], chB = other.children[iB];
               if (chA != chB)
                   return length + chA.scanIdentical(chB, dir);
               length += chA.length + 1;
           }
       }
       static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
           let lines = 0;
           for (let ch of children)
               lines += ch.lines;
           if (lines < 32 /* Branch */) {
               let flat = [];
               for (let ch of children)
                   ch.flatten(flat);
               return new TextLeaf(flat, length);
           }
           let chunk = Math.max(32 /* Branch */, lines >> 5 /* BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
           let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
           function add(child) {
               let last;
               if (child.lines > maxChunk && child instanceof TextNode) {
                   for (let node of child.children)
                       add(node);
               }
               else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                   flush();
                   chunked.push(child);
               }
               else if (child instanceof TextLeaf && currentLines &&
                   (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                   child.lines + last.lines <= 32 /* Branch */) {
                   currentLines += child.lines;
                   currentLen += child.length + 1;
                   currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
               }
               else {
                   if (currentLines + child.lines > chunk)
                       flush();
                   currentLines += child.lines;
                   currentLen += child.length + 1;
                   currentChunk.push(child);
               }
           }
           function flush() {
               if (currentLines == 0)
                   return;
               chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
               currentLen = -1;
               currentLines = currentChunk.length = 0;
           }
           for (let child of children)
               add(child);
           flush();
           return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
       }
   }
   Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
   function textLength(text) {
       let length = -1;
       for (let line of text)
           length += line.length + 1;
       return length;
   }
   function appendText(text, target, from = 0, to = 1e9) {
       for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
           let line = text[i], end = pos + line.length;
           if (end >= from) {
               if (end > to)
                   line = line.slice(0, to - pos);
               if (pos < from)
                   line = line.slice(from - pos);
               if (first) {
                   target[target.length - 1] += line;
                   first = false;
               }
               else
                   target.push(line);
           }
           pos = end + 1;
       }
       return target;
   }
   function sliceText(text, from, to) {
       return appendText(text, [""], from, to);
   }
   class RawTextCursor {
       constructor(text, dir = 1) {
           this.dir = dir;
           this.done = false;
           this.lineBreak = false;
           this.value = "";
           this.nodes = [text];
           this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
       }
       nextInner(skip, dir) {
           this.done = this.lineBreak = false;
           for (;;) {
               let last = this.nodes.length - 1;
               let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
               let size = top instanceof TextLeaf ? top.text.length : top.children.length;
               if (offset == (dir > 0 ? size : 0)) {
                   if (last == 0) {
                       this.done = true;
                       this.value = "";
                       return this;
                   }
                   if (dir > 0)
                       this.offsets[last - 1]++;
                   this.nodes.pop();
                   this.offsets.pop();
               }
               else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                   this.offsets[last] += dir;
                   if (skip == 0) {
                       this.lineBreak = true;
                       this.value = "\n";
                       return this;
                   }
                   skip--;
               }
               else if (top instanceof TextLeaf) {
                   // Move to the next string
                   let next = top.text[offset + (dir < 0 ? -1 : 0)];
                   this.offsets[last] += dir;
                   if (next.length > Math.max(0, skip)) {
                       this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                       return this;
                   }
                   skip -= next.length;
               }
               else {
                   let next = top.children[offset + (dir < 0 ? -1 : 0)];
                   if (skip > next.length) {
                       skip -= next.length;
                       this.offsets[last] += dir;
                   }
                   else {
                       if (dir < 0)
                           this.offsets[last]--;
                       this.nodes.push(next);
                       this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                   }
               }
           }
       }
       next(skip = 0) {
           if (skip < 0) {
               this.nextInner(-skip, (-this.dir));
               skip = this.value.length;
           }
           return this.nextInner(skip, this.dir);
       }
   }
   class PartialTextCursor {
       constructor(text, start, end) {
           this.value = "";
           this.done = false;
           this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
           this.pos = start > end ? text.length : 0;
           this.from = Math.min(start, end);
           this.to = Math.max(start, end);
       }
       nextInner(skip, dir) {
           if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
               this.value = "";
               this.done = true;
               return this;
           }
           skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
           let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
           if (skip > limit)
               skip = limit;
           limit -= skip;
           let { value } = this.cursor.next(skip);
           this.pos += (value.length + skip) * dir;
           this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
           this.done = !this.value;
           return this;
       }
       next(skip = 0) {
           if (skip < 0)
               skip = Math.max(skip, this.from - this.pos);
           else if (skip > 0)
               skip = Math.min(skip, this.to - this.pos);
           return this.nextInner(skip, this.cursor.dir);
       }
       get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
   }
   class LineCursor {
       constructor(inner) {
           this.inner = inner;
           this.afterBreak = true;
           this.value = "";
           this.done = false;
       }
       next(skip = 0) {
           let { done, lineBreak, value } = this.inner.next(skip);
           if (done) {
               this.done = true;
               this.value = "";
           }
           else if (lineBreak) {
               if (this.afterBreak) {
                   this.value = "";
               }
               else {
                   this.afterBreak = true;
                   this.next();
               }
           }
           else {
               this.value = value;
               this.afterBreak = false;
           }
           return this;
       }
       get lineBreak() { return false; }
   }
   if (typeof Symbol != "undefined") {
       Text.prototype[Symbol.iterator] = function () { return this.iter(); };
       RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
           LineCursor.prototype[Symbol.iterator] = function () { return this; };
   }
   /**
   This type describes a line in the document. It is created
   on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
   */
   class Line$1 {
       /**
       @internal
       */
       constructor(
       /**
       The position of the start of the line.
       */
       from, 
       /**
       The position at the end of the line (_before_ the line break,
       or at the end of document for the last line).
       */
       to, 
       /**
       This line's line number (1-based).
       */
       number, 
       /**
       The line's content.
       */
       text) {
           this.from = from;
           this.to = to;
           this.number = number;
           this.text = text;
       }
       /**
       The length of the line (not including any line break after it).
       */
       get length() { return this.to - this.from; }
   }

   // Compressed representation of the Grapheme_Cluster_Break=Extend
   // information from
   // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
   // Each pair of elements represents a range, as an offet from the
   // previous range and a length. Numbers are in base-36, with the empty
   // string being a shorthand for 1.
   let extend$1 = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
   // Convert offsets into absolute values
   for (let i = 1; i < extend$1.length; i++)
       extend$1[i] += extend$1[i - 1];
   function isExtendingChar(code) {
       for (let i = 1; i < extend$1.length; i += 2)
           if (extend$1[i] > code)
               return extend$1[i - 1] <= code;
       return false;
   }
   function isRegionalIndicator(code) {
       return code >= 0x1F1E6 && code <= 0x1F1FF;
   }
   const ZWJ = 0x200d;
   /**
   Returns a next grapheme cluster break _after_ (not equal to)
   `pos`, if `forward` is true, or before otherwise. Returns `pos`
   itself if no further cluster break is available in the string.
   Moves across surrogate pairs, extending characters (when
   `includeExtending` is true), characters joined with zero-width
   joiners, and flag emoji.
   */
   function findClusterBreak(str, pos, forward = true, includeExtending = true) {
       return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
   }
   function nextClusterBreak(str, pos, includeExtending) {
       if (pos == str.length)
           return pos;
       // If pos is in the middle of a surrogate pair, move to its start
       if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
           pos--;
       let prev = codePointAt(str, pos);
       pos += codePointSize(prev);
       while (pos < str.length) {
           let next = codePointAt(str, pos);
           if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
               pos += codePointSize(next);
               prev = next;
           }
           else if (isRegionalIndicator(next)) {
               let countBefore = 0, i = pos - 2;
               while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
                   countBefore++;
                   i -= 2;
               }
               if (countBefore % 2 == 0)
                   break;
               else
                   pos += 2;
           }
           else {
               break;
           }
       }
       return pos;
   }
   function prevClusterBreak(str, pos, includeExtending) {
       while (pos > 0) {
           let found = nextClusterBreak(str, pos - 2, includeExtending);
           if (found < pos)
               return found;
           pos--;
       }
       return 0;
   }
   function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
   function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
   /**
   Find the code point at the given position in a string (like the
   [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
   string method).
   */
   function codePointAt(str, pos) {
       let code0 = str.charCodeAt(pos);
       if (!surrogateHigh(code0) || pos + 1 == str.length)
           return code0;
       let code1 = str.charCodeAt(pos + 1);
       if (!surrogateLow(code1))
           return code0;
       return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
   }
   /**
   Given a Unicode codepoint, return the JavaScript string that
   respresents it (like
   [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
   */
   function fromCodePoint(code) {
       if (code <= 0xffff)
           return String.fromCharCode(code);
       code -= 0x10000;
       return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
   }
   /**
   The amount of positions a character takes up a JavaScript string.
   */
   function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

   const DefaultSplit = /\r\n?|\n/;
   /**
   Distinguishes different ways in which positions can be mapped.
   */
   var MapMode = /*@__PURE__*/(function (MapMode) {
       /**
       Map a position to a valid new position, even when its context
       was deleted.
       */
       MapMode[MapMode["Simple"] = 0] = "Simple";
       /**
       Return null if deletion happens across the position.
       */
       MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
       /**
       Return null if the character _before_ the position is deleted.
       */
       MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
       /**
       Return null if the character _after_ the position is deleted.
       */
       MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
   return MapMode})(MapMode || (MapMode = {}));
   /**
   A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
   that doesn't store the inserted text. As such, it can't be
   applied, but is cheaper to store and manipulate.
   */
   class ChangeDesc {
       // Sections are encoded as pairs of integers. The first is the
       // length in the current document, and the second is -1 for
       // unaffected sections, and the length of the replacement content
       // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
       // 0), and a replacement two positive numbers.
       /**
       @internal
       */
       constructor(
       /**
       @internal
       */
       sections) {
           this.sections = sections;
       }
       /**
       The length of the document before the change.
       */
       get length() {
           let result = 0;
           for (let i = 0; i < this.sections.length; i += 2)
               result += this.sections[i];
           return result;
       }
       /**
       The length of the document after the change.
       */
       get newLength() {
           let result = 0;
           for (let i = 0; i < this.sections.length; i += 2) {
               let ins = this.sections[i + 1];
               result += ins < 0 ? this.sections[i] : ins;
           }
           return result;
       }
       /**
       False when there are actual changes in this set.
       */
       get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
       /**
       Iterate over the unchanged parts left by these changes. `posA`
       provides the position of the range in the old document, `posB`
       the new position in the changed document.
       */
       iterGaps(f) {
           for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
               let len = this.sections[i++], ins = this.sections[i++];
               if (ins < 0) {
                   f(posA, posB, len);
                   posB += len;
               }
               else {
                   posB += ins;
               }
               posA += len;
           }
       }
       /**
       Iterate over the ranges changed by these changes. (See
       [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
       variant that also provides you with the inserted text.)
       `fromA`/`toA` provides the extent of the change in the starting
       document, `fromB`/`toB` the extent of the replacement in the
       changed document.
       
       When `individual` is true, adjacent changes (which are kept
       separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
       reported separately.
       */
       iterChangedRanges(f, individual = false) {
           iterChanges(this, f, individual);
       }
       /**
       Get a description of the inverted form of these changes.
       */
       get invertedDesc() {
           let sections = [];
           for (let i = 0; i < this.sections.length;) {
               let len = this.sections[i++], ins = this.sections[i++];
               if (ins < 0)
                   sections.push(len, ins);
               else
                   sections.push(ins, len);
           }
           return new ChangeDesc(sections);
       }
       /**
       Compute the combined effect of applying another set of changes
       after this one. The length of the document after this set should
       match the length before `other`.
       */
       composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
       /**
       Map this description, which should start with the same document
       as `other`, over another set of changes, so that it can be
       applied after it. When `before` is true, map as if the changes
       in `other` happened before the ones in `this`.
       */
       mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
       mapPos(pos, assoc = -1, mode = MapMode.Simple) {
           let posA = 0, posB = 0;
           for (let i = 0; i < this.sections.length;) {
               let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
               if (ins < 0) {
                   if (endA > pos)
                       return posB + (pos - posA);
                   posB += len;
               }
               else {
                   if (mode != MapMode.Simple && endA >= pos &&
                       (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                           mode == MapMode.TrackBefore && posA < pos ||
                           mode == MapMode.TrackAfter && endA > pos))
                       return null;
                   if (endA > pos || endA == pos && assoc < 0 && !len)
                       return pos == posA || assoc < 0 ? posB : posB + ins;
                   posB += ins;
               }
               posA = endA;
           }
           if (pos > posA)
               throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
           return posB;
       }
       /**
       Check whether these changes touch a given range. When one of the
       changes entirely covers the range, the string `"cover"` is
       returned.
       */
       touchesRange(from, to = from) {
           for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
               let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
               if (ins >= 0 && pos <= to && end >= from)
                   return pos < from && end > to ? "cover" : true;
               pos = end;
           }
           return false;
       }
       /**
       @internal
       */
       toString() {
           let result = "";
           for (let i = 0; i < this.sections.length;) {
               let len = this.sections[i++], ins = this.sections[i++];
               result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
           }
           return result;
       }
       /**
       Serialize this change desc to a JSON-representable value.
       */
       toJSON() { return this.sections; }
       /**
       Create a change desc from its JSON representation (as produced
       by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
       */
       static fromJSON(json) {
           if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
               throw new RangeError("Invalid JSON representation of ChangeDesc");
           return new ChangeDesc(json);
       }
       /**
       @internal
       */
       static create(sections) { return new ChangeDesc(sections); }
   }
   /**
   A change set represents a group of modifications to a document. It
   stores the document length, and can only be applied to documents
   with exactly that length.
   */
   class ChangeSet extends ChangeDesc {
       constructor(sections, 
       /**
       @internal
       */
       inserted) {
           super(sections);
           this.inserted = inserted;
       }
       /**
       Apply the changes to a document, returning the modified
       document.
       */
       apply(doc) {
           if (this.length != doc.length)
               throw new RangeError("Applying change set to a document with the wrong length");
           iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
           return doc;
       }
       mapDesc(other, before = false) { return mapSet(this, other, before, true); }
       /**
       Given the document as it existed _before_ the changes, return a
       change set that represents the inverse of this set, which could
       be used to go from the document created by the changes back to
       the document as it existed before the changes.
       */
       invert(doc) {
           let sections = this.sections.slice(), inserted = [];
           for (let i = 0, pos = 0; i < sections.length; i += 2) {
               let len = sections[i], ins = sections[i + 1];
               if (ins >= 0) {
                   sections[i] = ins;
                   sections[i + 1] = len;
                   let index = i >> 1;
                   while (inserted.length < index)
                       inserted.push(Text.empty);
                   inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
               }
               pos += len;
           }
           return new ChangeSet(sections, inserted);
       }
       /**
       Combine two subsequent change sets into a single set. `other`
       must start in the document produced by `this`. If `this` goes
       `docA` → `docB` and `other` represents `docB` → `docC`, the
       returned value will represent the change `docA` → `docC`.
       */
       compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
       /**
       Given another change set starting in the same document, maps this
       change set over the other, producing a new change set that can be
       applied to the document produced by applying `other`. When
       `before` is `true`, order changes as if `this` comes before
       `other`, otherwise (the default) treat `other` as coming first.
       
       Given two changes `A` and `B`, `A.compose(B.map(A))` and
       `B.compose(A.map(B, true))` will produce the same document. This
       provides a basic form of [operational
       transformation](https://en.wikipedia.org/wiki/Operational_transformation),
       and can be used for collaborative editing.
       */
       map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
       /**
       Iterate over the changed ranges in the document, calling `f` for
       each, with the range in the original document (`fromA`-`toA`)
       and the range that replaces it in the new document
       (`fromB`-`toB`).
       
       When `individual` is true, adjacent changes are reported
       separately.
       */
       iterChanges(f, individual = false) {
           iterChanges(this, f, individual);
       }
       /**
       Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
       set.
       */
       get desc() { return ChangeDesc.create(this.sections); }
       /**
       @internal
       */
       filter(ranges) {
           let resultSections = [], resultInserted = [], filteredSections = [];
           let iter = new SectionIter(this);
           done: for (let i = 0, pos = 0;;) {
               let next = i == ranges.length ? 1e9 : ranges[i++];
               while (pos < next || pos == next && iter.len == 0) {
                   if (iter.done)
                       break done;
                   let len = Math.min(iter.len, next - pos);
                   addSection(filteredSections, len, -1);
                   let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                   addSection(resultSections, len, ins);
                   if (ins > 0)
                       addInsert(resultInserted, resultSections, iter.text);
                   iter.forward(len);
                   pos += len;
               }
               let end = ranges[i++];
               while (pos < end) {
                   if (iter.done)
                       break done;
                   let len = Math.min(iter.len, end - pos);
                   addSection(resultSections, len, -1);
                   addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                   iter.forward(len);
                   pos += len;
               }
           }
           return { changes: new ChangeSet(resultSections, resultInserted),
               filtered: ChangeDesc.create(filteredSections) };
       }
       /**
       Serialize this change set to a JSON-representable value.
       */
       toJSON() {
           let parts = [];
           for (let i = 0; i < this.sections.length; i += 2) {
               let len = this.sections[i], ins = this.sections[i + 1];
               if (ins < 0)
                   parts.push(len);
               else if (ins == 0)
                   parts.push([len]);
               else
                   parts.push([len].concat(this.inserted[i >> 1].toJSON()));
           }
           return parts;
       }
       /**
       Create a change set for the given changes, for a document of the
       given length, using `lineSep` as line separator.
       */
       static of(changes, length, lineSep) {
           let sections = [], inserted = [], pos = 0;
           let total = null;
           function flush(force = false) {
               if (!force && !sections.length)
                   return;
               if (pos < length)
                   addSection(sections, length - pos, -1);
               let set = new ChangeSet(sections, inserted);
               total = total ? total.compose(set.map(total)) : set;
               sections = [];
               inserted = [];
               pos = 0;
           }
           function process(spec) {
               if (Array.isArray(spec)) {
                   for (let sub of spec)
                       process(sub);
               }
               else if (spec instanceof ChangeSet) {
                   if (spec.length != length)
                       throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                   flush();
                   total = total ? total.compose(spec.map(total)) : spec;
               }
               else {
                   let { from, to = from, insert } = spec;
                   if (from > to || from < 0 || to > length)
                       throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                   let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                   let insLen = insText.length;
                   if (from == to && insLen == 0)
                       return;
                   if (from < pos)
                       flush();
                   if (from > pos)
                       addSection(sections, from - pos, -1);
                   addSection(sections, to - from, insLen);
                   addInsert(inserted, sections, insText);
                   pos = to;
               }
           }
           process(changes);
           flush(!total);
           return total;
       }
       /**
       Create an empty changeset of the given length.
       */
       static empty(length) {
           return new ChangeSet(length ? [length, -1] : [], []);
       }
       /**
       Create a changeset from its JSON representation (as produced by
       [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
       */
       static fromJSON(json) {
           if (!Array.isArray(json))
               throw new RangeError("Invalid JSON representation of ChangeSet");
           let sections = [], inserted = [];
           for (let i = 0; i < json.length; i++) {
               let part = json[i];
               if (typeof part == "number") {
                   sections.push(part, -1);
               }
               else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                   throw new RangeError("Invalid JSON representation of ChangeSet");
               }
               else if (part.length == 1) {
                   sections.push(part[0], 0);
               }
               else {
                   while (inserted.length < i)
                       inserted.push(Text.empty);
                   inserted[i] = Text.of(part.slice(1));
                   sections.push(part[0], inserted[i].length);
               }
           }
           return new ChangeSet(sections, inserted);
       }
       /**
       @internal
       */
       static createSet(sections, inserted) {
           return new ChangeSet(sections, inserted);
       }
   }
   function addSection(sections, len, ins, forceJoin = false) {
       if (len == 0 && ins <= 0)
           return;
       let last = sections.length - 2;
       if (last >= 0 && ins <= 0 && ins == sections[last + 1])
           sections[last] += len;
       else if (len == 0 && sections[last] == 0)
           sections[last + 1] += ins;
       else if (forceJoin) {
           sections[last] += len;
           sections[last + 1] += ins;
       }
       else
           sections.push(len, ins);
   }
   function addInsert(values, sections, value) {
       if (value.length == 0)
           return;
       let index = (sections.length - 2) >> 1;
       if (index < values.length) {
           values[values.length - 1] = values[values.length - 1].append(value);
       }
       else {
           while (values.length < index)
               values.push(Text.empty);
           values.push(value);
       }
   }
   function iterChanges(desc, f, individual) {
       let inserted = desc.inserted;
       for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
           let len = desc.sections[i++], ins = desc.sections[i++];
           if (ins < 0) {
               posA += len;
               posB += len;
           }
           else {
               let endA = posA, endB = posB, text = Text.empty;
               for (;;) {
                   endA += len;
                   endB += ins;
                   if (ins && inserted)
                       text = text.append(inserted[(i - 2) >> 1]);
                   if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                       break;
                   len = desc.sections[i++];
                   ins = desc.sections[i++];
               }
               f(posA, endA, posB, endB, text);
               posA = endA;
               posB = endB;
           }
       }
   }
   function mapSet(setA, setB, before, mkSet = false) {
       let sections = [], insert = mkSet ? [] : null;
       let a = new SectionIter(setA), b = new SectionIter(setB);
       for (let posA = 0, posB = 0;;) {
           if (a.ins == -1) {
               posA += a.len;
               a.next();
           }
           else if (b.ins == -1 && posB < posA) {
               let skip = Math.min(b.len, posA - posB);
               b.forward(skip);
               addSection(sections, skip, -1);
               posB += skip;
           }
           else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {
               addSection(sections, b.ins, -1);
               while (posA > posB && !a.done && posA + a.len < posB + b.len) {
                   posA += a.len;
                   a.next();
               }
               posB += b.len;
               b.next();
           }
           else if (a.ins >= 0) {
               let len = 0, end = posA + a.len;
               for (;;) {
                   if (b.ins >= 0 && posB > posA && posB + b.len < end) {
                       len += b.ins;
                       posB += b.len;
                       b.next();
                   }
                   else if (b.ins == -1 && posB < end) {
                       let skip = Math.min(b.len, end - posB);
                       len += skip;
                       b.forward(skip);
                       posB += skip;
                   }
                   else {
                       break;
                   }
               }
               addSection(sections, len, a.ins);
               if (insert)
                   addInsert(insert, sections, a.text);
               posA = end;
               a.next();
           }
           else if (a.done && b.done) {
               return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
           }
           else {
               throw new Error("Mismatched change set lengths");
           }
       }
   }
   function composeSets(setA, setB, mkSet = false) {
       let sections = [];
       let insert = mkSet ? [] : null;
       let a = new SectionIter(setA), b = new SectionIter(setB);
       for (let open = false;;) {
           if (a.done && b.done) {
               return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
           }
           else if (a.ins == 0) { // Deletion in A
               addSection(sections, a.len, 0, open);
               a.next();
           }
           else if (b.len == 0 && !b.done) { // Insertion in B
               addSection(sections, 0, b.ins, open);
               if (insert)
                   addInsert(insert, sections, b.text);
               b.next();
           }
           else if (a.done || b.done) {
               throw new Error("Mismatched change set lengths");
           }
           else {
               let len = Math.min(a.len2, b.len), sectionLen = sections.length;
               if (a.ins == -1) {
                   let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                   addSection(sections, len, insB, open);
                   if (insert && insB)
                       addInsert(insert, sections, b.text);
               }
               else if (b.ins == -1) {
                   addSection(sections, a.off ? 0 : a.len, len, open);
                   if (insert)
                       addInsert(insert, sections, a.textBit(len));
               }
               else {
                   addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                   if (insert && !b.off)
                       addInsert(insert, sections, b.text);
               }
               open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
               a.forward2(len);
               b.forward(len);
           }
       }
   }
   class SectionIter {
       constructor(set) {
           this.set = set;
           this.i = 0;
           this.next();
       }
       next() {
           let { sections } = this.set;
           if (this.i < sections.length) {
               this.len = sections[this.i++];
               this.ins = sections[this.i++];
           }
           else {
               this.len = 0;
               this.ins = -2;
           }
           this.off = 0;
       }
       get done() { return this.ins == -2; }
       get len2() { return this.ins < 0 ? this.len : this.ins; }
       get text() {
           let { inserted } = this.set, index = (this.i - 2) >> 1;
           return index >= inserted.length ? Text.empty : inserted[index];
       }
       textBit(len) {
           let { inserted } = this.set, index = (this.i - 2) >> 1;
           return index >= inserted.length && !len ? Text.empty
               : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
       }
       forward(len) {
           if (len == this.len)
               this.next();
           else {
               this.len -= len;
               this.off += len;
           }
       }
       forward2(len) {
           if (this.ins == -1)
               this.forward(len);
           else if (len == this.ins)
               this.next();
           else {
               this.ins -= len;
               this.off += len;
           }
       }
   }

   /**
   A single selection range. When
   [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
   is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
   multiple ranges. By default, selections hold exactly one range.
   */
   class SelectionRange {
       constructor(
       /**
       The lower boundary of the range.
       */
       from, 
       /**
       The upper boundary of the range.
       */
       to, flags) {
           this.from = from;
           this.to = to;
           this.flags = flags;
       }
       /**
       The anchor of the range—the side that doesn't move when you
       extend it.
       */
       get anchor() { return this.flags & 16 /* Inverted */ ? this.to : this.from; }
       /**
       The head of the range, which is moved when the range is
       [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
       */
       get head() { return this.flags & 16 /* Inverted */ ? this.from : this.to; }
       /**
       True when `anchor` and `head` are at the same position.
       */
       get empty() { return this.from == this.to; }
       /**
       If this is a cursor that is explicitly associated with the
       character on one of its sides, this returns the side. -1 means
       the character before its position, 1 the character after, and 0
       means no association.
       */
       get assoc() { return this.flags & 4 /* AssocBefore */ ? -1 : this.flags & 8 /* AssocAfter */ ? 1 : 0; }
       /**
       The bidirectional text level associated with this cursor, if
       any.
       */
       get bidiLevel() {
           let level = this.flags & 3 /* BidiLevelMask */;
           return level == 3 ? null : level;
       }
       /**
       The goal column (stored vertical offset) associated with a
       cursor. This is used to preserve the vertical position when
       [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
       lines of different length.
       */
       get goalColumn() {
           let value = this.flags >> 5 /* GoalColumnOffset */;
           return value == 33554431 /* NoGoalColumn */ ? undefined : value;
       }
       /**
       Map this range through a change, producing a valid range in the
       updated document.
       */
       map(change, assoc = -1) {
           let from, to;
           if (this.empty) {
               from = to = change.mapPos(this.from, assoc);
           }
           else {
               from = change.mapPos(this.from, 1);
               to = change.mapPos(this.to, -1);
           }
           return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
       }
       /**
       Extend this range to cover at least `from` to `to`.
       */
       extend(from, to = from) {
           if (from <= this.anchor && to >= this.anchor)
               return EditorSelection.range(from, to);
           let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
           return EditorSelection.range(this.anchor, head);
       }
       /**
       Compare this range to another range.
       */
       eq(other) {
           return this.anchor == other.anchor && this.head == other.head;
       }
       /**
       Return a JSON-serializable object representing the range.
       */
       toJSON() { return { anchor: this.anchor, head: this.head }; }
       /**
       Convert a JSON representation of a range to a `SelectionRange`
       instance.
       */
       static fromJSON(json) {
           if (!json || typeof json.anchor != "number" || typeof json.head != "number")
               throw new RangeError("Invalid JSON representation for SelectionRange");
           return EditorSelection.range(json.anchor, json.head);
       }
       /**
       @internal
       */
       static create(from, to, flags) {
           return new SelectionRange(from, to, flags);
       }
   }
   /**
   An editor selection holds one or more selection ranges.
   */
   class EditorSelection {
       constructor(
       /**
       The ranges in the selection, sorted by position. Ranges cannot
       overlap (but they may touch, if they aren't empty).
       */
       ranges, 
       /**
       The index of the _main_ range in the selection (which is
       usually the range that was added last).
       */
       mainIndex) {
           this.ranges = ranges;
           this.mainIndex = mainIndex;
       }
       /**
       Map a selection through a change. Used to adjust the selection
       position for changes.
       */
       map(change, assoc = -1) {
           if (change.empty)
               return this;
           return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
       }
       /**
       Compare this selection to another selection.
       */
       eq(other) {
           if (this.ranges.length != other.ranges.length ||
               this.mainIndex != other.mainIndex)
               return false;
           for (let i = 0; i < this.ranges.length; i++)
               if (!this.ranges[i].eq(other.ranges[i]))
                   return false;
           return true;
       }
       /**
       Get the primary selection range. Usually, you should make sure
       your code applies to _all_ ranges, by using methods like
       [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
       */
       get main() { return this.ranges[this.mainIndex]; }
       /**
       Make sure the selection only has one range. Returns a selection
       holding only the main range from this selection.
       */
       asSingle() {
           return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
       }
       /**
       Extend this selection with an extra range.
       */
       addRange(range, main = true) {
           return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
       }
       /**
       Replace a given range with another range, and then normalize the
       selection to merge and sort ranges if necessary.
       */
       replaceRange(range, which = this.mainIndex) {
           let ranges = this.ranges.slice();
           ranges[which] = range;
           return EditorSelection.create(ranges, this.mainIndex);
       }
       /**
       Convert this selection to an object that can be serialized to
       JSON.
       */
       toJSON() {
           return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
       }
       /**
       Create a selection from a JSON representation.
       */
       static fromJSON(json) {
           if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
               throw new RangeError("Invalid JSON representation for EditorSelection");
           return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
       }
       /**
       Create a selection holding a single range.
       */
       static single(anchor, head = anchor) {
           return new EditorSelection([EditorSelection.range(anchor, head)], 0);
       }
       /**
       Sort and merge the given set of ranges, creating a valid
       selection.
       */
       static create(ranges, mainIndex = 0) {
           if (ranges.length == 0)
               throw new RangeError("A selection needs at least one range");
           for (let pos = 0, i = 0; i < ranges.length; i++) {
               let range = ranges[i];
               if (range.empty ? range.from <= pos : range.from < pos)
                   return EditorSelection.normalized(ranges.slice(), mainIndex);
               pos = range.to;
           }
           return new EditorSelection(ranges, mainIndex);
       }
       /**
       Create a cursor selection range at the given position. You can
       safely ignore the optional arguments in most situations.
       */
       static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
           return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* AssocBefore */ : 8 /* AssocAfter */) |
               (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
               ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */));
       }
       /**
       Create a selection range.
       */
       static range(anchor, head, goalColumn) {
           let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */;
           return head < anchor ? SelectionRange.create(head, anchor, 16 /* Inverted */ | goal | 8 /* AssocAfter */)
               : SelectionRange.create(anchor, head, goal | (head > anchor ? 4 /* AssocBefore */ : 0));
       }
       /**
       @internal
       */
       static normalized(ranges, mainIndex = 0) {
           let main = ranges[mainIndex];
           ranges.sort((a, b) => a.from - b.from);
           mainIndex = ranges.indexOf(main);
           for (let i = 1; i < ranges.length; i++) {
               let range = ranges[i], prev = ranges[i - 1];
               if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                   let from = prev.from, to = Math.max(range.to, prev.to);
                   if (i <= mainIndex)
                       mainIndex--;
                   ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
               }
           }
           return new EditorSelection(ranges, mainIndex);
       }
   }
   function checkSelection(selection, docLength) {
       for (let range of selection.ranges)
           if (range.to > docLength)
               throw new RangeError("Selection points outside of document");
   }

   let nextID = 0;
   /**
   A facet is a labeled value that is associated with an editor
   state. It takes inputs from any number of extensions, and combines
   those into a single output value.

   Examples of uses of facets are the [tab
   size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
   attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
   listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
   */
   class Facet {
       constructor(
       /**
       @internal
       */
       combine, 
       /**
       @internal
       */
       compareInput, 
       /**
       @internal
       */
       compare, isStatic, 
       /**
       @internal
       */
       extensions) {
           this.combine = combine;
           this.compareInput = compareInput;
           this.compare = compare;
           this.isStatic = isStatic;
           this.extensions = extensions;
           /**
           @internal
           */
           this.id = nextID++;
           this.default = combine([]);
       }
       /**
       Define a new facet.
       */
       static define(config = {}) {
           return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
       }
       /**
       Returns an extension that adds the given value to this facet.
       */
       of(value) {
           return new FacetProvider([], this, 0 /* Static */, value);
       }
       /**
       Create an extension that computes a value for the facet from a
       state. You must take care to declare the parts of the state that
       this value depends on, since your function is only called again
       for a new state when one of those parts changed.
       
       In cases where your value depends only on a single field, you'll
       want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
       */
       compute(deps, get) {
           if (this.isStatic)
               throw new Error("Can't compute a static facet");
           return new FacetProvider(deps, this, 1 /* Single */, get);
       }
       /**
       Create an extension that computes zero or more values for this
       facet from a state.
       */
       computeN(deps, get) {
           if (this.isStatic)
               throw new Error("Can't compute a static facet");
           return new FacetProvider(deps, this, 2 /* Multi */, get);
       }
       from(field, get) {
           if (!get)
               get = x => x;
           return this.compute([field], state => get(state.field(field)));
       }
   }
   function sameArray$1(a, b) {
       return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
   }
   class FacetProvider {
       constructor(dependencies, facet, type, value) {
           this.dependencies = dependencies;
           this.facet = facet;
           this.type = type;
           this.value = value;
           this.id = nextID++;
       }
       dynamicSlot(addresses) {
           var _a;
           let getter = this.value;
           let compare = this.facet.compareInput;
           let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Multi */;
           let depDoc = false, depSel = false, depAddrs = [];
           for (let dep of this.dependencies) {
               if (dep == "doc")
                   depDoc = true;
               else if (dep == "selection")
                   depSel = true;
               else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                   depAddrs.push(addresses[dep.id]);
           }
           return {
               create(state) {
                   state.values[idx] = getter(state);
                   return 1 /* Changed */;
               },
               update(state, tr) {
                   if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                       let newVal = getter(state);
                       if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                           state.values[idx] = newVal;
                           return 1 /* Changed */;
                       }
                   }
                   return 0;
               },
               reconfigure: (state, oldState) => {
                   let newVal = getter(state);
                   let oldAddr = oldState.config.address[id];
                   if (oldAddr != null) {
                       let oldVal = getAddr(oldState, oldAddr);
                       if (this.dependencies.every(dep => {
                           return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                               dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                       }) || (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal))) {
                           state.values[idx] = oldVal;
                           return 0;
                       }
                   }
                   state.values[idx] = newVal;
                   return 1 /* Changed */;
               }
           };
       }
   }
   function compareArray(a, b, compare) {
       if (a.length != b.length)
           return false;
       for (let i = 0; i < a.length; i++)
           if (!compare(a[i], b[i]))
               return false;
       return true;
   }
   function ensureAll(state, addrs) {
       let changed = false;
       for (let addr of addrs)
           if (ensureAddr(state, addr) & 1 /* Changed */)
               changed = true;
       return changed;
   }
   function dynamicFacetSlot(addresses, facet, providers) {
       let providerAddrs = providers.map(p => addresses[p.id]);
       let providerTypes = providers.map(p => p.type);
       let dynamic = providerAddrs.filter(p => !(p & 1));
       let idx = addresses[facet.id] >> 1;
       function get(state) {
           let values = [];
           for (let i = 0; i < providerAddrs.length; i++) {
               let value = getAddr(state, providerAddrs[i]);
               if (providerTypes[i] == 2 /* Multi */)
                   for (let val of value)
                       values.push(val);
               else
                   values.push(value);
           }
           return facet.combine(values);
       }
       return {
           create(state) {
               for (let addr of providerAddrs)
                   ensureAddr(state, addr);
               state.values[idx] = get(state);
               return 1 /* Changed */;
           },
           update(state, tr) {
               if (!ensureAll(state, dynamic))
                   return 0;
               let value = get(state);
               if (facet.compare(value, state.values[idx]))
                   return 0;
               state.values[idx] = value;
               return 1 /* Changed */;
           },
           reconfigure(state, oldState) {
               let depChanged = ensureAll(state, providerAddrs);
               let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
               if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
                   state.values[idx] = oldValue;
                   return 0;
               }
               let value = get(state);
               if (facet.compare(value, oldValue)) {
                   state.values[idx] = oldValue;
                   return 0;
               }
               state.values[idx] = value;
               return 1 /* Changed */;
           }
       };
   }
   const initField = /*@__PURE__*/Facet.define({ static: true });
   /**
   Fields can store additional information in an editor state, and
   keep it in sync with the rest of the state.
   */
   class StateField {
       constructor(
       /**
       @internal
       */
       id, createF, updateF, compareF, 
       /**
       @internal
       */
       spec) {
           this.id = id;
           this.createF = createF;
           this.updateF = updateF;
           this.compareF = compareF;
           this.spec = spec;
           /**
           @internal
           */
           this.provides = undefined;
       }
       /**
       Define a state field.
       */
       static define(config) {
           let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
           if (config.provide)
               field.provides = config.provide(field);
           return field;
       }
       create(state) {
           let init = state.facet(initField).find(i => i.field == this);
           return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
       }
       /**
       @internal
       */
       slot(addresses) {
           let idx = addresses[this.id] >> 1;
           return {
               create: (state) => {
                   state.values[idx] = this.create(state);
                   return 1 /* Changed */;
               },
               update: (state, tr) => {
                   let oldVal = state.values[idx];
                   let value = this.updateF(oldVal, tr);
                   if (this.compareF(oldVal, value))
                       return 0;
                   state.values[idx] = value;
                   return 1 /* Changed */;
               },
               reconfigure: (state, oldState) => {
                   if (oldState.config.address[this.id] != null) {
                       state.values[idx] = oldState.field(this);
                       return 0;
                   }
                   state.values[idx] = this.create(state);
                   return 1 /* Changed */;
               }
           };
       }
       /**
       Returns an extension that enables this field and overrides the
       way it is initialized. Can be useful when you need to provide a
       non-default starting value for the field.
       */
       init(create) {
           return [this, initField.of({ field: this, create })];
       }
       /**
       State field instances can be used as
       [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
       given state.
       */
       get extension() { return this; }
   }
   const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
   function prec(value) {
       return (ext) => new PrecExtension(ext, value);
   }
   /**
   By default extensions are registered in the order they are found
   in the flattened form of nested array that was provided.
   Individual extension values can be assigned a precedence to
   override this. Extensions that do not have a precedence set get
   the precedence of the nearest parent with a precedence, or
   [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
   final ordering of extensions is determined by first sorting by
   precedence and then by order within each precedence.
   */
   const Prec = {
       /**
       The highest precedence level, for extensions that should end up
       near the start of the precedence ordering.
       */
       highest: /*@__PURE__*/prec(Prec_.highest),
       /**
       A higher-than-default precedence, for extensions that should
       come before those with default precedence.
       */
       high: /*@__PURE__*/prec(Prec_.high),
       /**
       The default precedence, which is also used for extensions
       without an explicit precedence.
       */
       default: /*@__PURE__*/prec(Prec_.default),
       /**
       A lower-than-default precedence.
       */
       low: /*@__PURE__*/prec(Prec_.low),
       /**
       The lowest precedence level. Meant for things that should end up
       near the end of the extension order.
       */
       lowest: /*@__PURE__*/prec(Prec_.lowest)
   };
   class PrecExtension {
       constructor(inner, prec) {
           this.inner = inner;
           this.prec = prec;
       }
   }
   /**
   Extension compartments can be used to make a configuration
   dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
   configuration in a compartment, you can later
   [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
   transaction.
   */
   class Compartment {
       /**
       Create an instance of this compartment to add to your [state
       configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
       */
       of(ext) { return new CompartmentInstance(this, ext); }
       /**
       Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
       reconfigures this compartment.
       */
       reconfigure(content) {
           return Compartment.reconfigure.of({ compartment: this, extension: content });
       }
       /**
       Get the current content of the compartment in the state, or
       `undefined` if it isn't present.
       */
       get(state) {
           return state.config.compartments.get(this);
       }
   }
   class CompartmentInstance {
       constructor(compartment, inner) {
           this.compartment = compartment;
           this.inner = inner;
       }
   }
   class Configuration {
       constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
           this.base = base;
           this.compartments = compartments;
           this.dynamicSlots = dynamicSlots;
           this.address = address;
           this.staticValues = staticValues;
           this.facets = facets;
           this.statusTemplate = [];
           while (this.statusTemplate.length < dynamicSlots.length)
               this.statusTemplate.push(0 /* Unresolved */);
       }
       staticFacet(facet) {
           let addr = this.address[facet.id];
           return addr == null ? facet.default : this.staticValues[addr >> 1];
       }
       static resolve(base, compartments, oldState) {
           let fields = [];
           let facets = Object.create(null);
           let newCompartments = new Map();
           for (let ext of flatten$1(base, compartments, newCompartments)) {
               if (ext instanceof StateField)
                   fields.push(ext);
               else
                   (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
           }
           let address = Object.create(null);
           let staticValues = [];
           let dynamicSlots = [];
           for (let field of fields) {
               address[field.id] = dynamicSlots.length << 1;
               dynamicSlots.push(a => field.slot(a));
           }
           let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
           for (let id in facets) {
               let providers = facets[id], facet = providers[0].facet;
               let oldProviders = oldFacets && oldFacets[id] || [];
               if (providers.every(p => p.type == 0 /* Static */)) {
                   address[facet.id] = (staticValues.length << 1) | 1;
                   if (sameArray$1(oldProviders, providers)) {
                       staticValues.push(oldState.facet(facet));
                   }
                   else {
                       let value = facet.combine(providers.map(p => p.value));
                       staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                   }
               }
               else {
                   for (let p of providers) {
                       if (p.type == 0 /* Static */) {
                           address[p.id] = (staticValues.length << 1) | 1;
                           staticValues.push(p.value);
                       }
                       else {
                           address[p.id] = dynamicSlots.length << 1;
                           dynamicSlots.push(a => p.dynamicSlot(a));
                       }
                   }
                   address[facet.id] = dynamicSlots.length << 1;
                   dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
               }
           }
           let dynamic = dynamicSlots.map(f => f(address));
           return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
       }
   }
   function flatten$1(extension, compartments, newCompartments) {
       let result = [[], [], [], [], []];
       let seen = new Map();
       function inner(ext, prec) {
           let known = seen.get(ext);
           if (known != null) {
               if (known <= prec)
                   return;
               let found = result[known].indexOf(ext);
               if (found > -1)
                   result[known].splice(found, 1);
               if (ext instanceof CompartmentInstance)
                   newCompartments.delete(ext.compartment);
           }
           seen.set(ext, prec);
           if (Array.isArray(ext)) {
               for (let e of ext)
                   inner(e, prec);
           }
           else if (ext instanceof CompartmentInstance) {
               if (newCompartments.has(ext.compartment))
                   throw new RangeError(`Duplicate use of compartment in extensions`);
               let content = compartments.get(ext.compartment) || ext.inner;
               newCompartments.set(ext.compartment, content);
               inner(content, prec);
           }
           else if (ext instanceof PrecExtension) {
               inner(ext.inner, ext.prec);
           }
           else if (ext instanceof StateField) {
               result[prec].push(ext);
               if (ext.provides)
                   inner(ext.provides, prec);
           }
           else if (ext instanceof FacetProvider) {
               result[prec].push(ext);
               if (ext.facet.extensions)
                   inner(ext.facet.extensions, prec);
           }
           else {
               let content = ext.extension;
               if (!content)
                   throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
               inner(content, prec);
           }
       }
       inner(extension, Prec_.default);
       return result.reduce((a, b) => a.concat(b));
   }
   function ensureAddr(state, addr) {
       if (addr & 1)
           return 2 /* Computed */;
       let idx = addr >> 1;
       let status = state.status[idx];
       if (status == 4 /* Computing */)
           throw new Error("Cyclic dependency between fields and/or facets");
       if (status & 2 /* Computed */)
           return status;
       state.status[idx] = 4 /* Computing */;
       let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
       return state.status[idx] = 2 /* Computed */ | changed;
   }
   function getAddr(state, addr) {
       return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
   }

   const languageData = /*@__PURE__*/Facet.define();
   const allowMultipleSelections = /*@__PURE__*/Facet.define({
       combine: values => values.some(v => v),
       static: true
   });
   const lineSeparator = /*@__PURE__*/Facet.define({
       combine: values => values.length ? values[0] : undefined,
       static: true
   });
   const changeFilter = /*@__PURE__*/Facet.define();
   const transactionFilter = /*@__PURE__*/Facet.define();
   const transactionExtender = /*@__PURE__*/Facet.define();
   const readOnly = /*@__PURE__*/Facet.define({
       combine: values => values.length ? values[0] : false
   });

   /**
   Annotations are tagged values that are used to add metadata to
   transactions in an extensible way. They should be used to model
   things that effect the entire transaction (such as its [time
   stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
   [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
   _alongside_ the other changes made by the transaction, [state
   effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
   */
   class Annotation {
       /**
       @internal
       */
       constructor(
       /**
       The annotation type.
       */
       type, 
       /**
       The value of this annotation.
       */
       value) {
           this.type = type;
           this.value = value;
       }
       /**
       Define a new type of annotation.
       */
       static define() { return new AnnotationType(); }
   }
   /**
   Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
   */
   class AnnotationType {
       /**
       Create an instance of this annotation.
       */
       of(value) { return new Annotation(this, value); }
   }
   /**
   Representation of a type of state effect. Defined with
   [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
   */
   class StateEffectType {
       /**
       @internal
       */
       constructor(
       // The `any` types in these function types are there to work
       // around TypeScript issue #37631, where the type guard on
       // `StateEffect.is` mysteriously stops working when these properly
       // have type `Value`.
       /**
       @internal
       */
       map) {
           this.map = map;
       }
       /**
       Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
       type.
       */
       of(value) { return new StateEffect(this, value); }
   }
   /**
   State effects can be used to represent additional effects
   associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
   are often useful to model changes to custom [state
   fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
   document or selection changes.
   */
   class StateEffect {
       /**
       @internal
       */
       constructor(
       /**
       @internal
       */
       type, 
       /**
       The value of this effect.
       */
       value) {
           this.type = type;
           this.value = value;
       }
       /**
       Map this effect through a position mapping. Will return
       `undefined` when that ends up deleting the effect.
       */
       map(mapping) {
           let mapped = this.type.map(this.value, mapping);
           return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
       }
       /**
       Tells you whether this effect object is of a given
       [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
       */
       is(type) { return this.type == type; }
       /**
       Define a new effect type. The type parameter indicates the type
       of values that his effect holds.
       */
       static define(spec = {}) {
           return new StateEffectType(spec.map || (v => v));
       }
       /**
       Map an array of effects through a change set.
       */
       static mapEffects(effects, mapping) {
           if (!effects.length)
               return effects;
           let result = [];
           for (let effect of effects) {
               let mapped = effect.map(mapping);
               if (mapped)
                   result.push(mapped);
           }
           return result;
       }
   }
   /**
   This effect can be used to reconfigure the root extensions of
   the editor. Doing this will discard any extensions
   [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
   the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
   compartments.
   */
   StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
   /**
   Append extensions to the top-level configuration of the editor.
   */
   StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
   /**
   Changes to the editor state are grouped into transactions.
   Typically, a user action creates a single transaction, which may
   contain any number of document changes, may change the selection,
   or have other effects. Create a transaction by calling
   [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
   dispatch one by calling
   [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
   */
   class Transaction {
       constructor(
       /**
       The state from which the transaction starts.
       */
       startState, 
       /**
       The document changes made by this transaction.
       */
       changes, 
       /**
       The selection set by this transaction, or undefined if it
       doesn't explicitly set a selection.
       */
       selection, 
       /**
       The effects added to the transaction.
       */
       effects, 
       /**
       @internal
       */
       annotations, 
       /**
       Whether the selection should be scrolled into view after this
       transaction is dispatched.
       */
       scrollIntoView) {
           this.startState = startState;
           this.changes = changes;
           this.selection = selection;
           this.effects = effects;
           this.annotations = annotations;
           this.scrollIntoView = scrollIntoView;
           /**
           @internal
           */
           this._doc = null;
           /**
           @internal
           */
           this._state = null;
           if (selection)
               checkSelection(selection, changes.newLength);
           if (!annotations.some((a) => a.type == Transaction.time))
               this.annotations = annotations.concat(Transaction.time.of(Date.now()));
       }
       /**
       @internal
       */
       static create(startState, changes, selection, effects, annotations, scrollIntoView) {
           return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
       }
       /**
       The new document produced by the transaction. Contrary to
       [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
       force the entire new state to be computed right away, so it is
       recommended that [transaction
       filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
       when they need to look at the new document.
       */
       get newDoc() {
           return this._doc || (this._doc = this.changes.apply(this.startState.doc));
       }
       /**
       The new selection produced by the transaction. If
       [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
       this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
       current selection through the changes made by the transaction.
       */
       get newSelection() {
           return this.selection || this.startState.selection.map(this.changes);
       }
       /**
       The new state created by the transaction. Computed on demand
       (but retained for subsequent access), so it is recommended not to
       access it in [transaction
       filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
       */
       get state() {
           if (!this._state)
               this.startState.applyTransaction(this);
           return this._state;
       }
       /**
       Get the value of the given annotation type, if any.
       */
       annotation(type) {
           for (let ann of this.annotations)
               if (ann.type == type)
                   return ann.value;
           return undefined;
       }
       /**
       Indicates whether the transaction changed the document.
       */
       get docChanged() { return !this.changes.empty; }
       /**
       Indicates whether this transaction reconfigures the state
       (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
       with a top-level configuration
       [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
       */
       get reconfigured() { return this.startState.config != this.state.config; }
       /**
       Returns true if the transaction has a [user
       event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
       or more specific than `event`. For example, if the transaction
       has `"select.pointer"` as user event, `"select"` and
       `"select.pointer"` will match it.
       */
       isUserEvent(event) {
           let e = this.annotation(Transaction.userEvent);
           return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
       }
   }
   /**
   Annotation used to store transaction timestamps. Automatically
   added to every transaction, holding `Date.now()`.
   */
   Transaction.time = /*@__PURE__*/Annotation.define();
   /**
   Annotation used to associate a transaction with a user interface
   event. Holds a string identifying the event, using a
   dot-separated format to support attaching more specific
   information. The events used by the core libraries are:

    - `"input"` when content is entered
      - `"input.type"` for typed input
        - `"input.type.compose"` for composition
      - `"input.paste"` for pasted input
      - `"input.drop"` when adding content with drag-and-drop
      - `"input.complete"` when autocompleting
    - `"delete"` when the user deletes content
      - `"delete.selection"` when deleting the selection
      - `"delete.forward"` when deleting forward from the selection
      - `"delete.backward"` when deleting backward from the selection
      - `"delete.cut"` when cutting to the clipboard
    - `"move"` when content is moved
      - `"move.drop"` when content is moved within the editor through drag-and-drop
    - `"select"` when explicitly changing the selection
      - `"select.pointer"` when selecting with a mouse or other pointing device
    - `"undo"` and `"redo"` for history actions

   Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
   whether the annotation matches a given event.
   */
   Transaction.userEvent = /*@__PURE__*/Annotation.define();
   /**
   Annotation indicating whether a transaction should be added to
   the undo history or not.
   */
   Transaction.addToHistory = /*@__PURE__*/Annotation.define();
   /**
   Annotation indicating (when present and true) that a transaction
   represents a change made by some other actor, not the user. This
   is used, for example, to tag other people's changes in
   collaborative editing.
   */
   Transaction.remote = /*@__PURE__*/Annotation.define();
   function joinRanges(a, b) {
       let result = [];
       for (let iA = 0, iB = 0;;) {
           let from, to;
           if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
               from = a[iA++];
               to = a[iA++];
           }
           else if (iB < b.length) {
               from = b[iB++];
               to = b[iB++];
           }
           else
               return result;
           if (!result.length || result[result.length - 1] < from)
               result.push(from, to);
           else if (result[result.length - 1] < to)
               result[result.length - 1] = to;
       }
   }
   function mergeTransaction(a, b, sequential) {
       var _a;
       let mapForA, mapForB, changes;
       if (sequential) {
           mapForA = b.changes;
           mapForB = ChangeSet.empty(b.changes.length);
           changes = a.changes.compose(b.changes);
       }
       else {
           mapForA = b.changes.map(a.changes);
           mapForB = a.changes.mapDesc(b.changes, true);
           changes = a.changes.compose(mapForA);
       }
       return {
           changes,
           selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
           effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
           annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
           scrollIntoView: a.scrollIntoView || b.scrollIntoView
       };
   }
   function resolveTransactionInner(state, spec, docSize) {
       let sel = spec.selection, annotations = asArray(spec.annotations);
       if (spec.userEvent)
           annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
       return {
           changes: spec.changes instanceof ChangeSet ? spec.changes
               : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
           selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
           effects: asArray(spec.effects),
           annotations,
           scrollIntoView: !!spec.scrollIntoView
       };
   }
   function resolveTransaction(state, specs, filter) {
       let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
       if (specs.length && specs[0].filter === false)
           filter = false;
       for (let i = 1; i < specs.length; i++) {
           if (specs[i].filter === false)
               filter = false;
           let seq = !!specs[i].sequential;
           s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
       }
       let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
       return extendTransaction(filter ? filterTransaction(tr) : tr);
   }
   // Finish a transaction by applying filters if necessary.
   function filterTransaction(tr) {
       let state = tr.startState;
       // Change filters
       let result = true;
       for (let filter of state.facet(changeFilter)) {
           let value = filter(tr);
           if (value === false) {
               result = false;
               break;
           }
           if (Array.isArray(value))
               result = result === true ? value : joinRanges(result, value);
       }
       if (result !== true) {
           let changes, back;
           if (result === false) {
               back = tr.changes.invertedDesc;
               changes = ChangeSet.empty(state.doc.length);
           }
           else {
               let filtered = tr.changes.filter(result);
               changes = filtered.changes;
               back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
           }
           tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
       }
       // Transaction filters
       let filters = state.facet(transactionFilter);
       for (let i = filters.length - 1; i >= 0; i--) {
           let filtered = filters[i](tr);
           if (filtered instanceof Transaction)
               tr = filtered;
           else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
               tr = filtered[0];
           else
               tr = resolveTransaction(state, asArray(filtered), false);
       }
       return tr;
   }
   function extendTransaction(tr) {
       let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
       for (let i = extenders.length - 1; i >= 0; i--) {
           let extension = extenders[i](tr);
           if (extension && Object.keys(extension).length)
               spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);
       }
       return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
   }
   const none$3 = [];
   function asArray(value) {
       return value == null ? none$3 : Array.isArray(value) ? value : [value];
   }

   /**
   The categories produced by a [character
   categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
   do things like selecting by word.
   */
   var CharCategory = /*@__PURE__*/(function (CharCategory) {
       /**
       Word characters.
       */
       CharCategory[CharCategory["Word"] = 0] = "Word";
       /**
       Whitespace.
       */
       CharCategory[CharCategory["Space"] = 1] = "Space";
       /**
       Anything else.
       */
       CharCategory[CharCategory["Other"] = 2] = "Other";
   return CharCategory})(CharCategory || (CharCategory = {}));
   const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
   let wordChar;
   try {
       wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
   }
   catch (_) { }
   function hasWordChar(str) {
       if (wordChar)
           return wordChar.test(str);
       for (let i = 0; i < str.length; i++) {
           let ch = str[i];
           if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
               return true;
       }
       return false;
   }
   function makeCategorizer(wordChars) {
       return (char) => {
           if (!/\S/.test(char))
               return CharCategory.Space;
           if (hasWordChar(char))
               return CharCategory.Word;
           for (let i = 0; i < wordChars.length; i++)
               if (char.indexOf(wordChars[i]) > -1)
                   return CharCategory.Word;
           return CharCategory.Other;
       };
   }

   /**
   The editor state class is a persistent (immutable) data structure.
   To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
   [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
   instance, without modifying the original object.

   As such, _never_ mutate properties of a state directly. That'll
   just break things.
   */
   class EditorState {
       constructor(
       /**
       @internal
       */
       config, 
       /**
       The current document.
       */
       doc, 
       /**
       The current selection.
       */
       selection, 
       /**
       @internal
       */
       values, computeSlot, tr) {
           this.config = config;
           this.doc = doc;
           this.selection = selection;
           this.values = values;
           this.status = config.statusTemplate.slice();
           this.computeSlot = computeSlot;
           // Fill in the computed state immediately, so that further queries
           // for it made during the update return this state
           if (tr)
               tr._state = this;
           for (let i = 0; i < this.config.dynamicSlots.length; i++)
               ensureAddr(this, i << 1);
           this.computeSlot = null;
       }
       field(field, require = true) {
           let addr = this.config.address[field.id];
           if (addr == null) {
               if (require)
                   throw new RangeError("Field is not present in this state");
               return undefined;
           }
           ensureAddr(this, addr);
           return getAddr(this, addr);
       }
       /**
       Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
       state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
       can be passed. Unless
       [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
       [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
       are assumed to start in the _current_ document (not the document
       produced by previous specs), and its
       [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
       [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
       to the document created by its _own_ changes. The resulting
       transaction contains the combined effect of all the different
       specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
       specs take precedence over earlier ones.
       */
       update(...specs) {
           return resolveTransaction(this, specs, true);
       }
       /**
       @internal
       */
       applyTransaction(tr) {
           let conf = this.config, { base, compartments } = conf;
           for (let effect of tr.effects) {
               if (effect.is(Compartment.reconfigure)) {
                   if (conf) {
                       compartments = new Map;
                       conf.compartments.forEach((val, key) => compartments.set(key, val));
                       conf = null;
                   }
                   compartments.set(effect.value.compartment, effect.value.extension);
               }
               else if (effect.is(StateEffect.reconfigure)) {
                   conf = null;
                   base = effect.value;
               }
               else if (effect.is(StateEffect.appendConfig)) {
                   conf = null;
                   base = asArray(base).concat(effect.value);
               }
           }
           let startValues;
           if (!conf) {
               conf = Configuration.resolve(base, compartments, this);
               let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
               startValues = intermediateState.values;
           }
           else {
               startValues = tr.startState.values.slice();
           }
           new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);
       }
       /**
       Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
       replaces every selection range with the given content.
       */
       replaceSelection(text) {
           if (typeof text == "string")
               text = this.toText(text);
           return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
               range: EditorSelection.cursor(range.from + text.length) }));
       }
       /**
       Create a set of changes and a new selection by running the given
       function for each range in the active selection. The function
       can return an optional set of changes (in the coordinate space
       of the start document), plus an updated range (in the coordinate
       space of the document produced by the call's own changes). This
       method will merge all the changes and ranges into a single
       changeset and selection, and return it as a [transaction
       spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
       [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
       */
       changeByRange(f) {
           let sel = this.selection;
           let result1 = f(sel.ranges[0]);
           let changes = this.changes(result1.changes), ranges = [result1.range];
           let effects = asArray(result1.effects);
           for (let i = 1; i < sel.ranges.length; i++) {
               let result = f(sel.ranges[i]);
               let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
               for (let j = 0; j < i; j++)
                   ranges[j] = ranges[j].map(newMapped);
               let mapBy = changes.mapDesc(newChanges, true);
               ranges.push(result.range.map(mapBy));
               changes = changes.compose(newMapped);
               effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
           }
           return {
               changes,
               selection: EditorSelection.create(ranges, sel.mainIndex),
               effects
           };
       }
       /**
       Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
       description, taking the state's document length and line
       separator into account.
       */
       changes(spec = []) {
           if (spec instanceof ChangeSet)
               return spec;
           return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
       }
       /**
       Using the state's [line
       separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
       [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
       */
       toText(string) {
           return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
       }
       /**
       Return the given range of the document as a string.
       */
       sliceDoc(from = 0, to = this.doc.length) {
           return this.doc.sliceString(from, to, this.lineBreak);
       }
       /**
       Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
       */
       facet(facet) {
           let addr = this.config.address[facet.id];
           if (addr == null)
               return facet.default;
           ensureAddr(this, addr);
           return getAddr(this, addr);
       }
       /**
       Convert this state to a JSON-serializable object. When custom
       fields should be serialized, you can pass them in as an object
       mapping property names (in the resulting object, which should
       not use `doc` or `selection`) to fields.
       */
       toJSON(fields) {
           let result = {
               doc: this.sliceDoc(),
               selection: this.selection.toJSON()
           };
           if (fields)
               for (let prop in fields) {
                   let value = fields[prop];
                   if (value instanceof StateField)
                       result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
               }
           return result;
       }
       /**
       Deserialize a state from its JSON representation. When custom
       fields should be deserialized, pass the same object you passed
       to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
       third argument.
       */
       static fromJSON(json, config = {}, fields) {
           if (!json || typeof json.doc != "string")
               throw new RangeError("Invalid JSON representation for EditorState");
           let fieldInit = [];
           if (fields)
               for (let prop in fields) {
                   let field = fields[prop], value = json[prop];
                   fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
               }
           return EditorState.create({
               doc: json.doc,
               selection: EditorSelection.fromJSON(json.selection),
               extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
           });
       }
       /**
       Create a new state. You'll usually only need this when
       initializing an editor—updated states are created by applying
       transactions.
       */
       static create(config = {}) {
           let configuration = Configuration.resolve(config.extensions || [], new Map);
           let doc = config.doc instanceof Text ? config.doc
               : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
           let selection = !config.selection ? EditorSelection.single(0)
               : config.selection instanceof EditorSelection ? config.selection
                   : EditorSelection.single(config.selection.anchor, config.selection.head);
           checkSelection(selection, doc.length);
           if (!configuration.staticFacet(allowMultipleSelections))
               selection = selection.asSingle();
           return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
       }
       /**
       The size (in columns) of a tab in the document, determined by
       the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
       */
       get tabSize() { return this.facet(EditorState.tabSize); }
       /**
       Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
       string for this state.
       */
       get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
       /**
       Returns true when the editor is
       [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
       */
       get readOnly() { return this.facet(readOnly); }
       /**
       Look up a translation for the given phrase (via the
       [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
       original string if no translation is found.
       
       If additional arguments are passed, they will be inserted in
       place of markers like `$1` (for the first value) and `$2`, etc.
       A single `$` is equivalent to `$1`, and `$$` will produce a
       literal dollar sign.
       */
       phrase(phrase, ...insert) {
           for (let map of this.facet(EditorState.phrases))
               if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                   phrase = map[phrase];
                   break;
               }
           if (insert.length)
               phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                   if (i == "$")
                       return "$";
                   let n = +(i || 1);
                   return !n || n > insert.length ? m : insert[n - 1];
               });
           return phrase;
       }
       /**
       Find the values for a given language data field, provided by the
       the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
       */
       languageDataAt(name, pos, side = -1) {
           let values = [];
           for (let provider of this.facet(languageData)) {
               for (let result of provider(this, pos, side)) {
                   if (Object.prototype.hasOwnProperty.call(result, name))
                       values.push(result[name]);
               }
           }
           return values;
       }
       /**
       Return a function that can categorize strings (expected to
       represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
       into one of:
       
        - Word (contains an alphanumeric character or a character
          explicitly listed in the local language's `"wordChars"`
          language data, which should be a string)
        - Space (contains only whitespace)
        - Other (anything else)
       */
       charCategorizer(at) {
           return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
       }
       /**
       Find the word at the given position, meaning the range
       containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
       around it. If no word characters are adjacent to the position,
       this returns null.
       */
       wordAt(pos) {
           let { text, from, length } = this.doc.lineAt(pos);
           let cat = this.charCategorizer(pos);
           let start = pos - from, end = pos - from;
           while (start > 0) {
               let prev = findClusterBreak(text, start, false);
               if (cat(text.slice(prev, start)) != CharCategory.Word)
                   break;
               start = prev;
           }
           while (end < length) {
               let next = findClusterBreak(text, end);
               if (cat(text.slice(end, next)) != CharCategory.Word)
                   break;
               end = next;
           }
           return start == end ? null : EditorSelection.range(start + from, end + from);
       }
   }
   /**
   A facet that, when enabled, causes the editor to allow multiple
   ranges to be selected. Be careful though, because by default the
   editor relies on the native DOM selection, which cannot handle
   multiple selections. An extension like
   [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
   secondary selections visible to the user.
   */
   EditorState.allowMultipleSelections = allowMultipleSelections;
   /**
   Configures the tab size to use in this state. The first
   (highest-precedence) value of the facet is used. If no value is
   given, this defaults to 4.
   */
   EditorState.tabSize = /*@__PURE__*/Facet.define({
       combine: values => values.length ? values[0] : 4
   });
   /**
   The line separator to use. By default, any of `"\n"`, `"\r\n"`
   and `"\r"` is treated as a separator when splitting lines, and
   lines are joined with `"\n"`.

   When you configure a value here, only that precise separator
   will be used, allowing you to round-trip documents through the
   editor without normalizing line separators.
   */
   EditorState.lineSeparator = lineSeparator;
   /**
   This facet controls the value of the
   [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
   consulted by commands and extensions that implement editing
   functionality to determine whether they should apply. It
   defaults to false, but when its highest-precedence value is
   `true`, such functionality disables itself.

   Not to be confused with
   [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
   controls whether the editor's DOM is set to be editable (and
   thus focusable).
   */
   EditorState.readOnly = readOnly;
   /**
   Registers translation phrases. The
   [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
   all objects registered with this facet to find translations for
   its argument.
   */
   EditorState.phrases = /*@__PURE__*/Facet.define({
       compare(a, b) {
           let kA = Object.keys(a), kB = Object.keys(b);
           return kA.length == kB.length && kA.every(k => a[k] == b[k]);
       }
   });
   /**
   A facet used to register [language
   data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
   */
   EditorState.languageData = languageData;
   /**
   Facet used to register change filters, which are called for each
   transaction (unless explicitly
   [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
   part of the transaction's changes.

   Such a function can return `true` to indicate that it doesn't
   want to do anything, `false` to completely stop the changes in
   the transaction, or a set of ranges in which changes should be
   suppressed. Such ranges are represented as an array of numbers,
   with each pair of two numbers indicating the start and end of a
   range. So for example `[10, 20, 100, 110]` suppresses changes
   between 10 and 20, and between 100 and 110.
   */
   EditorState.changeFilter = changeFilter;
   /**
   Facet used to register a hook that gets a chance to update or
   replace transaction specs before they are applied. This will
   only be applied for transactions that don't have
   [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
   can either return a single transaction spec (possibly the input
   transaction), or an array of specs (which will be combined in
   the same way as the arguments to
   [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

   When possible, it is recommended to avoid accessing
   [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
   since it will force creation of a state that will then be
   discarded again, if the transaction is actually filtered.

   (This functionality should be used with care. Indiscriminately
   modifying transaction is likely to break something or degrade
   the user experience.)
   */
   EditorState.transactionFilter = transactionFilter;
   /**
   This is a more limited form of
   [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
   which can only add
   [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
   [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
   of filter runs even if the transaction has disabled regular
   [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
   for effects that don't need to touch the changes or selection,
   but do want to process every transaction.

   Extenders run _after_ filters, when both are present.
   */
   EditorState.transactionExtender = transactionExtender;
   Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

   /**
   Utility function for combining behaviors to fill in a config
   object from an array of provided configs. `defaults` should hold
   default values for all optional fields in `Config`.

   The function will, by default, error
   when a field gets two values that aren't `===`-equal, but you can
   provide combine functions per field to do something else.
   */
   function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
   combine = {}) {
       let result = {};
       for (let config of configs)
           for (let key of Object.keys(config)) {
               let value = config[key], current = result[key];
               if (current === undefined)
                   result[key] = value;
               else if (current === value || value === undefined) ; // No conflict
               else if (Object.hasOwnProperty.call(combine, key))
                   result[key] = combine[key](current, value);
               else
                   throw new Error("Config merge conflict for field " + key);
           }
       for (let key in defaults)
           if (result[key] === undefined)
               result[key] = defaults[key];
       return result;
   }

   /**
   Each range is associated with a value, which must inherit from
   this class.
   */
   class RangeValue {
       /**
       Compare this value with another value. Used when comparing
       rangesets. The default implementation compares by identity.
       Unless you are only creating a fixed number of unique instances
       of your value type, it is a good idea to implement this
       properly.
       */
       eq(other) { return this == other; }
       /**
       Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
       */
       range(from, to = from) { return Range$1.create(from, to, this); }
   }
   RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
   RangeValue.prototype.point = false;
   RangeValue.prototype.mapMode = MapMode.TrackDel;
   /**
   A range associates a value with a range of positions.
   */
   class Range$1 {
       constructor(
       /**
       The range's start position.
       */
       from, 
       /**
       Its end position.
       */
       to, 
       /**
       The value associated with this range.
       */
       value) {
           this.from = from;
           this.to = to;
           this.value = value;
       }
       /**
       @internal
       */
       static create(from, to, value) {
           return new Range$1(from, to, value);
       }
   }
   function cmpRange(a, b) {
       return a.from - b.from || a.value.startSide - b.value.startSide;
   }
   class Chunk {
       constructor(from, to, value, 
       // Chunks are marked with the largest point that occurs
       // in them (or -1 for no points), so that scans that are
       // only interested in points (such as the
       // heightmap-related logic) can skip range-only chunks.
       maxPoint) {
           this.from = from;
           this.to = to;
           this.value = value;
           this.maxPoint = maxPoint;
       }
       get length() { return this.to[this.to.length - 1]; }
       // Find the index of the given position and side. Use the ranges'
       // `from` pos when `end == false`, `to` when `end == true`.
       findIndex(pos, side, end, startAt = 0) {
           let arr = end ? this.to : this.from;
           for (let lo = startAt, hi = arr.length;;) {
               if (lo == hi)
                   return lo;
               let mid = (lo + hi) >> 1;
               let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
               if (mid == lo)
                   return diff >= 0 ? lo : hi;
               if (diff >= 0)
                   hi = mid;
               else
                   lo = mid + 1;
           }
       }
       between(offset, from, to, f) {
           for (let i = this.findIndex(from, -1000000000 /* Far */, true), e = this.findIndex(to, 1000000000 /* Far */, false, i); i < e; i++)
               if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                   return false;
       }
       map(offset, changes) {
           let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
           for (let i = 0; i < this.value.length; i++) {
               let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
               if (curFrom == curTo) {
                   let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                   if (mapped == null)
                       continue;
                   newFrom = newTo = mapped;
                   if (val.startSide != val.endSide) {
                       newTo = changes.mapPos(curFrom, val.endSide);
                       if (newTo < newFrom)
                           continue;
                   }
               }
               else {
                   newFrom = changes.mapPos(curFrom, val.startSide);
                   newTo = changes.mapPos(curTo, val.endSide);
                   if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                       continue;
               }
               if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                   continue;
               if (newPos < 0)
                   newPos = newFrom;
               if (val.point)
                   maxPoint = Math.max(maxPoint, newTo - newFrom);
               value.push(val);
               from.push(newFrom - newPos);
               to.push(newTo - newPos);
           }
           return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
       }
   }
   /**
   A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
   way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
   [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
   structure.
   */
   class RangeSet {
       constructor(
       /**
       @internal
       */
       chunkPos, 
       /**
       @internal
       */
       chunk, 
       /**
       @internal
       */
       nextLayer, 
       /**
       @internal
       */
       maxPoint) {
           this.chunkPos = chunkPos;
           this.chunk = chunk;
           this.nextLayer = nextLayer;
           this.maxPoint = maxPoint;
       }
       /**
       @internal
       */
       static create(chunkPos, chunk, nextLayer, maxPoint) {
           return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
       }
       /**
       @internal
       */
       get length() {
           let last = this.chunk.length - 1;
           return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
       }
       /**
       The number of ranges in the set.
       */
       get size() {
           if (this.isEmpty)
               return 0;
           let size = this.nextLayer.size;
           for (let chunk of this.chunk)
               size += chunk.value.length;
           return size;
       }
       /**
       @internal
       */
       chunkEnd(index) {
           return this.chunkPos[index] + this.chunk[index].length;
       }
       /**
       Update the range set, optionally adding new ranges or filtering
       out existing ones.
       
       (Note: The type parameter is just there as a kludge to work
       around TypeScript variance issues that prevented `RangeSet<X>`
       from being a subtype of `RangeSet<Y>` when `X` is a subtype of
       `Y`.)
       */
       update(updateSpec) {
           let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
           let filter = updateSpec.filter;
           if (add.length == 0 && !filter)
               return this;
           if (sort)
               add = add.slice().sort(cmpRange);
           if (this.isEmpty)
               return add.length ? RangeSet.of(add) : this;
           let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
           let builder = new RangeSetBuilder();
           while (cur.value || i < add.length) {
               if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                   let range = add[i++];
                   if (!builder.addInner(range.from, range.to, range.value))
                       spill.push(range);
               }
               else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                   (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                   (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                   builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                   cur.nextChunk();
               }
               else {
                   if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                       if (!builder.addInner(cur.from, cur.to, cur.value))
                           spill.push(Range$1.create(cur.from, cur.to, cur.value));
                   }
                   cur.next();
               }
           }
           return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
               : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
       }
       /**
       Map this range set through a set of changes, return the new set.
       */
       map(changes) {
           if (changes.empty || this.isEmpty)
               return this;
           let chunks = [], chunkPos = [], maxPoint = -1;
           for (let i = 0; i < this.chunk.length; i++) {
               let start = this.chunkPos[i], chunk = this.chunk[i];
               let touch = changes.touchesRange(start, start + chunk.length);
               if (touch === false) {
                   maxPoint = Math.max(maxPoint, chunk.maxPoint);
                   chunks.push(chunk);
                   chunkPos.push(changes.mapPos(start));
               }
               else if (touch === true) {
                   let { mapped, pos } = chunk.map(start, changes);
                   if (mapped) {
                       maxPoint = Math.max(maxPoint, mapped.maxPoint);
                       chunks.push(mapped);
                       chunkPos.push(pos);
                   }
               }
           }
           let next = this.nextLayer.map(changes);
           return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
       }
       /**
       Iterate over the ranges that touch the region `from` to `to`,
       calling `f` for each. There is no guarantee that the ranges will
       be reported in any specific order. When the callback returns
       `false`, iteration stops.
       */
       between(from, to, f) {
           if (this.isEmpty)
               return;
           for (let i = 0; i < this.chunk.length; i++) {
               let start = this.chunkPos[i], chunk = this.chunk[i];
               if (to >= start && from <= start + chunk.length &&
                   chunk.between(start, from - start, to - start, f) === false)
                   return;
           }
           this.nextLayer.between(from, to, f);
       }
       /**
       Iterate over the ranges in this set, in order, including all
       ranges that end at or after `from`.
       */
       iter(from = 0) {
           return HeapCursor.from([this]).goto(from);
       }
       /**
       @internal
       */
       get isEmpty() { return this.nextLayer == this; }
       /**
       Iterate over the ranges in a collection of sets, in order,
       starting from `from`.
       */
       static iter(sets, from = 0) {
           return HeapCursor.from(sets).goto(from);
       }
       /**
       Iterate over two groups of sets, calling methods on `comparator`
       to notify it of possible differences.
       */
       static compare(oldSets, newSets, 
       /**
       This indicates how the underlying data changed between these
       ranges, and is needed to synchronize the iteration. `from` and
       `to` are coordinates in the _new_ space, after these changes.
       */
       textDiff, comparator, 
       /**
       Can be used to ignore all non-point ranges, and points below
       the given size. When -1, all ranges are compared.
       */
       minPointSize = -1) {
           let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
           let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
           let sharedChunks = findSharedChunks(a, b, textDiff);
           let sideA = new SpanCursor(a, sharedChunks, minPointSize);
           let sideB = new SpanCursor(b, sharedChunks, minPointSize);
           textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
           if (textDiff.empty && textDiff.length == 0)
               compare(sideA, 0, sideB, 0, 0, comparator);
       }
       /**
       Compare the contents of two groups of range sets, returning true
       if they are equivalent in the given range.
       */
       static eq(oldSets, newSets, from = 0, to) {
           if (to == null)
               to = 1000000000 /* Far */;
           let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
           let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
           if (a.length != b.length)
               return false;
           if (!a.length)
               return true;
           let sharedChunks = findSharedChunks(a, b);
           let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
           for (;;) {
               if (sideA.to != sideB.to ||
                   !sameValues(sideA.active, sideB.active) ||
                   sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                   return false;
               if (sideA.to > to)
                   return true;
               sideA.next();
               sideB.next();
           }
       }
       /**
       Iterate over a group of range sets at the same time, notifying
       the iterator about the ranges covering every given piece of
       content. Returns the open count (see
       [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
       of the iteration.
       */
       static spans(sets, from, to, iterator, 
       /**
       When given and greater than -1, only points of at least this
       size are taken into account.
       */
       minPointSize = -1) {
           let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
           let open = cursor.openStart;
           for (;;) {
               let curTo = Math.min(cursor.to, to);
               if (cursor.point) {
                   iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open, cursor.pointRank);
                   open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);
               }
               else if (curTo > pos) {
                   iterator.span(pos, curTo, cursor.active, open);
                   open = cursor.openEnd(curTo);
               }
               if (cursor.to > to)
                   break;
               pos = cursor.to;
               cursor.next();
           }
           return open;
       }
       /**
       Create a range set for the given range or array of ranges. By
       default, this expects the ranges to be _sorted_ (by start
       position and, if two start at the same position,
       `value.startSide`). You can pass `true` as second argument to
       cause the method to sort them.
       */
       static of(ranges, sort = false) {
           let build = new RangeSetBuilder();
           for (let range of ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges)
               build.add(range.from, range.to, range.value);
           return build.finish();
       }
   }
   /**
   The empty set of ranges.
   */
   RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
   function lazySort(ranges) {
       if (ranges.length > 1)
           for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
               let cur = ranges[i];
               if (cmpRange(prev, cur) > 0)
                   return ranges.slice().sort(cmpRange);
               prev = cur;
           }
       return ranges;
   }
   RangeSet.empty.nextLayer = RangeSet.empty;
   /**
   A range set builder is a data structure that helps build up a
   [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
   an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
   */
   class RangeSetBuilder {
       /**
       Create an empty builder.
       */
       constructor() {
           this.chunks = [];
           this.chunkPos = [];
           this.chunkStart = -1;
           this.last = null;
           this.lastFrom = -1000000000 /* Far */;
           this.lastTo = -1000000000 /* Far */;
           this.from = [];
           this.to = [];
           this.value = [];
           this.maxPoint = -1;
           this.setMaxPoint = -1;
           this.nextLayer = null;
       }
       finishChunk(newArrays) {
           this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
           this.chunkPos.push(this.chunkStart);
           this.chunkStart = -1;
           this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
           this.maxPoint = -1;
           if (newArrays) {
               this.from = [];
               this.to = [];
               this.value = [];
           }
       }
       /**
       Add a range. Ranges should be added in sorted (by `from` and
       `value.startSide`) order.
       */
       add(from, to, value) {
           if (!this.addInner(from, to, value))
               (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
       }
       /**
       @internal
       */
       addInner(from, to, value) {
           let diff = from - this.lastTo || value.startSide - this.last.endSide;
           if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
               throw new Error("Ranges must be added sorted by `from` position and `startSide`");
           if (diff < 0)
               return false;
           if (this.from.length == 250 /* ChunkSize */)
               this.finishChunk(true);
           if (this.chunkStart < 0)
               this.chunkStart = from;
           this.from.push(from - this.chunkStart);
           this.to.push(to - this.chunkStart);
           this.last = value;
           this.lastFrom = from;
           this.lastTo = to;
           this.value.push(value);
           if (value.point)
               this.maxPoint = Math.max(this.maxPoint, to - from);
           return true;
       }
       /**
       @internal
       */
       addChunk(from, chunk) {
           if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
               return false;
           if (this.from.length)
               this.finishChunk(true);
           this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
           this.chunks.push(chunk);
           this.chunkPos.push(from);
           let last = chunk.value.length - 1;
           this.last = chunk.value[last];
           this.lastFrom = chunk.from[last] + from;
           this.lastTo = chunk.to[last] + from;
           return true;
       }
       /**
       Finish the range set. Returns the new set. The builder can't be
       used anymore after this has been called.
       */
       finish() { return this.finishInner(RangeSet.empty); }
       /**
       @internal
       */
       finishInner(next) {
           if (this.from.length)
               this.finishChunk(false);
           if (this.chunks.length == 0)
               return next;
           let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
           this.from = null; // Make sure further `add` calls produce errors
           return result;
       }
   }
   function findSharedChunks(a, b, textDiff) {
       let inA = new Map();
       for (let set of a)
           for (let i = 0; i < set.chunk.length; i++)
               if (set.chunk[i].maxPoint <= 0)
                   inA.set(set.chunk[i], set.chunkPos[i]);
       let shared = new Set();
       for (let set of b)
           for (let i = 0; i < set.chunk.length; i++) {
               let known = inA.get(set.chunk[i]);
               if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                   !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                   shared.add(set.chunk[i]);
           }
       return shared;
   }
   class LayerCursor {
       constructor(layer, skip, minPoint, rank = 0) {
           this.layer = layer;
           this.skip = skip;
           this.minPoint = minPoint;
           this.rank = rank;
       }
       get startSide() { return this.value ? this.value.startSide : 0; }
       get endSide() { return this.value ? this.value.endSide : 0; }
       goto(pos, side = -1000000000 /* Far */) {
           this.chunkIndex = this.rangeIndex = 0;
           this.gotoInner(pos, side, false);
           return this;
       }
       gotoInner(pos, side, forward) {
           while (this.chunkIndex < this.layer.chunk.length) {
               let next = this.layer.chunk[this.chunkIndex];
               if (!(this.skip && this.skip.has(next) ||
                   this.layer.chunkEnd(this.chunkIndex) < pos ||
                   next.maxPoint < this.minPoint))
                   break;
               this.chunkIndex++;
               forward = false;
           }
           if (this.chunkIndex < this.layer.chunk.length) {
               let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
               if (!forward || this.rangeIndex < rangeIndex)
                   this.setRangeIndex(rangeIndex);
           }
           this.next();
       }
       forward(pos, side) {
           if ((this.to - pos || this.endSide - side) < 0)
               this.gotoInner(pos, side, true);
       }
       next() {
           for (;;) {
               if (this.chunkIndex == this.layer.chunk.length) {
                   this.from = this.to = 1000000000 /* Far */;
                   this.value = null;
                   break;
               }
               else {
                   let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                   let from = chunkPos + chunk.from[this.rangeIndex];
                   this.from = from;
                   this.to = chunkPos + chunk.to[this.rangeIndex];
                   this.value = chunk.value[this.rangeIndex];
                   this.setRangeIndex(this.rangeIndex + 1);
                   if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                       break;
               }
           }
       }
       setRangeIndex(index) {
           if (index == this.layer.chunk[this.chunkIndex].value.length) {
               this.chunkIndex++;
               if (this.skip) {
                   while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                       this.chunkIndex++;
               }
               this.rangeIndex = 0;
           }
           else {
               this.rangeIndex = index;
           }
       }
       nextChunk() {
           this.chunkIndex++;
           this.rangeIndex = 0;
           this.next();
       }
       compare(other) {
           return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
               this.to - other.to || this.endSide - other.endSide;
       }
   }
   class HeapCursor {
       constructor(heap) {
           this.heap = heap;
       }
       static from(sets, skip = null, minPoint = -1) {
           let heap = [];
           for (let i = 0; i < sets.length; i++) {
               for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                   if (cur.maxPoint >= minPoint)
                       heap.push(new LayerCursor(cur, skip, minPoint, i));
               }
           }
           return heap.length == 1 ? heap[0] : new HeapCursor(heap);
       }
       get startSide() { return this.value ? this.value.startSide : 0; }
       goto(pos, side = -1000000000 /* Far */) {
           for (let cur of this.heap)
               cur.goto(pos, side);
           for (let i = this.heap.length >> 1; i >= 0; i--)
               heapBubble(this.heap, i);
           this.next();
           return this;
       }
       forward(pos, side) {
           for (let cur of this.heap)
               cur.forward(pos, side);
           for (let i = this.heap.length >> 1; i >= 0; i--)
               heapBubble(this.heap, i);
           if ((this.to - pos || this.value.endSide - side) < 0)
               this.next();
       }
       next() {
           if (this.heap.length == 0) {
               this.from = this.to = 1000000000 /* Far */;
               this.value = null;
               this.rank = -1;
           }
           else {
               let top = this.heap[0];
               this.from = top.from;
               this.to = top.to;
               this.value = top.value;
               this.rank = top.rank;
               if (top.value)
                   top.next();
               heapBubble(this.heap, 0);
           }
       }
   }
   function heapBubble(heap, index) {
       for (let cur = heap[index];;) {
           let childIndex = (index << 1) + 1;
           if (childIndex >= heap.length)
               break;
           let child = heap[childIndex];
           if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
               child = heap[childIndex + 1];
               childIndex++;
           }
           if (cur.compare(child) < 0)
               break;
           heap[childIndex] = cur;
           heap[index] = child;
           index = childIndex;
       }
   }
   class SpanCursor {
       constructor(sets, skip, minPoint) {
           this.minPoint = minPoint;
           this.active = [];
           this.activeTo = [];
           this.activeRank = [];
           this.minActive = -1;
           // A currently active point range, if any
           this.point = null;
           this.pointFrom = 0;
           this.pointRank = 0;
           this.to = -1000000000 /* Far */;
           this.endSide = 0;
           this.openStart = -1;
           this.cursor = HeapCursor.from(sets, skip, minPoint);
       }
       goto(pos, side = -1000000000 /* Far */) {
           this.cursor.goto(pos, side);
           this.active.length = this.activeTo.length = this.activeRank.length = 0;
           this.minActive = -1;
           this.to = pos;
           this.endSide = side;
           this.openStart = -1;
           this.next();
           return this;
       }
       forward(pos, side) {
           while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
               this.removeActive(this.minActive);
           this.cursor.forward(pos, side);
       }
       removeActive(index) {
           remove(this.active, index);
           remove(this.activeTo, index);
           remove(this.activeRank, index);
           this.minActive = findMinIndex(this.active, this.activeTo);
       }
       addActive(trackOpen) {
           let i = 0, { value, to, rank } = this.cursor;
           while (i < this.activeRank.length && this.activeRank[i] <= rank)
               i++;
           insert(this.active, i, value);
           insert(this.activeTo, i, to);
           insert(this.activeRank, i, rank);
           if (trackOpen)
               insert(trackOpen, i, this.cursor.from);
           this.minActive = findMinIndex(this.active, this.activeTo);
       }
       // After calling this, if `this.point` != null, the next range is a
       // point. Otherwise, it's a regular range, covered by `this.active`.
       next() {
           let from = this.to, wasPoint = this.point;
           this.point = null;
           let trackOpen = this.openStart < 0 ? [] : null, trackExtra = 0;
           for (;;) {
               let a = this.minActive;
               if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                   if (this.activeTo[a] > from) {
                       this.to = this.activeTo[a];
                       this.endSide = this.active[a].endSide;
                       break;
                   }
                   this.removeActive(a);
                   if (trackOpen)
                       remove(trackOpen, a);
               }
               else if (!this.cursor.value) {
                   this.to = this.endSide = 1000000000 /* Far */;
                   break;
               }
               else if (this.cursor.from > from) {
                   this.to = this.cursor.from;
                   this.endSide = this.cursor.startSide;
                   break;
               }
               else {
                   let nextVal = this.cursor.value;
                   if (!nextVal.point) { // Opening a range
                       this.addActive(trackOpen);
                       this.cursor.next();
                   }
                   else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                       // Ignore any non-empty points that end precisely at the end of the prev point
                       this.cursor.next();
                   }
                   else { // New point
                       this.point = nextVal;
                       this.pointFrom = this.cursor.from;
                       this.pointRank = this.cursor.rank;
                       this.to = this.cursor.to;
                       this.endSide = nextVal.endSide;
                       if (this.cursor.from < from)
                           trackExtra = 1;
                       this.cursor.next();
                       this.forward(this.to, this.endSide);
                       break;
                   }
               }
           }
           if (trackOpen) {
               let openStart = 0;
               while (openStart < trackOpen.length && trackOpen[openStart] < from)
                   openStart++;
               this.openStart = openStart + trackExtra;
           }
       }
       activeForPoint(to) {
           if (!this.active.length)
               return this.active;
           let active = [];
           for (let i = this.active.length - 1; i >= 0; i--) {
               if (this.activeRank[i] < this.pointRank)
                   break;
               if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                   active.push(this.active[i]);
           }
           return active.reverse();
       }
       openEnd(to) {
           let open = 0;
           for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
               open++;
           return open;
       }
   }
   function compare(a, startA, b, startB, length, comparator) {
       a.goto(startA);
       b.goto(startB);
       let endB = startB + length;
       let pos = startB, dPos = startB - startA;
       for (;;) {
           let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
           let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
           if (a.point || b.point) {
               if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                   sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to))))
                   comparator.comparePoint(pos, clipEnd, a.point, b.point);
           }
           else {
               if (clipEnd > pos && !sameValues(a.active, b.active))
                   comparator.compareRange(pos, clipEnd, a.active, b.active);
           }
           if (end > endB)
               break;
           pos = end;
           if (diff <= 0)
               a.next();
           if (diff >= 0)
               b.next();
       }
   }
   function sameValues(a, b) {
       if (a.length != b.length)
           return false;
       for (let i = 0; i < a.length; i++)
           if (a[i] != b[i] && !a[i].eq(b[i]))
               return false;
       return true;
   }
   function remove(array, index) {
       for (let i = index, e = array.length - 1; i < e; i++)
           array[i] = array[i + 1];
       array.pop();
   }
   function insert(array, index, value) {
       for (let i = array.length - 1; i >= index; i--)
           array[i + 1] = array[i];
       array[index] = value;
   }
   function findMinIndex(value, array) {
       let found = -1, foundPos = 1000000000 /* Far */;
       for (let i = 0; i < array.length; i++)
           if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
               found = i;
               foundPos = array[i];
           }
       return found;
   }

   /**
   Count the column position at the given offset into the string,
   taking extending characters and tab size into account.
   */
   function countColumn(string, tabSize, to = string.length) {
       let n = 0;
       for (let i = 0; i < to;) {
           if (string.charCodeAt(i) == 9) {
               n += tabSize - (n % tabSize);
               i++;
           }
           else {
               n++;
               i = findClusterBreak(string, i);
           }
       }
       return n;
   }
   /**
   Find the offset that corresponds to the given column position in a
   string, taking extending characters and tab size into account. By
   default, the string length is returned when it is too short to
   reach the column. Pass `strict` true to make it return -1 in that
   situation.
   */
   function findColumn(string, col, tabSize, strict) {
       for (let i = 0, n = 0;;) {
           if (n >= col)
               return i;
           if (i == string.length)
               break;
           n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
           i = findClusterBreak(string, i);
       }
       return strict === true ? -1 : string.length;
   }

   const C = "\u037c";
   const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
   const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
   const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

   // :: - Style modules encapsulate a set of CSS rules defined from
   // JavaScript. Their definitions are only available in a given DOM
   // root after it has been _mounted_ there with `StyleModule.mount`.
   //
   // Style modules should be created once and stored somewhere, as
   // opposed to re-creating them every time you need them. The amount of
   // CSS rules generated for a given DOM root is bounded by the amount
   // of style modules that were used. So to avoid leaking rules, don't
   // create these dynamically, but treat them as one-time allocations.
   class StyleModule {
     // :: (Object<Style>, ?{finish: ?(string) → string})
     // Create a style module from the given spec.
     //
     // When `finish` is given, it is called on regular (non-`@`)
     // selectors (after `&` expansion) to compute the final selector.
     constructor(spec, options) {
       this.rules = [];
       let {finish} = options || {};

       function splitSelector(selector) {
         return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
       }

       function render(selectors, spec, target, isKeyframes) {
         let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
         if (isAt && spec == null) return target.push(selectors[0] + ";")
         for (let prop in spec) {
           let value = spec[prop];
           if (/&/.test(prop)) {
             render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                    value, target);
           } else if (value && typeof value == "object") {
             if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
             render(splitSelector(prop), value, local, keyframes);
           } else if (value != null) {
             local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
           }
         }
         if (local.length || keyframes) {
           target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                       " {" + local.join(" ") + "}");
         }
       }

       for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
     }

     // :: () → string
     // Returns a string containing the module's CSS rules.
     getRules() { return this.rules.join("\n") }

     // :: () → string
     // Generate a new unique CSS class name.
     static newName() {
       let id = top[COUNT] || 1;
       top[COUNT] = id + 1;
       return C + id.toString(36)
     }

     // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
     //
     // Mount the given set of modules in the given DOM root, which ensures
     // that the CSS rules defined by the module are available in that
     // context.
     //
     // Rules are only added to the document once per root.
     //
     // Rule order will follow the order of the modules, so that rules from
     // modules later in the array take precedence of those from earlier
     // modules. If you call this function multiple times for the same root
     // in a way that changes the order of already mounted modules, the old
     // order will be changed.
     static mount(root, modules) {
       (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
     }
   }

   let adoptedSet = null;

   class StyleSet {
     constructor(root) {
       if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
         if (adoptedSet) {
           root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
           return root[SET] = adoptedSet
         }
         this.sheet = new CSSStyleSheet;
         root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
         adoptedSet = this;
       } else {
         this.styleTag = (root.ownerDocument || root).createElement("style");
         let target = root.head || root;
         target.insertBefore(this.styleTag, target.firstChild);
       }
       this.modules = [];
       root[SET] = this;
     }

     mount(modules) {
       let sheet = this.sheet;
       let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
       for (let i = 0; i < modules.length; i++) {
         let mod = modules[i], index = this.modules.indexOf(mod);
         if (index < j && index > -1) { // Ordering conflict
           this.modules.splice(index, 1);
           j--;
           index = -1;
         }
         if (index == -1) {
           this.modules.splice(j++, 0, mod);
           if (sheet) for (let k = 0; k < mod.rules.length; k++)
             sheet.insertRule(mod.rules[k], pos++);
         } else {
           while (j < index) pos += this.modules[j++].rules.length;
           pos += mod.rules.length;
           j++;
         }
       }

       if (!sheet) {
         let text = "";
         for (let i = 0; i < this.modules.length; i++)
           text += this.modules[i].getRules() + "\n";
         this.styleTag.textContent = text;
       }
     }
   }

   // Style::Object<union<Style,string>>
   //
   // A style is an object that, in the simple case, maps CSS property
   // names to strings holding their values, as in `{color: "red",
   // fontWeight: "bold"}`. The property names can be given in
   // camel-case—the library will insert a dash before capital letters
   // when converting them to CSS.
   //
   // If you include an underscore in a property name, it and everything
   // after it will be removed from the output, which can be useful when
   // providing a property multiple times, for browser compatibility
   // reasons.
   //
   // A property in a style object can also be a sub-selector, which
   // extends the current context to add a pseudo-selector or a child
   // selector. Such a property should contain a `&` character, which
   // will be replaced by the current selector. For example `{"&:before":
   // {content: '"hi"'}}`. Sub-selectors and regular properties can
   // freely be mixed in a given object. Any property containing a `&` is
   // assumed to be a sub-selector.
   //
   // Finally, a property can specify an @-block to be wrapped around the
   // styles defined inside the object that's the property's value. For
   // example to create a media query you can do `{"@media screen and
   // (min-width: 400px)": {...}}`.

   var base$3 = {
     8: "Backspace",
     9: "Tab",
     10: "Enter",
     12: "NumLock",
     13: "Enter",
     16: "Shift",
     17: "Control",
     18: "Alt",
     20: "CapsLock",
     27: "Escape",
     32: " ",
     33: "PageUp",
     34: "PageDown",
     35: "End",
     36: "Home",
     37: "ArrowLeft",
     38: "ArrowUp",
     39: "ArrowRight",
     40: "ArrowDown",
     44: "PrintScreen",
     45: "Insert",
     46: "Delete",
     59: ";",
     61: "=",
     91: "Meta",
     92: "Meta",
     106: "*",
     107: "+",
     108: ",",
     109: "-",
     110: ".",
     111: "/",
     144: "NumLock",
     145: "ScrollLock",
     160: "Shift",
     161: "Shift",
     162: "Control",
     163: "Control",
     164: "Alt",
     165: "Alt",
     173: "-",
     186: ";",
     187: "=",
     188: ",",
     189: "-",
     190: ".",
     191: "/",
     192: "`",
     219: "[",
     220: "\\",
     221: "]",
     222: "'",
     229: "q"
   };

   var shift = {
     48: ")",
     49: "!",
     50: "@",
     51: "#",
     52: "$",
     53: "%",
     54: "^",
     55: "&",
     56: "*",
     57: "(",
     59: ":",
     61: "+",
     173: "_",
     186: ":",
     187: "+",
     188: "<",
     189: "_",
     190: ">",
     191: "?",
     192: "~",
     219: "{",
     220: "|",
     221: "}",
     222: "\"",
     229: "Q"
   };

   var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
   var safari$1 = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
   var gecko$1 = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
   var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
   var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
   var brokenModifierNames = chrome$1 && (mac || +chrome$1[1] < 57) || gecko$1 && mac;

   // Fill in the digit keys
   for (var i = 0; i < 10; i++) base$3[48 + i] = base$3[96 + i] = String(i);

   // The function keys
   for (var i = 1; i <= 24; i++) base$3[i + 111] = "F" + i;

   // And the alphabetic keys
   for (var i = 65; i <= 90; i++) {
     base$3[i] = String.fromCharCode(i + 32);
     shift[i] = String.fromCharCode(i);
   }

   // For each code that doesn't have a shift-equivalent, copy the base name
   for (var code$2 in base$3) if (!shift.hasOwnProperty(code$2)) shift[code$2] = base$3[code$2];

   function keyName(event) {
     // Don't trust event.key in Chrome when there are modifiers until
     // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
     var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
       (safari$1 || ie$1) && event.shiftKey && event.key && event.key.length == 1;
     var name = (!ignoreKey && event.key) ||
       (event.shiftKey ? shift : base$3)[event.keyCode] ||
       event.key || "Unidentified";
     // Edge sometimes produces wrong names (Issue #3)
     if (name == "Esc") name = "Escape";
     if (name == "Del") name = "Delete";
     // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
     if (name == "Left") name = "ArrowLeft";
     if (name == "Up") name = "ArrowUp";
     if (name == "Right") name = "ArrowRight";
     if (name == "Down") name = "ArrowDown";
     return name
   }

   function getSelection(root) {
       let target;
       // Browsers differ on whether shadow roots have a getSelection
       // method. If it exists, use that, otherwise, call it on the
       // document.
       if (root.nodeType == 11) { // Shadow root
           target = root.getSelection ? root : root.ownerDocument;
       }
       else {
           target = root;
       }
       return target.getSelection();
   }
   function contains(dom, node) {
       return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
   }
   function deepActiveElement() {
       let elt = document.activeElement;
       while (elt && elt.shadowRoot)
           elt = elt.shadowRoot.activeElement;
       return elt;
   }
   function hasSelection(dom, selection) {
       if (!selection.anchorNode)
           return false;
       try {
           // Firefox will raise 'permission denied' errors when accessing
           // properties of `sel.anchorNode` when it's in a generated CSS
           // element.
           return contains(dom, selection.anchorNode);
       }
       catch (_) {
           return false;
       }
   }
   function clientRectsFor(dom) {
       if (dom.nodeType == 3)
           return textRange(dom, 0, dom.nodeValue.length).getClientRects();
       else if (dom.nodeType == 1)
           return dom.getClientRects();
       else
           return [];
   }
   // Scans forward and backward through DOM positions equivalent to the
   // given one to see if the two are in the same place (i.e. after a
   // text node vs at the end of that text node)
   function isEquivalentPosition(node, off, targetNode, targetOff) {
       return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
           scanFor(node, off, targetNode, targetOff, 1)) : false;
   }
   function domIndex(node) {
       for (var index = 0;; index++) {
           node = node.previousSibling;
           if (!node)
               return index;
       }
   }
   function scanFor(node, off, targetNode, targetOff, dir) {
       for (;;) {
           if (node == targetNode && off == targetOff)
               return true;
           if (off == (dir < 0 ? 0 : maxOffset(node))) {
               if (node.nodeName == "DIV")
                   return false;
               let parent = node.parentNode;
               if (!parent || parent.nodeType != 1)
                   return false;
               off = domIndex(node) + (dir < 0 ? 0 : 1);
               node = parent;
           }
           else if (node.nodeType == 1) {
               node = node.childNodes[off + (dir < 0 ? -1 : 0)];
               if (node.nodeType == 1 && node.contentEditable == "false")
                   return false;
               off = dir < 0 ? maxOffset(node) : 0;
           }
           else {
               return false;
           }
       }
   }
   function maxOffset(node) {
       return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
   }
   const Rect0 = { left: 0, right: 0, top: 0, bottom: 0 };
   function flattenRect(rect, left) {
       let x = left ? rect.left : rect.right;
       return { left: x, right: x, top: rect.top, bottom: rect.bottom };
   }
   function windowRect(win) {
       return { left: 0, right: win.innerWidth,
           top: 0, bottom: win.innerHeight };
   }
   function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
       let doc = dom.ownerDocument, win = doc.defaultView;
       for (let cur = dom; cur;) {
           if (cur.nodeType == 1) { // Element
               let bounding, top = cur == doc.body;
               if (top) {
                   bounding = windowRect(win);
               }
               else {
                   if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                       cur = cur.parentNode;
                       continue;
                   }
                   let rect = cur.getBoundingClientRect();
                   // Make sure scrollbar width isn't included in the rectangle
                   bounding = { left: rect.left, right: rect.left + cur.clientWidth,
                       top: rect.top, bottom: rect.top + cur.clientHeight };
               }
               let moveX = 0, moveY = 0;
               if (y == "nearest") {
                   if (rect.top < bounding.top) {
                       moveY = -(bounding.top - rect.top + yMargin);
                       if (side > 0 && rect.bottom > bounding.bottom + moveY)
                           moveY = rect.bottom - bounding.bottom + moveY + yMargin;
                   }
                   else if (rect.bottom > bounding.bottom) {
                       moveY = rect.bottom - bounding.bottom + yMargin;
                       if (side < 0 && (rect.top - moveY) < bounding.top)
                           moveY = -(bounding.top + moveY - rect.top + yMargin);
                   }
               }
               else {
                   let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                   let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                       y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                           rect.bottom - boundingHeight + yMargin;
                   moveY = targetTop - bounding.top;
               }
               if (x == "nearest") {
                   if (rect.left < bounding.left) {
                       moveX = -(bounding.left - rect.left + xMargin);
                       if (side > 0 && rect.right > bounding.right + moveX)
                           moveX = rect.right - bounding.right + moveX + xMargin;
                   }
                   else if (rect.right > bounding.right) {
                       moveX = rect.right - bounding.right + xMargin;
                       if (side < 0 && rect.left < bounding.left + moveX)
                           moveX = -(bounding.left + moveX - rect.left + xMargin);
                   }
               }
               else {
                   let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                       (x == "start") == ltr ? rect.left - xMargin :
                           rect.right - (bounding.right - bounding.left) + xMargin;
                   moveX = targetLeft - bounding.left;
               }
               if (moveX || moveY) {
                   if (top) {
                       win.scrollBy(moveX, moveY);
                   }
                   else {
                       if (moveY) {
                           let start = cur.scrollTop;
                           cur.scrollTop += moveY;
                           moveY = cur.scrollTop - start;
                       }
                       if (moveX) {
                           let start = cur.scrollLeft;
                           cur.scrollLeft += moveX;
                           moveX = cur.scrollLeft - start;
                       }
                       rect = { left: rect.left - moveX, top: rect.top - moveY,
                           right: rect.right - moveX, bottom: rect.bottom - moveY };
                   }
               }
               if (top)
                   break;
               cur = cur.assignedSlot || cur.parentNode;
               x = y = "nearest";
           }
           else if (cur.nodeType == 11) { // A shadow root
               cur = cur.host;
           }
           else {
               break;
           }
       }
   }
   class DOMSelectionState {
       constructor() {
           this.anchorNode = null;
           this.anchorOffset = 0;
           this.focusNode = null;
           this.focusOffset = 0;
       }
       eq(domSel) {
           return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
               this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
       }
       setRange(range) {
           this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);
       }
       set(anchorNode, anchorOffset, focusNode, focusOffset) {
           this.anchorNode = anchorNode;
           this.anchorOffset = anchorOffset;
           this.focusNode = focusNode;
           this.focusOffset = focusOffset;
       }
   }
   let preventScrollSupported = null;
   // Feature-detects support for .focus({preventScroll: true}), and uses
   // a fallback kludge when not supported.
   function focusPreventScroll(dom) {
       if (dom.setActive)
           return dom.setActive(); // in IE
       if (preventScrollSupported)
           return dom.focus(preventScrollSupported);
       let stack = [];
       for (let cur = dom; cur; cur = cur.parentNode) {
           stack.push(cur, cur.scrollTop, cur.scrollLeft);
           if (cur == cur.ownerDocument)
               break;
       }
       dom.focus(preventScrollSupported == null ? {
           get preventScroll() {
               preventScrollSupported = { preventScroll: true };
               return true;
           }
       } : undefined);
       if (!preventScrollSupported) {
           preventScrollSupported = false;
           for (let i = 0; i < stack.length;) {
               let elt = stack[i++], top = stack[i++], left = stack[i++];
               if (elt.scrollTop != top)
                   elt.scrollTop = top;
               if (elt.scrollLeft != left)
                   elt.scrollLeft = left;
           }
       }
   }
   let scratchRange;
   function textRange(node, from, to = from) {
       let range = scratchRange || (scratchRange = document.createRange());
       range.setEnd(node, to);
       range.setStart(node, from);
       return range;
   }
   function dispatchKey(elt, name, code) {
       let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
       let down = new KeyboardEvent("keydown", options);
       down.synthetic = true;
       elt.dispatchEvent(down);
       let up = new KeyboardEvent("keyup", options);
       up.synthetic = true;
       elt.dispatchEvent(up);
       return down.defaultPrevented || up.defaultPrevented;
   }
   function getRoot(node) {
       while (node) {
           if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
               return node;
           node = node.assignedSlot || node.parentNode;
       }
       return null;
   }
   function clearAttributes(node) {
       while (node.attributes.length)
           node.removeAttributeNode(node.attributes[0]);
   }

   class DOMPos {
       constructor(node, offset, precise = true) {
           this.node = node;
           this.offset = offset;
           this.precise = precise;
       }
       static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
       static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
   }
   const noChildren = [];
   class ContentView {
       constructor() {
           this.parent = null;
           this.dom = null;
           this.dirty = 2 /* Node */;
       }
       get editorView() {
           if (!this.parent)
               throw new Error("Accessing view in orphan content view");
           return this.parent.editorView;
       }
       get overrideDOMText() { return null; }
       get posAtStart() {
           return this.parent ? this.parent.posBefore(this) : 0;
       }
       get posAtEnd() {
           return this.posAtStart + this.length;
       }
       posBefore(view) {
           let pos = this.posAtStart;
           for (let child of this.children) {
               if (child == view)
                   return pos;
               pos += child.length + child.breakAfter;
           }
           throw new RangeError("Invalid child in posBefore");
       }
       posAfter(view) {
           return this.posBefore(view) + view.length;
       }
       // Will return a rectangle directly before (when side < 0), after
       // (side > 0) or directly on (when the browser supports it) the
       // given position.
       coordsAt(_pos, _side) { return null; }
       sync(track) {
           if (this.dirty & 2 /* Node */) {
               let parent = this.dom;
               let prev = null, next;
               for (let child of this.children) {
                   if (child.dirty) {
                       if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                           let contentView = ContentView.get(next);
                           if (!contentView || !contentView.parent && contentView.constructor == child.constructor)
                               child.reuseDOM(next);
                       }
                       child.sync(track);
                       child.dirty = 0 /* Not */;
                   }
                   next = prev ? prev.nextSibling : parent.firstChild;
                   if (track && !track.written && track.node == parent && next != child.dom)
                       track.written = true;
                   if (child.dom.parentNode == parent) {
                       while (next && next != child.dom)
                           next = rm$1(next);
                   }
                   else {
                       parent.insertBefore(child.dom, next);
                   }
                   prev = child.dom;
               }
               next = prev ? prev.nextSibling : parent.firstChild;
               if (next && track && track.node == parent)
                   track.written = true;
               while (next)
                   next = rm$1(next);
           }
           else if (this.dirty & 1 /* Child */) {
               for (let child of this.children)
                   if (child.dirty) {
                       child.sync(track);
                       child.dirty = 0 /* Not */;
                   }
           }
       }
       reuseDOM(_dom) { }
       localPosFromDOM(node, offset) {
           let after;
           if (node == this.dom) {
               after = this.dom.childNodes[offset];
           }
           else {
               let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
               for (;;) {
                   let parent = node.parentNode;
                   if (parent == this.dom)
                       break;
                   if (bias == 0 && parent.firstChild != parent.lastChild) {
                       if (node == parent.firstChild)
                           bias = -1;
                       else
                           bias = 1;
                   }
                   node = parent;
               }
               if (bias < 0)
                   after = node;
               else
                   after = node.nextSibling;
           }
           if (after == this.dom.firstChild)
               return 0;
           while (after && !ContentView.get(after))
               after = after.nextSibling;
           if (!after)
               return this.length;
           for (let i = 0, pos = 0;; i++) {
               let child = this.children[i];
               if (child.dom == after)
                   return pos;
               pos += child.length + child.breakAfter;
           }
       }
       domBoundsAround(from, to, offset = 0) {
           let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
           for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
               let child = this.children[i], end = pos + child.length;
               if (pos < from && end > to)
                   return child.domBoundsAround(from, to, pos);
               if (end >= from && fromI == -1) {
                   fromI = i;
                   fromStart = pos;
               }
               if (pos > to && child.dom.parentNode == this.dom) {
                   toI = i;
                   toEnd = prevEnd;
                   break;
               }
               prevEnd = end;
               pos = end + child.breakAfter;
           }
           return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
               startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
               endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
       }
       markDirty(andParent = false) {
           this.dirty |= 2 /* Node */;
           this.markParentsDirty(andParent);
       }
       markParentsDirty(childList) {
           for (let parent = this.parent; parent; parent = parent.parent) {
               if (childList)
                   parent.dirty |= 2 /* Node */;
               if (parent.dirty & 1 /* Child */)
                   return;
               parent.dirty |= 1 /* Child */;
               childList = false;
           }
       }
       setParent(parent) {
           if (this.parent != parent) {
               this.parent = parent;
               if (this.dirty)
                   this.markParentsDirty(true);
           }
       }
       setDOM(dom) {
           if (this.dom)
               this.dom.cmView = null;
           this.dom = dom;
           dom.cmView = this;
       }
       get rootView() {
           for (let v = this;;) {
               let parent = v.parent;
               if (!parent)
                   return v;
               v = parent;
           }
       }
       replaceChildren(from, to, children = noChildren) {
           this.markDirty();
           for (let i = from; i < to; i++) {
               let child = this.children[i];
               if (child.parent == this)
                   child.destroy();
           }
           this.children.splice(from, to - from, ...children);
           for (let i = 0; i < children.length; i++)
               children[i].setParent(this);
       }
       ignoreMutation(_rec) { return false; }
       ignoreEvent(_event) { return false; }
       childCursor(pos = this.length) {
           return new ChildCursor(this.children, pos, this.children.length);
       }
       childPos(pos, bias = 1) {
           return this.childCursor().findPos(pos, bias);
       }
       toString() {
           let name = this.constructor.name.replace("View", "");
           return name + (this.children.length ? "(" + this.children.join() + ")" :
               this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
               (this.breakAfter ? "#" : "");
       }
       static get(node) { return node.cmView; }
       get isEditable() { return true; }
       merge(from, to, source, hasStart, openStart, openEnd) {
           return false;
       }
       become(other) { return false; }
       // When this is a zero-length view with a side, this should return a
       // number <= 0 to indicate it is before its position, or a
       // number > 0 when after its position.
       getSide() { return 0; }
       destroy() {
           this.parent = null;
       }
   }
   ContentView.prototype.breakAfter = 0;
   // Remove a DOM node and return its next sibling.
   function rm$1(dom) {
       let next = dom.nextSibling;
       dom.parentNode.removeChild(dom);
       return next;
   }
   class ChildCursor {
       constructor(children, pos, i) {
           this.children = children;
           this.pos = pos;
           this.i = i;
           this.off = 0;
       }
       findPos(pos, bias = 1) {
           for (;;) {
               if (pos > this.pos || pos == this.pos &&
                   (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                   this.off = pos - this.pos;
                   return this;
               }
               let next = this.children[--this.i];
               this.pos -= next.length + next.breakAfter;
           }
       }
   }
   function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
       let { children } = parent;
       let before = children.length ? children[fromI] : null;
       let last = insert.length ? insert[insert.length - 1] : null;
       let breakAtEnd = last ? last.breakAfter : breakAtStart;
       // Change within a single child
       if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
           before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
           return;
       if (toI < children.length) {
           let after = children[toI];
           // Make sure the end of the child after the update is preserved in `after`
           if (after && toOff < after.length) {
               // If we're splitting a child, separate part of it to avoid that
               // being mangled when updating the child before the update.
               if (fromI == toI) {
                   after = after.split(toOff);
                   toOff = 0;
               }
               // If the element after the replacement should be merged with
               // the last replacing element, update `content`
               if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                   insert[insert.length - 1] = after;
               }
               else {
                   // Remove the start of the after element, if necessary, and
                   // add it to `content`.
                   if (toOff)
                       after.merge(0, toOff, null, false, 0, openEnd);
                   insert.push(after);
               }
           }
           else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
               // The element at `toI` is entirely covered by this range.
               // Preserve its line break, if any.
               if (last)
                   last.breakAfter = 1;
               else
                   breakAtStart = 1;
           }
           // Since we've handled the next element from the current elements
           // now, make sure `toI` points after that.
           toI++;
       }
       if (before) {
           before.breakAfter = breakAtStart;
           if (fromOff > 0) {
               if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                   before.breakAfter = insert.shift().breakAfter;
               }
               else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                   before.merge(fromOff, before.length, null, false, openStart, 0);
               }
               fromI++;
           }
       }
       // Try to merge widgets on the boundaries of the replacement
       while (fromI < toI && insert.length) {
           if (children[toI - 1].become(insert[insert.length - 1])) {
               toI--;
               insert.pop();
               openEnd = insert.length ? 0 : openStart;
           }
           else if (children[fromI].become(insert[0])) {
               fromI++;
               insert.shift();
               openStart = insert.length ? 0 : openEnd;
           }
           else {
               break;
           }
       }
       if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
           children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
           fromI--;
       if (fromI < toI || insert.length)
           parent.replaceChildren(fromI, toI, insert);
   }
   function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
       let cur = parent.childCursor();
       let { i: toI, off: toOff } = cur.findPos(to, 1);
       let { i: fromI, off: fromOff } = cur.findPos(from, -1);
       let dLen = from - to;
       for (let view of insert)
           dLen += view.length;
       parent.length += dLen;
       replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
   }

   let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
   let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
   const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
   const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
   const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
   const ie = !!(ie_upto10 || ie_11up || ie_edge);
   const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
   const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
   const webkit = "webkitFontSmoothing" in doc.documentElement.style;
   const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
   const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
   var browser$1 = {
       mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
       windows: /*@__PURE__*//Win/.test(nav.platform),
       linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
       ie,
       ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
       gecko,
       gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
       chrome: !!chrome,
       chrome_version: chrome ? +chrome[1] : 0,
       ios,
       android: /*@__PURE__*//Android\b/.test(nav.userAgent),
       webkit,
       safari,
       webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
       tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
   };

   const MaxJoinLen = 256;
   class TextView extends ContentView {
       constructor(text) {
           super();
           this.text = text;
       }
       get length() { return this.text.length; }
       createDOM(textDOM) {
           this.setDOM(textDOM || document.createTextNode(this.text));
       }
       sync(track) {
           if (!this.dom)
               this.createDOM();
           if (this.dom.nodeValue != this.text) {
               if (track && track.node == this.dom)
                   track.written = true;
               this.dom.nodeValue = this.text;
           }
       }
       reuseDOM(dom) {
           if (dom.nodeType == 3)
               this.createDOM(dom);
       }
       merge(from, to, source) {
           if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))
               return false;
           this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
           this.markDirty();
           return true;
       }
       split(from) {
           let result = new TextView(this.text.slice(from));
           this.text = this.text.slice(0, from);
           this.markDirty();
           return result;
       }
       localPosFromDOM(node, offset) {
           return node == this.dom ? offset : offset ? this.text.length : 0;
       }
       domAtPos(pos) { return new DOMPos(this.dom, pos); }
       domBoundsAround(_from, _to, offset) {
           return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
       }
       coordsAt(pos, side) {
           return textCoords(this.dom, pos, side);
       }
   }
   class MarkView extends ContentView {
       constructor(mark, children = [], length = 0) {
           super();
           this.mark = mark;
           this.children = children;
           this.length = length;
           for (let ch of children)
               ch.setParent(this);
       }
       setAttrs(dom) {
           clearAttributes(dom);
           if (this.mark.class)
               dom.className = this.mark.class;
           if (this.mark.attrs)
               for (let name in this.mark.attrs)
                   dom.setAttribute(name, this.mark.attrs[name]);
           return dom;
       }
       reuseDOM(node) {
           if (node.nodeName == this.mark.tagName.toUpperCase()) {
               this.setDOM(node);
               this.dirty |= 4 /* Attrs */ | 2 /* Node */;
           }
       }
       sync(track) {
           if (!this.dom)
               this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
           else if (this.dirty & 4 /* Attrs */)
               this.setAttrs(this.dom);
           super.sync(track);
       }
       merge(from, to, source, _hasStart, openStart, openEnd) {
           if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
               (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
               return false;
           mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
           this.markDirty();
           return true;
       }
       split(from) {
           let result = [], off = 0, detachFrom = -1, i = 0;
           for (let elt of this.children) {
               let end = off + elt.length;
               if (end > from)
                   result.push(off < from ? elt.split(from - off) : elt);
               if (detachFrom < 0 && off >= from)
                   detachFrom = i;
               off = end;
               i++;
           }
           let length = this.length - from;
           this.length = from;
           if (detachFrom > -1) {
               this.children.length = detachFrom;
               this.markDirty();
           }
           return new MarkView(this.mark, result, length);
       }
       domAtPos(pos) {
           return inlineDOMAtPos(this.dom, this.children, pos);
       }
       coordsAt(pos, side) {
           return coordsInChildren(this, pos, side);
       }
   }
   function textCoords(text, pos, side) {
       let length = text.nodeValue.length;
       if (pos > length)
           pos = length;
       let from = pos, to = pos, flatten = 0;
       if (pos == 0 && side < 0 || pos == length && side >= 0) {
           if (!(browser$1.chrome || browser$1.gecko)) { // These browsers reliably return valid rectangles for empty ranges
               if (pos) {
                   from--;
                   flatten = 1;
               } // FIXME this is wrong in RTL text
               else if (to < length) {
                   to++;
                   flatten = -1;
               }
           }
       }
       else {
           if (side < 0)
               from--;
           else if (to < length)
               to++;
       }
       let rects = textRange(text, from, to).getClientRects();
       if (!rects.length)
           return Rect0;
       let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
       if (browser$1.safari && !flatten && rect.width == 0)
           rect = Array.prototype.find.call(rects, r => r.width) || rect;
       return flatten ? flattenRect(rect, flatten < 0) : rect || null;
   }
   // Also used for collapsed ranges that don't have a placeholder widget!
   class WidgetView extends ContentView {
       constructor(widget, length, side) {
           super();
           this.widget = widget;
           this.length = length;
           this.side = side;
           this.prevWidget = null;
       }
       static create(widget, length, side) {
           return new (widget.customView || WidgetView)(widget, length, side);
       }
       split(from) {
           let result = WidgetView.create(this.widget, this.length - from, this.side);
           this.length -= from;
           return result;
       }
       sync() {
           if (!this.dom || !this.widget.updateDOM(this.dom)) {
               if (this.dom && this.prevWidget)
                   this.prevWidget.destroy(this.dom);
               this.prevWidget = null;
               this.setDOM(this.widget.toDOM(this.editorView));
               this.dom.contentEditable = "false";
           }
       }
       getSide() { return this.side; }
       merge(from, to, source, hasStart, openStart, openEnd) {
           if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
               from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
               return false;
           this.length = from + (source ? source.length : 0) + (this.length - to);
           return true;
       }
       become(other) {
           if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
               if (this.widget.constructor == other.widget.constructor) {
                   if (!this.widget.eq(other.widget))
                       this.markDirty(true);
                   if (this.dom && !this.prevWidget)
                       this.prevWidget = this.widget;
                   this.widget = other.widget;
                   return true;
               }
           }
           return false;
       }
       ignoreMutation() { return true; }
       ignoreEvent(event) { return this.widget.ignoreEvent(event); }
       get overrideDOMText() {
           if (this.length == 0)
               return Text.empty;
           let top = this;
           while (top.parent)
               top = top.parent;
           let view = top.editorView, text = view && view.state.doc, start = this.posAtStart;
           return text ? text.slice(start, start + this.length) : Text.empty;
       }
       domAtPos(pos) {
           return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
       }
       domBoundsAround() { return null; }
       coordsAt(pos, side) {
           let rects = this.dom.getClientRects(), rect = null;
           if (!rects.length)
               return Rect0;
           for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {
               rect = rects[i];
               if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                   break;
           }
           return (pos == 0 && side > 0 || pos == this.length && side <= 0) ? rect : flattenRect(rect, pos == 0);
       }
       get isEditable() { return false; }
       destroy() {
           super.destroy();
           if (this.dom)
               this.widget.destroy(this.dom);
       }
   }
   class CompositionView extends WidgetView {
       domAtPos(pos) {
           let { topView, text } = this.widget;
           if (!topView)
               return new DOMPos(text, Math.min(pos, text.nodeValue.length));
           return scanCompositionTree(pos, 0, topView, text, (v, p) => v.domAtPos(p), p => new DOMPos(text, Math.min(p, text.nodeValue.length)));
       }
       sync() { this.setDOM(this.widget.toDOM()); }
       localPosFromDOM(node, offset) {
           let { topView, text } = this.widget;
           if (!topView)
               return Math.min(offset, this.length);
           return posFromDOMInCompositionTree(node, offset, topView, text);
       }
       ignoreMutation() { return false; }
       get overrideDOMText() { return null; }
       coordsAt(pos, side) {
           let { topView, text } = this.widget;
           if (!topView)
               return textCoords(text, pos, side);
           return scanCompositionTree(pos, side, topView, text, (v, pos, side) => v.coordsAt(pos, side), (pos, side) => textCoords(text, pos, side));
       }
       destroy() {
           var _a;
           super.destroy();
           (_a = this.widget.topView) === null || _a === void 0 ? void 0 : _a.destroy();
       }
       get isEditable() { return true; }
   }
   // Uses the old structure of a chunk of content view frozen for
   // composition to try and find a reasonable DOM location for the given
   // offset.
   function scanCompositionTree(pos, side, view, text, enterView, fromText) {
       if (view instanceof MarkView) {
           for (let child of view.children) {
               let hasComp = contains(child.dom, text);
               let len = hasComp ? text.nodeValue.length : child.length;
               if (pos < len || pos == len && child.getSide() <= 0)
                   return hasComp ? scanCompositionTree(pos, side, child, text, enterView, fromText) : enterView(child, pos, side);
               pos -= len;
           }
           return enterView(view, view.length, -1);
       }
       else if (view.dom == text) {
           return fromText(pos, side);
       }
       else {
           return enterView(view, pos, side);
       }
   }
   function posFromDOMInCompositionTree(node, offset, view, text) {
       if (view instanceof MarkView) {
           for (let child of view.children) {
               let pos = 0, hasComp = contains(child.dom, text);
               if (contains(child.dom, node))
                   return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, child, text) : child.localPosFromDOM(node, offset));
               pos += hasComp ? text.nodeValue.length : child.length;
           }
       }
       else if (view.dom == text) {
           return Math.min(offset, text.nodeValue.length);
       }
       return view.localPosFromDOM(node, offset);
   }
   // These are drawn around uneditable widgets to avoid a number of
   // browser bugs that show up when the cursor is directly next to
   // uneditable inline content.
   class WidgetBufferView extends ContentView {
       constructor(side) {
           super();
           this.side = side;
       }
       get length() { return 0; }
       merge() { return false; }
       become(other) {
           return other instanceof WidgetBufferView && other.side == this.side;
       }
       split() { return new WidgetBufferView(this.side); }
       sync() {
           if (!this.dom) {
               let dom = document.createElement("img");
               dom.className = "cm-widgetBuffer";
               dom.setAttribute("aria-hidden", "true");
               this.setDOM(dom);
           }
       }
       getSide() { return this.side; }
       domAtPos(pos) { return DOMPos.before(this.dom); }
       localPosFromDOM() { return 0; }
       domBoundsAround() { return null; }
       coordsAt(pos) {
           let imgRect = this.dom.getBoundingClientRect();
           // Since the <img> height doesn't correspond to text height, try
           // to borrow the height from some sibling node.
           let siblingRect = inlineSiblingRect(this, this.side > 0 ? -1 : 1);
           return siblingRect && siblingRect.top < imgRect.bottom && siblingRect.bottom > imgRect.top
               ? { left: imgRect.left, right: imgRect.right, top: siblingRect.top, bottom: siblingRect.bottom } : imgRect;
       }
       get overrideDOMText() {
           return Text.empty;
       }
   }
   TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
   function inlineSiblingRect(view, side) {
       let parent = view.parent, index = parent ? parent.children.indexOf(view) : -1;
       while (parent && index >= 0) {
           if (side < 0 ? index > 0 : index < parent.children.length) {
               let next = parent.children[index + side];
               if (next instanceof TextView) {
                   let nextRect = next.coordsAt(side < 0 ? next.length : 0, side);
                   if (nextRect)
                       return nextRect;
               }
               index += side;
           }
           else if (parent instanceof MarkView && parent.parent) {
               index = parent.parent.children.indexOf(parent) + (side < 0 ? 0 : 1);
               parent = parent.parent;
           }
           else {
               let last = parent.dom.lastChild;
               if (last && last.nodeName == "BR")
                   return last.getClientRects()[0];
               break;
           }
       }
       return undefined;
   }
   function inlineDOMAtPos(dom, children, pos) {
       let i = 0;
       for (let off = 0; i < children.length; i++) {
           let child = children[i], end = off + child.length;
           if (end == off && child.getSide() <= 0)
               continue;
           if (pos > off && pos < end && child.dom.parentNode == dom)
               return child.domAtPos(pos - off);
           if (pos <= off)
               break;
           off = end;
       }
       for (; i > 0; i--) {
           let before = children[i - 1].dom;
           if (before.parentNode == dom)
               return DOMPos.after(before);
       }
       return new DOMPos(dom, 0);
   }
   // Assumes `view`, if a mark view, has precisely 1 child.
   function joinInlineInto(parent, view, open) {
       let last, { children } = parent;
       if (open > 0 && view instanceof MarkView && children.length &&
           (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
           joinInlineInto(last, view.children[0], open - 1);
       }
       else {
           children.push(view);
           view.setParent(parent);
       }
       parent.length += view.length;
   }
   function coordsInChildren(view, pos, side) {
       for (let off = 0, i = 0; i < view.children.length; i++) {
           let child = view.children[i], end = off + child.length, next;
           if ((side <= 0 || end == view.length || child.getSide() > 0 ? end >= pos : end > pos) &&
               (pos < end || i + 1 == view.children.length || (next = view.children[i + 1]).length || next.getSide() > 0)) {
               let flatten = 0;
               if (end == off) {
                   if (child.getSide() <= 0)
                       continue;
                   flatten = side = -child.getSide();
               }
               let rect = child.coordsAt(Math.max(0, pos - off), side);
               return flatten && rect ? flattenRect(rect, side < 0) : rect;
           }
           off = end;
       }
       let last = view.dom.lastChild;
       if (!last)
           return view.dom.getBoundingClientRect();
       let rects = clientRectsFor(last);
       return rects[rects.length - 1] || null;
   }

   function combineAttrs(source, target) {
       for (let name in source) {
           if (name == "class" && target.class)
               target.class += " " + source.class;
           else if (name == "style" && target.style)
               target.style += ";" + source.style;
           else
               target[name] = source[name];
       }
       return target;
   }
   function attrsEq(a, b) {
       if (a == b)
           return true;
       if (!a || !b)
           return false;
       let keysA = Object.keys(a), keysB = Object.keys(b);
       if (keysA.length != keysB.length)
           return false;
       for (let key of keysA) {
           if (keysB.indexOf(key) == -1 || a[key] !== b[key])
               return false;
       }
       return true;
   }
   function updateAttrs(dom, prev, attrs) {
       let changed = null;
       if (prev)
           for (let name in prev)
               if (!(attrs && name in attrs))
                   dom.removeAttribute(changed = name);
       if (attrs)
           for (let name in attrs)
               if (!(prev && prev[name] == attrs[name]))
                   dom.setAttribute(changed = name, attrs[name]);
       return !!changed;
   }

   /**
   Widgets added to the content are described by subclasses of this
   class. Using a description object like that makes it possible to
   delay creating of the DOM structure for a widget until it is
   needed, and to avoid redrawing widgets even if the decorations
   that define them are recreated.
   */
   class WidgetType {
       /**
       Compare this instance to another instance of the same type.
       (TypeScript can't express this, but only instances of the same
       specific class will be passed to this method.) This is used to
       avoid redrawing widgets when they are replaced by a new
       decoration of the same type. The default implementation just
       returns `false`, which will cause new instances of the widget to
       always be redrawn.
       */
       eq(widget) { return false; }
       /**
       Update a DOM element created by a widget of the same type (but
       different, non-`eq` content) to reflect this widget. May return
       true to indicate that it could update, false to indicate it
       couldn't (in which case the widget will be redrawn). The default
       implementation just returns false.
       */
       updateDOM(dom) { return false; }
       /**
       @internal
       */
       compare(other) {
           return this == other || this.constructor == other.constructor && this.eq(other);
       }
       /**
       The estimated height this widget will have, to be used when
       estimating the height of content that hasn't been drawn. May
       return -1 to indicate you don't know. The default implementation
       returns -1.
       */
       get estimatedHeight() { return -1; }
       /**
       Can be used to configure which kinds of events inside the widget
       should be ignored by the editor. The default is to ignore all
       events.
       */
       ignoreEvent(event) { return true; }
       /**
       @internal
       */
       get customView() { return null; }
       /**
       This is called when the an instance of the widget is removed
       from the editor view.
       */
       destroy(dom) { }
   }
   /**
   The different types of blocks that can occur in an editor view.
   */
   var BlockType = /*@__PURE__*/(function (BlockType) {
       /**
       A line of text.
       */
       BlockType[BlockType["Text"] = 0] = "Text";
       /**
       A block widget associated with the position after it.
       */
       BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
       /**
       A block widget associated with the position before it.
       */
       BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
       /**
       A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
       */
       BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
   return BlockType})(BlockType || (BlockType = {}));
   /**
   A decoration provides information on how to draw or style a piece
   of content. You'll usually use it wrapped in a
   [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
   @nonabstract
   */
   class Decoration extends RangeValue {
       constructor(
       /**
       @internal
       */
       startSide, 
       /**
       @internal
       */
       endSide, 
       /**
       @internal
       */
       widget, 
       /**
       The config object used to create this decoration. You can
       include additional properties in there to store metadata about
       your decoration.
       */
       spec) {
           super();
           this.startSide = startSide;
           this.endSide = endSide;
           this.widget = widget;
           this.spec = spec;
       }
       /**
       @internal
       */
       get heightRelevant() { return false; }
       /**
       Create a mark decoration, which influences the styling of the
       content in its range. Nested mark decorations will cause nested
       DOM elements to be created. Nesting order is determined by
       precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
       the higher-precedence decorations creating the inner DOM nodes.
       Such elements are split on line boundaries and on the boundaries
       of lower-precedence decorations.
       */
       static mark(spec) {
           return new MarkDecoration(spec);
       }
       /**
       Create a widget decoration, which displays a DOM element at the
       given position.
       */
       static widget(spec) {
           let side = spec.side || 0, block = !!spec.block;
           side += block ? (side > 0 ? 300000000 /* BlockAfter */ : -400000000 /* BlockBefore */) : (side > 0 ? 100000000 /* InlineAfter */ : -100000000 /* InlineBefore */);
           return new PointDecoration(spec, side, side, block, spec.widget || null, false);
       }
       /**
       Create a replace decoration which replaces the given range with
       a widget, or simply hides it.
       */
       static replace(spec) {
           let block = !!spec.block, startSide, endSide;
           if (spec.isBlockGap) {
               startSide = -500000000 /* GapStart */;
               endSide = 400000000 /* GapEnd */;
           }
           else {
               let { start, end } = getInclusive(spec, block);
               startSide = (start ? (block ? -300000000 /* BlockIncStart */ : -1 /* InlineIncStart */) : 500000000 /* NonIncStart */) - 1;
               endSide = (end ? (block ? 200000000 /* BlockIncEnd */ : 1 /* InlineIncEnd */) : -600000000 /* NonIncEnd */) + 1;
           }
           return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
       }
       /**
       Create a line decoration, which can add DOM attributes to the
       line starting at the given position.
       */
       static line(spec) {
           return new LineDecoration(spec);
       }
       /**
       Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
       decorated range or ranges. If the ranges aren't already sorted,
       pass `true` for `sort` to make the library sort them for you.
       */
       static set(of, sort = false) {
           return RangeSet.of(of, sort);
       }
       /**
       @internal
       */
       hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
   }
   /**
   The empty set of decorations.
   */
   Decoration.none = RangeSet.empty;
   class MarkDecoration extends Decoration {
       constructor(spec) {
           let { start, end } = getInclusive(spec);
           super(start ? -1 /* InlineIncStart */ : 500000000 /* NonIncStart */, end ? 1 /* InlineIncEnd */ : -600000000 /* NonIncEnd */, null, spec);
           this.tagName = spec.tagName || "span";
           this.class = spec.class || "";
           this.attrs = spec.attributes || null;
       }
       eq(other) {
           return this == other ||
               other instanceof MarkDecoration &&
                   this.tagName == other.tagName &&
                   this.class == other.class &&
                   attrsEq(this.attrs, other.attrs);
       }
       range(from, to = from) {
           if (from >= to)
               throw new RangeError("Mark decorations may not be empty");
           return super.range(from, to);
       }
   }
   MarkDecoration.prototype.point = false;
   class LineDecoration extends Decoration {
       constructor(spec) {
           super(-200000000 /* Line */, -200000000 /* Line */, null, spec);
       }
       eq(other) {
           return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
       }
       range(from, to = from) {
           if (to != from)
               throw new RangeError("Line decoration ranges must be zero-length");
           return super.range(from, to);
       }
   }
   LineDecoration.prototype.mapMode = MapMode.TrackBefore;
   LineDecoration.prototype.point = true;
   class PointDecoration extends Decoration {
       constructor(spec, startSide, endSide, block, widget, isReplace) {
           super(startSide, endSide, widget, spec);
           this.block = block;
           this.isReplace = isReplace;
           this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
       }
       // Only relevant when this.block == true
       get type() {
           return this.startSide < this.endSide ? BlockType.WidgetRange
               : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
       }
       get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }
       eq(other) {
           return other instanceof PointDecoration &&
               widgetsEq(this.widget, other.widget) &&
               this.block == other.block &&
               this.startSide == other.startSide && this.endSide == other.endSide;
       }
       range(from, to = from) {
           if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
               throw new RangeError("Invalid range for replacement decoration");
           if (!this.isReplace && to != from)
               throw new RangeError("Widget decorations can only have zero-length ranges");
           return super.range(from, to);
       }
   }
   PointDecoration.prototype.point = true;
   function getInclusive(spec, block = false) {
       let { inclusiveStart: start, inclusiveEnd: end } = spec;
       if (start == null)
           start = spec.inclusive;
       if (end == null)
           end = spec.inclusive;
       return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
   }
   function widgetsEq(a, b) {
       return a == b || !!(a && b && a.compare(b));
   }
   function addRange(from, to, ranges, margin = 0) {
       let last = ranges.length - 1;
       if (last >= 0 && ranges[last] + margin >= from)
           ranges[last] = Math.max(ranges[last], to);
       else
           ranges.push(from, to);
   }

   class LineView extends ContentView {
       constructor() {
           super(...arguments);
           this.children = [];
           this.length = 0;
           this.prevAttrs = undefined;
           this.attrs = null;
           this.breakAfter = 0;
       }
       // Consumes source
       merge(from, to, source, hasStart, openStart, openEnd) {
           if (source) {
               if (!(source instanceof LineView))
                   return false;
               if (!this.dom)
                   source.transferDOM(this); // Reuse source.dom when appropriate
           }
           if (hasStart)
               this.setDeco(source ? source.attrs : null);
           mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
           return true;
       }
       split(at) {
           let end = new LineView;
           end.breakAfter = this.breakAfter;
           if (this.length == 0)
               return end;
           let { i, off } = this.childPos(at);
           if (off) {
               end.append(this.children[i].split(off), 0);
               this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
               i++;
           }
           for (let j = i; j < this.children.length; j++)
               end.append(this.children[j], 0);
           while (i > 0 && this.children[i - 1].length == 0)
               this.children[--i].destroy();
           this.children.length = i;
           this.markDirty();
           this.length = at;
           return end;
       }
       transferDOM(other) {
           if (!this.dom)
               return;
           this.markDirty();
           other.setDOM(this.dom);
           other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
           this.prevAttrs = undefined;
           this.dom = null;
       }
       setDeco(attrs) {
           if (!attrsEq(this.attrs, attrs)) {
               if (this.dom) {
                   this.prevAttrs = this.attrs;
                   this.markDirty();
               }
               this.attrs = attrs;
           }
       }
       append(child, openStart) {
           joinInlineInto(this, child, openStart);
       }
       // Only called when building a line view in ContentBuilder
       addLineDeco(deco) {
           let attrs = deco.spec.attributes, cls = deco.spec.class;
           if (attrs)
               this.attrs = combineAttrs(attrs, this.attrs || {});
           if (cls)
               this.attrs = combineAttrs({ class: cls }, this.attrs || {});
       }
       domAtPos(pos) {
           return inlineDOMAtPos(this.dom, this.children, pos);
       }
       reuseDOM(node) {
           if (node.nodeName == "DIV") {
               this.setDOM(node);
               this.dirty |= 4 /* Attrs */ | 2 /* Node */;
           }
       }
       sync(track) {
           var _a;
           if (!this.dom) {
               this.setDOM(document.createElement("div"));
               this.dom.className = "cm-line";
               this.prevAttrs = this.attrs ? null : undefined;
           }
           else if (this.dirty & 4 /* Attrs */) {
               clearAttributes(this.dom);
               this.dom.className = "cm-line";
               this.prevAttrs = this.attrs ? null : undefined;
           }
           if (this.prevAttrs !== undefined) {
               updateAttrs(this.dom, this.prevAttrs, this.attrs);
               this.dom.classList.add("cm-line");
               this.prevAttrs = undefined;
           }
           super.sync(track);
           let last = this.dom.lastChild;
           while (last && ContentView.get(last) instanceof MarkView)
               last = last.lastChild;
           if (!last || !this.length ||
               last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                   (!browser$1.ios || !this.children.some(ch => ch instanceof TextView))) {
               let hack = document.createElement("BR");
               hack.cmIgnore = true;
               this.dom.appendChild(hack);
           }
       }
       measureTextSize() {
           if (this.children.length == 0 || this.length > 20)
               return null;
           let totalWidth = 0;
           for (let child of this.children) {
               if (!(child instanceof TextView))
                   return null;
               let rects = clientRectsFor(child.dom);
               if (rects.length != 1)
                   return null;
               totalWidth += rects[0].width;
           }
           return { lineHeight: this.dom.getBoundingClientRect().height,
               charWidth: totalWidth / this.length };
       }
       coordsAt(pos, side) {
           return coordsInChildren(this, pos, side);
       }
       become(_other) { return false; }
       get type() { return BlockType.Text; }
       static find(docView, pos) {
           for (let i = 0, off = 0; i < docView.children.length; i++) {
               let block = docView.children[i], end = off + block.length;
               if (end >= pos) {
                   if (block instanceof LineView)
                       return block;
                   if (end > pos)
                       break;
               }
               off = end + block.breakAfter;
           }
           return null;
       }
   }
   class BlockWidgetView extends ContentView {
       constructor(widget, length, type) {
           super();
           this.widget = widget;
           this.length = length;
           this.type = type;
           this.breakAfter = 0;
           this.prevWidget = null;
       }
       merge(from, to, source, _takeDeco, openStart, openEnd) {
           if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
               from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
               return false;
           this.length = from + (source ? source.length : 0) + (this.length - to);
           return true;
       }
       domAtPos(pos) {
           return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
       }
       split(at) {
           let len = this.length - at;
           this.length = at;
           let end = new BlockWidgetView(this.widget, len, this.type);
           end.breakAfter = this.breakAfter;
           return end;
       }
       get children() { return noChildren; }
       sync() {
           if (!this.dom || !this.widget.updateDOM(this.dom)) {
               if (this.dom && this.prevWidget)
                   this.prevWidget.destroy(this.dom);
               this.prevWidget = null;
               this.setDOM(this.widget.toDOM(this.editorView));
               this.dom.contentEditable = "false";
           }
       }
       get overrideDOMText() {
           return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
       }
       domBoundsAround() { return null; }
       become(other) {
           if (other instanceof BlockWidgetView && other.type == this.type &&
               other.widget.constructor == this.widget.constructor) {
               if (!other.widget.eq(this.widget))
                   this.markDirty(true);
               if (this.dom && !this.prevWidget)
                   this.prevWidget = this.widget;
               this.widget = other.widget;
               this.length = other.length;
               this.breakAfter = other.breakAfter;
               return true;
           }
           return false;
       }
       ignoreMutation() { return true; }
       ignoreEvent(event) { return this.widget.ignoreEvent(event); }
       destroy() {
           super.destroy();
           if (this.dom)
               this.widget.destroy(this.dom);
       }
   }

   class ContentBuilder {
       constructor(doc, pos, end, disallowBlockEffectsFor) {
           this.doc = doc;
           this.pos = pos;
           this.end = end;
           this.disallowBlockEffectsFor = disallowBlockEffectsFor;
           this.content = [];
           this.curLine = null;
           this.breakAtStart = 0;
           this.pendingBuffer = 0 /* No */;
           // Set to false directly after a widget that covers the position after it
           this.atCursorPos = true;
           this.openStart = -1;
           this.openEnd = -1;
           this.text = "";
           this.textOff = 0;
           this.cursor = doc.iter();
           this.skip = pos;
       }
       posCovered() {
           if (this.content.length == 0)
               return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
           let last = this.content[this.content.length - 1];
           return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
       }
       getLine() {
           if (!this.curLine) {
               this.content.push(this.curLine = new LineView);
               this.atCursorPos = true;
           }
           return this.curLine;
       }
       flushBuffer(active) {
           if (this.pendingBuffer) {
               this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
               this.pendingBuffer = 0 /* No */;
           }
       }
       addBlockWidget(view) {
           this.flushBuffer([]);
           this.curLine = null;
           this.content.push(view);
       }
       finish(openEnd) {
           if (!openEnd)
               this.flushBuffer([]);
           else
               this.pendingBuffer = 0 /* No */;
           if (!this.posCovered())
               this.getLine();
       }
       buildText(length, active, openStart) {
           while (length > 0) {
               if (this.textOff == this.text.length) {
                   let { value, lineBreak, done } = this.cursor.next(this.skip);
                   this.skip = 0;
                   if (done)
                       throw new Error("Ran out of text content when drawing inline views");
                   if (lineBreak) {
                       if (!this.posCovered())
                           this.getLine();
                       if (this.content.length)
                           this.content[this.content.length - 1].breakAfter = 1;
                       else
                           this.breakAtStart = 1;
                       this.flushBuffer([]);
                       this.curLine = null;
                       length--;
                       continue;
                   }
                   else {
                       this.text = value;
                       this.textOff = 0;
                   }
               }
               let take = Math.min(this.text.length - this.textOff, length, 512 /* Chunk */);
               this.flushBuffer(active.slice(0, openStart));
               this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
               this.atCursorPos = true;
               this.textOff += take;
               length -= take;
               openStart = 0;
           }
       }
       span(from, to, active, openStart) {
           this.buildText(to - from, active, openStart);
           this.pos = to;
           if (this.openStart < 0)
               this.openStart = openStart;
       }
       point(from, to, deco, active, openStart, index) {
           if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
               if (deco.block)
                   throw new RangeError("Block decorations may not be specified via plugins");
               if (to > this.doc.lineAt(this.pos).to)
                   throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
           }
           let len = to - from;
           if (deco instanceof PointDecoration) {
               if (deco.block) {
                   let { type } = deco;
                   if (type == BlockType.WidgetAfter && !this.posCovered())
                       this.getLine();
                   this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
               }
               else {
                   let view = WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide);
                   let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
                   let cursorAfter = !view.isEditable && (from < to || deco.startSide <= 0);
                   let line = this.getLine();
                   if (this.pendingBuffer == 2 /* IfCursor */ && !cursorBefore)
                       this.pendingBuffer = 0 /* No */;
                   this.flushBuffer(active);
                   if (cursorBefore) {
                       line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                       openStart = active.length + Math.max(0, openStart - active.length);
                   }
                   line.append(wrapMarks(view, active), openStart);
                   this.atCursorPos = cursorAfter;
                   this.pendingBuffer = !cursorAfter ? 0 /* No */ : from < to ? 1 /* Yes */ : 2 /* IfCursor */;
               }
           }
           else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
               this.getLine().addLineDeco(deco);
           }
           if (len) {
               // Advance the iterator past the replaced content
               if (this.textOff + len <= this.text.length) {
                   this.textOff += len;
               }
               else {
                   this.skip += len - (this.text.length - this.textOff);
                   this.text = "";
                   this.textOff = 0;
               }
               this.pos = to;
           }
           if (this.openStart < 0)
               this.openStart = openStart;
       }
       static build(text, from, to, decorations, dynamicDecorationMap) {
           let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
           builder.openEnd = RangeSet.spans(decorations, from, to, builder);
           if (builder.openStart < 0)
               builder.openStart = builder.openEnd;
           builder.finish(builder.openEnd);
           return builder;
       }
   }
   function wrapMarks(view, active) {
       for (let mark of active)
           view = new MarkView(mark, [view], view.length);
       return view;
   }
   class NullWidget extends WidgetType {
       constructor(tag) {
           super();
           this.tag = tag;
       }
       eq(other) { return other.tag == this.tag; }
       toDOM() { return document.createElement(this.tag); }
       updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
   }

   const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
   const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
   const mouseSelectionStyle = /*@__PURE__*/Facet.define();
   const exceptionSink = /*@__PURE__*/Facet.define();
   const updateListener = /*@__PURE__*/Facet.define();
   const inputHandler$1 = /*@__PURE__*/Facet.define();
   const perLineTextDirection = /*@__PURE__*/Facet.define({
       combine: values => values.some(x => x)
   });
   class ScrollTarget {
       constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5) {
           this.range = range;
           this.y = y;
           this.x = x;
           this.yMargin = yMargin;
           this.xMargin = xMargin;
       }
       map(changes) {
           return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
       }
   }
   const scrollIntoView$1 = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
   /**
   Log or report an unhandled exception in client code. Should
   probably only be used by extension code that allows client code to
   provide functions, and calls those functions in a context where an
   exception can't be propagated to calling code in a reasonable way
   (for example when in an event handler).

   Either calls a handler registered with
   [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
   `window.onerror`, if defined, or `console.error` (in which case
   it'll pass `context`, when given, as first argument).
   */
   function logException(state, exception, context) {
       let handler = state.facet(exceptionSink);
       if (handler.length)
           handler[0](exception);
       else if (window.onerror)
           window.onerror(String(exception), context, undefined, undefined, exception);
       else if (context)
           console.error(context + ":", exception);
       else
           console.error(exception);
   }
   const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
   let nextPluginID = 0;
   const viewPlugin = /*@__PURE__*/Facet.define();
   /**
   View plugins associate stateful values with a view. They can
   influence the way the content is drawn, and are notified of things
   that happen in the view.
   */
   class ViewPlugin {
       constructor(
       /**
       @internal
       */
       id, 
       /**
       @internal
       */
       create, 
       /**
       @internal
       */
       domEventHandlers, buildExtensions) {
           this.id = id;
           this.create = create;
           this.domEventHandlers = domEventHandlers;
           this.extension = buildExtensions(this);
       }
       /**
       Define a plugin from a constructor function that creates the
       plugin's value, given an editor view.
       */
       static define(create, spec) {
           const { eventHandlers, provide, decorations: deco } = spec || {};
           return new ViewPlugin(nextPluginID++, create, eventHandlers, plugin => {
               let ext = [viewPlugin.of(plugin)];
               if (deco)
                   ext.push(decorations.of(view => {
                       let pluginInst = view.plugin(plugin);
                       return pluginInst ? deco(pluginInst) : Decoration.none;
                   }));
               if (provide)
                   ext.push(provide(plugin));
               return ext;
           });
       }
       /**
       Create a plugin for a class whose constructor takes a single
       editor view as argument.
       */
       static fromClass(cls, spec) {
           return ViewPlugin.define(view => new cls(view), spec);
       }
   }
   class PluginInstance {
       constructor(spec) {
           this.spec = spec;
           // When starting an update, all plugins have this field set to the
           // update object, indicating they need to be updated. When finished
           // updating, it is set to `false`. Retrieving a plugin that needs to
           // be updated with `view.plugin` forces an eager update.
           this.mustUpdate = null;
           // This is null when the plugin is initially created, but
           // initialized on the first update.
           this.value = null;
       }
       update(view) {
           if (!this.value) {
               if (this.spec) {
                   try {
                       this.value = this.spec.create(view);
                   }
                   catch (e) {
                       logException(view.state, e, "CodeMirror plugin crashed");
                       this.deactivate();
                   }
               }
           }
           else if (this.mustUpdate) {
               let update = this.mustUpdate;
               this.mustUpdate = null;
               if (this.value.update) {
                   try {
                       this.value.update(update);
                   }
                   catch (e) {
                       logException(update.state, e, "CodeMirror plugin crashed");
                       if (this.value.destroy)
                           try {
                               this.value.destroy();
                           }
                           catch (_) { }
                       this.deactivate();
                   }
               }
           }
           return this;
       }
       destroy(view) {
           var _a;
           if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
               try {
                   this.value.destroy();
               }
               catch (e) {
                   logException(view.state, e, "CodeMirror plugin crashed");
               }
           }
       }
       deactivate() {
           this.spec = this.value = null;
       }
   }
   const editorAttributes = /*@__PURE__*/Facet.define();
   const contentAttributes = /*@__PURE__*/Facet.define();
   // Provide decorations
   const decorations = /*@__PURE__*/Facet.define();
   const atomicRanges = /*@__PURE__*/Facet.define();
   const scrollMargins = /*@__PURE__*/Facet.define();
   const styleModule = /*@__PURE__*/Facet.define();
   class ChangedRange {
       constructor(fromA, toA, fromB, toB) {
           this.fromA = fromA;
           this.toA = toA;
           this.fromB = fromB;
           this.toB = toB;
       }
       join(other) {
           return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
       }
       addToSet(set) {
           let i = set.length, me = this;
           for (; i > 0; i--) {
               let range = set[i - 1];
               if (range.fromA > me.toA)
                   continue;
               if (range.toA < me.fromA)
                   break;
               me = me.join(range);
               set.splice(i - 1, 1);
           }
           set.splice(i, 0, me);
           return set;
       }
       static extendWithRanges(diff, ranges) {
           if (ranges.length == 0)
               return diff;
           let result = [];
           for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
               let next = dI == diff.length ? null : diff[dI], off = posA - posB;
               let end = next ? next.fromB : 1e9;
               while (rI < ranges.length && ranges[rI] < end) {
                   let from = ranges[rI], to = ranges[rI + 1];
                   let fromB = Math.max(posB, from), toB = Math.min(end, to);
                   if (fromB <= toB)
                       new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                   if (to > end)
                       break;
                   else
                       rI += 2;
               }
               if (!next)
                   return result;
               new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
               posA = next.toA;
               posB = next.toB;
           }
       }
   }
   /**
   View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
   class, which describe what happened, whenever the view is updated.
   */
   class ViewUpdate {
       constructor(
       /**
       The editor view that the update is associated with.
       */
       view, 
       /**
       The new editor state.
       */
       state, 
       /**
       The transactions involved in the update. May be empty.
       */
       transactions) {
           this.view = view;
           this.state = state;
           this.transactions = transactions;
           /**
           @internal
           */
           this.flags = 0;
           this.startState = view.state;
           this.changes = ChangeSet.empty(this.startState.doc.length);
           for (let tr of transactions)
               this.changes = this.changes.compose(tr.changes);
           let changedRanges = [];
           this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
           this.changedRanges = changedRanges;
           let focus = view.hasFocus;
           if (focus != view.inputState.notifiedFocused) {
               view.inputState.notifiedFocused = focus;
               this.flags |= 1 /* Focus */;
           }
       }
       /**
       @internal
       */
       static create(view, state, transactions) {
           return new ViewUpdate(view, state, transactions);
       }
       /**
       Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
       [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
       update.
       */
       get viewportChanged() {
           return (this.flags & 4 /* Viewport */) > 0;
       }
       /**
       Indicates whether the height of a block element in the editor
       changed in this update.
       */
       get heightChanged() {
           return (this.flags & 2 /* Height */) > 0;
       }
       /**
       Returns true when the document was modified or the size of the
       editor, or elements within the editor, changed.
       */
       get geometryChanged() {
           return this.docChanged || (this.flags & (8 /* Geometry */ | 2 /* Height */)) > 0;
       }
       /**
       True when this update indicates a focus change.
       */
       get focusChanged() {
           return (this.flags & 1 /* Focus */) > 0;
       }
       /**
       Whether the document changed in this update.
       */
       get docChanged() {
           return !this.changes.empty;
       }
       /**
       Whether the selection was explicitly set in this update.
       */
       get selectionSet() {
           return this.transactions.some(tr => tr.selection);
       }
       /**
       @internal
       */
       get empty() { return this.flags == 0 && this.transactions.length == 0; }
   }

   /**
   Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
   */
   var Direction = /*@__PURE__*/(function (Direction) {
       // (These are chosen to match the base levels, in bidi algorithm
       // terms, of spans in that direction.)
       /**
       Left-to-right.
       */
       Direction[Direction["LTR"] = 0] = "LTR";
       /**
       Right-to-left.
       */
       Direction[Direction["RTL"] = 1] = "RTL";
   return Direction})(Direction || (Direction = {}));
   const LTR = Direction.LTR, RTL = Direction.RTL;
   // Decode a string with each type encoded as log2(type)
   function dec(str) {
       let result = [];
       for (let i = 0; i < str.length; i++)
           result.push(1 << +str[i]);
       return result;
   }
   // Character types for codepoints 0 to 0xf8
   const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
   // Character types for codepoints 0x600 to 0x6f9
   const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
   const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
   // There's a lot more in
   // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
   // which are left out to keep code size down.
   for (let p of ["()", "[]", "{}"]) {
       let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
       Brackets[l] = r;
       Brackets[r] = -l;
   }
   function charType(ch) {
       return ch <= 0xf7 ? LowTypes[ch] :
           0x590 <= ch && ch <= 0x5f4 ? 2 /* R */ :
               0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                   0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */ :
                       0x2000 <= ch && ch <= 0x200b ? 256 /* NI */ :
                           ch == 0x200c ? 256 /* NI */ : 1 /* L */;
   }
   const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
   /**
   Represents a contiguous range of text that has a single direction
   (as in left-to-right or right-to-left).
   */
   class BidiSpan {
       /**
       @internal
       */
       constructor(
       /**
       The start of the span (relative to the start of the line).
       */
       from, 
       /**
       The end of the span.
       */
       to, 
       /**
       The ["bidi
       level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
       of the span (in this context, 0 means
       left-to-right, 1 means right-to-left, 2 means left-to-right
       number inside right-to-left text).
       */
       level) {
           this.from = from;
           this.to = to;
           this.level = level;
       }
       /**
       The direction of this span.
       */
       get dir() { return this.level % 2 ? RTL : LTR; }
       /**
       @internal
       */
       side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
       /**
       @internal
       */
       static find(order, index, level, assoc) {
           let maybe = -1;
           for (let i = 0; i < order.length; i++) {
               let span = order[i];
               if (span.from <= index && span.to >= index) {
                   if (span.level == level)
                       return i;
                   // When multiple spans match, if assoc != 0, take the one that
                   // covers that side, otherwise take the one with the minimum
                   // level.
                   if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                       maybe = i;
               }
           }
           if (maybe < 0)
               throw new RangeError("Index out of range");
           return maybe;
       }
   }
   // Reused array of character types
   const types$2 = [];
   function computeOrder(line, direction) {
       let len = line.length, outerType = direction == LTR ? 1 /* L */ : 2 /* R */, oppositeType = direction == LTR ? 2 /* R */ : 1 /* L */;
       if (!line || outerType == 1 /* L */ && !BidiRE.test(line))
           return trivialOrder(len);
       // W1. Examine each non-spacing mark (NSM) in the level run, and
       // change the type of the NSM to the type of the previous
       // character. If the NSM is at the start of the level run, it will
       // get the type of sor.
       // W2. Search backwards from each instance of a European number
       // until the first strong type (R, L, AL, or sor) is found. If an
       // AL is found, change the type of the European number to Arabic
       // number.
       // W3. Change all ALs to R.
       // (Left after this: L, R, EN, AN, ET, CS, NI)
       for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
           let type = charType(line.charCodeAt(i));
           if (type == 512 /* NSM */)
               type = prev;
           else if (type == 8 /* EN */ && prevStrong == 4 /* AL */)
               type = 16 /* AN */;
           types$2[i] = type == 4 /* AL */ ? 2 /* R */ : type;
           if (type & 7 /* Strong */)
               prevStrong = type;
           prev = type;
       }
       // W5. A sequence of European terminators adjacent to European
       // numbers changes to all European numbers.
       // W6. Otherwise, separators and terminators change to Other
       // Neutral.
       // W7. Search backwards from each instance of a European number
       // until the first strong type (R, L, or sor) is found. If an L is
       // found, then change the type of the European number to L.
       // (Left after this: L, R, EN+AN, NI)
       for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
           let type = types$2[i];
           if (type == 128 /* CS */) {
               if (i < len - 1 && prev == types$2[i + 1] && (prev & 24 /* Num */))
                   type = types$2[i] = prev;
               else
                   types$2[i] = 256 /* NI */;
           }
           else if (type == 64 /* ET */) {
               let end = i + 1;
               while (end < len && types$2[end] == 64 /* ET */)
                   end++;
               let replace = (i && prev == 8 /* EN */) || (end < len && types$2[end] == 8 /* EN */) ? (prevStrong == 1 /* L */ ? 1 /* L */ : 8 /* EN */) : 256 /* NI */;
               for (let j = i; j < end; j++)
                   types$2[j] = replace;
               i = end - 1;
           }
           else if (type == 8 /* EN */ && prevStrong == 1 /* L */) {
               types$2[i] = 1 /* L */;
           }
           prev = type;
           if (type & 7 /* Strong */)
               prevStrong = type;
       }
       // N0. Process bracket pairs in an isolating run sequence
       // sequentially in the logical order of the text positions of the
       // opening paired brackets using the logic given below. Within this
       // scope, bidirectional types EN and AN are treated as R.
       for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {
           // Keeps [startIndex, type, strongSeen] triples for each open
           // bracket on BracketStack.
           if (br = Brackets[ch = line.charCodeAt(i)]) {
               if (br < 0) { // Closing bracket
                   for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                       if (BracketStack[sJ + 1] == -br) {
                           let flags = BracketStack[sJ + 2];
                           let type = (flags & 2 /* EmbedInside */) ? outerType :
                               !(flags & 4 /* OppositeInside */) ? 0 :
                                   (flags & 1 /* OppositeBefore */) ? oppositeType : outerType;
                           if (type)
                               types$2[i] = types$2[BracketStack[sJ]] = type;
                           sI = sJ;
                           break;
                       }
                   }
               }
               else if (BracketStack.length == 189 /* MaxDepth */) {
                   break;
               }
               else {
                   BracketStack[sI++] = i;
                   BracketStack[sI++] = ch;
                   BracketStack[sI++] = context;
               }
           }
           else if ((type = types$2[i]) == 2 /* R */ || type == 1 /* L */) {
               let embed = type == outerType;
               context = embed ? 0 : 1 /* OppositeBefore */;
               for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                   let cur = BracketStack[sJ + 2];
                   if (cur & 2 /* EmbedInside */)
                       break;
                   if (embed) {
                       BracketStack[sJ + 2] |= 2 /* EmbedInside */;
                   }
                   else {
                       if (cur & 4 /* OppositeInside */)
                           break;
                       BracketStack[sJ + 2] |= 4 /* OppositeInside */;
                   }
               }
           }
       }
       // N1. A sequence of neutrals takes the direction of the
       // surrounding strong text if the text on both sides has the same
       // direction. European and Arabic numbers act as if they were R in
       // terms of their influence on neutrals. Start-of-level-run (sor)
       // and end-of-level-run (eor) are used at level run boundaries.
       // N2. Any remaining neutrals take the embedding direction.
       // (Left after this: L, R, EN+AN)
       for (let i = 0; i < len; i++) {
           if (types$2[i] == 256 /* NI */) {
               let end = i + 1;
               while (end < len && types$2[end] == 256 /* NI */)
                   end++;
               let beforeL = (i ? types$2[i - 1] : outerType) == 1 /* L */;
               let afterL = (end < len ? types$2[end] : outerType) == 1 /* L */;
               let replace = beforeL == afterL ? (beforeL ? 1 /* L */ : 2 /* R */) : outerType;
               for (let j = i; j < end; j++)
                   types$2[j] = replace;
               i = end - 1;
           }
       }
       // Here we depart from the documented algorithm, in order to avoid
       // building up an actual levels array. Since there are only three
       // levels (0, 1, 2) in an implementation that doesn't take
       // explicit embedding into account, we can build up the order on
       // the fly, without following the level-based algorithm.
       let order = [];
       if (outerType == 1 /* L */) {
           for (let i = 0; i < len;) {
               let start = i, rtl = types$2[i++] != 1 /* L */;
               while (i < len && rtl == (types$2[i] != 1 /* L */))
                   i++;
               if (rtl) {
                   for (let j = i; j > start;) {
                       let end = j, l = types$2[--j] != 2 /* R */;
                       while (j > start && l == (types$2[j - 1] != 2 /* R */))
                           j--;
                       order.push(new BidiSpan(j, end, l ? 2 : 1));
                   }
               }
               else {
                   order.push(new BidiSpan(start, i, 0));
               }
           }
       }
       else {
           for (let i = 0; i < len;) {
               let start = i, rtl = types$2[i++] == 2 /* R */;
               while (i < len && rtl == (types$2[i] == 2 /* R */))
                   i++;
               order.push(new BidiSpan(start, i, rtl ? 1 : 2));
           }
       }
       return order;
   }
   function trivialOrder(length) {
       return [new BidiSpan(0, length, 0)];
   }
   let movedOver = "";
   function moveVisually(line, order, dir, start, forward) {
       var _a;
       let startIndex = start.head - line.from, spanI = -1;
       if (startIndex == 0) {
           if (!forward || !line.length)
               return null;
           if (order[0].level != dir) {
               startIndex = order[0].side(false, dir);
               spanI = 0;
           }
       }
       else if (startIndex == line.length) {
           if (forward)
               return null;
           let last = order[order.length - 1];
           if (last.level != dir) {
               startIndex = last.side(true, dir);
               spanI = order.length - 1;
           }
       }
       if (spanI < 0)
           spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
       let span = order[spanI];
       // End of span. (But not end of line--that was checked for above.)
       if (startIndex == span.side(forward, dir)) {
           span = order[spanI += forward ? 1 : -1];
           startIndex = span.side(!forward, dir);
       }
       let indexForward = forward == (span.dir == dir);
       let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
       movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
       if (nextIndex != span.side(forward, dir))
           return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
       let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
       if (!nextSpan && span.level != dir)
           return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
       if (nextSpan && nextSpan.level < span.level)
           return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
       return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
   }

   const LineBreakPlaceholder = "\uffff";
   class DOMReader {
       constructor(points, state) {
           this.points = points;
           this.text = "";
           this.lineSeparator = state.facet(EditorState.lineSeparator);
       }
       append(text) {
           this.text += text;
       }
       lineBreak() {
           this.text += LineBreakPlaceholder;
       }
       readRange(start, end) {
           if (!start)
               return this;
           let parent = start.parentNode;
           for (let cur = start;;) {
               this.findPointBefore(parent, cur);
               this.readNode(cur);
               let next = cur.nextSibling;
               if (next == end)
                   break;
               let view = ContentView.get(cur), nextView = ContentView.get(next);
               if (view && nextView ? view.breakAfter :
                   (view ? view.breakAfter : isBlockElement(cur)) ||
                       (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore)))
                   this.lineBreak();
               cur = next;
           }
           this.findPointBefore(parent, end);
           return this;
       }
       readTextNode(node) {
           let text = node.nodeValue;
           for (let point of this.points)
               if (point.node == node)
                   point.pos = this.text.length + Math.min(point.offset, text.length);
           for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
               let nextBreak = -1, breakSize = 1, m;
               if (this.lineSeparator) {
                   nextBreak = text.indexOf(this.lineSeparator, off);
                   breakSize = this.lineSeparator.length;
               }
               else if (m = re.exec(text)) {
                   nextBreak = m.index;
                   breakSize = m[0].length;
               }
               this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
               if (nextBreak < 0)
                   break;
               this.lineBreak();
               if (breakSize > 1)
                   for (let point of this.points)
                       if (point.node == node && point.pos > this.text.length)
                           point.pos -= breakSize - 1;
               off = nextBreak + breakSize;
           }
       }
       readNode(node) {
           if (node.cmIgnore)
               return;
           let view = ContentView.get(node);
           let fromView = view && view.overrideDOMText;
           if (fromView != null) {
               this.findPointInside(node, fromView.length);
               for (let i = fromView.iter(); !i.next().done;) {
                   if (i.lineBreak)
                       this.lineBreak();
                   else
                       this.append(i.value);
               }
           }
           else if (node.nodeType == 3) {
               this.readTextNode(node);
           }
           else if (node.nodeName == "BR") {
               if (node.nextSibling)
                   this.lineBreak();
           }
           else if (node.nodeType == 1) {
               this.readRange(node.firstChild, null);
           }
       }
       findPointBefore(node, next) {
           for (let point of this.points)
               if (point.node == node && node.childNodes[point.offset] == next)
                   point.pos = this.text.length;
       }
       findPointInside(node, maxLen) {
           for (let point of this.points)
               if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                   point.pos = this.text.length + Math.min(maxLen, point.offset);
       }
   }
   function isBlockElement(node) {
       return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
   }
   class DOMPoint {
       constructor(node, offset) {
           this.node = node;
           this.offset = offset;
           this.pos = -1;
       }
   }

   class DocView extends ContentView {
       constructor(view) {
           super();
           this.view = view;
           this.compositionDeco = Decoration.none;
           this.decorations = [];
           this.dynamicDecorationMap = [];
           // Track a minimum width for the editor. When measuring sizes in
           // measureVisibleLineHeights, this is updated to point at the width
           // of a given element and its extent in the document. When a change
           // happens in that range, these are reset. That way, once we've seen
           // a line/element of a given length, we keep the editor wide enough
           // to fit at least that element, until it is changed, at which point
           // we forget it again.
           this.minWidth = 0;
           this.minWidthFrom = 0;
           this.minWidthTo = 0;
           // Track whether the DOM selection was set in a lossy way, so that
           // we don't mess it up when reading it back it
           this.impreciseAnchor = null;
           this.impreciseHead = null;
           this.forceSelection = false;
           // Used by the resize observer to ignore resizes that we caused
           // ourselves
           this.lastUpdate = Date.now();
           this.setDOM(view.contentDOM);
           this.children = [new LineView];
           this.children[0].setParent(this);
           this.updateDeco();
           this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);
       }
       get root() { return this.view.root; }
       get editorView() { return this.view; }
       get length() { return this.view.state.doc.length; }
       // Update the document view to a given state. scrollIntoView can be
       // used as a hint to compute a new viewport that includes that
       // position, if we know the editor is going to scroll that position
       // into view.
       update(update) {
           let changedRanges = update.changedRanges;
           if (this.minWidth > 0 && changedRanges.length) {
               if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                   this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
               }
               else {
                   this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                   this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
               }
           }
           if (this.view.inputState.composing < 0)
               this.compositionDeco = Decoration.none;
           else if (update.transactions.length || this.dirty)
               this.compositionDeco = computeCompositionDeco(this.view, update.changes);
           // When the DOM nodes around the selection are moved to another
           // parent, Chrome sometimes reports a different selection through
           // getSelection than the one that it actually shows to the user.
           // This forces a selection update when lines are joined to work
           // around that. Issue #54
           if ((browser$1.ie || browser$1.chrome) && !this.compositionDeco.size && update &&
               update.state.doc.lines != update.startState.doc.lines)
               this.forceSelection = true;
           let prevDeco = this.decorations, deco = this.updateDeco();
           let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
           changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
           if (this.dirty == 0 /* Not */ && changedRanges.length == 0) {
               return false;
           }
           else {
               this.updateInner(changedRanges, update.startState.doc.length);
               if (update.transactions.length)
                   this.lastUpdate = Date.now();
               return true;
           }
       }
       // Used by update and the constructor do perform the actual DOM
       // update
       updateInner(changes, oldLength) {
           this.view.viewState.mustMeasureContent = true;
           this.updateChildren(changes, oldLength);
           let { observer } = this.view;
           observer.ignore(() => {
               // Lock the height during redrawing, since Chrome sometimes
               // messes with the scroll position during DOM mutation (though
               // no relayout is triggered and I cannot imagine how it can
               // recompute the scroll position without a layout)
               this.dom.style.height = this.view.viewState.contentHeight + "px";
               this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
               // Chrome will sometimes, when DOM mutations occur directly
               // around the selection, get confused and report a different
               // selection from the one it displays (issue #218). This tries
               // to detect that situation.
               let track = browser$1.chrome || browser$1.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
               this.sync(track);
               this.dirty = 0 /* Not */;
               if (track && (track.written || observer.selectionRange.focusNode != track.node))
                   this.forceSelection = true;
               this.dom.style.height = "";
           });
           let gaps = [];
           if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
               for (let child of this.children)
                   if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                       gaps.push(child.dom);
           observer.updateGaps(gaps);
       }
       updateChildren(changes, oldLength) {
           let cursor = this.childCursor(oldLength);
           for (let i = changes.length - 1;; i--) {
               let next = i >= 0 ? changes[i] : null;
               if (!next)
                   break;
               let { fromA, toA, fromB, toB } = next;
               let { content, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);
               let { i: toI, off: toOff } = cursor.findPos(toA, 1);
               let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
               replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
           }
       }
       // Sync the DOM selection to this.state.selection
       updateSelection(mustRead = false, fromPointer = false) {
           if (mustRead || !this.view.observer.selectionRange.focusNode)
               this.view.observer.readSelectionRange();
           if (!(fromPointer || this.mayControlSelection()) ||
               browser$1.ios && this.view.inputState.rapidCompositionStart)
               return;
           let force = this.forceSelection;
           this.forceSelection = false;
           let main = this.view.state.selection.main;
           // FIXME need to handle the case where the selection falls inside a block range
           let anchor = this.domAtPos(main.anchor);
           let head = main.empty ? anchor : this.domAtPos(main.head);
           // Always reset on Firefox when next to an uneditable node to
           // avoid invisible cursor bugs (#111)
           if (browser$1.gecko && main.empty && betweenUneditable(anchor)) {
               let dummy = document.createTextNode("");
               this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
               anchor = head = new DOMPos(dummy, 0);
               force = true;
           }
           let domSel = this.view.observer.selectionRange;
           // If the selection is already here, or in an equivalent position, don't touch it
           if (force || !domSel.focusNode ||
               !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
               !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
               this.view.observer.ignore(() => {
                   // Chrome Android will hide the virtual keyboard when tapping
                   // inside an uneditable node, and not bring it back when we
                   // move the cursor to its proper position. This tries to
                   // restore the keyboard by cycling focus.
                   if (browser$1.android && browser$1.chrome && this.dom.contains(domSel.focusNode) &&
                       inUneditable(domSel.focusNode, this.dom)) {
                       this.dom.blur();
                       this.dom.focus({ preventScroll: true });
                   }
                   let rawSel = getSelection(this.root);
                   if (!rawSel) ;
                   else if (main.empty) {
                       // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                       if (browser$1.gecko) {
                           let nextTo = nextToUneditable(anchor.node, anchor.offset);
                           if (nextTo && nextTo != (1 /* Before */ | 2 /* After */)) {
                               let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* Before */ ? 1 : -1);
                               if (text)
                                   anchor = new DOMPos(text, nextTo == 1 /* Before */ ? 0 : text.nodeValue.length);
                           }
                       }
                       rawSel.collapse(anchor.node, anchor.offset);
                       if (main.bidiLevel != null && domSel.cursorBidiLevel != null)
                           domSel.cursorBidiLevel = main.bidiLevel;
                   }
                   else if (rawSel.extend) {
                       // Selection.extend can be used to create an 'inverted' selection
                       // (one where the focus is before the anchor), but not all
                       // browsers support it yet.
                       rawSel.collapse(anchor.node, anchor.offset);
                       rawSel.extend(head.node, head.offset);
                   }
                   else {
                       // Primitive (IE) way
                       let range = document.createRange();
                       if (main.anchor > main.head)
                           [anchor, head] = [head, anchor];
                       range.setEnd(head.node, head.offset);
                       range.setStart(anchor.node, anchor.offset);
                       rawSel.removeAllRanges();
                       rawSel.addRange(range);
                   }
               });
               this.view.observer.setSelectionRange(anchor, head);
           }
           this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
           this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
       }
       enforceCursorAssoc() {
           if (this.compositionDeco.size)
               return;
           let cursor = this.view.state.selection.main;
           let sel = getSelection(this.root);
           if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
               return;
           let line = LineView.find(this, cursor.head);
           if (!line)
               return;
           let lineStart = line.posAtStart;
           if (cursor.head == lineStart || cursor.head == lineStart + line.length)
               return;
           let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
           if (!before || !after || before.bottom > after.top)
               return;
           let dom = this.domAtPos(cursor.head + cursor.assoc);
           sel.collapse(dom.node, dom.offset);
           sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
       }
       mayControlSelection() {
           let active = this.root.activeElement;
           return active == this.dom ||
               hasSelection(this.dom, this.view.observer.selectionRange) && !(active && this.dom.contains(active));
       }
       nearest(dom) {
           for (let cur = dom; cur;) {
               let domView = ContentView.get(cur);
               if (domView && domView.rootView == this)
                   return domView;
               cur = cur.parentNode;
           }
           return null;
       }
       posFromDOM(node, offset) {
           let view = this.nearest(node);
           if (!view)
               throw new RangeError("Trying to find position for a DOM position outside of the document");
           return view.localPosFromDOM(node, offset) + view.posAtStart;
       }
       domAtPos(pos) {
           let { i, off } = this.childCursor().findPos(pos, -1);
           for (; i < this.children.length - 1;) {
               let child = this.children[i];
               if (off < child.length || child instanceof LineView)
                   break;
               i++;
               off = 0;
           }
           return this.children[i].domAtPos(off);
       }
       coordsAt(pos, side) {
           for (let off = this.length, i = this.children.length - 1;; i--) {
               let child = this.children[i], start = off - child.breakAfter - child.length;
               if (pos > start ||
                   (pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter &&
                       (!i || side == 2 || this.children[i - 1].breakAfter ||
                           (this.children[i - 1].type == BlockType.WidgetBefore && side > -2))))
                   return child.coordsAt(pos - start, side);
               off = start;
           }
       }
       measureVisibleLineHeights(viewport) {
           let result = [], { from, to } = viewport;
           let contentWidth = this.view.contentDOM.clientWidth;
           let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
           let widest = -1, ltr = this.view.textDirection == Direction.LTR;
           for (let pos = 0, i = 0; i < this.children.length; i++) {
               let child = this.children[i], end = pos + child.length;
               if (end > to)
                   break;
               if (pos >= from) {
                   let childRect = child.dom.getBoundingClientRect();
                   result.push(childRect.height);
                   if (isWider) {
                       let last = child.dom.lastChild;
                       let rects = last ? clientRectsFor(last) : [];
                       if (rects.length) {
                           let rect = rects[rects.length - 1];
                           let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                           if (width > widest) {
                               widest = width;
                               this.minWidth = contentWidth;
                               this.minWidthFrom = pos;
                               this.minWidthTo = end;
                           }
                       }
                   }
               }
               pos = end + child.breakAfter;
           }
           return result;
       }
       textDirectionAt(pos) {
           let { i } = this.childPos(pos, 1);
           return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
       }
       measureTextSize() {
           for (let child of this.children) {
               if (child instanceof LineView) {
                   let measure = child.measureTextSize();
                   if (measure)
                       return measure;
               }
           }
           // If no workable line exists, force a layout of a measurable element
           let dummy = document.createElement("div"), lineHeight, charWidth;
           dummy.className = "cm-line";
           dummy.style.width = "99999px";
           dummy.textContent = "abc def ghi jkl mno pqr stu";
           this.view.observer.ignore(() => {
               this.dom.appendChild(dummy);
               let rect = clientRectsFor(dummy.firstChild)[0];
               lineHeight = dummy.getBoundingClientRect().height;
               charWidth = rect ? rect.width / 27 : 7;
               dummy.remove();
           });
           return { lineHeight, charWidth };
       }
       childCursor(pos = this.length) {
           // Move back to start of last element when possible, so that
           // `ChildCursor.findPos` doesn't have to deal with the edge case
           // of being after the last element.
           let i = this.children.length;
           if (i)
               pos -= this.children[--i].length;
           return new ChildCursor(this.children, pos, i);
       }
       computeBlockGapDeco() {
           let deco = [], vs = this.view.viewState;
           for (let pos = 0, i = 0;; i++) {
               let next = i == vs.viewports.length ? null : vs.viewports[i];
               let end = next ? next.from - 1 : this.length;
               if (end > pos) {
                   let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
                   deco.push(Decoration.replace({
                       widget: new BlockGapWidget(height),
                       block: true,
                       inclusive: true,
                       isBlockGap: true,
                   }).range(pos, end));
               }
               if (!next)
                   break;
               pos = next.to + 1;
           }
           return Decoration.set(deco);
       }
       updateDeco() {
           let allDeco = this.view.state.facet(decorations).map((d, i) => {
               let dynamic = this.dynamicDecorationMap[i] = typeof d == "function";
               return dynamic ? d(this.view) : d;
           });
           for (let i = allDeco.length; i < allDeco.length + 3; i++)
               this.dynamicDecorationMap[i] = false;
           return this.decorations = [
               ...allDeco,
               this.compositionDeco,
               this.computeBlockGapDeco(),
               this.view.viewState.lineGapDeco
           ];
       }
       scrollIntoView(target) {
           let { range } = target;
           let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
           if (!rect)
               return;
           if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
               rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                   right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
           let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
           for (let margins of this.view.state.facet(scrollMargins).map(f => f(this.view)))
               if (margins) {
                   let { left, right, top, bottom } = margins;
                   if (left != null)
                       mLeft = Math.max(mLeft, left);
                   if (right != null)
                       mRight = Math.max(mRight, right);
                   if (top != null)
                       mTop = Math.max(mTop, top);
                   if (bottom != null)
                       mBottom = Math.max(mBottom, bottom);
               }
           let targetRect = {
               left: rect.left - mLeft, top: rect.top - mTop,
               right: rect.right + mRight, bottom: rect.bottom + mBottom
           };
           scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
       }
   }
   function betweenUneditable(pos) {
       return pos.node.nodeType == 1 && pos.node.firstChild &&
           (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
           (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
   }
   class BlockGapWidget extends WidgetType {
       constructor(height) {
           super();
           this.height = height;
       }
       toDOM() {
           let elt = document.createElement("div");
           this.updateDOM(elt);
           return elt;
       }
       eq(other) { return other.height == this.height; }
       updateDOM(elt) {
           elt.style.height = this.height + "px";
           return true;
       }
       get estimatedHeight() { return this.height; }
   }
   function compositionSurroundingNode(view) {
       let sel = view.observer.selectionRange;
       let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
       if (!textNode)
           return null;
       let cView = view.docView.nearest(textNode);
       if (!cView)
           return null;
       if (cView instanceof LineView) {
           let topNode = textNode;
           while (topNode.parentNode != cView.dom)
               topNode = topNode.parentNode;
           let prev = topNode.previousSibling;
           while (prev && !ContentView.get(prev))
               prev = prev.previousSibling;
           let pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
           return { from: pos, to: pos, node: topNode, text: textNode };
       }
       else {
           for (;;) {
               let { parent } = cView;
               if (!parent)
                   return null;
               if (parent instanceof LineView)
                   break;
               cView = parent;
           }
           let from = cView.posAtStart;
           return { from, to: from + cView.length, node: cView.dom, text: textNode };
       }
   }
   function computeCompositionDeco(view, changes) {
       let surrounding = compositionSurroundingNode(view);
       if (!surrounding)
           return Decoration.none;
       let { from, to, node, text: textNode } = surrounding;
       let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
       let { state } = view, text = node.nodeType == 3 ? node.nodeValue :
           new DOMReader([], state).readRange(node.firstChild, null).text;
       if (newTo - newFrom < text.length) {
           if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length), LineBreakPlaceholder) == text)
               newTo = newFrom + text.length;
           else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo, LineBreakPlaceholder) == text)
               newFrom = newTo - text.length;
           else
               return Decoration.none;
       }
       else if (state.doc.sliceString(newFrom, newTo, LineBreakPlaceholder) != text) {
           return Decoration.none;
       }
       let topView = ContentView.get(node);
       if (topView instanceof CompositionView)
           topView = topView.widget.topView;
       else if (topView)
           topView.parent = null;
       return Decoration.set(Decoration.replace({ widget: new CompositionWidget(node, textNode, topView), inclusive: true })
           .range(newFrom, newTo));
   }
   class CompositionWidget extends WidgetType {
       constructor(top, text, topView) {
           super();
           this.top = top;
           this.text = text;
           this.topView = topView;
       }
       eq(other) { return this.top == other.top && this.text == other.text; }
       toDOM() { return this.top; }
       ignoreEvent() { return false; }
       get customView() { return CompositionView; }
   }
   function nearbyTextNode(node, offset, side) {
       for (;;) {
           if (node.nodeType == 3)
               return node;
           if (node.nodeType == 1 && offset > 0 && side <= 0) {
               node = node.childNodes[offset - 1];
               offset = maxOffset(node);
           }
           else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
               node = node.childNodes[offset];
               offset = 0;
           }
           else {
               return null;
           }
       }
   }
   function nextToUneditable(node, offset) {
       if (node.nodeType != 1)
           return 0;
       return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* Before */ : 0) |
           (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* After */ : 0);
   }
   class DecorationComparator$1 {
       constructor() {
           this.changes = [];
       }
       compareRange(from, to) { addRange(from, to, this.changes); }
       comparePoint(from, to) { addRange(from, to, this.changes); }
   }
   function findChangedDeco(a, b, diff) {
       let comp = new DecorationComparator$1;
       RangeSet.compare(a, b, diff, comp);
       return comp.changes;
   }
   function inUneditable(node, inside) {
       for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
           if (cur.nodeType == 1 && cur.contentEditable == 'false') {
               return true;
           }
       }
       return false;
   }

   function groupAt(state, pos, bias = 1) {
       let categorize = state.charCategorizer(pos);
       let line = state.doc.lineAt(pos), linePos = pos - line.from;
       if (line.length == 0)
           return EditorSelection.cursor(pos);
       if (linePos == 0)
           bias = 1;
       else if (linePos == line.length)
           bias = -1;
       let from = linePos, to = linePos;
       if (bias < 0)
           from = findClusterBreak(line.text, linePos, false);
       else
           to = findClusterBreak(line.text, linePos);
       let cat = categorize(line.text.slice(from, to));
       while (from > 0) {
           let prev = findClusterBreak(line.text, from, false);
           if (categorize(line.text.slice(prev, from)) != cat)
               break;
           from = prev;
       }
       while (to < line.length) {
           let next = findClusterBreak(line.text, to);
           if (categorize(line.text.slice(to, next)) != cat)
               break;
           to = next;
       }
       return EditorSelection.range(from + line.from, to + line.from);
   }
   // Search the DOM for the {node, offset} position closest to the given
   // coordinates. Very inefficient and crude, but can usually be avoided
   // by calling caret(Position|Range)FromPoint instead.
   function getdx(x, rect) {
       return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
   }
   function getdy(y, rect) {
       return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
   }
   function yOverlap(a, b) {
       return a.top < b.bottom - 1 && a.bottom > b.top + 1;
   }
   function upTop(rect, top) {
       return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
   }
   function upBot(rect, bottom) {
       return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
   }
   function domPosAtCoords(parent, x, y) {
       let closest, closestRect, closestX, closestY;
       let above, below, aboveRect, belowRect;
       for (let child = parent.firstChild; child; child = child.nextSibling) {
           let rects = clientRectsFor(child);
           for (let i = 0; i < rects.length; i++) {
               let rect = rects[i];
               if (closestRect && yOverlap(closestRect, rect))
                   rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
               let dx = getdx(x, rect), dy = getdy(y, rect);
               if (dx == 0 && dy == 0)
                   return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
               if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                   closest = child;
                   closestRect = rect;
                   closestX = dx;
                   closestY = dy;
               }
               if (dx == 0) {
                   if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                       above = child;
                       aboveRect = rect;
                   }
                   else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                       below = child;
                       belowRect = rect;
                   }
               }
               else if (aboveRect && yOverlap(aboveRect, rect)) {
                   aboveRect = upBot(aboveRect, rect.bottom);
               }
               else if (belowRect && yOverlap(belowRect, rect)) {
                   belowRect = upTop(belowRect, rect.top);
               }
           }
       }
       if (aboveRect && aboveRect.bottom >= y) {
           closest = above;
           closestRect = aboveRect;
       }
       else if (belowRect && belowRect.top <= y) {
           closest = below;
           closestRect = belowRect;
       }
       if (!closest)
           return { node: parent, offset: 0 };
       let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
       if (closest.nodeType == 3)
           return domPosInText(closest, clipX, y);
       if (!closestX && closest.contentEditable == "true")
           return domPosAtCoords(closest, clipX, y);
       let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
           (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
       return { node: parent, offset };
   }
   function domPosInText(node, x, y) {
       let len = node.nodeValue.length;
       let closestOffset = -1, closestDY = 1e9, generalSide = 0;
       for (let i = 0; i < len; i++) {
           let rects = textRange(node, i, i + 1).getClientRects();
           for (let j = 0; j < rects.length; j++) {
               let rect = rects[j];
               if (rect.top == rect.bottom)
                   continue;
               if (!generalSide)
                   generalSide = x - rect.left;
               let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
               if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                   let right = x >= (rect.left + rect.right) / 2, after = right;
                   if (browser$1.chrome || browser$1.gecko) {
                       // Check for RTL on browsers that support getting client
                       // rects for empty ranges.
                       let rectBefore = textRange(node, i).getBoundingClientRect();
                       if (rectBefore.left == rect.right)
                           after = !right;
                   }
                   if (dy <= 0)
                       return { node, offset: i + (after ? 1 : 0) };
                   closestOffset = i + (after ? 1 : 0);
                   closestDY = dy;
               }
           }
       }
       return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
   }
   function posAtCoords(view, { x, y }, precise, bias = -1) {
       var _a;
       let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
       let block, { docHeight } = view.viewState;
       let yOffset = y - docTop;
       if (yOffset < 0)
           return 0;
       if (yOffset > docHeight)
           return view.state.doc.length;
       // Scan for a text block near the queried y position
       for (let halfLine = view.defaultLineHeight / 2, bounced = false;;) {
           block = view.elementAtHeight(yOffset);
           if (block.type == BlockType.Text)
               break;
           for (;;) {
               // Move the y position out of this block
               yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
               if (yOffset >= 0 && yOffset <= docHeight)
                   break;
               // If the document consists entirely of replaced widgets, we
               // won't find a text block, so return 0
               if (bounced)
                   return precise ? null : 0;
               bounced = true;
               bias = -bias;
           }
       }
       y = docTop + yOffset;
       let lineStart = block.from;
       // If this is outside of the rendered viewport, we can't determine a position
       if (lineStart < view.viewport.from)
           return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
       if (lineStart > view.viewport.to)
           return view.viewport.to == view.state.doc.length ? view.state.doc.length :
               precise ? null : posAtCoordsImprecise(view, content, block, x, y);
       // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
       let doc = view.dom.ownerDocument;
       let root = view.root.elementFromPoint ? view.root : doc;
       let element = root.elementFromPoint(x, y);
       if (element && !view.contentDOM.contains(element))
           element = null;
       // If the element is unexpected, clip x at the sides of the content area and try again
       if (!element) {
           x = Math.max(content.left + 1, Math.min(content.right - 1, x));
           element = root.elementFromPoint(x, y);
           if (element && !view.contentDOM.contains(element))
               element = null;
       }
       // There's visible editor content under the point, so we can try
       // using caret(Position|Range)FromPoint as a shortcut
       let node, offset = -1;
       if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
           if (doc.caretPositionFromPoint) {
               let pos = doc.caretPositionFromPoint(x, y);
               if (pos)
                   ({ offsetNode: node, offset } = pos);
           }
           else if (doc.caretRangeFromPoint) {
               let range = doc.caretRangeFromPoint(x, y);
               if (range) {
                   ({ startContainer: node, startOffset: offset } = range);
                   if (browser$1.safari && isSuspiciousCaretResult(node, offset, x))
                       node = undefined;
               }
           }
       }
       // No luck, do our own (potentially expensive) search
       if (!node || !view.docView.dom.contains(node)) {
           let line = LineView.find(view.docView, lineStart);
           if (!line)
               return yOffset > block.top + block.height / 2 ? block.to : block.from;
           ({ node, offset } = domPosAtCoords(line.dom, x, y));
       }
       return view.docView.posFromDOM(node, offset);
   }
   function posAtCoordsImprecise(view, contentRect, block, x, y) {
       let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
       if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
           let line = Math.floor((y - block.top) / view.defaultLineHeight);
           into += line * view.viewState.heightOracle.lineLength;
       }
       let content = view.state.sliceDoc(block.from, block.to);
       return block.from + findColumn(content, into, view.state.tabSize);
   }
   // In case of a high line height, Safari's caretRangeFromPoint treats
   // the space between lines as belonging to the last character of the
   // line before. This is used to detect such a result so that it can be
   // ignored (issue #401).
   function isSuspiciousCaretResult(node, offset, x) {
       let len;
       if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
           return false;
       for (let next = node.nextSibling; next; next = next.nextSibling)
           if (next.nodeType != 1 || next.nodeName != "BR")
               return false;
       return textRange(node, len - 1, len).getBoundingClientRect().left > x;
   }
   function moveToLineBoundary(view, start, forward, includeWrap) {
       let line = view.state.doc.lineAt(start.head);
       let coords = !includeWrap || !view.lineWrapping ? null
           : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
       if (coords) {
           let editorRect = view.dom.getBoundingClientRect();
           let direction = view.textDirectionAt(line.from);
           let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
               y: (coords.top + coords.bottom) / 2 });
           if (pos != null)
               return EditorSelection.cursor(pos, forward ? -1 : 1);
       }
       let lineView = LineView.find(view.docView, start.head);
       let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);
       return EditorSelection.cursor(end, forward ? -1 : 1);
   }
   function moveByChar(view, start, forward, by) {
       let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
       let direction = view.textDirectionAt(line.from);
       for (let cur = start, check = null;;) {
           let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
           if (!next) {
               if (line.number == (forward ? view.state.doc.lines : 1))
                   return cur;
               char = "\n";
               line = view.state.doc.line(line.number + (forward ? 1 : -1));
               spans = view.bidiSpans(line);
               next = EditorSelection.cursor(forward ? line.from : line.to);
           }
           if (!check) {
               if (!by)
                   return next;
               check = by(char);
           }
           else if (!check(char)) {
               return cur;
           }
           cur = next;
       }
   }
   function byGroup(view, pos, start) {
       let categorize = view.state.charCategorizer(pos);
       let cat = categorize(start);
       return (next) => {
           let nextCat = categorize(next);
           if (cat == CharCategory.Space)
               cat = nextCat;
           return cat == nextCat;
       };
   }
   function moveVertically(view, start, forward, distance) {
       let startPos = start.head, dir = forward ? 1 : -1;
       if (startPos == (forward ? view.state.doc.length : 0))
           return EditorSelection.cursor(startPos, start.assoc);
       let goal = start.goalColumn, startY;
       let rect = view.contentDOM.getBoundingClientRect();
       let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;
       if (startCoords) {
           if (goal == null)
               goal = startCoords.left - rect.left;
           startY = dir < 0 ? startCoords.top : startCoords.bottom;
       }
       else {
           let line = view.viewState.lineBlockAt(startPos);
           if (goal == null)
               goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
           startY = (dir < 0 ? line.top : line.bottom) + docTop;
       }
       let resolvedGoal = rect.left + goal;
       let dist = distance !== null && distance !== void 0 ? distance : (view.defaultLineHeight >> 1);
       for (let extra = 0;; extra += 10) {
           let curY = startY + (dist + extra) * dir;
           let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
           if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))
               return EditorSelection.cursor(pos, start.assoc, undefined, goal);
       }
   }
   function skipAtoms(view, oldPos, pos) {
       let atoms = view.state.facet(atomicRanges).map(f => f(view));
       for (;;) {
           let moved = false;
           for (let set of atoms) {
               set.between(pos.from - 1, pos.from + 1, (from, to, value) => {
                   if (pos.from > from && pos.from < to) {
                       pos = oldPos.from > pos.from ? EditorSelection.cursor(from, 1) : EditorSelection.cursor(to, -1);
                       moved = true;
                   }
               });
           }
           if (!moved)
               return pos;
       }
   }

   // This will also be where dragging info and such goes
   class InputState {
       constructor(view) {
           this.lastKeyCode = 0;
           this.lastKeyTime = 0;
           this.chromeScrollHack = -1;
           // On iOS, some keys need to have their default behavior happen
           // (after which we retroactively handle them and reset the DOM) to
           // avoid messing up the virtual keyboard state.
           this.pendingIOSKey = undefined;
           this.lastSelectionOrigin = null;
           this.lastSelectionTime = 0;
           this.lastEscPress = 0;
           this.lastContextMenu = 0;
           this.scrollHandlers = [];
           this.registeredEvents = [];
           this.customHandlers = [];
           // -1 means not in a composition. Otherwise, this counts the number
           // of changes made during the composition. The count is used to
           // avoid treating the start state of the composition, before any
           // changes have been made, as part of the composition.
           this.composing = -1;
           // Tracks whether the next change should be marked as starting the
           // composition (null means no composition, true means next is the
           // first, false means first has already been marked for this
           // composition)
           this.compositionFirstChange = null;
           this.compositionEndedAt = 0;
           this.rapidCompositionStart = false;
           this.mouseSelection = null;
           for (let type in handlers$1) {
               let handler = handlers$1[type];
               view.contentDOM.addEventListener(type, (event) => {
                   if (!eventBelongsToEditor(view, event) || this.ignoreDuringComposition(event))
                       return;
                   if (type == "keydown" && this.keydown(view, event))
                       return;
                   if (this.mustFlushObserver(event))
                       view.observer.forceFlush();
                   if (this.runCustomHandlers(type, view, event))
                       event.preventDefault();
                   else
                       handler(view, event);
               });
               this.registeredEvents.push(type);
           }
           if (browser$1.chrome && browser$1.chrome_version >= 102) {
               // On Chrome 102, viewport updates somehow stop wheel-based
               // scrolling. Turning off pointer events during the scroll seems
               // to avoid the issue.
               view.scrollDOM.addEventListener("wheel", () => {
                   if (this.chromeScrollHack < 0)
                       view.contentDOM.style.pointerEvents = "none";
                   else
                       window.clearTimeout(this.chromeScrollHack);
                   this.chromeScrollHack = setTimeout(() => {
                       this.chromeScrollHack = -1;
                       view.contentDOM.style.pointerEvents = "";
                   }, 100);
               }, { passive: true });
           }
           this.notifiedFocused = view.hasFocus;
           // On Safari adding an input event handler somehow prevents an
           // issue where the composition vanishes when you press enter.
           if (browser$1.safari)
               view.contentDOM.addEventListener("input", () => null);
       }
       setSelectionOrigin(origin) {
           this.lastSelectionOrigin = origin;
           this.lastSelectionTime = Date.now();
       }
       ensureHandlers(view, plugins) {
           var _a;
           let handlers;
           this.customHandlers = [];
           for (let plugin of plugins)
               if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {
                   this.customHandlers.push({ plugin: plugin.value, handlers });
                   for (let type in handlers)
                       if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                           this.registeredEvents.push(type);
                           view.contentDOM.addEventListener(type, (event) => {
                               if (!eventBelongsToEditor(view, event))
                                   return;
                               if (this.runCustomHandlers(type, view, event))
                                   event.preventDefault();
                           });
                       }
               }
       }
       runCustomHandlers(type, view, event) {
           for (let set of this.customHandlers) {
               let handler = set.handlers[type];
               if (handler) {
                   try {
                       if (handler.call(set.plugin, event, view) || event.defaultPrevented)
                           return true;
                   }
                   catch (e) {
                       logException(view.state, e);
                   }
               }
           }
           return false;
       }
       runScrollHandlers(view, event) {
           for (let set of this.customHandlers) {
               let handler = set.handlers.scroll;
               if (handler) {
                   try {
                       handler.call(set.plugin, event, view);
                   }
                   catch (e) {
                       logException(view.state, e);
                   }
               }
           }
       }
       keydown(view, event) {
           // Must always run, even if a custom handler handled the event
           this.lastKeyCode = event.keyCode;
           this.lastKeyTime = Date.now();
           if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)
               return true;
           // Chrome for Android usually doesn't fire proper key events, but
           // occasionally does, usually surrounded by a bunch of complicated
           // composition changes. When an enter or backspace key event is
           // seen, hold off on handling DOM events for a bit, and then
           // dispatch it.
           if (browser$1.android && browser$1.chrome && !event.synthetic &&
               (event.keyCode == 13 || event.keyCode == 8)) {
               view.observer.delayAndroidKey(event.key, event.keyCode);
               return true;
           }
           // Prevent the default behavior of Enter on iOS makes the
           // virtual keyboard get stuck in the wrong (lowercase)
           // state. So we let it go through, and then, in
           // applyDOMChange, notify key handlers of it and reset to
           // the state they produce.
           let pending;
           if (browser$1.ios && (pending = PendingKeys.find(key => key.keyCode == event.keyCode)) &&
               !(event.ctrlKey || event.altKey || event.metaKey) && !event.synthetic) {
               this.pendingIOSKey = pending;
               setTimeout(() => this.flushIOSKey(view), 250);
               return true;
           }
           return false;
       }
       flushIOSKey(view) {
           let key = this.pendingIOSKey;
           if (!key)
               return false;
           this.pendingIOSKey = undefined;
           return dispatchKey(view.contentDOM, key.key, key.keyCode);
       }
       ignoreDuringComposition(event) {
           if (!/^key/.test(event.type))
               return false;
           if (this.composing > 0)
               return true;
           // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
           // On some input method editors (IMEs), the Enter key is used to
           // confirm character selection. On Safari, when Enter is pressed,
           // compositionend and keydown events are sometimes emitted in the
           // wrong order. The key event should still be ignored, even when
           // it happens after the compositionend event.
           if (browser$1.safari && Date.now() - this.compositionEndedAt < 100) {
               this.compositionEndedAt = 0;
               return true;
           }
           return false;
       }
       mustFlushObserver(event) {
           return (event.type == "keydown" && event.keyCode != 229) ||
               event.type == "compositionend" && !browser$1.ios;
       }
       startMouseSelection(mouseSelection) {
           if (this.mouseSelection)
               this.mouseSelection.destroy();
           this.mouseSelection = mouseSelection;
       }
       update(update) {
           if (this.mouseSelection)
               this.mouseSelection.update(update);
           if (update.transactions.length)
               this.lastKeyCode = this.lastSelectionTime = 0;
       }
       destroy() {
           if (this.mouseSelection)
               this.mouseSelection.destroy();
       }
   }
   const PendingKeys = [
       { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
       { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
       { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
   ];
   // Key codes for modifier keys
   const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
   class MouseSelection {
       constructor(view, startEvent, style, mustSelect) {
           this.view = view;
           this.style = style;
           this.mustSelect = mustSelect;
           this.lastEvent = startEvent;
           let doc = view.contentDOM.ownerDocument;
           doc.addEventListener("mousemove", this.move = this.move.bind(this));
           doc.addEventListener("mouseup", this.up = this.up.bind(this));
           this.extend = startEvent.shiftKey;
           this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
           this.dragMove = dragMovesSelection(view, startEvent);
           this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
           // When clicking outside of the selection, immediately apply the
           // effect of starting the selection
           if (this.dragging === false) {
               startEvent.preventDefault();
               this.select(startEvent);
           }
       }
       move(event) {
           if (event.buttons == 0)
               return this.destroy();
           if (this.dragging !== false)
               return;
           this.select(this.lastEvent = event);
       }
       up(event) {
           if (this.dragging == null)
               this.select(this.lastEvent);
           if (!this.dragging)
               event.preventDefault();
           this.destroy();
       }
       destroy() {
           let doc = this.view.contentDOM.ownerDocument;
           doc.removeEventListener("mousemove", this.move);
           doc.removeEventListener("mouseup", this.up);
           this.view.inputState.mouseSelection = null;
       }
       select(event) {
           let selection = this.style.get(event, this.extend, this.multiple);
           if (this.mustSelect || !selection.eq(this.view.state.selection) ||
               selection.main.assoc != this.view.state.selection.main.assoc)
               this.view.dispatch({
                   selection,
                   userEvent: "select.pointer",
                   scrollIntoView: true
               });
           this.mustSelect = false;
       }
       update(update) {
           if (update.docChanged && this.dragging)
               this.dragging = this.dragging.map(update.changes);
           if (this.style.update(update))
               setTimeout(() => this.select(this.lastEvent), 20);
       }
   }
   function addsSelectionRange(view, event) {
       let facet = view.state.facet(clickAddsSelectionRange);
       return facet.length ? facet[0](event) : browser$1.mac ? event.metaKey : event.ctrlKey;
   }
   function dragMovesSelection(view, event) {
       let facet = view.state.facet(dragMovesSelection$1);
       return facet.length ? facet[0](event) : browser$1.mac ? !event.altKey : !event.ctrlKey;
   }
   function isInPrimarySelection(view, event) {
       let { main } = view.state.selection;
       if (main.empty)
           return false;
       // On boundary clicks, check whether the coordinates are inside the
       // selection's client rectangles
       let sel = getSelection(view.root);
       if (!sel || sel.rangeCount == 0)
           return true;
       let rects = sel.getRangeAt(0).getClientRects();
       for (let i = 0; i < rects.length; i++) {
           let rect = rects[i];
           if (rect.left <= event.clientX && rect.right >= event.clientX &&
               rect.top <= event.clientY && rect.bottom >= event.clientY)
               return true;
       }
       return false;
   }
   function eventBelongsToEditor(view, event) {
       if (!event.bubbles)
           return true;
       if (event.defaultPrevented)
           return false;
       for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
           if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
               return false;
       return true;
   }
   const handlers$1 = /*@__PURE__*/Object.create(null);
   // This is very crude, but unfortunately both these browsers _pretend_
   // that they have a clipboard API—all the objects and methods are
   // there, they just don't work, and they are hard to test.
   const brokenClipboardAPI = (browser$1.ie && browser$1.ie_version < 15) ||
       (browser$1.ios && browser$1.webkit_version < 604);
   function capturePaste(view) {
       let parent = view.dom.parentNode;
       if (!parent)
           return;
       let target = parent.appendChild(document.createElement("textarea"));
       target.style.cssText = "position: fixed; left: -10000px; top: 10px";
       target.focus();
       setTimeout(() => {
           view.focus();
           target.remove();
           doPaste(view, target.value);
       }, 50);
   }
   function doPaste(view, input) {
       let { state } = view, changes, i = 1, text = state.toText(input);
       let byLine = text.lines == state.selection.ranges.length;
       let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
       if (linewise) {
           let lastLine = -1;
           changes = state.changeByRange(range => {
               let line = state.doc.lineAt(range.from);
               if (line.from == lastLine)
                   return { range };
               lastLine = line.from;
               let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
               return { changes: { from: line.from, insert },
                   range: EditorSelection.cursor(range.from + insert.length) };
           });
       }
       else if (byLine) {
           changes = state.changeByRange(range => {
               let line = text.line(i++);
               return { changes: { from: range.from, to: range.to, insert: line.text },
                   range: EditorSelection.cursor(range.from + line.length) };
           });
       }
       else {
           changes = state.replaceSelection(text);
       }
       view.dispatch(changes, {
           userEvent: "input.paste",
           scrollIntoView: true
       });
   }
   handlers$1.keydown = (view, event) => {
       view.inputState.setSelectionOrigin("select");
       if (event.keyCode == 27)
           view.inputState.lastEscPress = Date.now();
       else if (modifierCodes.indexOf(event.keyCode) < 0)
           view.inputState.lastEscPress = 0;
   };
   let lastTouch = 0;
   handlers$1.touchstart = (view, e) => {
       lastTouch = Date.now();
       view.inputState.setSelectionOrigin("select.pointer");
   };
   handlers$1.touchmove = view => {
       view.inputState.setSelectionOrigin("select.pointer");
   };
   handlers$1.mousedown = (view, event) => {
       view.observer.flush();
       if (lastTouch > Date.now() - 2000 && getClickType(event) == 1)
           return; // Ignore touch interaction
       let style = null;
       for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
           style = makeStyle(view, event);
           if (style)
               break;
       }
       if (!style && event.button == 0)
           style = basicMouseSelection(view, event);
       if (style) {
           let mustFocus = view.root.activeElement != view.contentDOM;
           if (mustFocus)
               view.observer.ignore(() => focusPreventScroll(view.contentDOM));
           view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
       }
   };
   function rangeForClick(view, pos, bias, type) {
       if (type == 1) { // Single click
           return EditorSelection.cursor(pos, bias);
       }
       else if (type == 2) { // Double click
           return groupAt(view.state, pos, bias);
       }
       else { // Triple click
           let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
           let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
           if (to < view.state.doc.length && to == line.to)
               to++;
           return EditorSelection.range(from, to);
       }
   }
   let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
   let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
   // Try to determine, for the given coordinates, associated with the
   // given position, whether they are related to the element before or
   // the element after the position.
   function findPositionSide(view, pos, x, y) {
       let line = LineView.find(view.docView, pos);
       if (!line)
           return 1;
       let off = pos - line.posAtStart;
       // Line boundaries point into the line
       if (off == 0)
           return 1;
       if (off == line.length)
           return -1;
       // Positions on top of an element point at that element
       let before = line.coordsAt(off, -1);
       if (before && inside(x, y, before))
           return -1;
       let after = line.coordsAt(off, 1);
       if (after && inside(x, y, after))
           return 1;
       // This is probably a line wrap point. Pick before if the point is
       // beside it.
       return before && insideY(y, before) ? -1 : 1;
   }
   function queryPos(view, event) {
       let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
       return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
   }
   const BadMouseDetail = browser$1.ie && browser$1.ie_version <= 11;
   let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
   function getClickType(event) {
       if (!BadMouseDetail)
           return event.detail;
       let last = lastMouseDown, lastTime = lastMouseDownTime;
       lastMouseDown = event;
       lastMouseDownTime = Date.now();
       return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
           Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
   }
   function basicMouseSelection(view, event) {
       let start = queryPos(view, event), type = getClickType(event);
       let startSel = view.state.selection;
       let last = start, lastEvent = event;
       return {
           update(update) {
               if (update.docChanged) {
                   if (start)
                       start.pos = update.changes.mapPos(start.pos);
                   startSel = startSel.map(update.changes);
                   lastEvent = null;
               }
           },
           get(event, extend, multiple) {
               let cur;
               if (lastEvent && event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY)
                   cur = last;
               else {
                   cur = last = queryPos(view, event);
                   lastEvent = event;
               }
               if (!cur || !start)
                   return startSel;
               let range = rangeForClick(view, cur.pos, cur.bias, type);
               if (start.pos != cur.pos && !extend) {
                   let startRange = rangeForClick(view, start.pos, start.bias, type);
                   let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                   range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
               }
               if (extend)
                   return startSel.replaceRange(startSel.main.extend(range.from, range.to));
               else if (multiple)
                   return startSel.addRange(range);
               else
                   return EditorSelection.create([range]);
           }
       };
   }
   handlers$1.dragstart = (view, event) => {
       let { selection: { main } } = view.state;
       let { mouseSelection } = view.inputState;
       if (mouseSelection)
           mouseSelection.dragging = main;
       if (event.dataTransfer) {
           event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
           event.dataTransfer.effectAllowed = "copyMove";
       }
   };
   function dropText(view, event, text, direct) {
       if (!text)
           return;
       let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
       event.preventDefault();
       let { mouseSelection } = view.inputState;
       let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?
           { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
       let ins = { from: dropPos, insert: text };
       let changes = view.state.changes(del ? [del, ins] : ins);
       view.focus();
       view.dispatch({
           changes,
           selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
           userEvent: del ? "move.drop" : "input.drop"
       });
   }
   handlers$1.drop = (view, event) => {
       if (!event.dataTransfer)
           return;
       if (view.state.readOnly)
           return event.preventDefault();
       let files = event.dataTransfer.files;
       if (files && files.length) { // For a file drop, read the file's text.
           event.preventDefault();
           let text = Array(files.length), read = 0;
           let finishFile = () => {
               if (++read == files.length)
                   dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
           };
           for (let i = 0; i < files.length; i++) {
               let reader = new FileReader;
               reader.onerror = finishFile;
               reader.onload = () => {
                   if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                       text[i] = reader.result;
                   finishFile();
               };
               reader.readAsText(files[i]);
           }
       }
       else {
           dropText(view, event, event.dataTransfer.getData("Text"), true);
       }
   };
   handlers$1.paste = (view, event) => {
       if (view.state.readOnly)
           return event.preventDefault();
       view.observer.flush();
       let data = brokenClipboardAPI ? null : event.clipboardData;
       if (data) {
           doPaste(view, data.getData("text/plain"));
           event.preventDefault();
       }
       else {
           capturePaste(view);
       }
   };
   function captureCopy(view, text) {
       // The extra wrapper is somehow necessary on IE/Edge to prevent the
       // content from being mangled when it is put onto the clipboard
       let parent = view.dom.parentNode;
       if (!parent)
           return;
       let target = parent.appendChild(document.createElement("textarea"));
       target.style.cssText = "position: fixed; left: -10000px; top: 10px";
       target.value = text;
       target.focus();
       target.selectionEnd = text.length;
       target.selectionStart = 0;
       setTimeout(() => {
           target.remove();
           view.focus();
       }, 50);
   }
   function copiedRange(state) {
       let content = [], ranges = [], linewise = false;
       for (let range of state.selection.ranges)
           if (!range.empty) {
               content.push(state.sliceDoc(range.from, range.to));
               ranges.push(range);
           }
       if (!content.length) {
           // Nothing selected, do a line-wise copy
           let upto = -1;
           for (let { from } of state.selection.ranges) {
               let line = state.doc.lineAt(from);
               if (line.number > upto) {
                   content.push(line.text);
                   ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
               }
               upto = line.number;
           }
           linewise = true;
       }
       return { text: content.join(state.lineBreak), ranges, linewise };
   }
   let lastLinewiseCopy = null;
   handlers$1.copy = handlers$1.cut = (view, event) => {
       let { text, ranges, linewise } = copiedRange(view.state);
       if (!text && !linewise)
           return;
       lastLinewiseCopy = linewise ? text : null;
       let data = brokenClipboardAPI ? null : event.clipboardData;
       if (data) {
           event.preventDefault();
           data.clearData();
           data.setData("text/plain", text);
       }
       else {
           captureCopy(view, text);
       }
       if (event.type == "cut" && !view.state.readOnly)
           view.dispatch({
               changes: ranges,
               scrollIntoView: true,
               userEvent: "delete.cut"
           });
   };
   function updateForFocusChange(view) {
       setTimeout(() => {
           if (view.hasFocus != view.inputState.notifiedFocused)
               view.update([]);
       }, 10);
   }
   handlers$1.focus = updateForFocusChange;
   handlers$1.blur = view => {
       view.observer.clearSelectionRange();
       updateForFocusChange(view);
   };
   function forceClearComposition(view, rapid) {
       if (view.docView.compositionDeco.size) {
           view.inputState.rapidCompositionStart = rapid;
           try {
               view.update([]);
           }
           finally {
               view.inputState.rapidCompositionStart = false;
           }
       }
   }
   handlers$1.compositionstart = handlers$1.compositionupdate = view => {
       if (view.inputState.compositionFirstChange == null)
           view.inputState.compositionFirstChange = true;
       if (view.inputState.composing < 0) {
           // FIXME possibly set a timeout to clear it again on Android
           view.inputState.composing = 0;
           if (view.docView.compositionDeco.size) {
               view.observer.flush();
               forceClearComposition(view, true);
           }
       }
   };
   handlers$1.compositionend = view => {
       view.inputState.composing = -1;
       view.inputState.compositionEndedAt = Date.now();
       view.inputState.compositionFirstChange = null;
       setTimeout(() => {
           if (view.inputState.composing < 0)
               forceClearComposition(view, false);
       }, 50);
   };
   handlers$1.contextmenu = view => {
       view.inputState.lastContextMenu = Date.now();
   };
   handlers$1.beforeinput = (view, event) => {
       var _a;
       // Because Chrome Android doesn't fire useful key events, use
       // beforeinput to detect backspace (and possibly enter and delete,
       // but those usually don't even seem to fire beforeinput events at
       // the moment) and fake a key event for it.
       //
       // (preventDefault on beforeinput, though supported in the spec,
       // seems to do nothing at all on Chrome).
       let pending;
       if (browser$1.chrome && browser$1.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
           view.observer.delayAndroidKey(pending.key, pending.keyCode);
           if (pending.key == "Backspace" || pending.key == "Delete") {
               let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
               setTimeout(() => {
                   var _a;
                   // Backspacing near uneditable nodes on Chrome Android sometimes
                   // closes the virtual keyboard. This tries to crudely detect
                   // that and refocus to get it back.
                   if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                       view.contentDOM.blur();
                       view.focus();
                   }
               }, 100);
           }
       }
   };

   const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
   class HeightOracle {
       constructor() {
           this.doc = Text.empty;
           this.lineWrapping = false;
           this.heightSamples = {};
           this.lineHeight = 14;
           this.charWidth = 7;
           this.lineLength = 30;
           // Used to track, during updateHeight, if any actual heights changed
           this.heightChanged = false;
       }
       heightForGap(from, to) {
           let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
           if (this.lineWrapping)
               lines += Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength);
           return this.lineHeight * lines;
       }
       heightForLine(length) {
           if (!this.lineWrapping)
               return this.lineHeight;
           let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
           return lines * this.lineHeight;
       }
       setDoc(doc) { this.doc = doc; return this; }
       mustRefreshForWrapping(whiteSpace) {
           return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
       }
       mustRefreshForHeights(lineHeights) {
           let newHeight = false;
           for (let i = 0; i < lineHeights.length; i++) {
               let h = lineHeights[i];
               if (h < 0) {
                   i++;
               }
               else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                   newHeight = true;
                   this.heightSamples[Math.floor(h * 10)] = true;
               }
           }
           return newHeight;
       }
       refresh(whiteSpace, lineHeight, charWidth, lineLength, knownHeights) {
           let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
           let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
           this.lineWrapping = lineWrapping;
           this.lineHeight = lineHeight;
           this.charWidth = charWidth;
           this.lineLength = lineLength;
           if (changed) {
               this.heightSamples = {};
               for (let i = 0; i < knownHeights.length; i++) {
                   let h = knownHeights[i];
                   if (h < 0)
                       i++;
                   else
                       this.heightSamples[Math.floor(h * 10)] = true;
               }
           }
           return changed;
       }
   }
   // This object is used by `updateHeight` to make DOM measurements
   // arrive at the right nides. The `heights` array is a sequence of
   // block heights, starting from position `from`.
   class MeasuredHeights {
       constructor(from, heights) {
           this.from = from;
           this.heights = heights;
           this.index = 0;
       }
       get more() { return this.index < this.heights.length; }
   }
   /**
   Record used to represent information about a block-level element
   in the editor view.
   */
   class BlockInfo {
       /**
       @internal
       */
       constructor(
       /**
       The start of the element in the document.
       */
       from, 
       /**
       The length of the element.
       */
       length, 
       /**
       The top position of the element (relative to the top of the
       document).
       */
       top, 
       /**
       Its height.
       */
       height, 
       /**
       The type of element this is. When querying lines, this may be
       an array of all the blocks that make up the line.
       */
       type) {
           this.from = from;
           this.length = length;
           this.top = top;
           this.height = height;
           this.type = type;
       }
       /**
       The end of the element as a document position.
       */
       get to() { return this.from + this.length; }
       /**
       The bottom position of the element.
       */
       get bottom() { return this.top + this.height; }
       /**
       @internal
       */
       join(other) {
           let detail = (Array.isArray(this.type) ? this.type : [this])
               .concat(Array.isArray(other.type) ? other.type : [other]);
           return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
       }
   }
   var QueryType$1 = /*@__PURE__*/(function (QueryType) {
       QueryType[QueryType["ByPos"] = 0] = "ByPos";
       QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
       QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
   return QueryType})(QueryType$1 || (QueryType$1 = {}));
   const Epsilon = 1e-3;
   class HeightMap {
       constructor(length, // The number of characters covered
       height, // Height of this part of the document
       flags = 2 /* Outdated */) {
           this.length = length;
           this.height = height;
           this.flags = flags;
       }
       get outdated() { return (this.flags & 2 /* Outdated */) > 0; }
       set outdated(value) { this.flags = (value ? 2 /* Outdated */ : 0) | (this.flags & ~2 /* Outdated */); }
       setHeight(oracle, height) {
           if (this.height != height) {
               if (Math.abs(this.height - height) > Epsilon)
                   oracle.heightChanged = true;
               this.height = height;
           }
       }
       // Base case is to replace a leaf node, which simply builds a tree
       // from the new nodes and returns that (HeightMapBranch and
       // HeightMapGap override this to actually use from/to)
       replace(_from, _to, nodes) {
           return HeightMap.of(nodes);
       }
       // Again, these are base cases, and are overridden for branch and gap nodes.
       decomposeLeft(_to, result) { result.push(this); }
       decomposeRight(_from, result) { result.push(this); }
       applyChanges(decorations, oldDoc, oracle, changes) {
           let me = this;
           for (let i = changes.length - 1; i >= 0; i--) {
               let { fromA, toA, fromB, toB } = changes[i];
               let start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
               let end = start.to >= toA ? start : me.lineAt(toA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
               toB += end.to - toA;
               toA = end.to;
               while (i > 0 && start.from <= changes[i - 1].toA) {
                   fromA = changes[i - 1].fromA;
                   fromB = changes[i - 1].fromB;
                   i--;
                   if (fromA < start.from)
                       start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
               }
               fromB += start.from - fromA;
               fromA = start.from;
               let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
               me = me.replace(fromA, toA, nodes);
           }
           return me.updateHeight(oracle, 0);
       }
       static empty() { return new HeightMapText(0, 0); }
       // nodes uses null values to indicate the position of line breaks.
       // There are never line breaks at the start or end of the array, or
       // two line breaks next to each other, and the array isn't allowed
       // to be empty (same restrictions as return value from the builder).
       static of(nodes) {
           if (nodes.length == 1)
               return nodes[0];
           let i = 0, j = nodes.length, before = 0, after = 0;
           for (;;) {
               if (i == j) {
                   if (before > after * 2) {
                       let split = nodes[i - 1];
                       if (split.break)
                           nodes.splice(--i, 1, split.left, null, split.right);
                       else
                           nodes.splice(--i, 1, split.left, split.right);
                       j += 1 + split.break;
                       before -= split.size;
                   }
                   else if (after > before * 2) {
                       let split = nodes[j];
                       if (split.break)
                           nodes.splice(j, 1, split.left, null, split.right);
                       else
                           nodes.splice(j, 1, split.left, split.right);
                       j += 2 + split.break;
                       after -= split.size;
                   }
                   else {
                       break;
                   }
               }
               else if (before < after) {
                   let next = nodes[i++];
                   if (next)
                       before += next.size;
               }
               else {
                   let next = nodes[--j];
                   if (next)
                       after += next.size;
               }
           }
           let brk = 0;
           if (nodes[i - 1] == null) {
               brk = 1;
               i--;
           }
           else if (nodes[i] == null) {
               brk = 1;
               j++;
           }
           return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
       }
   }
   HeightMap.prototype.size = 1;
   class HeightMapBlock extends HeightMap {
       constructor(length, height, type) {
           super(length, height);
           this.type = type;
       }
       blockAt(_height, _doc, top, offset) {
           return new BlockInfo(offset, this.length, top, this.height, this.type);
       }
       lineAt(_value, _type, doc, top, offset) {
           return this.blockAt(0, doc, top, offset);
       }
       forEachLine(from, to, doc, top, offset, f) {
           if (from <= offset + this.length && to >= offset)
               f(this.blockAt(0, doc, top, offset));
       }
       updateHeight(oracle, offset = 0, _force = false, measured) {
           if (measured && measured.from <= offset && measured.more)
               this.setHeight(oracle, measured.heights[measured.index++]);
           this.outdated = false;
           return this;
       }
       toString() { return `block(${this.length})`; }
   }
   class HeightMapText extends HeightMapBlock {
       constructor(length, height) {
           super(length, height, BlockType.Text);
           this.collapsed = 0; // Amount of collapsed content in the line
           this.widgetHeight = 0; // Maximum inline widget height
       }
       replace(_from, _to, nodes) {
           let node = nodes[0];
           if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* SingleLine */)) &&
               Math.abs(this.length - node.length) < 10) {
               if (node instanceof HeightMapGap)
                   node = new HeightMapText(node.length, this.height);
               else
                   node.height = this.height;
               if (!this.outdated)
                   node.outdated = false;
               return node;
           }
           else {
               return HeightMap.of(nodes);
           }
       }
       updateHeight(oracle, offset = 0, force = false, measured) {
           if (measured && measured.from <= offset && measured.more)
               this.setHeight(oracle, measured.heights[measured.index++]);
           else if (force || this.outdated)
               this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
           this.outdated = false;
           return this;
       }
       toString() {
           return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
       }
   }
   class HeightMapGap extends HeightMap {
       constructor(length) { super(length, 0); }
       lines(doc, offset) {
           let firstLine = doc.lineAt(offset).number, lastLine = doc.lineAt(offset + this.length).number;
           return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };
       }
       blockAt(height, doc, top, offset) {
           let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);
           let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
           let { from, length } = doc.line(firstLine + line);
           return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
       }
       lineAt(value, type, doc, top, offset) {
           if (type == QueryType$1.ByHeight)
               return this.blockAt(value, doc, top, offset);
           if (type == QueryType$1.ByPosNoHeight) {
               let { from, to } = doc.lineAt(value);
               return new BlockInfo(from, to - from, 0, 0, BlockType.Text);
           }
           let { firstLine, lineHeight } = this.lines(doc, offset);
           let { from, length, number } = doc.lineAt(value);
           return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
       }
       forEachLine(from, to, doc, top, offset, f) {
           let { firstLine, lineHeight } = this.lines(doc, offset);
           for (let pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {
               let line = doc.lineAt(pos);
               if (pos == from)
                   top += lineHeight * (line.number - firstLine);
               f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));
               top += lineHeight;
               pos = line.to + 1;
           }
       }
       replace(from, to, nodes) {
           let after = this.length - to;
           if (after > 0) {
               let last = nodes[nodes.length - 1];
               if (last instanceof HeightMapGap)
                   nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
               else
                   nodes.push(null, new HeightMapGap(after - 1));
           }
           if (from > 0) {
               let first = nodes[0];
               if (first instanceof HeightMapGap)
                   nodes[0] = new HeightMapGap(from + first.length);
               else
                   nodes.unshift(new HeightMapGap(from - 1), null);
           }
           return HeightMap.of(nodes);
       }
       decomposeLeft(to, result) {
           result.push(new HeightMapGap(to - 1), null);
       }
       decomposeRight(from, result) {
           result.push(null, new HeightMapGap(this.length - from - 1));
       }
       updateHeight(oracle, offset = 0, force = false, measured) {
           let end = offset + this.length;
           if (measured && measured.from <= offset + this.length && measured.more) {
               // Fill in part of this gap with measured lines. We know there
               // can't be widgets or collapsed ranges in those lines, because
               // they would already have been added to the heightmap (gaps
               // only contain plain text).
               let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
               let wasChanged = oracle.heightChanged;
               if (measured.from > offset)
                   nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
               while (pos <= end && measured.more) {
                   let len = oracle.doc.lineAt(pos).length;
                   if (nodes.length)
                       nodes.push(null);
                   let height = measured.heights[measured.index++];
                   if (singleHeight == -1)
                       singleHeight = height;
                   else if (Math.abs(height - singleHeight) >= Epsilon)
                       singleHeight = -2;
                   let line = new HeightMapText(len, height);
                   line.outdated = false;
                   nodes.push(line);
                   pos += len + 1;
               }
               if (pos <= end)
                   nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
               let result = HeightMap.of(nodes);
               oracle.heightChanged = wasChanged || singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
                   Math.abs(singleHeight - this.lines(oracle.doc, offset).lineHeight) >= Epsilon;
               return result;
           }
           else if (force || this.outdated) {
               this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
               this.outdated = false;
           }
           return this;
       }
       toString() { return `gap(${this.length})`; }
   }
   class HeightMapBranch extends HeightMap {
       constructor(left, brk, right) {
           super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */ : 0));
           this.left = left;
           this.right = right;
           this.size = left.size + right.size;
       }
       get break() { return this.flags & 1 /* Break */; }
       blockAt(height, doc, top, offset) {
           let mid = top + this.left.height;
           return height < mid ? this.left.blockAt(height, doc, top, offset)
               : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);
       }
       lineAt(value, type, doc, top, offset) {
           let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
           let left = type == QueryType$1.ByHeight ? value < rightTop : value < rightOffset;
           let base = left ? this.left.lineAt(value, type, doc, top, offset)
               : this.right.lineAt(value, type, doc, rightTop, rightOffset);
           if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
               return base;
           let subQuery = type == QueryType$1.ByPosNoHeight ? QueryType$1.ByPosNoHeight : QueryType$1.ByPos;
           if (left)
               return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));
           else
               return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
       }
       forEachLine(from, to, doc, top, offset, f) {
           let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
           if (this.break) {
               if (from < rightOffset)
                   this.left.forEachLine(from, to, doc, top, offset, f);
               if (to >= rightOffset)
                   this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
           }
           else {
               let mid = this.lineAt(rightOffset, QueryType$1.ByPos, doc, top, offset);
               if (from < mid.from)
                   this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
               if (mid.to >= from && mid.from <= to)
                   f(mid);
               if (to > mid.to)
                   this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
           }
       }
       replace(from, to, nodes) {
           let rightStart = this.left.length + this.break;
           if (to < rightStart)
               return this.balanced(this.left.replace(from, to, nodes), this.right);
           if (from > this.left.length)
               return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
           let result = [];
           if (from > 0)
               this.decomposeLeft(from, result);
           let left = result.length;
           for (let node of nodes)
               result.push(node);
           if (from > 0)
               mergeGaps(result, left - 1);
           if (to < this.length) {
               let right = result.length;
               this.decomposeRight(to, result);
               mergeGaps(result, right);
           }
           return HeightMap.of(result);
       }
       decomposeLeft(to, result) {
           let left = this.left.length;
           if (to <= left)
               return this.left.decomposeLeft(to, result);
           result.push(this.left);
           if (this.break) {
               left++;
               if (to >= left)
                   result.push(null);
           }
           if (to > left)
               this.right.decomposeLeft(to - left, result);
       }
       decomposeRight(from, result) {
           let left = this.left.length, right = left + this.break;
           if (from >= right)
               return this.right.decomposeRight(from - right, result);
           if (from < left)
               this.left.decomposeRight(from, result);
           if (this.break && from < right)
               result.push(null);
           result.push(this.right);
       }
       balanced(left, right) {
           if (left.size > 2 * right.size || right.size > 2 * left.size)
               return HeightMap.of(this.break ? [left, null, right] : [left, right]);
           this.left = left;
           this.right = right;
           this.height = left.height + right.height;
           this.outdated = left.outdated || right.outdated;
           this.size = left.size + right.size;
           this.length = left.length + this.break + right.length;
           return this;
       }
       updateHeight(oracle, offset = 0, force = false, measured) {
           let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
           if (measured && measured.from <= offset + left.length && measured.more)
               rebalance = left = left.updateHeight(oracle, offset, force, measured);
           else
               left.updateHeight(oracle, offset, force);
           if (measured && measured.from <= rightStart + right.length && measured.more)
               rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
           else
               right.updateHeight(oracle, rightStart, force);
           if (rebalance)
               return this.balanced(left, right);
           this.height = this.left.height + this.right.height;
           this.outdated = false;
           return this;
       }
       toString() { return this.left + (this.break ? " " : "-") + this.right; }
   }
   function mergeGaps(nodes, around) {
       let before, after;
       if (nodes[around] == null &&
           (before = nodes[around - 1]) instanceof HeightMapGap &&
           (after = nodes[around + 1]) instanceof HeightMapGap)
           nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
   }
   const relevantWidgetHeight = 5;
   class NodeBuilder {
       constructor(pos, oracle) {
           this.pos = pos;
           this.oracle = oracle;
           this.nodes = [];
           this.lineStart = -1;
           this.lineEnd = -1;
           this.covering = null;
           this.writtenTo = pos;
       }
       get isCovered() {
           return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
       }
       span(_from, to) {
           if (this.lineStart > -1) {
               let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
               if (last instanceof HeightMapText)
                   last.length += end - this.pos;
               else if (end > this.pos || !this.isCovered)
                   this.nodes.push(new HeightMapText(end - this.pos, -1));
               this.writtenTo = end;
               if (to > end) {
                   this.nodes.push(null);
                   this.writtenTo++;
                   this.lineStart = -1;
               }
           }
           this.pos = to;
       }
       point(from, to, deco) {
           if (from < to || deco.heightRelevant) {
               let height = deco.widget ? deco.widget.estimatedHeight : 0;
               if (height < 0)
                   height = this.oracle.lineHeight;
               let len = to - from;
               if (deco.block) {
                   this.addBlock(new HeightMapBlock(len, height, deco.type));
               }
               else if (len || height >= relevantWidgetHeight) {
                   this.addLineDeco(height, len);
               }
           }
           else if (to > from) {
               this.span(from, to);
           }
           if (this.lineEnd > -1 && this.lineEnd < this.pos)
               this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
       }
       enterLine() {
           if (this.lineStart > -1)
               return;
           let { from, to } = this.oracle.doc.lineAt(this.pos);
           this.lineStart = from;
           this.lineEnd = to;
           if (this.writtenTo < from) {
               if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                   this.nodes.push(this.blankContent(this.writtenTo, from - 1));
               this.nodes.push(null);
           }
           if (this.pos > from)
               this.nodes.push(new HeightMapText(this.pos - from, -1));
           this.writtenTo = this.pos;
       }
       blankContent(from, to) {
           let gap = new HeightMapGap(to - from);
           if (this.oracle.doc.lineAt(from).to == to)
               gap.flags |= 4 /* SingleLine */;
           return gap;
       }
       ensureLine() {
           this.enterLine();
           let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
           if (last instanceof HeightMapText)
               return last;
           let line = new HeightMapText(0, -1);
           this.nodes.push(line);
           return line;
       }
       addBlock(block) {
           this.enterLine();
           if (block.type == BlockType.WidgetAfter && !this.isCovered)
               this.ensureLine();
           this.nodes.push(block);
           this.writtenTo = this.pos = this.pos + block.length;
           if (block.type != BlockType.WidgetBefore)
               this.covering = block;
       }
       addLineDeco(height, length) {
           let line = this.ensureLine();
           line.length += length;
           line.collapsed += length;
           line.widgetHeight = Math.max(line.widgetHeight, height);
           this.writtenTo = this.pos = this.pos + length;
       }
       finish(from) {
           let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
           if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
               this.nodes.push(new HeightMapText(0, -1));
           else if (this.writtenTo < this.pos || last == null)
               this.nodes.push(this.blankContent(this.writtenTo, this.pos));
           let pos = from;
           for (let node of this.nodes) {
               if (node instanceof HeightMapText)
                   node.updateHeight(this.oracle, pos);
               pos += node ? node.length : 1;
           }
           return this.nodes;
       }
       // Always called with a region that on both sides either stretches
       // to a line break or the end of the document.
       // The returned array uses null to indicate line breaks, but never
       // starts or ends in a line break, or has multiple line breaks next
       // to each other.
       static build(oracle, decorations, from, to) {
           let builder = new NodeBuilder(from, oracle);
           RangeSet.spans(decorations, from, to, builder, 0);
           return builder.finish(from);
       }
   }
   function heightRelevantDecoChanges(a, b, diff) {
       let comp = new DecorationComparator;
       RangeSet.compare(a, b, diff, comp, 0);
       return comp.changes;
   }
   class DecorationComparator {
       constructor() {
           this.changes = [];
       }
       compareRange() { }
       comparePoint(from, to, a, b) {
           if (from < to || a && a.heightRelevant || b && b.heightRelevant)
               addRange(from, to, this.changes, 5);
       }
   }

   function visiblePixelRange(dom, paddingTop) {
       let rect = dom.getBoundingClientRect();
       let left = Math.max(0, rect.left), right = Math.min(innerWidth, rect.right);
       let top = Math.max(0, rect.top), bottom = Math.min(innerHeight, rect.bottom);
       let body = dom.ownerDocument.body;
       for (let parent = dom.parentNode; parent && parent != body;) {
           if (parent.nodeType == 1) {
               let elt = parent;
               let style = window.getComputedStyle(elt);
               if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                   style.overflow != "visible") {
                   let parentRect = elt.getBoundingClientRect();
                   left = Math.max(left, parentRect.left);
                   right = Math.min(right, parentRect.right);
                   top = Math.max(top, parentRect.top);
                   bottom = Math.min(bottom, parentRect.bottom);
               }
               parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
           }
           else if (parent.nodeType == 11) { // Shadow root
               parent = parent.host;
           }
           else {
               break;
           }
       }
       return { left: left - rect.left, right: Math.max(left, right) - rect.left,
           top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
   }
   function fullPixelRange(dom, paddingTop) {
       let rect = dom.getBoundingClientRect();
       return { left: 0, right: rect.right - rect.left,
           top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
   }
   // Line gaps are placeholder widgets used to hide pieces of overlong
   // lines within the viewport, as a kludge to keep the editor
   // responsive when a ridiculously long line is loaded into it.
   class LineGap {
       constructor(from, to, size) {
           this.from = from;
           this.to = to;
           this.size = size;
       }
       static same(a, b) {
           if (a.length != b.length)
               return false;
           for (let i = 0; i < a.length; i++) {
               let gA = a[i], gB = b[i];
               if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                   return false;
           }
           return true;
       }
       draw(wrapping) {
           return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
       }
   }
   class LineGapWidget extends WidgetType {
       constructor(size, vertical) {
           super();
           this.size = size;
           this.vertical = vertical;
       }
       eq(other) { return other.size == this.size && other.vertical == this.vertical; }
       toDOM() {
           let elt = document.createElement("div");
           if (this.vertical) {
               elt.style.height = this.size + "px";
           }
           else {
               elt.style.width = this.size + "px";
               elt.style.height = "2px";
               elt.style.display = "inline-block";
           }
           return elt;
       }
       get estimatedHeight() { return this.vertical ? this.size : -1; }
   }
   class ViewState {
       constructor(state) {
           this.state = state;
           // These are contentDOM-local coordinates
           this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
           this.inView = true;
           this.paddingTop = 0;
           this.paddingBottom = 0;
           this.contentDOMWidth = 0;
           this.contentDOMHeight = 0;
           this.editorHeight = 0;
           this.editorWidth = 0;
           this.heightOracle = new HeightOracle;
           // See VP.MaxDOMHeight
           this.scaler = IdScaler;
           this.scrollTarget = null;
           // Briefly set to true when printing, to disable viewport limiting
           this.printing = false;
           // Flag set when editor content was redrawn, so that the next
           // measure stage knows it must read DOM layout
           this.mustMeasureContent = true;
           this.defaultTextDirection = Direction.RTL;
           this.visibleRanges = [];
           // Cursor 'assoc' is only significant when the cursor is on a line
           // wrap point, where it must stick to the character that it is
           // associated with. Since browsers don't provide a reasonable
           // interface to set or query this, when a selection is set that
           // might cause this to be significant, this flag is set. The next
           // measure phase will check whether the cursor is on a line-wrapping
           // boundary and, if so, reset it to make sure it is positioned in
           // the right place.
           this.mustEnforceCursorAssoc = false;
           this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
           this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
           this.viewport = this.getViewport(0, null);
           this.updateViewportLines();
           this.updateForViewport();
           this.lineGaps = this.ensureLineGaps([]);
           this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
           this.computeVisibleRanges();
       }
       updateForViewport() {
           let viewports = [this.viewport], { main } = this.state.selection;
           for (let i = 0; i <= 1; i++) {
               let pos = i ? main.head : main.anchor;
               if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                   let { from, to } = this.lineBlockAt(pos);
                   viewports.push(new Viewport(from, to));
               }
           }
           this.viewports = viewports.sort((a, b) => a.from - b.from);
           this.scaler = this.heightMap.height <= 7000000 /* MaxDOMHeight */ ? IdScaler :
               new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
       }
       updateViewportLines() {
           this.viewportLines = [];
           this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, block => {
               this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
           });
       }
       update(update, scrollTarget = null) {
           this.state = update.state;
           let prevDeco = this.stateDeco;
           this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
           let contentChanges = update.changedRanges;
           let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
           let prevHeight = this.heightMap.height;
           this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
           if (this.heightMap.height != prevHeight)
               update.flags |= 2 /* Height */;
           let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
           if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
               !this.viewportIsAppropriate(viewport))
               viewport = this.getViewport(0, scrollTarget);
           let updateLines = !update.changes.empty || (update.flags & 2 /* Height */) ||
               viewport.from != this.viewport.from || viewport.to != this.viewport.to;
           this.viewport = viewport;
           this.updateForViewport();
           if (updateLines)
               this.updateViewportLines();
           if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000 /* DoubleMargin */)
               this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
           update.flags |= this.computeVisibleRanges();
           if (scrollTarget)
               this.scrollTarget = scrollTarget;
           if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
               update.state.selection.main.empty && update.state.selection.main.assoc)
               this.mustEnforceCursorAssoc = true;
       }
       measure(view) {
           let dom = view.contentDOM, style = window.getComputedStyle(dom);
           let oracle = this.heightOracle;
           let whiteSpace = style.whiteSpace;
           this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
           let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
           let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != dom.clientHeight;
           this.contentDOMHeight = dom.clientHeight;
           this.mustMeasureContent = false;
           let result = 0, bias = 0;
           // Vertical padding
           let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;
           if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
               this.paddingTop = paddingTop;
               this.paddingBottom = paddingBottom;
               result |= 8 /* Geometry */ | 2 /* Height */;
           }
           if (this.editorWidth != view.scrollDOM.clientWidth) {
               if (oracle.lineWrapping)
                   measureContent = true;
               this.editorWidth = view.scrollDOM.clientWidth;
               result |= 8 /* Geometry */;
           }
           // Pixel viewport
           let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
           let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
           this.pixelViewport = pixelViewport;
           let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
           if (inView != this.inView) {
               this.inView = inView;
               if (inView)
                   measureContent = true;
           }
           if (!this.inView)
               return 0;
           let contentWidth = dom.clientWidth;
           if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
               this.contentDOMWidth = contentWidth;
               this.editorHeight = view.scrollDOM.clientHeight;
               result |= 8 /* Geometry */;
           }
           if (measureContent) {
               let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
               if (oracle.mustRefreshForHeights(lineHeights))
                   refresh = true;
               if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                   let { lineHeight, charWidth } = view.docView.measureTextSize();
                   refresh = oracle.refresh(whiteSpace, lineHeight, charWidth, contentWidth / charWidth, lineHeights);
                   if (refresh) {
                       view.docView.minWidth = 0;
                       result |= 8 /* Geometry */;
                   }
               }
               if (dTop > 0 && dBottom > 0)
                   bias = Math.max(dTop, dBottom);
               else if (dTop < 0 && dBottom < 0)
                   bias = Math.min(dTop, dBottom);
               oracle.heightChanged = false;
               for (let vp of this.viewports) {
                   let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                   this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
               }
               if (oracle.heightChanged)
                   result |= 2 /* Height */;
           }
           let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
               this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
           if (viewportChange)
               this.viewport = this.getViewport(bias, this.scrollTarget);
           this.updateForViewport();
           if ((result & 2 /* Height */) || viewportChange)
               this.updateViewportLines();
           if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000 /* DoubleMargin */)
               this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
           result |= this.computeVisibleRanges();
           if (this.mustEnforceCursorAssoc) {
               this.mustEnforceCursorAssoc = false;
               // This is done in the read stage, because moving the selection
               // to a line end is going to trigger a layout anyway, so it
               // can't be a pure write. It should be rare that it does any
               // writing.
               view.docView.enforceCursorAssoc();
           }
           return result;
       }
       get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
       get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
       getViewport(bias, scrollTarget) {
           // This will divide VP.Margin between the top and the
           // bottom, depending on the bias (the change in viewport position
           // since the last update). It'll hold a number between 0 and 1
           let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */ / 2));
           let map = this.heightMap, doc = this.state.doc, { visibleTop, visibleBottom } = this;
           let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* Margin */, QueryType$1.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* Margin */, QueryType$1.ByHeight, doc, 0, 0).to);
           // If scrollTarget is given, make sure the viewport includes that position
           if (scrollTarget) {
               let { head } = scrollTarget.range;
               if (head < viewport.from || head > viewport.to) {
                   let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                   let block = map.lineAt(head, QueryType$1.ByPos, doc, 0, 0), topPos;
                   if (scrollTarget.y == "center")
                       topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                   else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                       topPos = block.top;
                   else
                       topPos = block.bottom - viewHeight;
                   viewport = new Viewport(map.lineAt(topPos - 1000 /* Margin */ / 2, QueryType$1.ByHeight, doc, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* Margin */ / 2, QueryType$1.ByHeight, doc, 0, 0).to);
               }
           }
           return viewport;
       }
       mapViewport(viewport, changes) {
           let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
           return new Viewport(this.heightMap.lineAt(from, QueryType$1.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType$1.ByPos, this.state.doc, 0, 0).to);
       }
       // Checks if a given viewport covers the visible part of the
       // document and not too much beyond that.
       viewportIsAppropriate({ from, to }, bias = 0) {
           if (!this.inView)
               return true;
           let { top } = this.heightMap.lineAt(from, QueryType$1.ByPos, this.state.doc, 0, 0);
           let { bottom } = this.heightMap.lineAt(to, QueryType$1.ByPos, this.state.doc, 0, 0);
           let { visibleTop, visibleBottom } = this;
           return (from == 0 || top <= visibleTop - Math.max(10 /* MinCoverMargin */, Math.min(-bias, 250 /* MaxCoverMargin */))) &&
               (to == this.state.doc.length ||
                   bottom >= visibleBottom + Math.max(10 /* MinCoverMargin */, Math.min(bias, 250 /* MaxCoverMargin */))) &&
               (top > visibleTop - 2 * 1000 /* Margin */ && bottom < visibleBottom + 2 * 1000 /* Margin */);
       }
       mapLineGaps(gaps, changes) {
           if (!gaps.length || changes.empty)
               return gaps;
           let mapped = [];
           for (let gap of gaps)
               if (!changes.touchesRange(gap.from, gap.to))
                   mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
           return mapped;
       }
       // Computes positions in the viewport where the start or end of a
       // line should be hidden, trying to reuse existing line gaps when
       // appropriate to avoid unneccesary redraws.
       // Uses crude character-counting for the positioning and sizing,
       // since actual DOM coordinates aren't always available and
       // predictable. Relies on generous margins (see LG.Margin) to hide
       // the artifacts this might produce from the user.
       ensureLineGaps(current) {
           let gaps = [];
           // This won't work at all in predominantly right-to-left text.
           if (this.defaultTextDirection != Direction.LTR)
               return gaps;
           for (let line of this.viewportLines) {
               if (line.length < 4000 /* DoubleMargin */)
                   continue;
               let structure = lineStructure(line.from, line.to, this.stateDeco);
               if (structure.total < 4000 /* DoubleMargin */)
                   continue;
               let viewFrom, viewTo;
               if (this.heightOracle.lineWrapping) {
                   let marginHeight = (2000 /* Margin */ / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                   viewFrom = findPosition(structure, (this.visibleTop - line.top - marginHeight) / line.height);
                   viewTo = findPosition(structure, (this.visibleBottom - line.top + marginHeight) / line.height);
               }
               else {
                   let totalWidth = structure.total * this.heightOracle.charWidth;
                   let marginWidth = 2000 /* Margin */ * this.heightOracle.charWidth;
                   viewFrom = findPosition(structure, (this.pixelViewport.left - marginWidth) / totalWidth);
                   viewTo = findPosition(structure, (this.pixelViewport.right + marginWidth) / totalWidth);
               }
               let outside = [];
               if (viewFrom > line.from)
                   outside.push({ from: line.from, to: viewFrom });
               if (viewTo < line.to)
                   outside.push({ from: viewTo, to: line.to });
               let sel = this.state.selection.main;
               // Make sure the gaps don't cover a selection end
               if (sel.from >= line.from && sel.from <= line.to)
                   cutRange(outside, sel.from - 10 /* SelectionMargin */, sel.from + 10 /* SelectionMargin */);
               if (!sel.empty && sel.to >= line.from && sel.to <= line.to)
                   cutRange(outside, sel.to - 10 /* SelectionMargin */, sel.to + 10 /* SelectionMargin */);
               for (let { from, to } of outside)
                   if (to - from > 1000 /* HalfMargin */) {
                       gaps.push(find$2(current, gap => gap.from >= line.from && gap.to <= line.to &&
                           Math.abs(gap.from - from) < 1000 /* HalfMargin */ && Math.abs(gap.to - to) < 1000 /* HalfMargin */) ||
                           new LineGap(from, to, this.gapSize(line, from, to, structure)));
                   }
           }
           return gaps;
       }
       gapSize(line, from, to, structure) {
           let fraction = findFraction(structure, to) - findFraction(structure, from);
           if (this.heightOracle.lineWrapping) {
               return line.height * fraction;
           }
           else {
               return structure.total * this.heightOracle.charWidth * fraction;
           }
       }
       updateLineGaps(gaps) {
           if (!LineGap.same(gaps, this.lineGaps)) {
               this.lineGaps = gaps;
               this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
           }
       }
       computeVisibleRanges() {
           let deco = this.stateDeco;
           if (this.lineGaps.length)
               deco = deco.concat(this.lineGapDeco);
           let ranges = [];
           RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
               span(from, to) { ranges.push({ from, to }); },
               point() { }
           }, 20);
           let changed = ranges.length != this.visibleRanges.length ||
               this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
           this.visibleRanges = ranges;
           return changed ? 4 /* Viewport */ : 0;
       }
       lineBlockAt(pos) {
           return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
               scaleBlock(this.heightMap.lineAt(pos, QueryType$1.ByPos, this.state.doc, 0, 0), this.scaler);
       }
       lineBlockAtHeight(height) {
           return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType$1.ByHeight, this.state.doc, 0, 0), this.scaler);
       }
       elementAtHeight(height) {
           return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.state.doc, 0, 0), this.scaler);
       }
       get docHeight() {
           return this.scaler.toDOM(this.heightMap.height);
       }
       get contentHeight() {
           return this.docHeight + this.paddingTop + this.paddingBottom;
       }
   }
   class Viewport {
       constructor(from, to) {
           this.from = from;
           this.to = to;
       }
   }
   function lineStructure(from, to, stateDeco) {
       let ranges = [], pos = from, total = 0;
       RangeSet.spans(stateDeco, from, to, {
           span() { },
           point(from, to) {
               if (from > pos) {
                   ranges.push({ from: pos, to: from });
                   total += from - pos;
               }
               pos = to;
           }
       }, 20); // We're only interested in collapsed ranges of a significant size
       if (pos < to) {
           ranges.push({ from: pos, to });
           total += to - pos;
       }
       return { total, ranges };
   }
   function findPosition({ total, ranges }, ratio) {
       if (ratio <= 0)
           return ranges[0].from;
       if (ratio >= 1)
           return ranges[ranges.length - 1].to;
       let dist = Math.floor(total * ratio);
       for (let i = 0;; i++) {
           let { from, to } = ranges[i], size = to - from;
           if (dist <= size)
               return from + dist;
           dist -= size;
       }
   }
   function findFraction(structure, pos) {
       let counted = 0;
       for (let { from, to } of structure.ranges) {
           if (pos <= to) {
               counted += pos - from;
               break;
           }
           counted += to - from;
       }
       return counted / structure.total;
   }
   function cutRange(ranges, from, to) {
       for (let i = 0; i < ranges.length; i++) {
           let r = ranges[i];
           if (r.from < to && r.to > from) {
               let pieces = [];
               if (r.from < from)
                   pieces.push({ from: r.from, to: from });
               if (r.to > to)
                   pieces.push({ from: to, to: r.to });
               ranges.splice(i, 1, ...pieces);
               i += pieces.length - 1;
           }
       }
   }
   function find$2(array, f) {
       for (let val of array)
           if (f(val))
               return val;
       return undefined;
   }
   // Don't scale when the document height is within the range of what
   // the DOM can handle.
   const IdScaler = {
       toDOM(n) { return n; },
       fromDOM(n) { return n; },
       scale: 1
   };
   // When the height is too big (> VP.MaxDOMHeight), scale down the
   // regions outside the viewports so that the total height is
   // VP.MaxDOMHeight.
   class BigScaler {
       constructor(doc, heightMap, viewports) {
           let vpHeight = 0, base = 0, domBase = 0;
           this.viewports = viewports.map(({ from, to }) => {
               let top = heightMap.lineAt(from, QueryType$1.ByPos, doc, 0, 0).top;
               let bottom = heightMap.lineAt(to, QueryType$1.ByPos, doc, 0, 0).bottom;
               vpHeight += bottom - top;
               return { from, to, top, bottom, domTop: 0, domBottom: 0 };
           });
           this.scale = (7000000 /* MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
           for (let obj of this.viewports) {
               obj.domTop = domBase + (obj.top - base) * this.scale;
               domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
               base = obj.bottom;
           }
       }
       toDOM(n) {
           for (let i = 0, base = 0, domBase = 0;; i++) {
               let vp = i < this.viewports.length ? this.viewports[i] : null;
               if (!vp || n < vp.top)
                   return domBase + (n - base) * this.scale;
               if (n <= vp.bottom)
                   return vp.domTop + (n - vp.top);
               base = vp.bottom;
               domBase = vp.domBottom;
           }
       }
       fromDOM(n) {
           for (let i = 0, base = 0, domBase = 0;; i++) {
               let vp = i < this.viewports.length ? this.viewports[i] : null;
               if (!vp || n < vp.domTop)
                   return base + (n - domBase) / this.scale;
               if (n <= vp.domBottom)
                   return vp.top + (n - vp.domTop);
               base = vp.bottom;
               domBase = vp.domBottom;
           }
       }
   }
   function scaleBlock(block, scaler) {
       if (scaler.scale == 1)
           return block;
       let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
       return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(b => scaleBlock(b, scaler)) : block.type);
   }

   const theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
   const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
   const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
   const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
   function buildTheme(main, spec, scopes) {
       return new StyleModule(spec, {
           finish(sel) {
               return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                   if (m == "&")
                       return main;
                   if (!scopes || !scopes[m])
                       throw new RangeError(`Unsupported selector: ${m}`);
                   return scopes[m];
               }) : main + " " + sel;
           }
       });
   }
   const baseTheme$1$1 = /*@__PURE__*/buildTheme("." + baseThemeID, {
       "&.cm-editor": {
           position: "relative !important",
           boxSizing: "border-box",
           "&.cm-focused": {
               // Provide a simple default outline to make sure a focused
               // editor is visually distinct. Can't leave the default behavior
               // because that will apply to the content element, which is
               // inside the scrollable container and doesn't include the
               // gutters. We also can't use an 'auto' outline, since those
               // are, for some reason, drawn behind the element content, which
               // will cause things like the active line background to cover
               // the outline (#297).
               outline: "1px dotted #212121"
           },
           display: "flex !important",
           flexDirection: "column"
       },
       ".cm-scroller": {
           display: "flex !important",
           alignItems: "flex-start !important",
           fontFamily: "monospace",
           lineHeight: 1.4,
           height: "100%",
           overflowX: "auto",
           position: "relative",
           zIndex: 0
       },
       ".cm-content": {
           margin: 0,
           flexGrow: 2,
           flexShrink: 0,
           minHeight: "100%",
           display: "block",
           whiteSpace: "pre",
           wordWrap: "normal",
           boxSizing: "border-box",
           padding: "4px 0",
           outline: "none",
           "&[contenteditable=true]": {
               WebkitUserModify: "read-write-plaintext-only",
           }
       },
       ".cm-lineWrapping": {
           whiteSpace_fallback: "pre-wrap",
           whiteSpace: "break-spaces",
           wordBreak: "break-word",
           overflowWrap: "anywhere",
           flexShrink: 1
       },
       "&light .cm-content": { caretColor: "black" },
       "&dark .cm-content": { caretColor: "white" },
       ".cm-line": {
           display: "block",
           padding: "0 2px 0 4px"
       },
       ".cm-selectionLayer": {
           zIndex: -1,
           contain: "size style"
       },
       ".cm-selectionBackground": {
           position: "absolute",
       },
       "&light .cm-selectionBackground": {
           background: "#d9d9d9"
       },
       "&dark .cm-selectionBackground": {
           background: "#222"
       },
       "&light.cm-focused .cm-selectionBackground": {
           background: "#d7d4f0"
       },
       "&dark.cm-focused .cm-selectionBackground": {
           background: "#233"
       },
       ".cm-cursorLayer": {
           zIndex: 100,
           contain: "size style",
           pointerEvents: "none"
       },
       "&.cm-focused .cm-cursorLayer": {
           animation: "steps(1) cm-blink 1.2s infinite"
       },
       // Two animations defined so that we can switch between them to
       // restart the animation without forcing another style
       // recomputation.
       "@keyframes cm-blink": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
       "@keyframes cm-blink2": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
       ".cm-cursor, .cm-dropCursor": {
           position: "absolute",
           borderLeft: "1.2px solid black",
           marginLeft: "-0.6px",
           pointerEvents: "none",
       },
       ".cm-cursor": {
           display: "none"
       },
       "&dark .cm-cursor": {
           borderLeftColor: "#444"
       },
       "&.cm-focused .cm-cursor": {
           display: "block"
       },
       "&light .cm-activeLine": { backgroundColor: "#f3f9ff" },
       "&dark .cm-activeLine": { backgroundColor: "#223039" },
       "&light .cm-specialChar": { color: "red" },
       "&dark .cm-specialChar": { color: "#f78" },
       ".cm-gutters": {
           display: "flex",
           height: "100%",
           boxSizing: "border-box",
           left: 0,
           zIndex: 200
       },
       "&light .cm-gutters": {
           backgroundColor: "#f5f5f5",
           color: "#6c6c6c",
           borderRight: "1px solid #ddd"
       },
       "&dark .cm-gutters": {
           backgroundColor: "#333338",
           color: "#ccc"
       },
       ".cm-gutter": {
           display: "flex !important",
           flexDirection: "column",
           flexShrink: 0,
           boxSizing: "border-box",
           minHeight: "100%",
           overflow: "hidden"
       },
       ".cm-gutterElement": {
           boxSizing: "border-box"
       },
       ".cm-lineNumbers .cm-gutterElement": {
           padding: "0 3px 0 5px",
           minWidth: "20px",
           textAlign: "right",
           whiteSpace: "nowrap"
       },
       "&light .cm-activeLineGutter": {
           backgroundColor: "#e2f2ff"
       },
       "&dark .cm-activeLineGutter": {
           backgroundColor: "#222227"
       },
       ".cm-panels": {
           boxSizing: "border-box",
           position: "sticky",
           left: 0,
           right: 0
       },
       "&light .cm-panels": {
           backgroundColor: "#f5f5f5",
           color: "black"
       },
       "&light .cm-panels-top": {
           borderBottom: "1px solid #ddd"
       },
       "&light .cm-panels-bottom": {
           borderTop: "1px solid #ddd"
       },
       "&dark .cm-panels": {
           backgroundColor: "#333338",
           color: "white"
       },
       ".cm-tab": {
           display: "inline-block",
           overflow: "hidden",
           verticalAlign: "bottom"
       },
       ".cm-widgetBuffer": {
           verticalAlign: "text-top",
           height: "1em",
           display: "inline"
       },
       ".cm-placeholder": {
           color: "#888",
           display: "inline-block",
           verticalAlign: "top",
       },
       ".cm-button": {
           verticalAlign: "middle",
           color: "inherit",
           fontSize: "70%",
           padding: ".2em 1em",
           borderRadius: "1px"
       },
       "&light .cm-button": {
           backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
           border: "1px solid #888",
           "&:active": {
               backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
           }
       },
       "&dark .cm-button": {
           backgroundImage: "linear-gradient(#393939, #111)",
           border: "1px solid #888",
           "&:active": {
               backgroundImage: "linear-gradient(#111, #333)"
           }
       },
       ".cm-textfield": {
           verticalAlign: "middle",
           color: "inherit",
           fontSize: "70%",
           border: "1px solid silver",
           padding: ".2em .5em"
       },
       "&light .cm-textfield": {
           backgroundColor: "white"
       },
       "&dark .cm-textfield": {
           border: "1px solid #555",
           backgroundColor: "inherit"
       }
   }, lightDarkIDs);

   const observeOptions = {
       childList: true,
       characterData: true,
       subtree: true,
       attributes: true,
       characterDataOldValue: true
   };
   // IE11 has very broken mutation observers, so we also listen to
   // DOMCharacterDataModified there
   const useCharData = browser$1.ie && browser$1.ie_version <= 11;
   class DOMObserver {
       constructor(view, onChange, onScrollChanged) {
           this.view = view;
           this.onChange = onChange;
           this.onScrollChanged = onScrollChanged;
           this.active = false;
           // The known selection. Kept in our own object, as opposed to just
           // directly accessing the selection because:
           //  - Safari doesn't report the right selection in shadow DOM
           //  - Reading from the selection forces a DOM layout
           //  - This way, we can ignore selectionchange events if we have
           //    already seen the 'new' selection
           this.selectionRange = new DOMSelectionState;
           // Set when a selection change is detected, cleared on flush
           this.selectionChanged = false;
           this.delayedFlush = -1;
           this.resizeTimeout = -1;
           this.queue = [];
           this.delayedAndroidKey = null;
           this.scrollTargets = [];
           this.intersection = null;
           this.resize = null;
           this.intersecting = false;
           this.gapIntersection = null;
           this.gaps = [];
           // Timeout for scheduling check of the parents that need scroll handlers
           this.parentCheck = -1;
           this.dom = view.contentDOM;
           this.observer = new MutationObserver(mutations => {
               for (let mut of mutations)
                   this.queue.push(mut);
               // IE11 will sometimes (on typing over a selection or
               // backspacing out a single character text node) call the
               // observer callback before actually updating the DOM.
               //
               // Unrelatedly, iOS Safari will, when ending a composition,
               // sometimes first clear it, deliver the mutations, and then
               // reinsert the finished text. CodeMirror's handling of the
               // deletion will prevent the reinsertion from happening,
               // breaking composition.
               if ((browser$1.ie && browser$1.ie_version <= 11 || browser$1.ios && view.composing) &&
                   mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                       m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                   this.flushSoon();
               else
                   this.flush();
           });
           if (useCharData)
               this.onCharData = (event) => {
                   this.queue.push({ target: event.target,
                       type: "characterData",
                       oldValue: event.prevValue });
                   this.flushSoon();
               };
           this.onSelectionChange = this.onSelectionChange.bind(this);
           window.addEventListener("resize", this.onResize = this.onResize.bind(this));
           if (typeof ResizeObserver == "function") {
               this.resize = new ResizeObserver(() => {
                   if (this.view.docView.lastUpdate < Date.now() - 75)
                       this.onResize();
               });
               this.resize.observe(view.scrollDOM);
           }
           window.addEventListener("beforeprint", this.onPrint = this.onPrint.bind(this));
           this.start();
           window.addEventListener("scroll", this.onScroll = this.onScroll.bind(this));
           if (typeof IntersectionObserver == "function") {
               this.intersection = new IntersectionObserver(entries => {
                   if (this.parentCheck < 0)
                       this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                   if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                       this.intersecting = !this.intersecting;
                       if (this.intersecting != this.view.inView)
                           this.onScrollChanged(document.createEvent("Event"));
                   }
               }, {});
               this.intersection.observe(this.dom);
               this.gapIntersection = new IntersectionObserver(entries => {
                   if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                       this.onScrollChanged(document.createEvent("Event"));
               }, {});
           }
           this.listenForScroll();
           this.readSelectionRange();
           this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
       }
       onScroll(e) {
           if (this.intersecting)
               this.flush(false);
           this.onScrollChanged(e);
       }
       onResize() {
           if (this.resizeTimeout < 0)
               this.resizeTimeout = setTimeout(() => {
                   this.resizeTimeout = -1;
                   this.view.requestMeasure();
               }, 50);
       }
       onPrint() {
           this.view.viewState.printing = true;
           this.view.measure();
           setTimeout(() => {
               this.view.viewState.printing = false;
               this.view.requestMeasure();
           }, 500);
       }
       updateGaps(gaps) {
           if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
               this.gapIntersection.disconnect();
               for (let gap of gaps)
                   this.gapIntersection.observe(gap);
               this.gaps = gaps;
           }
       }
       onSelectionChange(event) {
           if (!this.readSelectionRange() || this.delayedAndroidKey)
               return;
           let { view } = this, sel = this.selectionRange;
           if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
               return;
           let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
           if (context && context.ignoreEvent(event))
               return;
           // Deletions on IE11 fire their events in the wrong order, giving
           // us a selection change event before the DOM changes are
           // reported.
           // Chrome Android has a similar issue when backspacing out a
           // selection (#645).
           if ((browser$1.ie && browser$1.ie_version <= 11 || browser$1.android && browser$1.chrome) && !view.state.selection.main.empty &&
               // (Selection.isCollapsed isn't reliable on IE)
               sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
               this.flushSoon();
           else
               this.flush(false);
       }
       readSelectionRange() {
           let { root } = this.view;
           // The Selection object is broken in shadow roots in Safari. See
           // https://github.com/codemirror/dev/issues/414
           let range = browser$1.safari && root.nodeType == 11 && deepActiveElement() == this.view.contentDOM &&
               safariSelectionRangeHack(this.view) || getSelection(root);
           if (!range || this.selectionRange.eq(range))
               return false;
           this.selectionRange.setRange(range);
           return this.selectionChanged = true;
       }
       setSelectionRange(anchor, head) {
           this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
           this.selectionChanged = false;
       }
       clearSelectionRange() {
           this.selectionRange.set(null, 0, null, 0);
       }
       listenForScroll() {
           this.parentCheck = -1;
           let i = 0, changed = null;
           for (let dom = this.dom; dom;) {
               if (dom.nodeType == 1) {
                   if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                       i++;
                   else if (!changed)
                       changed = this.scrollTargets.slice(0, i);
                   if (changed)
                       changed.push(dom);
                   dom = dom.assignedSlot || dom.parentNode;
               }
               else if (dom.nodeType == 11) { // Shadow root
                   dom = dom.host;
               }
               else {
                   break;
               }
           }
           if (i < this.scrollTargets.length && !changed)
               changed = this.scrollTargets.slice(0, i);
           if (changed) {
               for (let dom of this.scrollTargets)
                   dom.removeEventListener("scroll", this.onScroll);
               for (let dom of this.scrollTargets = changed)
                   dom.addEventListener("scroll", this.onScroll);
           }
       }
       ignore(f) {
           if (!this.active)
               return f();
           try {
               this.stop();
               return f();
           }
           finally {
               this.start();
               this.clear();
           }
       }
       start() {
           if (this.active)
               return;
           this.observer.observe(this.dom, observeOptions);
           if (useCharData)
               this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
           this.active = true;
       }
       stop() {
           if (!this.active)
               return;
           this.active = false;
           this.observer.disconnect();
           if (useCharData)
               this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
       }
       // Throw away any pending changes
       clear() {
           this.processRecords();
           this.queue.length = 0;
           this.selectionChanged = false;
       }
       // Chrome Android, especially in combination with GBoard, not only
       // doesn't reliably fire regular key events, but also often
       // surrounds the effect of enter or backspace with a bunch of
       // composition events that, when interrupted, cause text duplication
       // or other kinds of corruption. This hack makes the editor back off
       // from handling DOM changes for a moment when such a key is
       // detected (via beforeinput or keydown), and then tries to flush
       // them or, if that has no effect, dispatches the given key.
       delayAndroidKey(key, keyCode) {
           if (!this.delayedAndroidKey)
               requestAnimationFrame(() => {
                   let key = this.delayedAndroidKey;
                   this.delayedAndroidKey = null;
                   this.delayedFlush = -1;
                   if (!this.flush())
                       dispatchKey(this.view.contentDOM, key.key, key.keyCode);
               });
           // Since backspace beforeinput is sometimes signalled spuriously,
           // Enter always takes precedence.
           if (!this.delayedAndroidKey || key == "Enter")
               this.delayedAndroidKey = { key, keyCode };
       }
       flushSoon() {
           if (this.delayedFlush < 0)
               this.delayedFlush = window.setTimeout(() => { this.delayedFlush = -1; this.flush(); }, 20);
       }
       forceFlush() {
           if (this.delayedFlush >= 0) {
               window.clearTimeout(this.delayedFlush);
               this.delayedFlush = -1;
               this.flush();
           }
       }
       processRecords() {
           let records = this.queue;
           for (let mut of this.observer.takeRecords())
               records.push(mut);
           if (records.length)
               this.queue = [];
           let from = -1, to = -1, typeOver = false;
           for (let record of records) {
               let range = this.readMutation(record);
               if (!range)
                   continue;
               if (range.typeOver)
                   typeOver = true;
               if (from == -1) {
                   ({ from, to } = range);
               }
               else {
                   from = Math.min(range.from, from);
                   to = Math.max(range.to, to);
               }
           }
           return { from, to, typeOver };
       }
       // Apply pending changes, if any
       flush(readSelection = true) {
           // Completely hold off flushing when pending keys are set—the code
           // managing those will make sure processRecords is called and the
           // view is resynchronized after
           if (this.delayedFlush >= 0 || this.delayedAndroidKey)
               return;
           if (readSelection)
               this.readSelectionRange();
           let { from, to, typeOver } = this.processRecords();
           let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
           if (from < 0 && !newSel)
               return;
           this.selectionChanged = false;
           let startState = this.view.state;
           let handled = this.onChange(from, to, typeOver);
           // The view wasn't updated
           if (this.view.state == startState)
               this.view.update([]);
           return handled;
       }
       readMutation(rec) {
           let cView = this.view.docView.nearest(rec.target);
           if (!cView || cView.ignoreMutation(rec))
               return null;
           cView.markDirty(rec.type == "attributes");
           if (rec.type == "attributes")
               cView.dirty |= 4 /* Attrs */;
           if (rec.type == "childList") {
               let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
               let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
               return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                   to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
           }
           else if (rec.type == "characterData") {
               return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
           }
           else {
               return null;
           }
       }
       destroy() {
           var _a, _b, _c;
           this.stop();
           (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
           (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
           (_c = this.resize) === null || _c === void 0 ? void 0 : _c.disconnect();
           for (let dom of this.scrollTargets)
               dom.removeEventListener("scroll", this.onScroll);
           window.removeEventListener("scroll", this.onScroll);
           window.removeEventListener("resize", this.onResize);
           window.removeEventListener("beforeprint", this.onPrint);
           this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
           clearTimeout(this.parentCheck);
           clearTimeout(this.resizeTimeout);
       }
   }
   function findChild(cView, dom, dir) {
       while (dom) {
           let curView = ContentView.get(dom);
           if (curView && curView.parent == cView)
               return curView;
           let parent = dom.parentNode;
           dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
       }
       return null;
   }
   // Used to work around a Safari Selection/shadow DOM bug (#414)
   function safariSelectionRangeHack(view) {
       let found = null;
       // Because Safari (at least in 2018-2021) doesn't provide regular
       // access to the selection inside a shadowroot, we have to perform a
       // ridiculous hack to get at it—using `execCommand` to trigger a
       // `beforeInput` event so that we can read the target range from the
       // event.
       function read(event) {
           event.preventDefault();
           event.stopImmediatePropagation();
           found = event.getTargetRanges()[0];
       }
       view.contentDOM.addEventListener("beforeinput", read, true);
       document.execCommand("indent");
       view.contentDOM.removeEventListener("beforeinput", read, true);
       if (!found)
           return null;
       let anchorNode = found.startContainer, anchorOffset = found.startOffset;
       let focusNode = found.endContainer, focusOffset = found.endOffset;
       let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
       // Since such a range doesn't distinguish between anchor and head,
       // use a heuristic that flips it around if its end matches the
       // current anchor.
       if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
           [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
       return { anchorNode, anchorOffset, focusNode, focusOffset };
   }

   function applyDOMChange(view, start, end, typeOver) {
       let change, newSel;
       let sel = view.state.selection.main;
       if (start > -1) {
           let bounds = view.docView.domBoundsAround(start, end, 0);
           if (!bounds || view.state.readOnly)
               return false;
           let { from, to } = bounds;
           let selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view);
           let reader = new DOMReader(selPoints, view.state);
           reader.readRange(bounds.startDOM, bounds.endDOM);
           let preferredPos = sel.from, preferredSide = null;
           // Prefer anchoring to end when Backspace is pressed (or, on
           // Android, when something was deleted)
           if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 ||
               browser$1.android && reader.text.length < to - from) {
               preferredPos = sel.to;
               preferredSide = "end";
           }
           let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), reader.text, preferredPos - from, preferredSide);
           if (diff) {
               // Chrome inserts two newlines when pressing shift-enter at the
               // end of a line. This drops one of those.
               if (browser$1.chrome && view.inputState.lastKeyCode == 13 &&
                   diff.toB == diff.from + 2 && reader.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                   diff.toB--;
               change = { from: from + diff.from, to: from + diff.toA,
                   insert: Text.of(reader.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
           }
           newSel = selectionFromPoints(selPoints, from);
       }
       else if (view.hasFocus || !view.state.facet(editable)) {
           let domSel = view.observer.selectionRange;
           let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
           let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
               !contains(view.contentDOM, domSel.focusNode)
               ? view.state.selection.main.head
               : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
           let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
               !contains(view.contentDOM, domSel.anchorNode)
               ? view.state.selection.main.anchor
               : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
           if (head != sel.head || anchor != sel.anchor)
               newSel = EditorSelection.single(anchor, head);
       }
       if (!change && !newSel)
           return false;
       // Heuristic to notice typing over a selected character
       if (!change && typeOver && !sel.empty && newSel && newSel.main.empty)
           change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
       // If the change is inside the selection and covers most of it,
       // assume it is a selection replace (with identical characters at
       // the start/end not included in the diff)
       else if (change && change.from >= sel.from && change.to <= sel.to &&
           (change.from != sel.from || change.to != sel.to) &&
           (sel.to - sel.from) - (change.to - change.from) <= 4)
           change = {
               from: sel.from, to: sel.to,
               insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
           };
       // Detect insert-period-on-double-space Mac behavior, and transform
       // it into a regular space insert.
       else if ((browser$1.mac || browser$1.android) && change && change.from == change.to && change.from == sel.head - 1 &&
           change.insert.toString() == ".")
           change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
       if (change) {
           let startState = view.state;
           if (browser$1.ios && view.inputState.flushIOSKey(view))
               return true;
           // Android browsers don't fire reasonable key events for enter,
           // backspace, or delete. So this detects changes that look like
           // they're caused by those keys, and reinterprets them as key
           // events. (Some of these keys are also handled by beforeinput
           // events and the pendingAndroidKey mechanism, but that's not
           // reliable in all situations.)
           if (browser$1.android &&
               ((change.from == sel.from && change.to == sel.to &&
                   change.insert.length == 1 && change.insert.lines == 2 &&
                   dispatchKey(view.contentDOM, "Enter", 13)) ||
                   (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&
                       dispatchKey(view.contentDOM, "Backspace", 8)) ||
                   (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                       dispatchKey(view.contentDOM, "Delete", 46))))
               return true;
           let text = change.insert.toString();
           if (view.state.facet(inputHandler$1).some(h => h(view, change.from, change.to, text)))
               return true;
           if (view.inputState.composing >= 0)
               view.inputState.composing++;
           let tr;
           if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
               (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
               view.inputState.composing < 0) {
               let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
               let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
               tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
           }
           else {
               let changes = startState.changes(change);
               let mainSel = newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength
                   ? newSel.main : undefined;
               // Try to apply a composition change to all cursors
               if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
                   change.to <= sel.to && change.to >= sel.to - 10) {
                   let replaced = view.state.sliceDoc(change.from, change.to);
                   let compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);
                   let offset = sel.to - change.to, size = sel.to - sel.from;
                   tr = startState.changeByRange(range => {
                       if (range.from == sel.from && range.to == sel.to)
                           return { changes, range: mainSel || range.map(changes) };
                       let to = range.to - offset, from = to - replaced.length;
                       if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                           // Unfortunately, there's no way to make multiple
                           // changes in the same node work without aborting
                           // composition, so cursors in the composition range are
                           // ignored.
                           compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to)
                           return { range };
                       let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                       return {
                           changes: rangeChanges,
                           range: !mainSel ? range.map(rangeChanges) :
                               EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                       };
                   });
               }
               else {
                   tr = {
                       changes,
                       selection: mainSel && startState.selection.replaceRange(mainSel)
                   };
               }
           }
           let userEvent = "input.type";
           if (view.composing) {
               userEvent += ".compose";
               if (view.inputState.compositionFirstChange) {
                   userEvent += ".start";
                   view.inputState.compositionFirstChange = false;
               }
           }
           view.dispatch(tr, { scrollIntoView: true, userEvent });
           return true;
       }
       else if (newSel && !newSel.main.eq(sel)) {
           let scrollIntoView = false, userEvent = "select";
           if (view.inputState.lastSelectionTime > Date.now() - 50) {
               if (view.inputState.lastSelectionOrigin == "select")
                   scrollIntoView = true;
               userEvent = view.inputState.lastSelectionOrigin;
           }
           view.dispatch({ selection: newSel, scrollIntoView, userEvent });
           return true;
       }
       else {
           return false;
       }
   }
   function findDiff(a, b, preferredPos, preferredSide) {
       let minLen = Math.min(a.length, b.length);
       let from = 0;
       while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
           from++;
       if (from == minLen && a.length == b.length)
           return null;
       let toA = a.length, toB = b.length;
       while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
           toA--;
           toB--;
       }
       if (preferredSide == "end") {
           let adjust = Math.max(0, from - Math.min(toA, toB));
           preferredPos -= toA + adjust - from;
       }
       if (toA < from && a.length < b.length) {
           let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
           from -= move;
           toB = from + (toB - toA);
           toA = from;
       }
       else if (toB < from) {
           let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
           from -= move;
           toA = from + (toA - toB);
           toB = from;
       }
       return { from, toA, toB };
   }
   function selectionPoints(view) {
       let result = [];
       if (view.root.activeElement != view.contentDOM)
           return result;
       let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
       if (anchorNode) {
           result.push(new DOMPoint(anchorNode, anchorOffset));
           if (focusNode != anchorNode || focusOffset != anchorOffset)
               result.push(new DOMPoint(focusNode, focusOffset));
       }
       return result;
   }
   function selectionFromPoints(points, base) {
       if (points.length == 0)
           return null;
       let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
       return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
   }

   // The editor's update state machine looks something like this:
   //
   //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
   //                                         ↑      ↓
   //                                         Updating (measure)
   //
   // The difference between 'Idle' and 'Idle (unchecked)' lies in
   // whether a layout check has been scheduled. A regular update through
   // the `update` method updates the DOM in a write-only fashion, and
   // relies on a check (scheduled with `requestAnimationFrame`) to make
   // sure everything is where it should be and the viewport covers the
   // visible code. That check continues to measure and then optionally
   // update until it reaches a coherent state.
   /**
   An editor view represents the editor's user interface. It holds
   the editable DOM surface, and possibly other elements such as the
   line number gutter. It handles events and dispatches state
   transactions for editing actions.
   */
   class EditorView {
       /**
       Construct a new view. You'll want to either provide a `parent`
       option, or put `view.dom` into your document after creating a
       view, so that the user can see the editor.
       */
       constructor(config = {}) {
           this.plugins = [];
           this.pluginMap = new Map;
           this.editorAttrs = {};
           this.contentAttrs = {};
           this.bidiCache = [];
           this.destroyed = false;
           /**
           @internal
           */
           this.updateState = 2 /* Updating */;
           /**
           @internal
           */
           this.measureScheduled = -1;
           /**
           @internal
           */
           this.measureRequests = [];
           this.contentDOM = document.createElement("div");
           this.scrollDOM = document.createElement("div");
           this.scrollDOM.tabIndex = -1;
           this.scrollDOM.className = "cm-scroller";
           this.scrollDOM.appendChild(this.contentDOM);
           this.announceDOM = document.createElement("div");
           this.announceDOM.style.cssText = "position: absolute; top: -10000px";
           this.announceDOM.setAttribute("aria-live", "polite");
           this.dom = document.createElement("div");
           this.dom.appendChild(this.announceDOM);
           this.dom.appendChild(this.scrollDOM);
           this._dispatch = config.dispatch || ((tr) => this.update([tr]));
           this.dispatch = this.dispatch.bind(this);
           this.root = (config.root || getRoot(config.parent) || document);
           this.viewState = new ViewState(config.state || EditorState.create(config));
           this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
           for (let plugin of this.plugins)
               plugin.update(this);
           this.observer = new DOMObserver(this, (from, to, typeOver) => {
               return applyDOMChange(this, from, to, typeOver);
           }, event => {
               this.inputState.runScrollHandlers(this, event);
               if (this.observer.intersecting)
                   this.measure();
           });
           this.inputState = new InputState(this);
           this.inputState.ensureHandlers(this, this.plugins);
           this.docView = new DocView(this);
           this.mountStyles();
           this.updateAttrs();
           this.updateState = 0 /* Idle */;
           this.requestMeasure();
           if (config.parent)
               config.parent.appendChild(this.dom);
       }
       /**
       The current editor state.
       */
       get state() { return this.viewState.state; }
       /**
       To be able to display large documents without consuming too much
       memory or overloading the browser, CodeMirror only draws the
       code that is visible (plus a margin around it) to the DOM. This
       property tells you the extent of the current drawn viewport, in
       document positions.
       */
       get viewport() { return this.viewState.viewport; }
       /**
       When there are, for example, large collapsed ranges in the
       viewport, its size can be a lot bigger than the actual visible
       content. Thus, if you are doing something like styling the
       content in the viewport, it is preferable to only do so for
       these ranges, which are the subset of the viewport that is
       actually drawn.
       */
       get visibleRanges() { return this.viewState.visibleRanges; }
       /**
       Returns false when the editor is entirely scrolled out of view
       or otherwise hidden.
       */
       get inView() { return this.viewState.inView; }
       /**
       Indicates whether the user is currently composing text via
       [IME](https://en.wikipedia.org/wiki/Input_method), and at least
       one change has been made in the current composition.
       */
       get composing() { return this.inputState.composing > 0; }
       /**
       Indicates whether the user is currently in composing state. Note
       that on some platforms, like Android, this will be the case a
       lot, since just putting the cursor on a word starts a
       composition there.
       */
       get compositionStarted() { return this.inputState.composing >= 0; }
       dispatch(...input) {
           this._dispatch(input.length == 1 && input[0] instanceof Transaction ? input[0]
               : this.state.update(...input));
       }
       /**
       Update the view for the given array of transactions. This will
       update the visible document and selection to match the state
       produced by the transactions, and notify view plugins of the
       change. You should usually call
       [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
       as a primitive.
       */
       update(transactions) {
           if (this.updateState != 0 /* Idle */)
               throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
           let redrawn = false, attrsChanged = false, update;
           let state = this.state;
           for (let tr of transactions) {
               if (tr.startState != state)
                   throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
               state = tr.state;
           }
           if (this.destroyed) {
               this.viewState.state = state;
               return;
           }
           this.observer.clear();
           // When the phrases change, redraw the editor
           if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
               return this.setState(state);
           update = ViewUpdate.create(this, state, transactions);
           let scrollTarget = this.viewState.scrollTarget;
           try {
               this.updateState = 2 /* Updating */;
               for (let tr of transactions) {
                   if (scrollTarget)
                       scrollTarget = scrollTarget.map(tr.changes);
                   if (tr.scrollIntoView) {
                       let { main } = tr.state.selection;
                       scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                   }
                   for (let e of tr.effects)
                       if (e.is(scrollIntoView$1))
                           scrollTarget = e.value;
               }
               this.viewState.update(update, scrollTarget);
               this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
               if (!update.empty) {
                   this.updatePlugins(update);
                   this.inputState.update(update);
               }
               redrawn = this.docView.update(update);
               if (this.state.facet(styleModule) != this.styleModules)
                   this.mountStyles();
               attrsChanged = this.updateAttrs();
               this.showAnnouncements(transactions);
               this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
           }
           finally {
               this.updateState = 0 /* Idle */;
           }
           if (update.startState.facet(theme) != update.state.facet(theme))
               this.viewState.mustMeasureContent = true;
           if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
               this.requestMeasure();
           if (!update.empty)
               for (let listener of this.state.facet(updateListener))
                   listener(update);
       }
       /**
       Reset the view to the given state. (This will cause the entire
       document to be redrawn and all view plugins to be reinitialized,
       so you should probably only use it when the new state isn't
       derived from the old state. Otherwise, use
       [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
       */
       setState(newState) {
           if (this.updateState != 0 /* Idle */)
               throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
           if (this.destroyed) {
               this.viewState.state = newState;
               return;
           }
           this.updateState = 2 /* Updating */;
           let hadFocus = this.hasFocus;
           try {
               for (let plugin of this.plugins)
                   plugin.destroy(this);
               this.viewState = new ViewState(newState);
               this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
               this.pluginMap.clear();
               for (let plugin of this.plugins)
                   plugin.update(this);
               this.docView = new DocView(this);
               this.inputState.ensureHandlers(this, this.plugins);
               this.mountStyles();
               this.updateAttrs();
               this.bidiCache = [];
           }
           finally {
               this.updateState = 0 /* Idle */;
           }
           if (hadFocus)
               this.focus();
           this.requestMeasure();
       }
       updatePlugins(update) {
           let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
           if (prevSpecs != specs) {
               let newPlugins = [];
               for (let spec of specs) {
                   let found = prevSpecs.indexOf(spec);
                   if (found < 0) {
                       newPlugins.push(new PluginInstance(spec));
                   }
                   else {
                       let plugin = this.plugins[found];
                       plugin.mustUpdate = update;
                       newPlugins.push(plugin);
                   }
               }
               for (let plugin of this.plugins)
                   if (plugin.mustUpdate != update)
                       plugin.destroy(this);
               this.plugins = newPlugins;
               this.pluginMap.clear();
               this.inputState.ensureHandlers(this, this.plugins);
           }
           else {
               for (let p of this.plugins)
                   p.mustUpdate = update;
           }
           for (let i = 0; i < this.plugins.length; i++)
               this.plugins[i].update(this);
       }
       /**
       @internal
       */
       measure(flush = true) {
           if (this.destroyed)
               return;
           if (this.measureScheduled > -1)
               cancelAnimationFrame(this.measureScheduled);
           this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
           if (flush)
               this.observer.flush();
           let updated = null;
           try {
               for (let i = 0;; i++) {
                   this.updateState = 1 /* Measuring */;
                   let oldViewport = this.viewport;
                   let changed = this.viewState.measure(this);
                   if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                       break;
                   if (i > 5) {
                       console.warn(this.measureRequests.length
                           ? "Measure loop restarted more than 5 times"
                           : "Viewport failed to stabilize");
                       break;
                   }
                   let measuring = [];
                   // Only run measure requests in this cycle when the viewport didn't change
                   if (!(changed & 4 /* Viewport */))
                       [this.measureRequests, measuring] = [measuring, this.measureRequests];
                   let measured = measuring.map(m => {
                       try {
                           return m.read(this);
                       }
                       catch (e) {
                           logException(this.state, e);
                           return BadMeasure;
                       }
                   });
                   let update = ViewUpdate.create(this, this.state, []), redrawn = false, scrolled = false;
                   update.flags |= changed;
                   if (!updated)
                       updated = update;
                   else
                       updated.flags |= changed;
                   this.updateState = 2 /* Updating */;
                   if (!update.empty) {
                       this.updatePlugins(update);
                       this.inputState.update(update);
                       this.updateAttrs();
                       redrawn = this.docView.update(update);
                   }
                   for (let i = 0; i < measuring.length; i++)
                       if (measured[i] != BadMeasure) {
                           try {
                               let m = measuring[i];
                               if (m.write)
                                   m.write(measured[i], this);
                           }
                           catch (e) {
                               logException(this.state, e);
                           }
                       }
                   if (this.viewState.scrollTarget) {
                       this.docView.scrollIntoView(this.viewState.scrollTarget);
                       this.viewState.scrollTarget = null;
                       scrolled = true;
                   }
                   if (redrawn)
                       this.docView.updateSelection(true);
                   if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to &&
                       !scrolled && this.measureRequests.length == 0)
                       break;
               }
           }
           finally {
               this.updateState = 0 /* Idle */;
               this.measureScheduled = -1;
           }
           if (updated && !updated.empty)
               for (let listener of this.state.facet(updateListener))
                   listener(updated);
       }
       /**
       Get the CSS classes for the currently active editor themes.
       */
       get themeClasses() {
           return baseThemeID + " " +
               (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
               this.state.facet(theme);
       }
       updateAttrs() {
           let editorAttrs = attrsFromFacet(this, editorAttributes, {
               class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
           });
           let contentAttrs = {
               spellcheck: "false",
               autocorrect: "off",
               autocapitalize: "off",
               translate: "no",
               contenteditable: !this.state.facet(editable) ? "false" : "true",
               class: "cm-content",
               style: `${browser$1.tabSize}: ${this.state.tabSize}`,
               role: "textbox",
               "aria-multiline": "true"
           };
           if (this.state.readOnly)
               contentAttrs["aria-readonly"] = "true";
           attrsFromFacet(this, contentAttributes, contentAttrs);
           let changed = this.observer.ignore(() => {
               let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
               let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
               return changedContent || changedEditor;
           });
           this.editorAttrs = editorAttrs;
           this.contentAttrs = contentAttrs;
           return changed;
       }
       showAnnouncements(trs) {
           let first = true;
           for (let tr of trs)
               for (let effect of tr.effects)
                   if (effect.is(EditorView.announce)) {
                       if (first)
                           this.announceDOM.textContent = "";
                       first = false;
                       let div = this.announceDOM.appendChild(document.createElement("div"));
                       div.textContent = effect.value;
                   }
       }
       mountStyles() {
           this.styleModules = this.state.facet(styleModule);
           StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$1).reverse());
       }
       readMeasured() {
           if (this.updateState == 2 /* Updating */)
               throw new Error("Reading the editor layout isn't allowed during an update");
           if (this.updateState == 0 /* Idle */ && this.measureScheduled > -1)
               this.measure(false);
       }
       /**
       Schedule a layout measurement, optionally providing callbacks to
       do custom DOM measuring followed by a DOM write phase. Using
       this is preferable reading DOM layout directly from, for
       example, an event handler, because it'll make sure measuring and
       drawing done by other components is synchronized, avoiding
       unnecessary DOM layout computations.
       */
       requestMeasure(request) {
           if (this.measureScheduled < 0)
               this.measureScheduled = requestAnimationFrame(() => this.measure());
           if (request) {
               if (request.key != null)
                   for (let i = 0; i < this.measureRequests.length; i++) {
                       if (this.measureRequests[i].key === request.key) {
                           this.measureRequests[i] = request;
                           return;
                       }
                   }
               this.measureRequests.push(request);
           }
       }
       /**
       Get the value of a specific plugin, if present. Note that
       plugins that crash can be dropped from a view, so even when you
       know you registered a given plugin, it is recommended to check
       the return value of this method.
       */
       plugin(plugin) {
           let known = this.pluginMap.get(plugin);
           if (known === undefined || known && known.spec != plugin)
               this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
           return known && known.update(this).value;
       }
       /**
       The top position of the document, in screen coordinates. This
       may be negative when the editor is scrolled down. Points
       directly to the top of the first line, not above the padding.
       */
       get documentTop() {
           return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
       }
       /**
       Reports the padding above and below the document.
       */
       get documentPadding() {
           return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
       }
       /**
       Find the text line or block widget at the given vertical
       position (which is interpreted as relative to the [top of the
       document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)
       */
       elementAtHeight(height) {
           this.readMeasured();
           return this.viewState.elementAtHeight(height);
       }
       /**
       Find the line block (see
       [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
       height.
       */
       lineBlockAtHeight(height) {
           this.readMeasured();
           return this.viewState.lineBlockAtHeight(height);
       }
       /**
       Get the extent and vertical position of all [line
       blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
       are relative to the [top of the
       document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
       */
       get viewportLineBlocks() {
           return this.viewState.viewportLines;
       }
       /**
       Find the line block around the given document position. A line
       block is a range delimited on both sides by either a
       non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
       start/end of the document. It will usually just hold a line of
       text, but may be broken into multiple textblocks by block
       widgets.
       */
       lineBlockAt(pos) {
           return this.viewState.lineBlockAt(pos);
       }
       /**
       The editor's total content height.
       */
       get contentHeight() {
           return this.viewState.contentHeight;
       }
       /**
       Move a cursor position by [grapheme
       cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
       the motion is away from the line start, or towards it. In
       bidirectional text, the line is traversed in visual order, using
       the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
       When the start position was the last one on the line, the
       returned position will be across the line break. If there is no
       further line, the original position is returned.
       
       By default, this method moves over a single cluster. The
       optional `by` argument can be used to move across more. It will
       be called with the first cluster as argument, and should return
       a predicate that determines, for each subsequent cluster,
       whether it should also be moved over.
       */
       moveByChar(start, forward, by) {
           return skipAtoms(this, start, moveByChar(this, start, forward, by));
       }
       /**
       Move a cursor position across the next group of either
       [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
       non-whitespace characters.
       */
       moveByGroup(start, forward) {
           return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
       }
       /**
       Move to the next line boundary in the given direction. If
       `includeWrap` is true, line wrapping is on, and there is a
       further wrap point on the current line, the wrap point will be
       returned. Otherwise this function will return the start or end
       of the line.
       */
       moveToLineBoundary(start, forward, includeWrap = true) {
           return moveToLineBoundary(this, start, forward, includeWrap);
       }
       /**
       Move a cursor position vertically. When `distance` isn't given,
       it defaults to moving to the next line (including wrapped
       lines). Otherwise, `distance` should provide a positive distance
       in pixels.
       
       When `start` has a
       [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
       motion will use that as a target horizontal position. Otherwise,
       the cursor's own horizontal position is used. The returned
       cursor will have its goal column set to whichever column was
       used.
       */
       moveVertically(start, forward, distance) {
           return skipAtoms(this, start, moveVertically(this, start, forward, distance));
       }
       /**
       Find the DOM parent node and offset (child offset if `node` is
       an element, character offset when it is a text node) at the
       given document position.
       
       Note that for positions that aren't currently in
       `visibleRanges`, the resulting DOM position isn't necessarily
       meaningful (it may just point before or after a placeholder
       element).
       */
       domAtPos(pos) {
           return this.docView.domAtPos(pos);
       }
       /**
       Find the document position at the given DOM node. Can be useful
       for associating positions with DOM events. Will raise an error
       when `node` isn't part of the editor content.
       */
       posAtDOM(node, offset = 0) {
           return this.docView.posFromDOM(node, offset);
       }
       posAtCoords(coords, precise = true) {
           this.readMeasured();
           return posAtCoords(this, coords, precise);
       }
       /**
       Get the screen coordinates at the given document position.
       `side` determines whether the coordinates are based on the
       element before (-1) or after (1) the position (if no element is
       available on the given side, the method will transparently use
       another strategy to get reasonable coordinates).
       */
       coordsAtPos(pos, side = 1) {
           this.readMeasured();
           let rect = this.docView.coordsAt(pos, side);
           if (!rect || rect.left == rect.right)
               return rect;
           let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
           let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
           return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
       }
       /**
       The default width of a character in the editor. May not
       accurately reflect the width of all characters (given variable
       width fonts or styling of invididual ranges).
       */
       get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
       /**
       The default height of a line in the editor. May not be accurate
       for all lines.
       */
       get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
       /**
       The text direction
       ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
       CSS property) of the editor's content element.
       */
       get textDirection() { return this.viewState.defaultTextDirection; }
       /**
       Find the text direction of the block at the given position, as
       assigned by CSS. If
       [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
       isn't enabled, or the given position is outside of the viewport,
       this will always return the same as
       [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
       this may trigger a DOM layout.
       */
       textDirectionAt(pos) {
           let perLine = this.state.facet(perLineTextDirection);
           if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
               return this.textDirection;
           this.readMeasured();
           return this.docView.textDirectionAt(pos);
       }
       /**
       Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
       (as determined by the
       [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
       CSS property of its content element).
       */
       get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
       /**
       Returns the bidirectional text structure of the given line
       (which should be in the current document) as an array of span
       objects. The order of these spans matches the [text
       direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
       left-to-right, the leftmost spans come first, otherwise the
       rightmost spans come first.
       */
       bidiSpans(line) {
           if (line.length > MaxBidiLine)
               return trivialOrder(line.length);
           let dir = this.textDirectionAt(line.from);
           for (let entry of this.bidiCache)
               if (entry.from == line.from && entry.dir == dir)
                   return entry.order;
           let order = computeOrder(line.text, dir);
           this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
           return order;
       }
       /**
       Check whether the editor has focus.
       */
       get hasFocus() {
           var _a;
           // Safari return false for hasFocus when the context menu is open
           // or closing, which leads us to ignore selection changes from the
           // context menu because it looks like the editor isn't focused.
           // This kludges around that.
           return (document.hasFocus() || browser$1.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
               this.root.activeElement == this.contentDOM;
       }
       /**
       Put focus on the editor.
       */
       focus() {
           this.observer.ignore(() => {
               focusPreventScroll(this.contentDOM);
               this.docView.updateSelection();
           });
       }
       /**
       Clean up this editor view, removing its element from the
       document, unregistering event handlers, and notifying
       plugins. The view instance can no longer be used after
       calling this.
       */
       destroy() {
           for (let plugin of this.plugins)
               plugin.destroy(this);
           this.plugins = [];
           this.inputState.destroy();
           this.dom.remove();
           this.observer.destroy();
           if (this.measureScheduled > -1)
               cancelAnimationFrame(this.measureScheduled);
           this.destroyed = true;
       }
       /**
       Returns an effect that can be
       [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
       cause it to scroll the given position or range into view.
       */
       static scrollIntoView(pos, options = {}) {
           return scrollIntoView$1.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
       }
       /**
       Returns an extension that can be used to add DOM event handlers.
       The value should be an object mapping event names to handler
       functions. For any given event, such functions are ordered by
       extension precedence, and the first handler to return true will
       be assumed to have handled that event, and no other handlers or
       built-in behavior will be activated for it. These are registered
       on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
       for `scroll` handlers, which will be called any time the
       editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
       its parent nodes is scrolled.
       */
       static domEventHandlers(handlers) {
           return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
       }
       /**
       Create a theme extension. The first argument can be a
       [`style-mod`](https://github.com/marijnh/style-mod#documentation)
       style spec providing the styles for the theme. These will be
       prefixed with a generated class for the style.
       
       Because the selectors will be prefixed with a scope class, rule
       that directly match the editor's [wrapper
       element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
       added—need to be explicitly differentiated by adding an `&` to
       the selector for that element—for example
       `&.cm-focused`.
       
       When `dark` is set to true, the theme will be marked as dark,
       which will cause the `&dark` rules from [base
       themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
       `&light` when a light theme is active).
       */
       static theme(spec, options) {
           let prefix = StyleModule.newName();
           let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
           if (options && options.dark)
               result.push(darkTheme.of(true));
           return result;
       }
       /**
       Create an extension that adds styles to the base theme. Like
       with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
       place of the editor wrapper element when directly targeting
       that. You can also use `&dark` or `&light` instead to only
       target editors with a dark or light theme.
       */
       static baseTheme(spec) {
           return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
       }
       /**
       Retrieve an editor view instance from the view's DOM
       representation.
       */
       static findFromDOM(dom) {
           var _a;
           let content = dom.querySelector(".cm-content");
           let cView = content && ContentView.get(content) || ContentView.get(dom);
           return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
       }
   }
   /**
   Facet to add a [style
   module](https://github.com/marijnh/style-mod#documentation) to
   an editor view. The view will ensure that the module is
   mounted in its [document
   root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
   */
   EditorView.styleModule = styleModule;
   /**
   An input handler can override the way changes to the editable
   DOM content are handled. Handlers are passed the document
   positions between which the change was found, and the new
   content. When one returns true, no further input handlers are
   called and the default behavior is prevented.
   */
   EditorView.inputHandler = inputHandler$1;
   /**
   By default, the editor assumes all its content has the same
   [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
   value to make it read the text direction of every (rendered)
   line separately.
   */
   EditorView.perLineTextDirection = perLineTextDirection;
   /**
   Allows you to provide a function that should be called when the
   library catches an exception from an extension (mostly from view
   plugins, but may be used by other extensions to route exceptions
   from user-code-provided callbacks). This is mostly useful for
   debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
   */
   EditorView.exceptionSink = exceptionSink;
   /**
   A facet that can be used to register a function to be called
   every time the view updates.
   */
   EditorView.updateListener = updateListener;
   /**
   Facet that controls whether the editor content DOM is editable.
   When its highest-precedence value is `false`, the element will
   not have its `contenteditable` attribute set. (Note that this
   doesn't affect API calls that change the editor content, even
   when those are bound to keys or buttons. See the
   [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
   */
   EditorView.editable = editable;
   /**
   Allows you to influence the way mouse selection happens. The
   functions in this facet will be called for a `mousedown` event
   on the editor, and can return an object that overrides the way a
   selection is computed from that mouse click or drag.
   */
   EditorView.mouseSelectionStyle = mouseSelectionStyle;
   /**
   Facet used to configure whether a given selection drag event
   should move or copy the selection. The given predicate will be
   called with the `mousedown` event, and can return `true` when
   the drag should move the content.
   */
   EditorView.dragMovesSelection = dragMovesSelection$1;
   /**
   Facet used to configure whether a given selecting click adds a
   new range to the existing selection or replaces it entirely. The
   default behavior is to check `event.metaKey` on macOS, and
   `event.ctrlKey` elsewhere.
   */
   EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
   /**
   A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
   are shown in the view. Decorations can be provided in two
   ways—directly, or via a function that takes an editor view.

   Only decoration sets provided directly are allowed to influence
   the editor's vertical layout structure. The ones provided as
   functions are called _after_ the new viewport has been computed,
   and thus **must not** introduce block widgets or replacing
   decorations that cover line breaks.
   */
   EditorView.decorations = decorations;
   /**
   Used to provide ranges that should be treated as atoms as far as
   cursor motion is concerned. This causes methods like
   [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
   [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
   commands built on top of them) to skip across such regions when
   a selection endpoint would enter them. This does _not_ prevent
   direct programmatic [selection
   updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
   regions.
   */
   EditorView.atomicRanges = atomicRanges;
   /**
   Facet that allows extensions to provide additional scroll
   margins (space around the sides of the scrolling element that
   should be considered invisible). This can be useful when the
   plugin introduces elements that cover part of that element (for
   example a horizontally fixed gutter).
   */
   EditorView.scrollMargins = scrollMargins;
   /**
   This facet records whether a dark theme is active. The extension
   returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
   includes an instance of this when the `dark` option is set to
   true.
   */
   EditorView.darkTheme = darkTheme;
   /**
   Facet that provides additional DOM attributes for the editor's
   editable DOM element.
   */
   EditorView.contentAttributes = contentAttributes;
   /**
   Facet that provides DOM attributes for the editor's outer
   element.
   */
   EditorView.editorAttributes = editorAttributes;
   /**
   An extension that enables line wrapping in the editor (by
   setting CSS `white-space` to `pre-wrap` in the content).
   */
   EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
   /**
   State effect used to include screen reader announcements in a
   transaction. These will be added to the DOM in a visually hidden
   element with `aria-live="polite"` set, and should be used to
   describe effects that are visually obvious but may not be
   noticed by screen reader users (such as moving to the next
   search match).
   */
   EditorView.announce = /*@__PURE__*/StateEffect.define();
   // Maximum line length for which we compute accurate bidi info
   const MaxBidiLine = 4096;
   const BadMeasure = {};
   class CachedOrder {
       constructor(from, to, dir, order) {
           this.from = from;
           this.to = to;
           this.dir = dir;
           this.order = order;
       }
       static update(cache, changes) {
           if (changes.empty)
               return cache;
           let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
           for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
               let entry = cache[i];
               if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                   result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
           }
           return result;
       }
   }
   function attrsFromFacet(view, facet, base) {
       for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
           let source = sources[i], value = typeof source == "function" ? source(view) : source;
           if (value)
               combineAttrs(value, base);
       }
       return base;
   }

   const currentPlatform = browser$1.mac ? "mac" : browser$1.windows ? "win" : browser$1.linux ? "linux" : "key";
   function normalizeKeyName(name, platform) {
       const parts = name.split(/-(?!$)/);
       let result = parts[parts.length - 1];
       if (result == "Space")
           result = " ";
       let alt, ctrl, shift, meta;
       for (let i = 0; i < parts.length - 1; ++i) {
           const mod = parts[i];
           if (/^(cmd|meta|m)$/i.test(mod))
               meta = true;
           else if (/^a(lt)?$/i.test(mod))
               alt = true;
           else if (/^(c|ctrl|control)$/i.test(mod))
               ctrl = true;
           else if (/^s(hift)?$/i.test(mod))
               shift = true;
           else if (/^mod$/i.test(mod)) {
               if (platform == "mac")
                   meta = true;
               else
                   ctrl = true;
           }
           else
               throw new Error("Unrecognized modifier name: " + mod);
       }
       if (alt)
           result = "Alt-" + result;
       if (ctrl)
           result = "Ctrl-" + result;
       if (meta)
           result = "Meta-" + result;
       if (shift)
           result = "Shift-" + result;
       return result;
   }
   function modifiers(name, event, shift) {
       if (event.altKey)
           name = "Alt-" + name;
       if (event.ctrlKey)
           name = "Ctrl-" + name;
       if (event.metaKey)
           name = "Meta-" + name;
       if (shift !== false && event.shiftKey)
           name = "Shift-" + name;
       return name;
   }
   const handleKeyEvents = /*@__PURE__*/EditorView.domEventHandlers({
       keydown(event, view) {
           return runHandlers(getKeymap(view.state), event, view, "editor");
       }
   });
   /**
   Facet used for registering keymaps.

   You can add multiple keymaps to an editor. Their priorities
   determine their precedence (the ones specified early or with high
   priority get checked first). When a handler has returned `true`
   for a given key, no further handlers are called.
   */
   const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
   const Keymaps = /*@__PURE__*/new WeakMap();
   // This is hidden behind an indirection, rather than directly computed
   // by the facet, to keep internal types out of the facet's type.
   function getKeymap(state) {
       let bindings = state.facet(keymap);
       let map = Keymaps.get(bindings);
       if (!map)
           Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
       return map;
   }
   /**
   Run the key handlers registered for a given scope. The event
   object should be a `"keydown"` event. Returns true if any of the
   handlers handled it.
   */
   function runScopeHandlers(view, event, scope) {
       return runHandlers(getKeymap(view.state), event, view, scope);
   }
   let storedPrefix = null;
   const PrefixTimeout = 4000;
   function buildKeymap(bindings, platform = currentPlatform) {
       let bound = Object.create(null);
       let isPrefix = Object.create(null);
       let checkPrefix = (name, is) => {
           let current = isPrefix[name];
           if (current == null)
               isPrefix[name] = is;
           else if (current != is)
               throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
       };
       let add = (scope, key, command, preventDefault) => {
           let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
           let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
           for (let i = 1; i < parts.length; i++) {
               let prefix = parts.slice(0, i).join(" ");
               checkPrefix(prefix, true);
               if (!scopeObj[prefix])
                   scopeObj[prefix] = {
                       preventDefault: true,
                       commands: [(view) => {
                               let ourObj = storedPrefix = { view, prefix, scope };
                               setTimeout(() => { if (storedPrefix == ourObj)
                                   storedPrefix = null; }, PrefixTimeout);
                               return true;
                           }]
                   };
           }
           let full = parts.join(" ");
           checkPrefix(full, false);
           let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, commands: [] });
           binding.commands.push(command);
           if (preventDefault)
               binding.preventDefault = true;
       };
       for (let b of bindings) {
           let name = b[platform] || b.key;
           if (!name)
               continue;
           for (let scope of b.scope ? b.scope.split(" ") : ["editor"]) {
               add(scope, name, b.run, b.preventDefault);
               if (b.shift)
                   add(scope, "Shift-" + name, b.shift, b.preventDefault);
           }
       }
       return bound;
   }
   function runHandlers(map, event, view, scope) {
       let name = keyName(event);
       let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != " ";
       let prefix = "", fallthrough = false;
       if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
           prefix = storedPrefix.prefix + " ";
           if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0)
               storedPrefix = null;
       }
       let runFor = (binding) => {
           if (binding) {
               for (let cmd of binding.commands)
                   if (cmd(view))
                       return true;
               if (binding.preventDefault)
                   fallthrough = true;
           }
           return false;
       };
       let scopeObj = map[scope], baseName;
       if (scopeObj) {
           if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))
               return true;
           if (isChar && (event.shiftKey || event.altKey || event.metaKey || charCode > 127) &&
               (baseName = base$3[event.keyCode]) && baseName != name) {
               if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))
                   return true;
               else if (event.shiftKey && shift[event.keyCode] != baseName &&
                   runFor(scopeObj[prefix + modifiers(shift[event.keyCode], event, false)]))
                   return true;
           }
           else if (isChar && event.shiftKey) {
               if (runFor(scopeObj[prefix + modifiers(name, event, true)]))
                   return true;
           }
       }
       return fallthrough;
   }

   const CanHidePrimary = !browser$1.ios; // FIXME test IE
   const selectionConfig = /*@__PURE__*/Facet.define({
       combine(configs) {
           return combineConfig(configs, {
               cursorBlinkRate: 1200,
               drawRangeCursor: true
           }, {
               cursorBlinkRate: (a, b) => Math.min(a, b),
               drawRangeCursor: (a, b) => a || b
           });
       }
   });
   /**
   Returns an extension that hides the browser's native selection and
   cursor, replacing the selection with a background behind the text
   (with the `cm-selectionBackground` class), and the
   cursors with elements overlaid over the code (using
   `cm-cursor-primary` and `cm-cursor-secondary`).

   This allows the editor to display secondary selection ranges, and
   tends to produce a type of selection more in line with that users
   expect in a text editor (the native selection styling will often
   leave gaps between lines and won't fill the horizontal space after
   a line when the selection continues past it).

   It does have a performance cost, in that it requires an extra DOM
   layout cycle for many updates (the selection is drawn based on DOM
   layout information that's only available after laying out the
   content).
   */
   function drawSelection(config = {}) {
       return [
           selectionConfig.of(config),
           drawSelectionPlugin,
           hideNativeSelection
       ];
   }
   class Piece {
       constructor(left, top, width, height, className) {
           this.left = left;
           this.top = top;
           this.width = width;
           this.height = height;
           this.className = className;
       }
       draw() {
           let elt = document.createElement("div");
           elt.className = this.className;
           this.adjust(elt);
           return elt;
       }
       adjust(elt) {
           elt.style.left = this.left + "px";
           elt.style.top = this.top + "px";
           if (this.width >= 0)
               elt.style.width = this.width + "px";
           elt.style.height = this.height + "px";
       }
       eq(p) {
           return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
               this.className == p.className;
       }
   }
   const drawSelectionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.view = view;
           this.rangePieces = [];
           this.cursors = [];
           this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };
           this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
           this.selectionLayer.className = "cm-selectionLayer";
           this.selectionLayer.setAttribute("aria-hidden", "true");
           this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
           this.cursorLayer.className = "cm-cursorLayer";
           this.cursorLayer.setAttribute("aria-hidden", "true");
           view.requestMeasure(this.measureReq);
           this.setBlinkRate();
       }
       setBlinkRate() {
           this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + "ms";
       }
       update(update) {
           let confChanged = update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
           if (confChanged || update.selectionSet || update.geometryChanged || update.viewportChanged)
               this.view.requestMeasure(this.measureReq);
           if (update.transactions.some(tr => tr.scrollIntoView))
               this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
           if (confChanged)
               this.setBlinkRate();
       }
       readPos() {
           let { state } = this.view, conf = state.facet(selectionConfig);
           let rangePieces = state.selection.ranges.map(r => r.empty ? [] : measureRange(this.view, r)).reduce((a, b) => a.concat(b));
           let cursors = [];
           for (let r of state.selection.ranges) {
               let prim = r == state.selection.main;
               if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
                   let piece = measureCursor(this.view, r, prim);
                   if (piece)
                       cursors.push(piece);
               }
           }
           return { rangePieces, cursors };
       }
       drawSel({ rangePieces, cursors }) {
           if (rangePieces.length != this.rangePieces.length || rangePieces.some((p, i) => !p.eq(this.rangePieces[i]))) {
               this.selectionLayer.textContent = "";
               for (let p of rangePieces)
                   this.selectionLayer.appendChild(p.draw());
               this.rangePieces = rangePieces;
           }
           if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {
               let oldCursors = this.cursorLayer.children;
               if (oldCursors.length !== cursors.length) {
                   this.cursorLayer.textContent = "";
                   for (const c of cursors)
                       this.cursorLayer.appendChild(c.draw());
               }
               else {
                   cursors.forEach((c, idx) => c.adjust(oldCursors[idx]));
               }
               this.cursors = cursors;
           }
       }
       destroy() {
           this.selectionLayer.remove();
           this.cursorLayer.remove();
       }
   });
   const themeSpec = {
       ".cm-line": {
           "& ::selection": { backgroundColor: "transparent !important" },
           "&::selection": { backgroundColor: "transparent !important" }
       }
   };
   if (CanHidePrimary)
       themeSpec[".cm-line"].caretColor = "transparent !important";
   const hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme(themeSpec));
   function getBase(view) {
       let rect = view.scrollDOM.getBoundingClientRect();
       let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
       return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };
   }
   function wrappedLine(view, pos, inside) {
       let range = EditorSelection.cursor(pos);
       return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
           to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
           type: BlockType.Text };
   }
   function blockAt(view, pos) {
       let line = view.lineBlockAt(pos);
       if (Array.isArray(line.type))
           for (let l of line.type) {
               if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
                   return l;
           }
       return line;
   }
   function measureRange(view, range) {
       if (range.to <= view.viewport.from || range.from >= view.viewport.to)
           return [];
       let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
       let ltr = view.textDirection == Direction.LTR;
       let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
       let lineStyle = window.getComputedStyle(content.firstChild);
       let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent));
       let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
       let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
       let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
       let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
       if (view.lineWrapping) {
           if (visualStart)
               visualStart = wrappedLine(view, from, visualStart);
           if (visualEnd)
               visualEnd = wrappedLine(view, to, visualEnd);
       }
       if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
           return pieces(drawForLine(range.from, range.to, visualStart));
       }
       else {
           let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
           let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
           let between = [];
           if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1)
               between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
           else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text)
               top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
           return pieces(top).concat(between).concat(pieces(bottom));
       }
       function piece(left, top, right, bottom) {
           return new Piece(left - base.left, top - base.top - 0.01 /* Epsilon */, right - left, bottom - top + 0.01 /* Epsilon */, "cm-selectionBackground");
       }
       function pieces({ top, bottom, horizontal }) {
           let pieces = [];
           for (let i = 0; i < horizontal.length; i += 2)
               pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
           return pieces;
       }
       // Gets passed from/to in line-local positions
       function drawForLine(from, to, line) {
           let top = 1e9, bottom = -1e9, horizontal = [];
           function addSpan(from, fromOpen, to, toOpen, dir) {
               // Passing 2/-2 is a kludge to force the view to return
               // coordinates on the proper side of block widgets, since
               // normalizing the side there, though appropriate for most
               // coordsAtPos queries, would break selection drawing.
               let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));
               let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));
               top = Math.min(fromCoords.top, toCoords.top, top);
               bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
               if (dir == Direction.LTR)
                   horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
               else
                   horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
           }
           let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
           // Split the range by visible range and document line
           for (let r of view.visibleRanges)
               if (r.to > start && r.from < end) {
                   for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
                       let docLine = view.state.doc.lineAt(pos);
                       for (let span of view.bidiSpans(docLine)) {
                           let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                           if (spanFrom >= endPos)
                               break;
                           if (spanTo > pos)
                               addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                       }
                       pos = docLine.to + 1;
                       if (pos >= endPos)
                           break;
                   }
               }
           if (horizontal.length == 0)
               addSpan(start, from == null, end, to == null, view.textDirection);
           return { top, bottom, horizontal };
       }
       function drawForWidget(block, top) {
           let y = contentRect.top + (top ? block.top : block.bottom);
           return { top: y, bottom: y, horizontal: [] };
       }
   }
   function measureCursor(view, cursor, primary) {
       let pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
       if (!pos)
           return null;
       let base = getBase(view);
       return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary");
   }

   const setDropCursorPos = /*@__PURE__*/StateEffect.define({
       map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }
   });
   const dropCursorPos = /*@__PURE__*/StateField.define({
       create() { return null; },
       update(pos, tr) {
           if (pos != null)
               pos = tr.changes.mapPos(pos);
           return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);
       }
   });
   const drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.view = view;
           this.cursor = null;
           this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
       }
       update(update) {
           var _a;
           let cursorPos = update.state.field(dropCursorPos);
           if (cursorPos == null) {
               if (this.cursor != null) {
                   (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
                   this.cursor = null;
               }
           }
           else {
               if (!this.cursor) {
                   this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
                   this.cursor.className = "cm-dropCursor";
               }
               if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
                   this.view.requestMeasure(this.measureReq);
           }
       }
       readPos() {
           let pos = this.view.state.field(dropCursorPos);
           let rect = pos != null && this.view.coordsAtPos(pos);
           if (!rect)
               return null;
           let outer = this.view.scrollDOM.getBoundingClientRect();
           return {
               left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,
               top: rect.top - outer.top + this.view.scrollDOM.scrollTop,
               height: rect.bottom - rect.top
           };
       }
       drawCursor(pos) {
           if (this.cursor) {
               if (pos) {
                   this.cursor.style.left = pos.left + "px";
                   this.cursor.style.top = pos.top + "px";
                   this.cursor.style.height = pos.height + "px";
               }
               else {
                   this.cursor.style.left = "-100000px";
               }
           }
       }
       destroy() {
           if (this.cursor)
               this.cursor.remove();
       }
       setDropPos(pos) {
           if (this.view.state.field(dropCursorPos) != pos)
               this.view.dispatch({ effects: setDropCursorPos.of(pos) });
       }
   }, {
       eventHandlers: {
           dragover(event) {
               this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
           },
           dragleave(event) {
               if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
                   this.setDropPos(null);
           },
           dragend() {
               this.setDropPos(null);
           },
           drop() {
               this.setDropPos(null);
           }
       }
   });
   /**
   Draws a cursor at the current drop position when something is
   dragged over the editor.
   */
   function dropCursor() {
       return [dropCursorPos, drawDropCursor];
   }

   function iterMatches(doc, re, from, to, f) {
       re.lastIndex = 0;
       for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
           if (!cursor.lineBreak)
               while (m = re.exec(cursor.value))
                   f(pos + m.index, pos + m.index + m[0].length, m);
       }
   }
   function matchRanges(view, maxLength) {
       let visible = view.visibleRanges;
       if (visible.length == 1 && visible[0].from == view.viewport.from &&
           visible[0].to == view.viewport.to)
           return visible;
       let result = [];
       for (let { from, to } of visible) {
           from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
           to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
           if (result.length && result[result.length - 1].to >= from)
               result[result.length - 1].to = to;
           else
               result.push({ from, to });
       }
       return result;
   }
   /**
   Helper class used to make it easier to maintain decorations on
   visible code that matches a given regular expression. To be used
   in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
   represent a matching configuration.
   */
   class MatchDecorator {
       /**
       Create a decorator.
       */
       constructor(config) {
           let { regexp, decoration, boundary, maxLength = 1000 } = config;
           if (!regexp.global)
               throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
           this.regexp = regexp;
           this.getDeco = typeof decoration == "function" ? decoration : () => decoration;
           this.boundary = boundary;
           this.maxLength = maxLength;
       }
       /**
       Compute the full set of decorations for matches in the given
       view's viewport. You'll want to call this when initializing your
       plugin.
       */
       createDeco(view) {
           let build = new RangeSetBuilder();
           for (let { from, to } of matchRanges(view, this.maxLength))
               iterMatches(view.state.doc, this.regexp, from, to, (a, b, m) => build.add(a, b, this.getDeco(m, view, a)));
           return build.finish();
       }
       /**
       Update a set of decorations for a view update. `deco` _must_ be
       the set of decorations produced by _this_ `MatchDecorator` for
       the view state before the update.
       */
       updateDeco(update, deco) {
           let changeFrom = 1e9, changeTo = -1;
           if (update.docChanged)
               update.changes.iterChanges((_f, _t, from, to) => {
                   if (to > update.view.viewport.from && from < update.view.viewport.to) {
                       changeFrom = Math.min(from, changeFrom);
                       changeTo = Math.max(to, changeTo);
                   }
               });
           if (update.viewportChanged || changeTo - changeFrom > 1000)
               return this.createDeco(update.view);
           if (changeTo > -1)
               return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
           return deco;
       }
       updateRange(view, deco, updateFrom, updateTo) {
           for (let r of view.visibleRanges) {
               let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
               if (to > from) {
                   let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
                   let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
                   if (this.boundary) {
                       for (; from > fromLine.from; from--)
                           if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                               start = from;
                               break;
                           }
                       for (; to < toLine.to; to++)
                           if (this.boundary.test(toLine.text[to - toLine.from])) {
                               end = to;
                               break;
                           }
                   }
                   let ranges = [], m;
                   if (fromLine == toLine) {
                       this.regexp.lastIndex = start - fromLine.from;
                       while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) {
                           let pos = m.index + fromLine.from;
                           ranges.push(this.getDeco(m, view, pos).range(pos, pos + m[0].length));
                       }
                   }
                   else {
                       iterMatches(view.state.doc, this.regexp, start, end, (from, to, m) => ranges.push(this.getDeco(m, view, from).range(from, to)));
                   }
                   deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });
               }
           }
           return deco;
       }
   }

   const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
   const Specials = /*@__PURE__*/new RegExp("[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\u202d\u202e\ufeff\ufff9-\ufffc]", UnicodeRegexpSupport);
   const Names = {
       0: "null",
       7: "bell",
       8: "backspace",
       10: "newline",
       11: "vertical tab",
       13: "carriage return",
       27: "escape",
       8203: "zero width space",
       8204: "zero width non-joiner",
       8205: "zero width joiner",
       8206: "left-to-right mark",
       8207: "right-to-left mark",
       8232: "line separator",
       8237: "left-to-right override",
       8238: "right-to-left override",
       8233: "paragraph separator",
       65279: "zero width no-break space",
       65532: "object replacement"
   };
   let _supportsTabSize = null;
   function supportsTabSize() {
       var _a;
       if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
           let styles = document.body.style;
           _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
       }
       return _supportsTabSize || false;
   }
   const specialCharConfig = /*@__PURE__*/Facet.define({
       combine(configs) {
           let config = combineConfig(configs, {
               render: null,
               specialChars: Specials,
               addSpecialChars: null
           });
           if (config.replaceTabs = !supportsTabSize())
               config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
           if (config.addSpecialChars)
               config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
           return config;
       }
   });
   /**
   Returns an extension that installs highlighting of special
   characters.
   */
   function highlightSpecialChars(
   /**
   Configuration options.
   */
   config = {}) {
       return [specialCharConfig.of(config), specialCharPlugin()];
   }
   let _plugin = null;
   function specialCharPlugin() {
       return _plugin || (_plugin = ViewPlugin.fromClass(class {
           constructor(view) {
               this.view = view;
               this.decorations = Decoration.none;
               this.decorationCache = Object.create(null);
               this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
               this.decorations = this.decorator.createDeco(view);
           }
           makeDecorator(conf) {
               return new MatchDecorator({
                   regexp: conf.specialChars,
                   decoration: (m, view, pos) => {
                       let { doc } = view.state;
                       let code = codePointAt(m[0], 0);
                       if (code == 9) {
                           let line = doc.lineAt(pos);
                           let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
                           return Decoration.replace({ widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth) });
                       }
                       return this.decorationCache[code] ||
                           (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
                   },
                   boundary: conf.replaceTabs ? undefined : /[^]/
               });
           }
           update(update) {
               let conf = update.state.facet(specialCharConfig);
               if (update.startState.facet(specialCharConfig) != conf) {
                   this.decorator = this.makeDecorator(conf);
                   this.decorations = this.decorator.createDeco(update.view);
               }
               else {
                   this.decorations = this.decorator.updateDeco(update, this.decorations);
               }
           }
       }, {
           decorations: v => v.decorations
       }));
   }
   const DefaultPlaceholder = "\u2022";
   // Assigns placeholder characters from the Control Pictures block to
   // ASCII control characters
   function placeholder$1(code) {
       if (code >= 32)
           return DefaultPlaceholder;
       if (code == 10)
           return "\u2424";
       return String.fromCharCode(9216 + code);
   }
   class SpecialCharWidget extends WidgetType {
       constructor(options, code) {
           super();
           this.options = options;
           this.code = code;
       }
       eq(other) { return other.code == this.code; }
       toDOM(view) {
           let ph = placeholder$1(this.code);
           let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
           let custom = this.options.render && this.options.render(this.code, desc, ph);
           if (custom)
               return custom;
           let span = document.createElement("span");
           span.textContent = ph;
           span.title = desc;
           span.setAttribute("aria-label", desc);
           span.className = "cm-specialChar";
           return span;
       }
       ignoreEvent() { return false; }
   }
   class TabWidget extends WidgetType {
       constructor(width) {
           super();
           this.width = width;
       }
       eq(other) { return other.width == this.width; }
       toDOM() {
           let span = document.createElement("span");
           span.textContent = "\t";
           span.className = "cm-tab";
           span.style.width = this.width + "px";
           return span;
       }
       ignoreEvent() { return false; }
   }

   /**
   Mark lines that have a cursor on them with the `"cm-activeLine"`
   DOM class.
   */
   function highlightActiveLine() {
       return activeLineHighlighter;
   }
   const lineDeco = /*@__PURE__*/Decoration.line({ class: "cm-activeLine" });
   const activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.decorations = this.getDeco(view);
       }
       update(update) {
           if (update.docChanged || update.selectionSet)
               this.decorations = this.getDeco(update.view);
       }
       getDeco(view) {
           let lastLineStart = -1, deco = [];
           for (let r of view.state.selection.ranges) {
               if (!r.empty)
                   return Decoration.none;
               let line = view.lineBlockAt(r.head);
               if (line.from > lastLineStart) {
                   deco.push(lineDeco.range(line.from));
                   lastLineStart = line.from;
               }
           }
           return Decoration.set(deco);
       }
   }, {
       decorations: v => v.decorations
   });

   // Don't compute precise column positions for line offsets above this
   // (since it could get expensive). Assume offset==column for them.
   const MaxOff = 2000;
   function rectangleFor(state, a, b) {
       let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
       let ranges = [];
       if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
           let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
           for (let i = startLine; i <= endLine; i++) {
               let line = state.doc.line(i);
               if (line.length <= endOff)
                   ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
           }
       }
       else {
           let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
           for (let i = startLine; i <= endLine; i++) {
               let line = state.doc.line(i);
               let start = findColumn(line.text, startCol, state.tabSize, true);
               if (start > -1) {
                   let end = findColumn(line.text, endCol, state.tabSize);
                   ranges.push(EditorSelection.range(line.from + start, line.from + end));
               }
           }
       }
       return ranges;
   }
   function absoluteColumn(view, x) {
       let ref = view.coordsAtPos(view.viewport.from);
       return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
   }
   function getPos(view, event) {
       let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
       let line = view.state.doc.lineAt(offset), off = offset - line.from;
       let col = off > MaxOff ? -1
           : off == line.length ? absoluteColumn(view, event.clientX)
               : countColumn(line.text, view.state.tabSize, offset - line.from);
       return { line: line.number, col, off };
   }
   function rectangleSelectionStyle(view, event) {
       let start = getPos(view, event), startSel = view.state.selection;
       if (!start)
           return null;
       return {
           update(update) {
               if (update.docChanged) {
                   let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
                   let newLine = update.state.doc.lineAt(newStart);
                   start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
                   startSel = startSel.map(update.changes);
               }
           },
           get(event, _extend, multiple) {
               let cur = getPos(view, event);
               if (!cur)
                   return startSel;
               let ranges = rectangleFor(view.state, start, cur);
               if (!ranges.length)
                   return startSel;
               if (multiple)
                   return EditorSelection.create(ranges.concat(startSel.ranges));
               else
                   return EditorSelection.create(ranges);
           }
       };
   }
   /**
   Create an extension that enables rectangular selections. By
   default, it will react to left mouse drag with the Alt key held
   down. When such a selection occurs, the text within the rectangle
   that was dragged over will be selected, as one selection
   [range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
   */
   function rectangularSelection(options) {
       let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);
       return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
   }
   const keys = {
       Alt: [18, e => e.altKey],
       Control: [17, e => e.ctrlKey],
       Shift: [16, e => e.shiftKey],
       Meta: [91, e => e.metaKey]
   };
   const showCrosshair = { style: "cursor: crosshair" };
   /**
   Returns an extension that turns the pointer cursor into a
   crosshair when a given modifier key, defaulting to Alt, is held
   down. Can serve as a visual hint that rectangular selection is
   going to happen when paired with
   [`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
   */
   function crosshairCursor(options = {}) {
       let [code, getter] = keys[options.key || "Alt"];
       let plugin = ViewPlugin.fromClass(class {
           constructor(view) {
               this.view = view;
               this.isDown = false;
           }
           set(isDown) {
               if (this.isDown != isDown) {
                   this.isDown = isDown;
                   this.view.update([]);
               }
           }
       }, {
           eventHandlers: {
               keydown(e) {
                   this.set(e.keyCode == code || getter(e));
               },
               keyup(e) {
                   if (e.keyCode == code || !getter(e))
                       this.set(false);
               }
           }
       });
       return [
           plugin,
           EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })
       ];
   }

   const Outside = "-10000px";
   class TooltipViewManager {
       constructor(view, facet, createTooltipView) {
           this.facet = facet;
           this.createTooltipView = createTooltipView;
           this.input = view.state.facet(facet);
           this.tooltips = this.input.filter(t => t);
           this.tooltipViews = this.tooltips.map(createTooltipView);
       }
       update(update) {
           let input = update.state.facet(this.facet);
           let tooltips = input.filter(x => x);
           if (input === this.input) {
               for (let t of this.tooltipViews)
                   if (t.update)
                       t.update(update);
               return false;
           }
           let tooltipViews = [];
           for (let i = 0; i < tooltips.length; i++) {
               let tip = tooltips[i], known = -1;
               if (!tip)
                   continue;
               for (let i = 0; i < this.tooltips.length; i++) {
                   let other = this.tooltips[i];
                   if (other && other.create == tip.create)
                       known = i;
               }
               if (known < 0) {
                   tooltipViews[i] = this.createTooltipView(tip);
               }
               else {
                   let tooltipView = tooltipViews[i] = this.tooltipViews[known];
                   if (tooltipView.update)
                       tooltipView.update(update);
               }
           }
           for (let t of this.tooltipViews)
               if (tooltipViews.indexOf(t) < 0)
                   t.dom.remove();
           this.input = input;
           this.tooltips = tooltips;
           this.tooltipViews = tooltipViews;
           return true;
       }
   }
   function windowSpace() {
       return { top: 0, left: 0, bottom: innerHeight, right: innerWidth };
   }
   const tooltipConfig = /*@__PURE__*/Facet.define({
       combine: values => {
           var _a, _b, _c;
           return ({
               position: browser$1.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
               parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
               tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,
           });
       }
   });
   const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           var _a;
           this.view = view;
           this.inView = true;
           this.lastTransaction = 0;
           this.measureTimeout = -1;
           let config = view.state.facet(tooltipConfig);
           this.position = config.position;
           this.parent = config.parent;
           this.classes = view.themeClasses;
           this.createContainer();
           this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
           this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));
           this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
               if (Date.now() > this.lastTransaction - 50 &&
                   entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
                   this.measureSoon();
           }, { threshold: [1] }) : null;
           this.observeIntersection();
           (_a = view.dom.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
           this.maybeMeasure();
       }
       createContainer() {
           if (this.parent) {
               this.container = document.createElement("div");
               this.container.style.position = "relative";
               this.container.className = this.view.themeClasses;
               this.parent.appendChild(this.container);
           }
           else {
               this.container = this.view.dom;
           }
       }
       observeIntersection() {
           if (this.intersectionObserver) {
               this.intersectionObserver.disconnect();
               for (let tooltip of this.manager.tooltipViews)
                   this.intersectionObserver.observe(tooltip.dom);
           }
       }
       measureSoon() {
           if (this.measureTimeout < 0)
               this.measureTimeout = setTimeout(() => {
                   this.measureTimeout = -1;
                   this.maybeMeasure();
               }, 50);
       }
       update(update) {
           if (update.transactions.length)
               this.lastTransaction = Date.now();
           let updated = this.manager.update(update);
           if (updated)
               this.observeIntersection();
           let shouldMeasure = updated || update.geometryChanged;
           let newConfig = update.state.facet(tooltipConfig);
           if (newConfig.position != this.position) {
               this.position = newConfig.position;
               for (let t of this.manager.tooltipViews)
                   t.dom.style.position = this.position;
               shouldMeasure = true;
           }
           if (newConfig.parent != this.parent) {
               if (this.parent)
                   this.container.remove();
               this.parent = newConfig.parent;
               this.createContainer();
               for (let t of this.manager.tooltipViews)
                   this.container.appendChild(t.dom);
               shouldMeasure = true;
           }
           else if (this.parent && this.view.themeClasses != this.classes) {
               this.classes = this.container.className = this.view.themeClasses;
           }
           if (shouldMeasure)
               this.maybeMeasure();
       }
       createTooltip(tooltip) {
           let tooltipView = tooltip.create(this.view);
           tooltipView.dom.classList.add("cm-tooltip");
           if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
               let arrow = document.createElement("div");
               arrow.className = "cm-tooltip-arrow";
               tooltipView.dom.appendChild(arrow);
           }
           tooltipView.dom.style.position = this.position;
           tooltipView.dom.style.top = Outside;
           this.container.appendChild(tooltipView.dom);
           if (tooltipView.mount)
               tooltipView.mount(this.view);
           return tooltipView;
       }
       destroy() {
           var _a, _b;
           (_a = this.view.dom.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.removeEventListener("resize", this.measureSoon);
           for (let { dom } of this.manager.tooltipViews)
               dom.remove();
           (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
           clearTimeout(this.measureTimeout);
       }
       readMeasure() {
           let editor = this.view.dom.getBoundingClientRect();
           return {
               editor,
               parent: this.parent ? this.container.getBoundingClientRect() : editor,
               pos: this.manager.tooltips.map((t, i) => {
                   let tv = this.manager.tooltipViews[i];
                   return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
               }),
               size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
               space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
           };
       }
       writeMeasure(measured) {
           let { editor, space } = measured;
           let others = [];
           for (let i = 0; i < this.manager.tooltips.length; i++) {
               let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
               let pos = measured.pos[i], size = measured.size[i];
               // Hide tooltips that are outside of the editor.
               if (!pos || pos.bottom <= Math.max(editor.top, space.top) ||
                   pos.top >= Math.min(editor.bottom, space.bottom) ||
                   pos.right < Math.max(editor.left, space.left) - .1 ||
                   pos.left > Math.min(editor.right, space.right) + .1) {
                   dom.style.top = Outside;
                   continue;
               }
               let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
               let arrowHeight = arrow ? 7 /* Size */ : 0;
               let width = size.right - size.left, height = size.bottom - size.top;
               let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
               let left = size.width > space.right - space.left ? (ltr ? space.left : space.right - size.width)
                   : ltr ? Math.min(pos.left - (arrow ? 14 /* Offset */ : 0) + offset.x, space.right - width)
                       : Math.max(space.left, pos.left - width + (arrow ? 14 /* Offset */ : 0) - offset.x);
               let above = !!tooltip.above;
               if (!tooltip.strictSide && (above
                   ? pos.top - (size.bottom - size.top) - offset.y < space.top
                   : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) &&
                   above == (space.bottom - pos.bottom > pos.top - space.top))
                   above = !above;
               let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
               let right = left + width;
               if (tView.overlap !== true)
                   for (let r of others)
                       if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
                           top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
               if (this.position == "absolute") {
                   dom.style.top = (top - measured.parent.top) + "px";
                   dom.style.left = (left - measured.parent.left) + "px";
               }
               else {
                   dom.style.top = top + "px";
                   dom.style.left = left + "px";
               }
               if (arrow)
                   arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Offset */ - 7 /* Size */)}px`;
               if (tView.overlap !== true)
                   others.push({ left, top, right, bottom: top + height });
               dom.classList.toggle("cm-tooltip-above", above);
               dom.classList.toggle("cm-tooltip-below", !above);
               if (tView.positioned)
                   tView.positioned();
           }
       }
       maybeMeasure() {
           if (this.manager.tooltips.length) {
               if (this.view.inView)
                   this.view.requestMeasure(this.measureReq);
               if (this.inView != this.view.inView) {
                   this.inView = this.view.inView;
                   if (!this.inView)
                       for (let tv of this.manager.tooltipViews)
                           tv.dom.style.top = Outside;
               }
           }
       }
   }, {
       eventHandlers: {
           scroll() { this.maybeMeasure(); }
       }
   });
   const baseTheme$4 = /*@__PURE__*/EditorView.baseTheme({
       ".cm-tooltip": {
           zIndex: 100
       },
       "&light .cm-tooltip": {
           border: "1px solid #bbb",
           backgroundColor: "#f5f5f5"
       },
       "&light .cm-tooltip-section:not(:first-child)": {
           borderTop: "1px solid #bbb",
       },
       "&dark .cm-tooltip": {
           backgroundColor: "#333338",
           color: "white"
       },
       ".cm-tooltip-arrow": {
           height: `${7 /* Size */}px`,
           width: `${7 /* Size */ * 2}px`,
           position: "absolute",
           zIndex: -1,
           overflow: "hidden",
           "&:before, &:after": {
               content: "''",
               position: "absolute",
               width: 0,
               height: 0,
               borderLeft: `${7 /* Size */}px solid transparent`,
               borderRight: `${7 /* Size */}px solid transparent`,
           },
           ".cm-tooltip-above &": {
               bottom: `-${7 /* Size */}px`,
               "&:before": {
                   borderTop: `${7 /* Size */}px solid #bbb`,
               },
               "&:after": {
                   borderTop: `${7 /* Size */}px solid #f5f5f5`,
                   bottom: "1px"
               }
           },
           ".cm-tooltip-below &": {
               top: `-${7 /* Size */}px`,
               "&:before": {
                   borderBottom: `${7 /* Size */}px solid #bbb`,
               },
               "&:after": {
                   borderBottom: `${7 /* Size */}px solid #f5f5f5`,
                   top: "1px"
               }
           },
       },
       "&dark .cm-tooltip .cm-tooltip-arrow": {
           "&:before": {
               borderTopColor: "#333338",
               borderBottomColor: "#333338"
           },
           "&:after": {
               borderTopColor: "transparent",
               borderBottomColor: "transparent"
           }
       }
   });
   const noOffset = { x: 0, y: 0 };
   /**
   Facet to which an extension can add a value to show a tooltip.
   */
   const showTooltip = /*@__PURE__*/Facet.define({
       enables: [tooltipPlugin, baseTheme$4]
   });
   /**
   Get the active tooltip view for a given tooltip, if available.
   */
   function getTooltip(view, tooltip) {
       let plugin = view.plugin(tooltipPlugin);
       if (!plugin)
           return null;
       let found = plugin.manager.tooltips.indexOf(tooltip);
       return found < 0 ? null : plugin.manager.tooltipViews[found];
   }

   const panelConfig = /*@__PURE__*/Facet.define({
       combine(configs) {
           let topContainer, bottomContainer;
           for (let c of configs) {
               topContainer = topContainer || c.topContainer;
               bottomContainer = bottomContainer || c.bottomContainer;
           }
           return { topContainer, bottomContainer };
       }
   });
   /**
   Get the active panel created by the given constructor, if any.
   This can be useful when you need access to your panels' DOM
   structure.
   */
   function getPanel(view, panel) {
       let plugin = view.plugin(panelPlugin);
       let index = plugin ? plugin.specs.indexOf(panel) : -1;
       return index > -1 ? plugin.panels[index] : null;
   }
   const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.input = view.state.facet(showPanel);
           this.specs = this.input.filter(s => s);
           this.panels = this.specs.map(spec => spec(view));
           let conf = view.state.facet(panelConfig);
           this.top = new PanelGroup(view, true, conf.topContainer);
           this.bottom = new PanelGroup(view, false, conf.bottomContainer);
           this.top.sync(this.panels.filter(p => p.top));
           this.bottom.sync(this.panels.filter(p => !p.top));
           for (let p of this.panels) {
               p.dom.classList.add("cm-panel");
               if (p.mount)
                   p.mount();
           }
       }
       update(update) {
           let conf = update.state.facet(panelConfig);
           if (this.top.container != conf.topContainer) {
               this.top.sync([]);
               this.top = new PanelGroup(update.view, true, conf.topContainer);
           }
           if (this.bottom.container != conf.bottomContainer) {
               this.bottom.sync([]);
               this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
           }
           this.top.syncClasses();
           this.bottom.syncClasses();
           let input = update.state.facet(showPanel);
           if (input != this.input) {
               let specs = input.filter(x => x);
               let panels = [], top = [], bottom = [], mount = [];
               for (let spec of specs) {
                   let known = this.specs.indexOf(spec), panel;
                   if (known < 0) {
                       panel = spec(update.view);
                       mount.push(panel);
                   }
                   else {
                       panel = this.panels[known];
                       if (panel.update)
                           panel.update(update);
                   }
                   panels.push(panel);
                   (panel.top ? top : bottom).push(panel);
               }
               this.specs = specs;
               this.panels = panels;
               this.top.sync(top);
               this.bottom.sync(bottom);
               for (let p of mount) {
                   p.dom.classList.add("cm-panel");
                   if (p.mount)
                       p.mount();
               }
           }
           else {
               for (let p of this.panels)
                   if (p.update)
                       p.update(update);
           }
       }
       destroy() {
           this.top.sync([]);
           this.bottom.sync([]);
       }
   }, {
       provide: plugin => EditorView.scrollMargins.of(view => {
           let value = view.plugin(plugin);
           return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
       })
   });
   class PanelGroup {
       constructor(view, top, container) {
           this.view = view;
           this.top = top;
           this.container = container;
           this.dom = undefined;
           this.classes = "";
           this.panels = [];
           this.syncClasses();
       }
       sync(panels) {
           for (let p of this.panels)
               if (p.destroy && panels.indexOf(p) < 0)
                   p.destroy();
           this.panels = panels;
           this.syncDOM();
       }
       syncDOM() {
           if (this.panels.length == 0) {
               if (this.dom) {
                   this.dom.remove();
                   this.dom = undefined;
               }
               return;
           }
           if (!this.dom) {
               this.dom = document.createElement("div");
               this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
               this.dom.style[this.top ? "top" : "bottom"] = "0";
               let parent = this.container || this.view.dom;
               parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
           }
           let curDOM = this.dom.firstChild;
           for (let panel of this.panels) {
               if (panel.dom.parentNode == this.dom) {
                   while (curDOM != panel.dom)
                       curDOM = rm(curDOM);
                   curDOM = curDOM.nextSibling;
               }
               else {
                   this.dom.insertBefore(panel.dom, curDOM);
               }
           }
           while (curDOM)
               curDOM = rm(curDOM);
       }
       scrollMargin() {
           return !this.dom || this.container ? 0
               : Math.max(0, this.top ?
                   this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :
                   Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
       }
       syncClasses() {
           if (!this.container || this.classes == this.view.themeClasses)
               return;
           for (let cls of this.classes.split(" "))
               if (cls)
                   this.container.classList.remove(cls);
           for (let cls of (this.classes = this.view.themeClasses).split(" "))
               if (cls)
                   this.container.classList.add(cls);
       }
   }
   function rm(node) {
       let next = node.nextSibling;
       node.remove();
       return next;
   }
   /**
   Opening a panel is done by providing a constructor function for
   the panel through this facet. (The panel is closed again when its
   constructor is no longer provided.) Values of `null` are ignored.
   */
   const showPanel = /*@__PURE__*/Facet.define({
       enables: panelPlugin
   });

   /**
   A gutter marker represents a bit of information attached to a line
   in a specific gutter. Your own custom markers have to extend this
   class.
   */
   class GutterMarker extends RangeValue {
       /**
       @internal
       */
       compare(other) {
           return this == other || this.constructor == other.constructor && this.eq(other);
       }
       /**
       Compare this marker to another marker of the same type.
       */
       eq(other) { return false; }
       /**
       Called if the marker has a `toDOM` method and its representation
       was removed from a gutter.
       */
       destroy(dom) { }
   }
   GutterMarker.prototype.elementClass = "";
   GutterMarker.prototype.toDOM = undefined;
   GutterMarker.prototype.mapMode = MapMode.TrackBefore;
   GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
   GutterMarker.prototype.point = true;

   // FIXME profile adding a per-Tree TreeNode cache, validating it by
   // parent pointer
   /// The default maximum length of a `TreeBuffer` node.
   const DefaultBufferLength = 1024;
   let nextPropID = 0;
   class Range {
       constructor(from, to) {
           this.from = from;
           this.to = to;
       }
   }
   /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
   /// can have metadata associated with it in props. Instances of this
   /// class represent prop names.
   class NodeProp {
       /// Create a new node prop type.
       constructor(config = {}) {
           this.id = nextPropID++;
           this.perNode = !!config.perNode;
           this.deserialize = config.deserialize || (() => {
               throw new Error("This node type doesn't define a deserialize function");
           });
       }
       /// This is meant to be used with
       /// [`NodeSet.extend`](#common.NodeSet.extend) or
       /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
       /// prop values for each node type in the set. Takes a [match
       /// object](#common.NodeType^match) or function that returns undefined
       /// if the node type doesn't get this prop, and the prop's value if
       /// it does.
       add(match) {
           if (this.perNode)
               throw new RangeError("Can't add per-node props to node types");
           if (typeof match != "function")
               match = NodeType$1.match(match);
           return (type) => {
               let result = match(type);
               return result === undefined ? null : [this, result];
           };
       }
   }
   /// Prop that is used to describe matching delimiters. For opening
   /// delimiters, this holds an array of node names (written as a
   /// space-separated string when declaring this prop in a grammar)
   /// for the node types of closing delimiters that match it.
   NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
   /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
   /// attached to closing delimiters, holding an array of node names
   /// of types of matching opening delimiters.
   NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
   /// Used to assign node types to groups (for example, all node
   /// types that represent an expression could be tagged with an
   /// `"Expression"` group).
   NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
   /// The hash of the [context](#lr.ContextTracker.constructor)
   /// that the node was parsed in, if any. Used to limit reuse of
   /// contextual nodes.
   NodeProp.contextHash = new NodeProp({ perNode: true });
   /// The distance beyond the end of the node that the tokenizer
   /// looked ahead for any of the tokens inside the node. (The LR
   /// parser only stores this when it is larger than 25, for
   /// efficiency reasons.)
   NodeProp.lookAhead = new NodeProp({ perNode: true });
   /// This per-node prop is used to replace a given node, or part of a
   /// node, with another tree. This is useful to include trees from
   /// different languages in mixed-language parsers.
   NodeProp.mounted = new NodeProp({ perNode: true });
   /// A mounted tree, which can be [stored](#common.NodeProp^mounted) on
   /// a tree node to indicate that parts of its content are
   /// represented by another tree.
   class MountedTree {
       constructor(
       /// The inner tree.
       tree, 
       /// If this is null, this tree replaces the entire node (it will
       /// be included in the regular iteration instead of its host
       /// node). If not, only the given ranges are considered to be
       /// covered by this tree. This is used for trees that are mixed in
       /// a way that isn't strictly hierarchical. Such mounted trees are
       /// only entered by [`resolveInner`](#common.Tree.resolveInner)
       /// and [`enter`](#common.SyntaxNode.enter).
       overlay, 
       /// The parser used to create this subtree.
       parser) {
           this.tree = tree;
           this.overlay = overlay;
           this.parser = parser;
       }
   }
   const noProps = Object.create(null);
   /// Each node in a syntax tree has a node type associated with it.
   class NodeType$1 {
       /// @internal
       constructor(
       /// The name of the node type. Not necessarily unique, but if the
       /// grammar was written properly, different node types with the
       /// same name within a node set should play the same semantic
       /// role.
       name, 
       /// @internal
       props, 
       /// The id of this node in its set. Corresponds to the term ids
       /// used in the parser.
       id, 
       /// @internal
       flags = 0) {
           this.name = name;
           this.props = props;
           this.id = id;
           this.flags = flags;
       }
       /// Define a node type.
       static define(spec) {
           let props = spec.props && spec.props.length ? Object.create(null) : noProps;
           let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |
               (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);
           let type = new NodeType$1(spec.name || "", props, spec.id, flags);
           if (spec.props)
               for (let src of spec.props) {
                   if (!Array.isArray(src))
                       src = src(type);
                   if (src) {
                       if (src[0].perNode)
                           throw new RangeError("Can't store a per-node prop on a node type");
                       props[src[0].id] = src[1];
                   }
               }
           return type;
       }
       /// Retrieves a node prop for this type. Will return `undefined` if
       /// the prop isn't present on this node.
       prop(prop) { return this.props[prop.id]; }
       /// True when this is the top node of a grammar.
       get isTop() { return (this.flags & 1 /* Top */) > 0; }
       /// True when this node is produced by a skip rule.
       get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }
       /// Indicates whether this is an error node.
       get isError() { return (this.flags & 4 /* Error */) > 0; }
       /// When true, this node type doesn't correspond to a user-declared
       /// named node, for example because it is used to cache repetition.
       get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }
       /// Returns true when this node's name or one of its
       /// [groups](#common.NodeProp^group) matches the given string.
       is(name) {
           if (typeof name == 'string') {
               if (this.name == name)
                   return true;
               let group = this.prop(NodeProp.group);
               return group ? group.indexOf(name) > -1 : false;
           }
           return this.id == name;
       }
       /// Create a function from node types to arbitrary values by
       /// specifying an object whose property names are node or
       /// [group](#common.NodeProp^group) names. Often useful with
       /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
       /// names, separated by spaces, in a single property name to map
       /// multiple node names to a single value.
       static match(map) {
           let direct = Object.create(null);
           for (let prop in map)
               for (let name of prop.split(" "))
                   direct[name] = map[prop];
           return (node) => {
               for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                   let found = direct[i < 0 ? node.name : groups[i]];
                   if (found)
                       return found;
               }
           };
       }
   }
   /// An empty dummy node type to use when no actual type is available.
   NodeType$1.none = new NodeType$1("", Object.create(null), 0, 8 /* Anonymous */);
   /// A node set holds a collection of node types. It is used to
   /// compactly represent trees by storing their type ids, rather than a
   /// full pointer to the type object, in a numeric array. Each parser
   /// [has](#lr.LRParser.nodeSet) a node set, and [tree
   /// buffers](#common.TreeBuffer) can only store collections of nodes
   /// from the same set. A set can have a maximum of 2**16 (65536) node
   /// types in it, so that the ids fit into 16-bit typed array slots.
   class NodeSet {
       /// Create a set with the given types. The `id` property of each
       /// type should correspond to its position within the array.
       constructor(
       /// The node types in this set, by id.
       types) {
           this.types = types;
           for (let i = 0; i < types.length; i++)
               if (types[i].id != i)
                   throw new RangeError("Node type ids should correspond to array positions when creating a node set");
       }
       /// Create a copy of this set with some node properties added. The
       /// arguments to this method can be created with
       /// [`NodeProp.add`](#common.NodeProp.add).
       extend(...props) {
           let newTypes = [];
           for (let type of this.types) {
               let newProps = null;
               for (let source of props) {
                   let add = source(type);
                   if (add) {
                       if (!newProps)
                           newProps = Object.assign({}, type.props);
                       newProps[add[0].id] = add[1];
                   }
               }
               newTypes.push(newProps ? new NodeType$1(type.name, newProps, type.id, type.flags) : type);
           }
           return new NodeSet(newTypes);
       }
   }
   const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
   /// Options that control iteration. Can be combined with the `|`
   /// operator to enable multiple ones.
   var IterMode;
   (function (IterMode) {
       /// When enabled, iteration will only visit [`Tree`](#common.Tree)
       /// objects, not nodes packed into
       /// [`TreeBuffer`](#common.TreeBuffer)s.
       IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
       /// Enable this to make iteration include anonymous nodes (such as
       /// the nodes that wrap repeated grammar constructs into a balanced
       /// tree).
       IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
       /// By default, regular [mounted](#common.NodeProp^mounted) nodes
       /// replace their base node in iteration. Enable this to ignore them
       /// instead.
       IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
       /// This option only applies in
       /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
       /// library to not enter mounted overlays if one covers the given
       /// position.
       IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
   })(IterMode || (IterMode = {}));
   /// A piece of syntax tree. There are two ways to approach these
   /// trees: the way they are actually stored in memory, and the
   /// convenient way.
   ///
   /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
   /// objects. By packing detail information into `TreeBuffer` leaf
   /// nodes, the representation is made a lot more memory-efficient.
   ///
   /// However, when you want to actually work with tree nodes, this
   /// representation is very awkward, so most client code will want to
   /// use the [`TreeCursor`](#common.TreeCursor) or
   /// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
   /// a view on some part of this data structure, and can be used to
   /// move around to adjacent nodes.
   class Tree {
       /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
       constructor(
       /// The type of the top node.
       type, 
       /// This node's child nodes.
       children, 
       /// The positions (offsets relative to the start of this tree) of
       /// the children.
       positions, 
       /// The total length of this tree
       length, 
       /// Per-node [node props](#common.NodeProp) to associate with this node.
       props) {
           this.type = type;
           this.children = children;
           this.positions = positions;
           this.length = length;
           /// @internal
           this.props = null;
           if (props && props.length) {
               this.props = Object.create(null);
               for (let [prop, value] of props)
                   this.props[typeof prop == "number" ? prop : prop.id] = value;
           }
       }
       /// @internal
       toString() {
           let mounted = this.prop(NodeProp.mounted);
           if (mounted && !mounted.overlay)
               return mounted.tree.toString();
           let children = "";
           for (let ch of this.children) {
               let str = ch.toString();
               if (str) {
                   if (children)
                       children += ",";
                   children += str;
               }
           }
           return !this.type.name ? children :
               (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                   (children.length ? "(" + children + ")" : "");
       }
       /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
       /// the tree. Mode can be used to [control](#common.IterMode) which
       /// nodes the cursor visits.
       cursor(mode = 0) {
           return new TreeCursor(this.topNode, mode);
       }
       /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
       /// at the given position and side (see
       /// [`moveTo`](#common.TreeCursor.moveTo).
       cursorAt(pos, side = 0, mode = 0) {
           let scope = CachedNode.get(this) || this.topNode;
           let cursor = new TreeCursor(scope);
           cursor.moveTo(pos, side);
           CachedNode.set(this, cursor._tree);
           return cursor;
       }
       /// Get a [syntax node](#common.SyntaxNode) object for the top of the
       /// tree.
       get topNode() {
           return new TreeNode(this, 0, 0, null);
       }
       /// Get the [syntax node](#common.SyntaxNode) at the given position.
       /// If `side` is -1, this will move into nodes that end at the
       /// position. If 1, it'll move into nodes that start at the
       /// position. With 0, it'll only enter nodes that cover the position
       /// from both sides.
       resolve(pos, side = 0) {
           let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
           CachedNode.set(this, node);
           return node;
       }
       /// Like [`resolve`](#common.Tree.resolve), but will enter
       /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
       /// pointing into the innermost overlaid tree at the given position
       /// (with parent links going through all parent structure, including
       /// the host trees).
       resolveInner(pos, side = 0) {
           let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
           CachedInnerNode.set(this, node);
           return node;
       }
       /// Iterate over the tree and its children, calling `enter` for any
       /// node that touches the `from`/`to` region (if given) before
       /// running over such a node's children, and `leave` (if given) when
       /// leaving the node. When `enter` returns `false`, that node will
       /// not have its children iterated over (or `leave` called).
       iterate(spec) {
           let { enter, leave, from = 0, to = this.length } = spec;
           for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {
               let entered = false;
               if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {
                   if (c.firstChild())
                       continue;
                   entered = true;
               }
               for (;;) {
                   if (entered && leave && !c.type.isAnonymous)
                       leave(c);
                   if (c.nextSibling())
                       break;
                   if (!c.parent())
                       return;
                   entered = true;
               }
           }
       }
       /// Get the value of the given [node prop](#common.NodeProp) for this
       /// node. Works with both per-node and per-type props.
       prop(prop) {
           return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
       }
       /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
       /// format that can be passed to the [`Tree`](#common.Tree)
       /// constructor.
       get propValues() {
           let result = [];
           if (this.props)
               for (let id in this.props)
                   result.push([+id, this.props[id]]);
           return result;
       }
       /// Balance the direct children of this tree, producing a copy of
       /// which may have children grouped into subtrees with type
       /// [`NodeType.none`](#common.NodeType^none).
       balance(config = {}) {
           return this.children.length <= 8 /* BranchFactor */ ? this :
               balanceRange(NodeType$1.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType$1.none, children, positions, length)));
       }
       /// Build a tree from a postfix-ordered buffer of node information,
       /// or a cursor over such a buffer.
       static build(data) { return buildTree(data); }
   }
   /// The empty tree
   Tree.empty = new Tree(NodeType$1.none, [], [], 0);
   class FlatBufferCursor {
       constructor(buffer, index) {
           this.buffer = buffer;
           this.index = index;
       }
       get id() { return this.buffer[this.index - 4]; }
       get start() { return this.buffer[this.index - 3]; }
       get end() { return this.buffer[this.index - 2]; }
       get size() { return this.buffer[this.index - 1]; }
       get pos() { return this.index; }
       next() { this.index -= 4; }
       fork() { return new FlatBufferCursor(this.buffer, this.index); }
   }
   /// Tree buffers contain (type, start, end, endIndex) quads for each
   /// node. In such a buffer, nodes are stored in prefix order (parents
   /// before children, with the endIndex of the parent indicating which
   /// children belong to it).
   class TreeBuffer {
       /// Create a tree buffer.
       constructor(
       /// The buffer's content.
       buffer, 
       /// The total length of the group of nodes in the buffer.
       length, 
       /// The node set used in this buffer.
       set) {
           this.buffer = buffer;
           this.length = length;
           this.set = set;
       }
       /// @internal
       get type() { return NodeType$1.none; }
       /// @internal
       toString() {
           let result = [];
           for (let index = 0; index < this.buffer.length;) {
               result.push(this.childString(index));
               index = this.buffer[index + 3];
           }
           return result.join(",");
       }
       /// @internal
       childString(index) {
           let id = this.buffer[index], endIndex = this.buffer[index + 3];
           let type = this.set.types[id], result = type.name;
           if (/\W/.test(result) && !type.isError)
               result = JSON.stringify(result);
           index += 4;
           if (endIndex == index)
               return result;
           let children = [];
           while (index < endIndex) {
               children.push(this.childString(index));
               index = this.buffer[index + 3];
           }
           return result + "(" + children.join(",") + ")";
       }
       /// @internal
       findChild(startIndex, endIndex, dir, pos, side) {
           let { buffer } = this, pick = -1;
           for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
               if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                   pick = i;
                   if (dir > 0)
                       break;
               }
           }
           return pick;
       }
       /// @internal
       slice(startI, endI, from, to) {
           let b = this.buffer;
           let copy = new Uint16Array(endI - startI);
           for (let i = startI, j = 0; i < endI;) {
               copy[j++] = b[i++];
               copy[j++] = b[i++] - from;
               copy[j++] = b[i++] - from;
               copy[j++] = b[i++] - startI;
           }
           return new TreeBuffer(copy, to - from, this.set);
       }
   }
   function checkSide(side, pos, from, to) {
       switch (side) {
           case -2 /* Before */: return from < pos;
           case -1 /* AtOrBefore */: return to >= pos && from < pos;
           case 0 /* Around */: return from < pos && to > pos;
           case 1 /* AtOrAfter */: return from <= pos && to > pos;
           case 2 /* After */: return to > pos;
           case 4 /* DontCare */: return true;
       }
   }
   function enterUnfinishedNodesBefore(node, pos) {
       let scan = node.childBefore(pos);
       while (scan) {
           let last = scan.lastChild;
           if (!last || last.to != scan.to)
               break;
           if (last.type.isError && last.from == last.to) {
               node = scan;
               scan = last.prevSibling;
           }
           else {
               scan = last;
           }
       }
       return node;
   }
   function resolveNode(node, pos, side, overlays) {
       var _a;
       // Move up to a node that actually holds the position, if possible
       while (node.from == node.to ||
           (side < 1 ? node.from >= pos : node.from > pos) ||
           (side > -1 ? node.to <= pos : node.to < pos)) {
           let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
           if (!parent)
               return node;
           node = parent;
       }
       let mode = overlays ? 0 : IterMode.IgnoreOverlays;
       // Must go up out of overlays when those do not overlap with pos
       if (overlays)
           for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
               if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                   node = parent;
           }
       for (;;) {
           let inner = node.enter(pos, side, mode);
           if (!inner)
               return node;
           node = inner;
       }
   }
   class TreeNode {
       constructor(_tree, from, 
       // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
       index, _parent) {
           this._tree = _tree;
           this.from = from;
           this.index = index;
           this._parent = _parent;
       }
       get type() { return this._tree.type; }
       get name() { return this._tree.type.name; }
       get to() { return this.from + this._tree.length; }
       nextChild(i, dir, pos, side, mode = 0) {
           for (let parent = this;;) {
               for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                   let next = children[i], start = positions[i] + parent.from;
                   if (!checkSide(side, pos, start, start + next.length))
                       continue;
                   if (next instanceof TreeBuffer) {
                       if (mode & IterMode.ExcludeBuffers)
                           continue;
                       let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                       if (index > -1)
                           return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                   }
                   else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                       let mounted;
                       if (!(mode & IterMode.IgnoreMounts) &&
                           next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)
                           return new TreeNode(mounted.tree, start, i, parent);
                       let inner = new TreeNode(next, start, i, parent);
                       return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                           : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                   }
               }
               if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                   return null;
               if (parent.index >= 0)
                   i = parent.index + dir;
               else
                   i = dir < 0 ? -1 : parent._parent._tree.children.length;
               parent = parent._parent;
               if (!parent)
                   return null;
           }
       }
       get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }
       get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* DontCare */); }
       childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }
       childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Before */); }
       enter(pos, side, mode = 0) {
           let mounted;
           if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
               let rPos = pos - this.from;
               for (let { from, to } of mounted.overlay) {
                   if ((side > 0 ? from <= rPos : from < rPos) &&
                       (side < 0 ? to >= rPos : to > rPos))
                       return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
               }
           }
           return this.nextChild(0, 1, pos, side, mode);
       }
       nextSignificantParent() {
           let val = this;
           while (val.type.isAnonymous && val._parent)
               val = val._parent;
           return val;
       }
       get parent() {
           return this._parent ? this._parent.nextSignificantParent() : null;
       }
       get nextSibling() {
           return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;
       }
       get prevSibling() {
           return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;
       }
       cursor(mode = 0) { return new TreeCursor(this, mode); }
       get tree() { return this._tree; }
       toTree() { return this._tree; }
       resolve(pos, side = 0) {
           return resolveNode(this, pos, side, false);
       }
       resolveInner(pos, side = 0) {
           return resolveNode(this, pos, side, true);
       }
       enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
       getChild(type, before = null, after = null) {
           let r = getChildren(this, type, before, after);
           return r.length ? r[0] : null;
       }
       getChildren(type, before = null, after = null) {
           return getChildren(this, type, before, after);
       }
       /// @internal
       toString() { return this._tree.toString(); }
       get node() { return this; }
       matchContext(context) { return matchNodeContext(this, context); }
   }
   function getChildren(node, type, before, after) {
       let cur = node.cursor(), result = [];
       if (!cur.firstChild())
           return result;
       if (before != null)
           while (!cur.type.is(before))
               if (!cur.nextSibling())
                   return result;
       for (;;) {
           if (after != null && cur.type.is(after))
               return result;
           if (cur.type.is(type))
               result.push(cur.node);
           if (!cur.nextSibling())
               return after == null ? result : [];
       }
   }
   function matchNodeContext(node, context, i = context.length - 1) {
       for (let p = node.parent; i >= 0; p = p.parent) {
           if (!p)
               return false;
           if (!p.type.isAnonymous) {
               if (context[i] && context[i] != p.name)
                   return false;
               i--;
           }
       }
       return true;
   }
   class BufferContext {
       constructor(parent, buffer, index, start) {
           this.parent = parent;
           this.buffer = buffer;
           this.index = index;
           this.start = start;
       }
   }
   class BufferNode {
       constructor(context, _parent, index) {
           this.context = context;
           this._parent = _parent;
           this.index = index;
           this.type = context.buffer.set.types[context.buffer.buffer[index]];
       }
       get name() { return this.type.name; }
       get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
       get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
       child(dir, pos, side) {
           let { buffer } = this.context;
           let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
           return index < 0 ? null : new BufferNode(this.context, this, index);
       }
       get firstChild() { return this.child(1, 0, 4 /* DontCare */); }
       get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }
       childAfter(pos) { return this.child(1, pos, 2 /* After */); }
       childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }
       enter(pos, side, mode = 0) {
           if (mode & IterMode.ExcludeBuffers)
               return null;
           let { buffer } = this.context;
           let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
           return index < 0 ? null : new BufferNode(this.context, this, index);
       }
       get parent() {
           return this._parent || this.context.parent.nextSignificantParent();
       }
       externalSibling(dir) {
           return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);
       }
       get nextSibling() {
           let { buffer } = this.context;
           let after = buffer.buffer[this.index + 3];
           if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
               return new BufferNode(this.context, this._parent, after);
           return this.externalSibling(1);
       }
       get prevSibling() {
           let { buffer } = this.context;
           let parentStart = this._parent ? this._parent.index + 4 : 0;
           if (this.index == parentStart)
               return this.externalSibling(-1);
           return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));
       }
       cursor(mode = 0) { return new TreeCursor(this, mode); }
       get tree() { return null; }
       toTree() {
           let children = [], positions = [];
           let { buffer } = this.context;
           let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
           if (endI > startI) {
               let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];
               children.push(buffer.slice(startI, endI, from, to));
               positions.push(0);
           }
           return new Tree(this.type, children, positions, this.to - this.from);
       }
       resolve(pos, side = 0) {
           return resolveNode(this, pos, side, false);
       }
       resolveInner(pos, side = 0) {
           return resolveNode(this, pos, side, true);
       }
       enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
       /// @internal
       toString() { return this.context.buffer.childString(this.index); }
       getChild(type, before = null, after = null) {
           let r = getChildren(this, type, before, after);
           return r.length ? r[0] : null;
       }
       getChildren(type, before = null, after = null) {
           return getChildren(this, type, before, after);
       }
       get node() { return this; }
       matchContext(context) { return matchNodeContext(this, context); }
   }
   /// A tree cursor object focuses on a given node in a syntax tree, and
   /// allows you to move to adjacent nodes.
   class TreeCursor {
       /// @internal
       constructor(node, 
       /// @internal
       mode = 0) {
           this.mode = mode;
           /// @internal
           this.buffer = null;
           this.stack = [];
           /// @internal
           this.index = 0;
           this.bufferNode = null;
           if (node instanceof TreeNode) {
               this.yieldNode(node);
           }
           else {
               this._tree = node.context.parent;
               this.buffer = node.context;
               for (let n = node._parent; n; n = n._parent)
                   this.stack.unshift(n.index);
               this.bufferNode = node;
               this.yieldBuf(node.index);
           }
       }
       /// Shorthand for `.type.name`.
       get name() { return this.type.name; }
       yieldNode(node) {
           if (!node)
               return false;
           this._tree = node;
           this.type = node.type;
           this.from = node.from;
           this.to = node.to;
           return true;
       }
       yieldBuf(index, type) {
           this.index = index;
           let { start, buffer } = this.buffer;
           this.type = type || buffer.set.types[buffer.buffer[index]];
           this.from = start + buffer.buffer[index + 1];
           this.to = start + buffer.buffer[index + 2];
           return true;
       }
       yield(node) {
           if (!node)
               return false;
           if (node instanceof TreeNode) {
               this.buffer = null;
               return this.yieldNode(node);
           }
           this.buffer = node.context;
           return this.yieldBuf(node.index, node.type);
       }
       /// @internal
       toString() {
           return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
       }
       /// @internal
       enterChild(dir, pos, side) {
           if (!this.buffer)
               return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
           let { buffer } = this.buffer;
           let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
           if (index < 0)
               return false;
           this.stack.push(this.index);
           return this.yieldBuf(index);
       }
       /// Move the cursor to this node's first child. When this returns
       /// false, the node has no child, and the cursor has not been moved.
       firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }
       /// Move the cursor to this node's last child.
       lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }
       /// Move the cursor to the first child that ends after `pos`.
       childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }
       /// Move to the last child that starts before `pos`.
       childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }
       /// Move the cursor to the child around `pos`. If side is -1 the
       /// child may end at that position, when 1 it may start there. This
       /// will also enter [overlaid](#common.MountedTree.overlay)
       /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
       /// set to false.
       enter(pos, side, mode = this.mode) {
           if (!this.buffer)
               return this.yield(this._tree.enter(pos, side, mode));
           return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
       }
       /// Move to the node's parent node, if this isn't the top node.
       parent() {
           if (!this.buffer)
               return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
           if (this.stack.length)
               return this.yieldBuf(this.stack.pop());
           let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
           this.buffer = null;
           return this.yieldNode(parent);
       }
       /// @internal
       sibling(dir) {
           if (!this.buffer)
               return !this._tree._parent ? false
                   : this.yield(this._tree.index < 0 ? null
                       : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));
           let { buffer } = this.buffer, d = this.stack.length - 1;
           if (dir < 0) {
               let parentStart = d < 0 ? 0 : this.stack[d] + 4;
               if (this.index != parentStart)
                   return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));
           }
           else {
               let after = buffer.buffer[this.index + 3];
               if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                   return this.yieldBuf(after);
           }
           return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;
       }
       /// Move to this node's next sibling, if any.
       nextSibling() { return this.sibling(1); }
       /// Move to this node's previous sibling, if any.
       prevSibling() { return this.sibling(-1); }
       atLastNode(dir) {
           let index, parent, { buffer } = this;
           if (buffer) {
               if (dir > 0) {
                   if (this.index < buffer.buffer.buffer.length)
                       return false;
               }
               else {
                   for (let i = 0; i < this.index; i++)
                       if (buffer.buffer.buffer[i + 3] < this.index)
                           return false;
               }
               ({ index, parent } = buffer);
           }
           else {
               ({ index, _parent: parent } = this._tree);
           }
           for (; parent; { index, _parent: parent } = parent) {
               if (index > -1)
                   for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                       let child = parent._tree.children[i];
                       if ((this.mode & IterMode.IncludeAnonymous) ||
                           child instanceof TreeBuffer ||
                           !child.type.isAnonymous ||
                           hasChild(child))
                           return false;
                   }
           }
           return true;
       }
       move(dir, enter) {
           if (enter && this.enterChild(dir, 0, 4 /* DontCare */))
               return true;
           for (;;) {
               if (this.sibling(dir))
                   return true;
               if (this.atLastNode(dir) || !this.parent())
                   return false;
           }
       }
       /// Move to the next node in a
       /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
       /// traversal, going from a node to its first child or, if the
       /// current node is empty or `enter` is false, its next sibling or
       /// the next sibling of the first parent node that has one.
       next(enter = true) { return this.move(1, enter); }
       /// Move to the next node in a last-to-first pre-order traveral. A
       /// node is followed by its last child or, if it has none, its
       /// previous sibling or the previous sibling of the first parent
       /// node that has one.
       prev(enter = true) { return this.move(-1, enter); }
       /// Move the cursor to the innermost node that covers `pos`. If
       /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
       /// it will enter nodes that start at `pos`.
       moveTo(pos, side = 0) {
           // Move up to a node that actually holds the position, if possible
           while (this.from == this.to ||
               (side < 1 ? this.from >= pos : this.from > pos) ||
               (side > -1 ? this.to <= pos : this.to < pos))
               if (!this.parent())
                   break;
           // Then scan down into child nodes as far as possible
           while (this.enterChild(1, pos, side)) { }
           return this;
       }
       /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
       /// position.
       get node() {
           if (!this.buffer)
               return this._tree;
           let cache = this.bufferNode, result = null, depth = 0;
           if (cache && cache.context == this.buffer) {
               scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                   for (let c = cache; c; c = c._parent)
                       if (c.index == index) {
                           if (index == this.index)
                               return c;
                           result = c;
                           depth = d + 1;
                           break scan;
                       }
                   index = this.stack[--d];
               }
           }
           for (let i = depth; i < this.stack.length; i++)
               result = new BufferNode(this.buffer, result, this.stack[i]);
           return this.bufferNode = new BufferNode(this.buffer, result, this.index);
       }
       /// Get the [tree](#common.Tree) that represents the current node, if
       /// any. Will return null when the node is in a [tree
       /// buffer](#common.TreeBuffer).
       get tree() {
           return this.buffer ? null : this._tree._tree;
       }
       /// Iterate over the current node and all its descendants, calling
       /// `enter` when entering a node and `leave`, if given, when leaving
       /// one. When `enter` returns `false`, any children of that node are
       /// skipped, and `leave` isn't called for it.
       iterate(enter, leave) {
           for (let depth = 0;;) {
               let mustLeave = false;
               if (this.type.isAnonymous || enter(this) !== false) {
                   if (this.firstChild()) {
                       depth++;
                       continue;
                   }
                   if (!this.type.isAnonymous)
                       mustLeave = true;
               }
               for (;;) {
                   if (mustLeave && leave)
                       leave(this);
                   mustLeave = this.type.isAnonymous;
                   if (this.nextSibling())
                       break;
                   if (!depth)
                       return;
                   this.parent();
                   depth--;
                   mustLeave = true;
               }
           }
       }
       /// Test whether the current node matches a given context—a sequence
       /// of direct parent node names. Empty strings in the context array
       /// are treated as wildcards.
       matchContext(context) {
           if (!this.buffer)
               return matchNodeContext(this.node, context);
           let { buffer } = this.buffer, { types } = buffer.set;
           for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
               if (d < 0)
                   return matchNodeContext(this.node, context, i);
               let type = types[buffer.buffer[this.stack[d]]];
               if (!type.isAnonymous) {
                   if (context[i] && context[i] != type.name)
                       return false;
                   i--;
               }
           }
           return true;
       }
   }
   function hasChild(tree) {
       return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
   }
   function buildTree(data) {
       var _a;
       let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
       let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
       let types = nodeSet.types;
       let contextHash = 0, lookAhead = 0;
       function takeNode(parentStart, minPos, children, positions, inRepeat) {
           let { id, start, end, size } = cursor;
           let lookAheadAtStart = lookAhead;
           while (size < 0) {
               cursor.next();
               if (size == -1 /* Reuse */) {
                   let node = reused[id];
                   children.push(node);
                   positions.push(start - parentStart);
                   return;
               }
               else if (size == -3 /* ContextChange */) { // Context change
                   contextHash = id;
                   return;
               }
               else if (size == -4 /* LookAhead */) {
                   lookAhead = id;
                   return;
               }
               else {
                   throw new RangeError(`Unrecognized record size: ${size}`);
               }
           }
           let type = types[id], node, buffer;
           let startPos = start - parentStart;
           if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
               // Small enough for a buffer, and no reused nodes inside
               let data = new Uint16Array(buffer.size - buffer.skip);
               let endPos = cursor.pos - buffer.size, index = data.length;
               while (cursor.pos > endPos)
                   index = copyToBuffer(buffer.start, data, index);
               node = new TreeBuffer(data, end - buffer.start, nodeSet);
               startPos = buffer.start - parentStart;
           }
           else { // Make it a node
               let endPos = cursor.pos - size;
               cursor.next();
               let localChildren = [], localPositions = [];
               let localInRepeat = id >= minRepeatType ? id : -1;
               let lastGroup = 0, lastEnd = end;
               while (cursor.pos > endPos) {
                   if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                       if (cursor.end <= lastEnd - maxBufferLength) {
                           makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
                           lastGroup = localChildren.length;
                           lastEnd = cursor.end;
                       }
                       cursor.next();
                   }
                   else {
                       takeNode(start, endPos, localChildren, localPositions, localInRepeat);
                   }
               }
               if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                   makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
               localChildren.reverse();
               localPositions.reverse();
               if (localInRepeat > -1 && lastGroup > 0) {
                   let make = makeBalanced(type);
                   node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
               }
               else {
                   node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
               }
           }
           children.push(node);
           positions.push(startPos);
       }
       function makeBalanced(type) {
           return (children, positions, length) => {
               let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
               if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                   if (!lastI && last.type == type && last.length == length)
                       return last;
                   if (lookAheadProp = last.prop(NodeProp.lookAhead))
                       lookAhead = positions[lastI] + last.length + lookAheadProp;
               }
               return makeTree(type, children, positions, length, lookAhead);
           };
       }
       function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
           let localChildren = [], localPositions = [];
           while (children.length > i) {
               localChildren.push(children.pop());
               localPositions.push(positions.pop() + base - from);
           }
           children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
           positions.push(from - base);
       }
       function makeTree(type, children, positions, length, lookAhead = 0, props) {
           if (contextHash) {
               let pair = [NodeProp.contextHash, contextHash];
               props = props ? [pair].concat(props) : [pair];
           }
           if (lookAhead > 25) {
               let pair = [NodeProp.lookAhead, lookAhead];
               props = props ? [pair].concat(props) : [pair];
           }
           return new Tree(type, children, positions, length, props);
       }
       function findBufferSize(maxSize, inRepeat) {
           // Scan through the buffer to find previous siblings that fit
           // together in a TreeBuffer, and don't contain any reused nodes
           // (which can't be stored in a buffer).
           // If `inRepeat` is > -1, ignore node boundaries of that type for
           // nesting, but make sure the end falls either at the start
           // (`maxSize`) or before such a node.
           let fork = cursor.fork();
           let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
           let result = { size: 0, start: 0, skip: 0 };
           scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
               let nodeSize = fork.size;
               // Pretend nested repeat nodes of the same type don't exist
               if (fork.id == inRepeat && nodeSize >= 0) {
                   // Except that we store the current state as a valid return
                   // value.
                   result.size = size;
                   result.start = start;
                   result.skip = skip;
                   skip += 4;
                   size += 4;
                   fork.next();
                   continue;
               }
               let startPos = fork.pos - nodeSize;
               if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                   break;
               let localSkipped = fork.id >= minRepeatType ? 4 : 0;
               let nodeStart = fork.start;
               fork.next();
               while (fork.pos > startPos) {
                   if (fork.size < 0) {
                       if (fork.size == -3 /* ContextChange */)
                           localSkipped += 4;
                       else
                           break scan;
                   }
                   else if (fork.id >= minRepeatType) {
                       localSkipped += 4;
                   }
                   fork.next();
               }
               start = nodeStart;
               size += nodeSize;
               skip += localSkipped;
           }
           if (inRepeat < 0 || size == maxSize) {
               result.size = size;
               result.start = start;
               result.skip = skip;
           }
           return result.size > 4 ? result : undefined;
       }
       function copyToBuffer(bufferStart, buffer, index) {
           let { id, start, end, size } = cursor;
           cursor.next();
           if (size >= 0 && id < minRepeatType) {
               let startIndex = index;
               if (size > 4) {
                   let endPos = cursor.pos - (size - 4);
                   while (cursor.pos > endPos)
                       index = copyToBuffer(bufferStart, buffer, index);
               }
               buffer[--index] = startIndex;
               buffer[--index] = end - bufferStart;
               buffer[--index] = start - bufferStart;
               buffer[--index] = id;
           }
           else if (size == -3 /* ContextChange */) {
               contextHash = id;
           }
           else if (size == -4 /* LookAhead */) {
               lookAhead = id;
           }
           return index;
       }
       let children = [], positions = [];
       while (cursor.pos > 0)
           takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
       let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
       return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
   }
   const nodeSizeCache = new WeakMap;
   function nodeSize(balanceType, node) {
       if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
           return 1;
       let size = nodeSizeCache.get(node);
       if (size == null) {
           size = 1;
           for (let child of node.children) {
               if (child.type != balanceType || !(child instanceof Tree)) {
                   size = 1;
                   break;
               }
               size += nodeSize(balanceType, child);
           }
           nodeSizeCache.set(node, size);
       }
       return size;
   }
   function balanceRange(
   // The type the balanced tree's inner nodes.
   balanceType, 
   // The direct children and their positions
   children, positions, 
   // The index range in children/positions to use
   from, to, 
   // The start position of the nodes, relative to their parent.
   start, 
   // Length of the outer node
   length, 
   // Function to build the top node of the balanced tree
   mkTop, 
   // Function to build internal nodes for the balanced tree
   mkTree) {
       let total = 0;
       for (let i = from; i < to; i++)
           total += nodeSize(balanceType, children[i]);
       let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);
       let localChildren = [], localPositions = [];
       function divide(children, positions, from, to, offset) {
           for (let i = from; i < to;) {
               let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
               i++;
               for (; i < to; i++) {
                   let nextSize = nodeSize(balanceType, children[i]);
                   if (groupSize + nextSize >= maxChild)
                       break;
                   groupSize += nextSize;
               }
               if (i == groupFrom + 1) {
                   if (groupSize > maxChild) {
                       let only = children[groupFrom]; // Only trees can have a size > 1
                       divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                       continue;
                   }
                   localChildren.push(children[groupFrom]);
               }
               else {
                   let length = positions[i - 1] + children[i - 1].length - groupStart;
                   localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
               }
               localPositions.push(groupStart + offset - start);
           }
       }
       divide(children, positions, from, to, 0);
       return (mkTop || mkTree)(localChildren, localPositions, length);
   }
   /// Provides a way to associate values with pieces of trees. As long
   /// as that part of the tree is reused, the associated values can be
   /// retrieved from an updated tree.
   class NodeWeakMap {
       constructor() {
           this.map = new WeakMap();
       }
       setBuffer(buffer, index, value) {
           let inner = this.map.get(buffer);
           if (!inner)
               this.map.set(buffer, inner = new Map);
           inner.set(index, value);
       }
       getBuffer(buffer, index) {
           let inner = this.map.get(buffer);
           return inner && inner.get(index);
       }
       /// Set the value for this syntax node.
       set(node, value) {
           if (node instanceof BufferNode)
               this.setBuffer(node.context.buffer, node.index, value);
           else if (node instanceof TreeNode)
               this.map.set(node.tree, value);
       }
       /// Retrieve value for this syntax node, if it exists in the map.
       get(node) {
           return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)
               : node instanceof TreeNode ? this.map.get(node.tree) : undefined;
       }
       /// Set the value for the node that a cursor currently points to.
       cursorSet(cursor, value) {
           if (cursor.buffer)
               this.setBuffer(cursor.buffer.buffer, cursor.index, value);
           else
               this.map.set(cursor.tree, value);
       }
       /// Retrieve the value for the node that a cursor currently points
       /// to.
       cursorGet(cursor) {
           return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
       }
   }

   /// Tree fragments are used during [incremental
   /// parsing](#common.Parser.startParse) to track parts of old trees
   /// that can be reused in a new parse. An array of fragments is used
   /// to track regions of an old tree whose nodes might be reused in new
   /// parses. Use the static
   /// [`applyChanges`](#common.TreeFragment^applyChanges) method to
   /// update fragments for document changes.
   class TreeFragment {
       /// Construct a tree fragment. You'll usually want to use
       /// [`addTree`](#common.TreeFragment^addTree) and
       /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
       /// calling this directly.
       constructor(
       /// The start of the unchanged range pointed to by this fragment.
       /// This refers to an offset in the _updated_ document (as opposed
       /// to the original tree).
       from, 
       /// The end of the unchanged range.
       to, 
       /// The tree that this fragment is based on.
       tree, 
       /// The offset between the fragment's tree and the document that
       /// this fragment can be used against. Add this when going from
       /// document to tree positions, subtract it to go from tree to
       /// document positions.
       offset, openStart = false, openEnd = false) {
           this.from = from;
           this.to = to;
           this.tree = tree;
           this.offset = offset;
           this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);
       }
       /// Whether the start of the fragment represents the start of a
       /// parse, or the end of a change. (In the second case, it may not
       /// be safe to reuse some nodes at the start, depending on the
       /// parsing algorithm.)
       get openStart() { return (this.open & 1 /* Start */) > 0; }
       /// Whether the end of the fragment represents the end of a
       /// full-document parse, or the start of a change.
       get openEnd() { return (this.open & 2 /* End */) > 0; }
       /// Create a set of fragments from a freshly parsed tree, or update
       /// an existing set of fragments by replacing the ones that overlap
       /// with a tree with content from the new tree. When `partial` is
       /// true, the parse is treated as incomplete, and the resulting
       /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
       /// true.
       static addTree(tree, fragments = [], partial = false) {
           let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
           for (let f of fragments)
               if (f.to > tree.length)
                   result.push(f);
           return result;
       }
       /// Apply a set of edits to an array of fragments, removing or
       /// splitting fragments as necessary to remove edited ranges, and
       /// adjusting offsets for fragments that moved.
       static applyChanges(fragments, changes, minGap = 128) {
           if (!changes.length)
               return fragments;
           let result = [];
           let fI = 1, nextF = fragments.length ? fragments[0] : null;
           for (let cI = 0, pos = 0, off = 0;; cI++) {
               let nextC = cI < changes.length ? changes[cI] : null;
               let nextPos = nextC ? nextC.fromA : 1e9;
               if (nextPos - pos >= minGap)
                   while (nextF && nextF.from < nextPos) {
                       let cut = nextF;
                       if (pos >= cut.from || nextPos <= cut.to || off) {
                           let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                           cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                       }
                       if (cut)
                           result.push(cut);
                       if (nextF.to > nextPos)
                           break;
                       nextF = fI < fragments.length ? fragments[fI++] : null;
                   }
               if (!nextC)
                   break;
               pos = nextC.toA;
               off = nextC.toA - nextC.toB;
           }
           return result;
       }
   }
   /// A superclass that parsers should extend.
   class Parser$1 {
       /// Start a parse, returning a [partial parse](#common.PartialParse)
       /// object. [`fragments`](#common.TreeFragment) can be passed in to
       /// make the parse incremental.
       ///
       /// By default, the entire input is parsed. You can pass `ranges`,
       /// which should be a sorted array of non-empty, non-overlapping
       /// ranges, to parse only those ranges. The tree returned in that
       /// case will start at `ranges[0].from`.
       startParse(input, fragments, ranges) {
           if (typeof input == "string")
               input = new StringInput(input);
           ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
           return this.createParse(input, fragments || [], ranges);
       }
       /// Run a full parse, returning the resulting tree.
       parse(input, fragments, ranges) {
           let parse = this.startParse(input, fragments, ranges);
           for (;;) {
               let done = parse.advance();
               if (done)
                   return done;
           }
       }
   }
   class StringInput {
       constructor(string) {
           this.string = string;
       }
       get length() { return this.string.length; }
       chunk(from) { return this.string.slice(from); }
       get lineChunks() { return false; }
       read(from, to) { return this.string.slice(from, to); }
   }

   /// Create a parse wrapper that, after the inner parse completes,
   /// scans its tree for mixed language regions with the `nest`
   /// function, runs the resulting [inner parses](#common.NestedParse),
   /// and then [mounts](#common.NodeProp^mounted) their results onto the
   /// tree.
   function parseMixed(nest) {
       return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
   }
   class InnerParse {
       constructor(parser, parse, overlay, target, ranges) {
           this.parser = parser;
           this.parse = parse;
           this.overlay = overlay;
           this.target = target;
           this.ranges = ranges;
       }
   }
   class ActiveOverlay {
       constructor(parser, predicate, mounts, index, start, target, prev) {
           this.parser = parser;
           this.predicate = predicate;
           this.mounts = mounts;
           this.index = index;
           this.start = start;
           this.target = target;
           this.prev = prev;
           this.depth = 0;
           this.ranges = [];
       }
   }
   const stoppedInner = new NodeProp({ perNode: true });
   class MixedParse {
       constructor(base, nest, input, fragments, ranges) {
           this.nest = nest;
           this.input = input;
           this.fragments = fragments;
           this.ranges = ranges;
           this.inner = [];
           this.innerDone = 0;
           this.baseTree = null;
           this.stoppedAt = null;
           this.baseParse = base;
       }
       advance() {
           if (this.baseParse) {
               let done = this.baseParse.advance();
               if (!done)
                   return null;
               this.baseParse = null;
               this.baseTree = done;
               this.startInner();
               if (this.stoppedAt != null)
                   for (let inner of this.inner)
                       inner.parse.stopAt(this.stoppedAt);
           }
           if (this.innerDone == this.inner.length) {
               let result = this.baseTree;
               if (this.stoppedAt != null)
                   result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
               return result;
           }
           let inner = this.inner[this.innerDone], done = inner.parse.advance();
           if (done) {
               this.innerDone++;
               // This is a somewhat dodgy but super helpful hack where we
               // patch up nodes created by the inner parse (and thus
               // presumably not aliased anywhere else) to hold the information
               // about the inner parse.
               let props = Object.assign(Object.create(null), inner.target.props);
               props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
               inner.target.props = props;
           }
           return null;
       }
       get parsedPos() {
           if (this.baseParse)
               return 0;
           let pos = this.input.length;
           for (let i = this.innerDone; i < this.inner.length; i++) {
               if (this.inner[i].ranges[0].from < pos)
                   pos = Math.min(pos, this.inner[i].parse.parsedPos);
           }
           return pos;
       }
       stopAt(pos) {
           this.stoppedAt = pos;
           if (this.baseParse)
               this.baseParse.stopAt(pos);
           else
               for (let i = this.innerDone; i < this.inner.length; i++)
                   this.inner[i].parse.stopAt(pos);
       }
       startInner() {
           let fragmentCursor = new FragmentCursor$2(this.fragments);
           let overlay = null;
           let covered = null;
           let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
           scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {
               let enter = true, range;
               if (fragmentCursor.hasNode(cursor)) {
                   if (overlay) {
                       let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);
                       if (match)
                           for (let r of match.mount.overlay) {
                               let from = r.from + match.pos, to = r.to + match.pos;
                               if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))
                                   overlay.ranges.push({ from, to });
                           }
                   }
                   enter = false;
               }
               else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
                   enter = isCovered != 2 /* Full */;
               }
               else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {
                   if (!cursor.tree)
                       materialize(cursor);
                   let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
                   if (typeof nest.overlay == "function") {
                       overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
                   }
                   else {
                       let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);
                       if (ranges.length)
                           this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));
                       if (!nest.overlay)
                           enter = false;
                       else if (ranges.length)
                           covered = { ranges, depth: 0, prev: covered };
                   }
               }
               else if (overlay && (range = overlay.predicate(cursor))) {
                   if (range === true)
                       range = new Range(cursor.from, cursor.to);
                   if (range.from < range.to)
                       overlay.ranges.push(range);
               }
               if (enter && cursor.firstChild()) {
                   if (overlay)
                       overlay.depth++;
                   if (covered)
                       covered.depth++;
               }
               else {
                   for (;;) {
                       if (cursor.nextSibling())
                           break;
                       if (!cursor.parent())
                           break scan;
                       if (overlay && !--overlay.depth) {
                           let ranges = punchRanges(this.ranges, overlay.ranges);
                           if (ranges.length)
                               this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));
                           overlay = overlay.prev;
                       }
                       if (covered && !--covered.depth)
                           covered = covered.prev;
                   }
               }
           }
       }
   }
   function checkCover(covered, from, to) {
       for (let range of covered) {
           if (range.from >= to)
               break;
           if (range.to > from)
               return range.from <= from && range.to >= to ? 2 /* Full */ : 1 /* Partial */;
       }
       return 0 /* None */;
   }
   // Take a piece of buffer and convert it into a stand-alone
   // TreeBuffer.
   function sliceBuf(buf, startI, endI, nodes, positions, off) {
       if (startI < endI) {
           let from = buf.buffer[startI + 1], to = buf.buffer[endI - 2];
           nodes.push(buf.slice(startI, endI, from, to));
           positions.push(from - off);
       }
   }
   // This function takes a node that's in a buffer, and converts it, and
   // its parent buffer nodes, into a Tree. This is again acting on the
   // assumption that the trees and buffers have been constructed by the
   // parse that was ran via the mix parser, and thus aren't shared with
   // any other code, making violations of the immutability safe.
   function materialize(cursor) {
       let { node } = cursor, depth = 0;
       // Scan up to the nearest tree
       do {
           cursor.parent();
           depth++;
       } while (!cursor.tree);
       // Find the index of the buffer in that tree
       let i = 0, base = cursor.tree, off = 0;
       for (;; i++) {
           off = base.positions[i] + cursor.from;
           if (off <= node.from && off + base.children[i].length >= node.to)
               break;
       }
       let buf = base.children[i], b = buf.buffer;
       // Split a level in the buffer, putting the nodes before and after
       // the child that contains `node` into new buffers.
       function split(startI, endI, type, innerOffset, length) {
           let i = startI;
           while (b[i + 2] + off <= node.from)
               i = b[i + 3];
           let children = [], positions = [];
           sliceBuf(buf, startI, i, children, positions, innerOffset);
           let from = b[i + 1], to = b[i + 2];
           let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;
           children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));
           positions.push(from - innerOffset);
           sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);
           return new Tree(type, children, positions, length);
       }
       base.children[i] = split(0, b.length, NodeType$1.none, 0, buf.length);
       // Move the cursor back to the target node
       for (let d = 0; d <= depth; d++)
           cursor.childAfter(node.from);
   }
   class StructureCursor {
       constructor(root, offset) {
           this.offset = offset;
           this.done = false;
           this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
       }
       // Move to the first node (in pre-order) that starts at or after `pos`.
       moveTo(pos) {
           let { cursor } = this, p = pos - this.offset;
           while (!this.done && cursor.from < p) {
               if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;
               else if (!cursor.next(false))
                   this.done = true;
           }
       }
       hasNode(cursor) {
           this.moveTo(cursor.from);
           if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
               for (let tree = this.cursor.tree;;) {
                   if (tree == cursor.tree)
                       return true;
                   if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
                       tree = tree.children[0];
                   else
                       break;
               }
           }
           return false;
       }
   }
   class FragmentCursor$2 {
       constructor(fragments) {
           var _a;
           this.fragments = fragments;
           this.curTo = 0;
           this.fragI = 0;
           if (fragments.length) {
               let first = this.curFrag = fragments[0];
               this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;
               this.inner = new StructureCursor(first.tree, -first.offset);
           }
           else {
               this.curFrag = this.inner = null;
           }
       }
       hasNode(node) {
           while (this.curFrag && node.from >= this.curTo)
               this.nextFrag();
           return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
       }
       nextFrag() {
           var _a;
           this.fragI++;
           if (this.fragI == this.fragments.length) {
               this.curFrag = this.inner = null;
           }
           else {
               let frag = this.curFrag = this.fragments[this.fragI];
               this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;
               this.inner = new StructureCursor(frag.tree, -frag.offset);
           }
       }
       findMounts(pos, parser) {
           var _a;
           let result = [];
           if (this.inner) {
               this.inner.cursor.moveTo(pos, 1);
               for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {
                   let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);
                   if (mount && mount.parser == parser) {
                       for (let i = this.fragI; i < this.fragments.length; i++) {
                           let frag = this.fragments[i];
                           if (frag.from >= pos.to)
                               break;
                           if (frag.tree == this.curFrag.tree)
                               result.push({
                                   frag,
                                   pos: pos.from - frag.offset,
                                   mount
                               });
                       }
                   }
               }
           }
           return result;
       }
   }
   function punchRanges(outer, ranges) {
       let copy = null, current = ranges;
       for (let i = 1, j = 0; i < outer.length; i++) {
           let gapFrom = outer[i - 1].to, gapTo = outer[i].from;
           for (; j < current.length; j++) {
               let r = current[j];
               if (r.from >= gapTo)
                   break;
               if (r.to <= gapFrom)
                   continue;
               if (!copy)
                   current = copy = ranges.slice();
               if (r.from < gapFrom) {
                   copy[j] = new Range(r.from, gapFrom);
                   if (r.to > gapTo)
                       copy.splice(j + 1, 0, new Range(gapTo, r.to));
               }
               else if (r.to > gapTo) {
                   copy[j--] = new Range(gapTo, r.to);
               }
               else {
                   copy.splice(j--, 1);
               }
           }
       }
       return current;
   }
   function findCoverChanges(a, b, from, to) {
       let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;
       let result = [];
       for (;;) {
           let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;
           let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;
           if (inA != inB) {
               let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);
               if (start < end)
                   result.push(new Range(start, end));
           }
           pos = Math.min(nextA, nextB);
           if (pos == 1e9)
               break;
           if (nextA == pos) {
               if (!inA)
                   inA = true;
               else {
                   inA = false;
                   iA++;
               }
           }
           if (nextB == pos) {
               if (!inB)
                   inB = true;
               else {
                   inB = false;
                   iB++;
               }
           }
       }
       return result;
   }
   // Given a number of fragments for the outer tree, and a set of ranges
   // to parse, find fragments for inner trees mounted around those
   // ranges, if any.
   function enterFragments(mounts, ranges) {
       let result = [];
       for (let { pos, mount, frag } of mounts) {
           let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
           let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);
           if (mount.overlay) {
               let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));
               let changes = findCoverChanges(ranges, overlay, from, to);
               for (let i = 0, pos = from;; i++) {
                   let last = i == changes.length, end = last ? to : changes[i].from;
                   if (end > pos)
                       result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos, frag.to <= end));
                   if (last)
                       break;
                   pos = changes[i].to;
               }
           }
           else {
               result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));
           }
       }
       return result;
   }

   let nextTagID = 0;
   /// Highlighting tags are markers that denote a highlighting category.
   /// They are [associated](#highlight.styleTags) with parts of a syntax
   /// tree by a language mode, and then mapped to an actual CSS style by
   /// a [highlighter](#highlight.Highlighter).
   ///
   /// Because syntax tree node types and highlight styles have to be
   /// able to talk the same language, CodeMirror uses a mostly _closed_
   /// [vocabulary](#highlight.tags) of syntax tags (as opposed to
   /// traditional open string-based systems, which make it hard for
   /// highlighting themes to cover all the tokens produced by the
   /// various languages).
   ///
   /// It _is_ possible to [define](#highlight.Tag^define) your own
   /// highlighting tags for system-internal use (where you control both
   /// the language package and the highlighter), but such tags will not
   /// be picked up by regular highlighters (though you can derive them
   /// from standard tags to allow highlighters to fall back to those).
   class Tag {
       /// @internal
       constructor(
       /// The set of this tag and all its parent tags, starting with
       /// this one itself and sorted in order of decreasing specificity.
       set, 
       /// The base unmodified tag that this one is based on, if it's
       /// modified @internal
       base, 
       /// The modifiers applied to this.base @internal
       modified) {
           this.set = set;
           this.base = base;
           this.modified = modified;
           /// @internal
           this.id = nextTagID++;
       }
       /// Define a new tag. If `parent` is given, the tag is treated as a
       /// sub-tag of that parent, and
       /// [highlighters](#highlight.tagHighlighter) that don't mention
       /// this tag will try to fall back to the parent tag (or grandparent
       /// tag, etc).
       static define(parent) {
           if (parent === null || parent === void 0 ? void 0 : parent.base)
               throw new Error("Can not derive from a modified tag");
           let tag = new Tag([], null, []);
           tag.set.push(tag);
           if (parent)
               for (let t of parent.set)
                   tag.set.push(t);
           return tag;
       }
       /// Define a tag _modifier_, which is a function that, given a tag,
       /// will return a tag that is a subtag of the original. Applying the
       /// same modifier to a twice tag will return the same value (`m1(t1)
       /// == m1(t1)`) and applying multiple modifiers will, regardless or
       /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
       ///
       /// When multiple modifiers are applied to a given base tag, each
       /// smaller set of modifiers is registered as a parent, so that for
       /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
       /// `m1(m3(t1)`, and so on.
       static defineModifier() {
           let mod = new Modifier;
           return (tag) => {
               if (tag.modified.indexOf(mod) > -1)
                   return tag;
               return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
           };
       }
   }
   let nextModifierID = 0;
   class Modifier {
       constructor() {
           this.instances = [];
           this.id = nextModifierID++;
       }
       static get(base, mods) {
           if (!mods.length)
               return base;
           let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
           if (exists)
               return exists;
           let set = [], tag = new Tag(set, base, mods);
           for (let m of mods)
               m.instances.push(tag);
           let configs = permute(mods);
           for (let parent of base.set)
               for (let config of configs)
                   set.push(Modifier.get(parent, config));
           return tag;
       }
   }
   function sameArray(a, b) {
       return a.length == b.length && a.every((x, i) => x == b[i]);
   }
   function permute(array) {
       let result = [array];
       for (let i = 0; i < array.length; i++) {
           for (let a of permute(array.slice(0, i).concat(array.slice(i + 1))))
               result.push(a);
       }
       return result;
   }
   /// This function is used to add a set of tags to a language syntax
   /// via [`NodeSet.extend`](#common.NodeSet.extend) or
   /// [`LRParser.configure`](#lr.LRParser.configure).
   ///
   /// The argument object maps node selectors to [highlighting
   /// tags](#highlight.Tag) or arrays of tags.
   ///
   /// Node selectors may hold one or more (space-separated) node paths.
   /// Such a path can be a [node name](#common.NodeType.name), or
   /// multiple node names (or `*` wildcards) separated by slash
   /// characters, as in `"Block/Declaration/VariableName"`. Such a path
   /// matches the final node but only if its direct parent nodes are the
   /// other nodes mentioned. A `*` in such a path matches any parent,
   /// but only a single level—wildcards that match multiple parents
   /// aren't supported, both for efficiency reasons and because Lezer
   /// trees make it rather hard to reason about what they would match.)
   ///
   /// A path can be ended with `/...` to indicate that the tag assigned
   /// to the node should also apply to all child nodes, even if they
   /// match their own style (by default, only the innermost style is
   /// used).
   ///
   /// When a path ends in `!`, as in `Attribute!`, no further matching
   /// happens for the node's child nodes, and the entire node gets the
   /// given style.
   ///
   /// In this notation, node names that contain `/`, `!`, `*`, or `...`
   /// must be quoted as JSON strings.
   ///
   /// For example:
   ///
   /// ```javascript
   /// parser.withProps(
   ///   styleTags({
   ///     // Style Number and BigNumber nodes
   ///     "Number BigNumber": tags.number,
   ///     // Style Escape nodes whose parent is String
   ///     "String/Escape": tags.escape,
   ///     // Style anything inside Attributes nodes
   ///     "Attributes!": tags.meta,
   ///     // Add a style to all content inside Italic nodes
   ///     "Italic/...": tags.emphasis,
   ///     // Style InvalidString nodes as both `string` and `invalid`
   ///     "InvalidString": [tags.string, tags.invalid],
   ///     // Style the node named "/" as punctuation
   ///     '"/"': tags.punctuation
   ///   })
   /// )
   /// ```
   function styleTags(spec) {
       let byName = Object.create(null);
       for (let prop in spec) {
           let tags = spec[prop];
           if (!Array.isArray(tags))
               tags = [tags];
           for (let part of prop.split(" "))
               if (part) {
                   let pieces = [], mode = 2 /* Normal */, rest = part;
                   for (let pos = 0;;) {
                       if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                           mode = 1 /* Inherit */;
                           break;
                       }
                       let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                       if (!m)
                           throw new RangeError("Invalid path: " + part);
                       pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                       pos += m[0].length;
                       if (pos == part.length)
                           break;
                       let next = part[pos++];
                       if (pos == part.length && next == "!") {
                           mode = 0 /* Opaque */;
                           break;
                       }
                       if (next != "/")
                           throw new RangeError("Invalid path: " + part);
                       rest = part.slice(pos);
                   }
                   let last = pieces.length - 1, inner = pieces[last];
                   if (!inner)
                       throw new RangeError("Invalid path: " + part);
                   let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                   byName[inner] = rule.sort(byName[inner]);
               }
       }
       return ruleNodeProp.add(byName);
   }
   const ruleNodeProp = new NodeProp();
   class Rule {
       constructor(tags, mode, context, next) {
           this.tags = tags;
           this.mode = mode;
           this.context = context;
           this.next = next;
       }
       sort(other) {
           if (!other || other.depth < this.depth) {
               this.next = other;
               return this;
           }
           other.next = this.sort(other.next);
           return other;
       }
       get depth() { return this.context ? this.context.length : 0; }
   }
   /// Define a [highlighter](#highlight.Highlighter) from an array of
   /// tag/class pairs. Classes associated with more specific tags will
   /// take precedence.
   function tagHighlighter(tags, options) {
       let map = Object.create(null);
       for (let style of tags) {
           if (!Array.isArray(style.tag))
               map[style.tag.id] = style.class;
           else
               for (let tag of style.tag)
                   map[tag.id] = style.class;
       }
       let { scope, all = null } = options || {};
       return {
           style: (tags) => {
               let cls = all;
               for (let tag of tags) {
                   for (let sub of tag.set) {
                       let tagClass = map[sub.id];
                       if (tagClass) {
                           cls = cls ? cls + " " + tagClass : tagClass;
                           break;
                       }
                   }
               }
               return cls;
           },
           scope: scope
       };
   }
   const t = Tag.define;
   const comment$2 = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string$2 = t(literal), number$1 = t(literal), content$4 = t(), heading$2 = t(content$4), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
   /// The default set of highlighting [tags](#highlight.Tag).
   ///
   /// This collection is heavily biased towards programming languages,
   /// and necessarily incomplete. A full ontology of syntactic
   /// constructs would fill a stack of books, and be impractical to
   /// write themes for. So try to make do with this set. If all else
   /// fails, [open an
   /// issue](https://github.com/codemirror/codemirror.next) to propose a
   /// new tag, or [define](#highlight.Tag^define) a local custom tag for
   /// your use case.
   ///
   /// Note that it is not obligatory to always attach the most specific
   /// tag possible to an element—if your grammar can't easily
   /// distinguish a certain type of element (such as a local variable),
   /// it is okay to style it as its more general variant (a variable).
   /// 
   /// For tags that extend some parent tag, the documentation links to
   /// the parent.
   const tags$1 = {
       /// A comment.
       comment: comment$2,
       /// A line [comment](#highlight.tags.comment).
       lineComment: t(comment$2),
       /// A block [comment](#highlight.tags.comment).
       blockComment: t(comment$2),
       /// A documentation [comment](#highlight.tags.comment).
       docComment: t(comment$2),
       /// Any kind of identifier.
       name,
       /// The [name](#highlight.tags.name) of a variable.
       variableName: t(name),
       /// A type [name](#highlight.tags.name).
       typeName: typeName,
       /// A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
       tagName: t(typeName),
       /// A property or field [name](#highlight.tags.name).
       propertyName: propertyName,
       /// An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
       attributeName: t(propertyName),
       /// The [name](#highlight.tags.name) of a class.
       className: t(name),
       /// A label [name](#highlight.tags.name).
       labelName: t(name),
       /// A namespace [name](#highlight.tags.name).
       namespace: t(name),
       /// The [name](#highlight.tags.name) of a macro.
       macroName: t(name),
       /// A literal value.
       literal,
       /// A string [literal](#highlight.tags.literal).
       string: string$2,
       /// A documentation [string](#highlight.tags.string).
       docString: t(string$2),
       /// A character literal (subtag of [string](#highlight.tags.string)).
       character: t(string$2),
       /// An attribute value (subtag of [string](#highlight.tags.string)).
       attributeValue: t(string$2),
       /// A number [literal](#highlight.tags.literal).
       number: number$1,
       /// An integer [number](#highlight.tags.number) literal.
       integer: t(number$1),
       /// A floating-point [number](#highlight.tags.number) literal.
       float: t(number$1),
       /// A boolean [literal](#highlight.tags.literal).
       bool: t(literal),
       /// Regular expression [literal](#highlight.tags.literal).
       regexp: t(literal),
       /// An escape [literal](#highlight.tags.literal), for example a
       /// backslash escape in a string.
       escape: t(literal),
       /// A color [literal](#highlight.tags.literal).
       color: t(literal),
       /// A URL [literal](#highlight.tags.literal).
       url: t(literal),
       /// A language keyword.
       keyword,
       /// The [keyword](#highlight.tags.keyword) for the self or this
       /// object.
       self: t(keyword),
       /// The [keyword](#highlight.tags.keyword) for null.
       null: t(keyword),
       /// A [keyword](#highlight.tags.keyword) denoting some atomic value.
       atom: t(keyword),
       /// A [keyword](#highlight.tags.keyword) that represents a unit.
       unit: t(keyword),
       /// A modifier [keyword](#highlight.tags.keyword).
       modifier: t(keyword),
       /// A [keyword](#highlight.tags.keyword) that acts as an operator.
       operatorKeyword: t(keyword),
       /// A control-flow related [keyword](#highlight.tags.keyword).
       controlKeyword: t(keyword),
       /// A [keyword](#highlight.tags.keyword) that defines something.
       definitionKeyword: t(keyword),
       /// A [keyword](#highlight.tags.keyword) related to defining or
       /// interfacing with modules.
       moduleKeyword: t(keyword),
       /// An operator.
       operator,
       /// An [operator](#highlight.tags.operator) that defines something.
       derefOperator: t(operator),
       /// Arithmetic-related [operator](#highlight.tags.operator).
       arithmeticOperator: t(operator),
       /// Logical [operator](#highlight.tags.operator).
       logicOperator: t(operator),
       /// Bit [operator](#highlight.tags.operator).
       bitwiseOperator: t(operator),
       /// Comparison [operator](#highlight.tags.operator).
       compareOperator: t(operator),
       /// [Operator](#highlight.tags.operator) that updates its operand.
       updateOperator: t(operator),
       /// [Operator](#highlight.tags.operator) that defines something.
       definitionOperator: t(operator),
       /// Type-related [operator](#highlight.tags.operator).
       typeOperator: t(operator),
       /// Control-flow [operator](#highlight.tags.operator).
       controlOperator: t(operator),
       /// Program or markup punctuation.
       punctuation,
       /// [Punctuation](#highlight.tags.punctuation) that separates
       /// things.
       separator: t(punctuation),
       /// Bracket-style [punctuation](#highlight.tags.punctuation).
       bracket,
       /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
       /// tokens).
       angleBracket: t(bracket),
       /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
       /// tokens).
       squareBracket: t(bracket),
       /// Parentheses (usually `(` and `)` tokens). Subtag of
       /// [bracket](#highlight.tags.bracket).
       paren: t(bracket),
       /// Braces (usually `{` and `}` tokens). Subtag of
       /// [bracket](#highlight.tags.bracket).
       brace: t(bracket),
       /// Content, for example plain text in XML or markup documents.
       content: content$4,
       /// [Content](#highlight.tags.content) that represents a heading.
       heading: heading$2,
       /// A level 1 [heading](#highlight.tags.heading).
       heading1: t(heading$2),
       /// A level 2 [heading](#highlight.tags.heading).
       heading2: t(heading$2),
       /// A level 3 [heading](#highlight.tags.heading).
       heading3: t(heading$2),
       /// A level 4 [heading](#highlight.tags.heading).
       heading4: t(heading$2),
       /// A level 5 [heading](#highlight.tags.heading).
       heading5: t(heading$2),
       /// A level 6 [heading](#highlight.tags.heading).
       heading6: t(heading$2),
       /// A prose separator (such as a horizontal rule).
       contentSeparator: t(content$4),
       /// [Content](#highlight.tags.content) that represents a list.
       list: t(content$4),
       /// [Content](#highlight.tags.content) that represents a quote.
       quote: t(content$4),
       /// [Content](#highlight.tags.content) that is emphasized.
       emphasis: t(content$4),
       /// [Content](#highlight.tags.content) that is styled strong.
       strong: t(content$4),
       /// [Content](#highlight.tags.content) that is part of a link.
       link: t(content$4),
       /// [Content](#highlight.tags.content) that is styled as code or
       /// monospace.
       monospace: t(content$4),
       /// [Content](#highlight.tags.content) that has a strike-through
       /// style.
       strikethrough: t(content$4),
       /// Inserted text in a change-tracking format.
       inserted: t(),
       /// Deleted text.
       deleted: t(),
       /// Changed text.
       changed: t(),
       /// An invalid or unsyntactic element.
       invalid: t(),
       /// Metadata or meta-instruction.
       meta,
       /// [Metadata](#highlight.tags.meta) that applies to the entire
       /// document.
       documentMeta: t(meta),
       /// [Metadata](#highlight.tags.meta) that annotates or adds
       /// attributes to a given syntactic element.
       annotation: t(meta),
       /// Processing instruction or preprocessor directive. Subtag of
       /// [meta](#highlight.tags.meta).
       processingInstruction: t(meta),
       /// [Modifier](#highlight.Tag^defineModifier) that indicates that a
       /// given element is being defined. Expected to be used with the
       /// various [name](#highlight.tags.name) tags.
       definition: Tag.defineModifier(),
       /// [Modifier](#highlight.Tag^defineModifier) that indicates that
       /// something is constant. Mostly expected to be used with
       /// [variable names](#highlight.tags.variableName).
       constant: Tag.defineModifier(),
       /// [Modifier](#highlight.Tag^defineModifier) used to indicate that
       /// a [variable](#highlight.tags.variableName) or [property
       /// name](#highlight.tags.propertyName) is being called or defined
       /// as a function.
       function: Tag.defineModifier(),
       /// [Modifier](#highlight.Tag^defineModifier) that can be applied to
       /// [names](#highlight.tags.name) to indicate that they belong to
       /// the language's standard environment.
       standard: Tag.defineModifier(),
       /// [Modifier](#highlight.Tag^defineModifier) that indicates a given
       /// [names](#highlight.tags.name) is local to some scope.
       local: Tag.defineModifier(),
       /// A generic variant [modifier](#highlight.Tag^defineModifier) that
       /// can be used to tag language-specific alternative variants of
       /// some common tag. It is recommended for themes to define special
       /// forms of at least the [string](#highlight.tags.string) and
       /// [variable name](#highlight.tags.variableName) tags, since those
       /// come up a lot.
       special: Tag.defineModifier()
   };
   /// This is a highlighter that adds stable, predictable classes to
   /// tokens, for styling with external CSS.
   ///
   /// The following tags are mapped to their name prefixed with `"tok-"`
   /// (for example `"tok-comment"`):
   ///
   /// * [`link`](#highlight.tags.link)
   /// * [`heading`](#highlight.tags.heading)
   /// * [`emphasis`](#highlight.tags.emphasis)
   /// * [`strong`](#highlight.tags.strong)
   /// * [`keyword`](#highlight.tags.keyword)
   /// * [`atom`](#highlight.tags.atom)
   /// * [`bool`](#highlight.tags.bool)
   /// * [`url`](#highlight.tags.url)
   /// * [`labelName`](#highlight.tags.labelName)
   /// * [`inserted`](#highlight.tags.inserted)
   /// * [`deleted`](#highlight.tags.deleted)
   /// * [`literal`](#highlight.tags.literal)
   /// * [`string`](#highlight.tags.string)
   /// * [`number`](#highlight.tags.number)
   /// * [`variableName`](#highlight.tags.variableName)
   /// * [`typeName`](#highlight.tags.typeName)
   /// * [`namespace`](#highlight.tags.namespace)
   /// * [`className`](#highlight.tags.className)
   /// * [`macroName`](#highlight.tags.macroName)
   /// * [`propertyName`](#highlight.tags.propertyName)
   /// * [`operator`](#highlight.tags.operator)
   /// * [`comment`](#highlight.tags.comment)
   /// * [`meta`](#highlight.tags.meta)
   /// * [`punctuation`](#highlight.tags.punctuation)
   /// * [`invalid`](#highlight.tags.invalid)
   ///
   /// In addition, these mappings are provided:
   ///
   /// * [`regexp`](#highlight.tags.regexp),
   ///   [`escape`](#highlight.tags.escape), and
   ///   [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
   ///   are mapped to `"tok-string2"`
   /// * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
   ///   to `"tok-variableName2"`
   /// * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
   ///   to `"tok-variableName tok-local"`
   /// * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
   ///   to `"tok-variableName tok-definition"`
   /// * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
   ///   to `"tok-propertyName tok-definition"`
   tagHighlighter([
       { tag: tags$1.link, class: "tok-link" },
       { tag: tags$1.heading, class: "tok-heading" },
       { tag: tags$1.emphasis, class: "tok-emphasis" },
       { tag: tags$1.strong, class: "tok-strong" },
       { tag: tags$1.keyword, class: "tok-keyword" },
       { tag: tags$1.atom, class: "tok-atom" },
       { tag: tags$1.bool, class: "tok-bool" },
       { tag: tags$1.url, class: "tok-url" },
       { tag: tags$1.labelName, class: "tok-labelName" },
       { tag: tags$1.inserted, class: "tok-inserted" },
       { tag: tags$1.deleted, class: "tok-deleted" },
       { tag: tags$1.literal, class: "tok-literal" },
       { tag: tags$1.string, class: "tok-string" },
       { tag: tags$1.number, class: "tok-number" },
       { tag: [tags$1.regexp, tags$1.escape, tags$1.special(tags$1.string)], class: "tok-string2" },
       { tag: tags$1.variableName, class: "tok-variableName" },
       { tag: tags$1.local(tags$1.variableName), class: "tok-variableName tok-local" },
       { tag: tags$1.definition(tags$1.variableName), class: "tok-variableName tok-definition" },
       { tag: tags$1.special(tags$1.variableName), class: "tok-variableName2" },
       { tag: tags$1.definition(tags$1.propertyName), class: "tok-propertyName tok-definition" },
       { tag: tags$1.typeName, class: "tok-typeName" },
       { tag: tags$1.namespace, class: "tok-namespace" },
       { tag: tags$1.className, class: "tok-className" },
       { tag: tags$1.macroName, class: "tok-macroName" },
       { tag: tags$1.propertyName, class: "tok-propertyName" },
       { tag: tags$1.operator, class: "tok-operator" },
       { tag: tags$1.comment, class: "tok-comment" },
       { tag: tags$1.meta, class: "tok-meta" },
       { tag: tags$1.invalid, class: "tok-invalid" },
       { tag: tags$1.punctuation, class: "tok-punctuation" }
   ]);

   var _a;
   /**
   Node prop stored in a parser's top syntax node to provide the
   facet that stores language-specific data for that language.
   */
   const languageDataProp = /*@__PURE__*/new NodeProp();
   /**
   Helper function to define a facet (to be added to the top syntax
   node(s) for a language via
   [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
   used to associate language data with the language. You
   probably only need this when subclassing
   [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
   */
   function defineLanguageFacet(baseData) {
       return Facet.define({
           combine: baseData ? values => values.concat(baseData) : undefined
       });
   }
   /**
   A language object manages parsing and per-language
   [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
   managed as a [Lezer](https://lezer.codemirror.net) tree. The class
   can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
   subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
   via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
   for stream parsers.
   */
   class Language {
       /**
       Construct a language object. If you need to invoke this
       directly, first define a data facet with
       [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
       configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
       to the language's outer syntax node.
       */
       constructor(
       /**
       The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
       used for this language.
       */
       data, parser, extraExtensions = []) {
           this.data = data;
           // Kludge to define EditorState.tree as a debugging helper,
           // without the EditorState package actually knowing about
           // languages and lezer trees.
           if (!EditorState.prototype.hasOwnProperty("tree"))
               Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
           this.parser = parser;
           this.extension = [
               language.of(this),
               EditorState.languageData.of((state, pos, side) => state.facet(languageDataFacetAt(state, pos, side)))
           ].concat(extraExtensions);
       }
       /**
       Query whether this language is active at the given position.
       */
       isActiveAt(state, pos, side = -1) {
           return languageDataFacetAt(state, pos, side) == this.data;
       }
       /**
       Find the document regions that were parsed using this language.
       The returned regions will _include_ any nested languages rooted
       in this language, when those exist.
       */
       findRegions(state) {
           let lang = state.facet(language);
           if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
               return [{ from: 0, to: state.doc.length }];
           if (!lang || !lang.allowsNesting)
               return [];
           let result = [];
           let explore = (tree, from) => {
               if (tree.prop(languageDataProp) == this.data) {
                   result.push({ from, to: from + tree.length });
                   return;
               }
               let mount = tree.prop(NodeProp.mounted);
               if (mount) {
                   if (mount.tree.prop(languageDataProp) == this.data) {
                       if (mount.overlay)
                           for (let r of mount.overlay)
                               result.push({ from: r.from + from, to: r.to + from });
                       else
                           result.push({ from: from, to: from + tree.length });
                       return;
                   }
                   else if (mount.overlay) {
                       let size = result.length;
                       explore(mount.tree, mount.overlay[0].from + from);
                       if (result.length > size)
                           return;
                   }
               }
               for (let i = 0; i < tree.children.length; i++) {
                   let ch = tree.children[i];
                   if (ch instanceof Tree)
                       explore(ch, tree.positions[i] + from);
               }
           };
           explore(syntaxTree(state), 0);
           return result;
       }
       /**
       Indicates whether this language allows nested languages. The
       default implementation returns true.
       */
       get allowsNesting() { return true; }
   }
   /**
   @internal
   */
   Language.setState = /*@__PURE__*/StateEffect.define();
   function languageDataFacetAt(state, pos, side) {
       let topLang = state.facet(language);
       if (!topLang)
           return null;
       let facet = topLang.data;
       if (topLang.allowsNesting) {
           for (let node = syntaxTree(state).topNode; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
               facet = node.type.prop(languageDataProp) || facet;
       }
       return facet;
   }
   /**
   A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
   [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
   parsers.
   */
   class LRLanguage extends Language {
       constructor(data, parser) {
           super(data, parser);
           this.parser = parser;
       }
       /**
       Define a language from a parser.
       */
       static define(spec) {
           let data = defineLanguageFacet(spec.languageData);
           return new LRLanguage(data, spec.parser.configure({
               props: [languageDataProp.add(type => type.isTop ? data : undefined)]
           }));
       }
       /**
       Create a new instance of this language with a reconfigured
       version of its parser.
       */
       configure(options) {
           return new LRLanguage(this.data, this.parser.configure(options));
       }
       get allowsNesting() { return this.parser.hasWrappers(); }
   }
   /**
   Get the syntax tree for a state, which is the current (possibly
   incomplete) parse tree of the active
   [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
   language available.
   */
   function syntaxTree(state) {
       let field = state.field(Language.state, false);
       return field ? field.tree : Tree.empty;
   }
   // Lezer-style Input object for a Text document.
   class DocInput {
       constructor(doc, length = doc.length) {
           this.doc = doc;
           this.length = length;
           this.cursorPos = 0;
           this.string = "";
           this.cursor = doc.iter();
       }
       syncTo(pos) {
           this.string = this.cursor.next(pos - this.cursorPos).value;
           this.cursorPos = pos + this.string.length;
           return this.cursorPos - this.string.length;
       }
       chunk(pos) {
           this.syncTo(pos);
           return this.string;
       }
       get lineChunks() { return true; }
       read(from, to) {
           let stringStart = this.cursorPos - this.string.length;
           if (from < stringStart || to >= this.cursorPos)
               return this.doc.sliceString(from, to);
           else
               return this.string.slice(from - stringStart, to - stringStart);
       }
   }
   let currentContext = null;
   /**
   A parse context provided to parsers working on the editor content.
   */
   class ParseContext {
       constructor(parser, 
       /**
       The current editor state.
       */
       state, 
       /**
       Tree fragments that can be reused by incremental re-parses.
       */
       fragments = [], 
       /**
       @internal
       */
       tree, 
       /**
       @internal
       */
       treeLen, 
       /**
       The current editor viewport (or some overapproximation
       thereof). Intended to be used for opportunistically avoiding
       work (in which case
       [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
       should be called to make sure the parser is restarted when the
       skipped region becomes visible).
       */
       viewport, 
       /**
       @internal
       */
       skipped, 
       /**
       This is where skipping parsers can register a promise that,
       when resolved, will schedule a new parse. It is cleared when
       the parse worker picks up the promise. @internal
       */
       scheduleOn) {
           this.parser = parser;
           this.state = state;
           this.fragments = fragments;
           this.tree = tree;
           this.treeLen = treeLen;
           this.viewport = viewport;
           this.skipped = skipped;
           this.scheduleOn = scheduleOn;
           this.parse = null;
           /**
           @internal
           */
           this.tempSkipped = [];
       }
       /**
       @internal
       */
       static create(parser, state, viewport) {
           return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
       }
       startParse() {
           return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
       }
       /**
       @internal
       */
       work(until, upto) {
           if (upto != null && upto >= this.state.doc.length)
               upto = undefined;
           if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
               this.takeTree();
               return true;
           }
           return this.withContext(() => {
               var _a;
               if (typeof until == "number") {
                   let endTime = Date.now() + until;
                   until = () => Date.now() > endTime;
               }
               if (!this.parse)
                   this.parse = this.startParse();
               if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                   upto < this.state.doc.length)
                   this.parse.stopAt(upto);
               for (;;) {
                   let done = this.parse.advance();
                   if (done) {
                       this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                       this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                       this.tree = done;
                       this.parse = null;
                       if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                           this.parse = this.startParse();
                       else
                           return true;
                   }
                   if (until())
                       return false;
               }
           });
       }
       /**
       @internal
       */
       takeTree() {
           let pos, tree;
           if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
               if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                   this.parse.stopAt(pos);
               this.withContext(() => { while (!(tree = this.parse.advance())) { } });
               this.treeLen = pos;
               this.tree = tree;
               this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
               this.parse = null;
           }
       }
       withContext(f) {
           let prev = currentContext;
           currentContext = this;
           try {
               return f();
           }
           finally {
               currentContext = prev;
           }
       }
       withoutTempSkipped(fragments) {
           for (let r; r = this.tempSkipped.pop();)
               fragments = cutFragments(fragments, r.from, r.to);
           return fragments;
       }
       /**
       @internal
       */
       changes(changes, newState) {
           let { fragments, tree, treeLen, viewport, skipped } = this;
           this.takeTree();
           if (!changes.empty) {
               let ranges = [];
               changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
               fragments = TreeFragment.applyChanges(fragments, ranges);
               tree = Tree.empty;
               treeLen = 0;
               viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
               if (this.skipped.length) {
                   skipped = [];
                   for (let r of this.skipped) {
                       let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                       if (from < to)
                           skipped.push({ from, to });
                   }
               }
           }
           return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
       }
       /**
       @internal
       */
       updateViewport(viewport) {
           if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
               return false;
           this.viewport = viewport;
           let startLen = this.skipped.length;
           for (let i = 0; i < this.skipped.length; i++) {
               let { from, to } = this.skipped[i];
               if (from < viewport.to && to > viewport.from) {
                   this.fragments = cutFragments(this.fragments, from, to);
                   this.skipped.splice(i--, 1);
               }
           }
           if (this.skipped.length >= startLen)
               return false;
           this.reset();
           return true;
       }
       /**
       @internal
       */
       reset() {
           if (this.parse) {
               this.takeTree();
               this.parse = null;
           }
       }
       /**
       Notify the parse scheduler that the given region was skipped
       because it wasn't in view, and the parse should be restarted
       when it comes into view.
       */
       skipUntilInView(from, to) {
           this.skipped.push({ from, to });
       }
       /**
       Returns a parser intended to be used as placeholder when
       asynchronously loading a nested parser. It'll skip its input and
       mark it as not-really-parsed, so that the next update will parse
       it again.
       
       When `until` is given, a reparse will be scheduled when that
       promise resolves.
       */
       static getSkippingParser(until) {
           return new class extends Parser$1 {
               createParse(input, fragments, ranges) {
                   let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                   let parser = {
                       parsedPos: from,
                       advance() {
                           let cx = currentContext;
                           if (cx) {
                               for (let r of ranges)
                                   cx.tempSkipped.push(r);
                               if (until)
                                   cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                           }
                           this.parsedPos = to;
                           return new Tree(NodeType$1.none, [], [], to - from);
                       },
                       stoppedAt: null,
                       stopAt() { }
                   };
                   return parser;
               }
           };
       }
       /**
       @internal
       */
       isDone(upto) {
           upto = Math.min(upto, this.state.doc.length);
           let frags = this.fragments;
           return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
       }
       /**
       Get the context for the current parse, or `null` if no editor
       parse is in progress.
       */
       static get() { return currentContext; }
   }
   function cutFragments(fragments, from, to) {
       return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
   }
   class LanguageState {
       constructor(
       // A mutable parse state that is used to preserve work done during
       // the lifetime of a state when moving to the next state.
       context) {
           this.context = context;
           this.tree = context.tree;
       }
       apply(tr) {
           if (!tr.docChanged && this.tree == this.context.tree)
               return this;
           let newCx = this.context.changes(tr.changes, tr.state);
           // If the previous parse wasn't done, go forward only up to its
           // end position or the end of the viewport, to avoid slowing down
           // state updates with parse work beyond the viewport.
           let upto = this.context.treeLen == tr.startState.doc.length ? undefined
               : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
           if (!newCx.work(20 /* Apply */, upto))
               newCx.takeTree();
           return new LanguageState(newCx);
       }
       static init(state) {
           let vpTo = Math.min(3000 /* InitViewport */, state.doc.length);
           let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
           if (!parseState.work(20 /* Apply */, vpTo))
               parseState.takeTree();
           return new LanguageState(parseState);
       }
   }
   Language.state = /*@__PURE__*/StateField.define({
       create: LanguageState.init,
       update(value, tr) {
           for (let e of tr.effects)
               if (e.is(Language.setState))
                   return e.value;
           if (tr.startState.facet(language) != tr.state.facet(language))
               return LanguageState.init(tr.state);
           return value.apply(tr);
       }
   });
   let requestIdle = (callback) => {
       let timeout = setTimeout(() => callback(), 500 /* MaxPause */);
       return () => clearTimeout(timeout);
   };
   if (typeof requestIdleCallback != "undefined")
       requestIdle = (callback) => {
           let idle = -1, timeout = setTimeout(() => {
               idle = requestIdleCallback(callback, { timeout: 500 /* MaxPause */ - 100 /* MinPause */ });
           }, 100 /* MinPause */);
           return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
       };
   const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)
       ? () => navigator.scheduling.isInputPending() : null;
   const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
       constructor(view) {
           this.view = view;
           this.working = null;
           this.workScheduled = 0;
           // End of the current time chunk
           this.chunkEnd = -1;
           // Milliseconds of budget left for this chunk
           this.chunkBudget = -1;
           this.work = this.work.bind(this);
           this.scheduleWork();
       }
       update(update) {
           let cx = this.view.state.field(Language.state).context;
           if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
               this.scheduleWork();
           if (update.docChanged) {
               if (this.view.hasFocus)
                   this.chunkBudget += 50 /* ChangeBonus */;
               this.scheduleWork();
           }
           this.checkAsyncSchedule(cx);
       }
       scheduleWork() {
           if (this.working)
               return;
           let { state } = this.view, field = state.field(Language.state);
           if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
               this.working = requestIdle(this.work);
       }
       work(deadline) {
           this.working = null;
           let now = Date.now();
           if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
               this.chunkEnd = now + 30000 /* ChunkTime */;
               this.chunkBudget = 3000 /* ChunkBudget */;
           }
           if (this.chunkBudget <= 0)
               return; // No more budget
           let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
           if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* MaxParseAhead */))
               return;
           let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Slice */, deadline && !isInputPending ? Math.max(25 /* MinSlice */, deadline.timeRemaining() - 5) : 1e9);
           let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
           let done = field.context.work(() => {
               return isInputPending && isInputPending() || Date.now() > endTime;
           }, vpTo + (viewportFirst ? 0 : 100000 /* MaxParseAhead */));
           this.chunkBudget -= Date.now() - now;
           if (done || this.chunkBudget <= 0) {
               field.context.takeTree();
               this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
           }
           if (this.chunkBudget > 0 && !(done && !viewportFirst))
               this.scheduleWork();
           this.checkAsyncSchedule(field.context);
       }
       checkAsyncSchedule(cx) {
           if (cx.scheduleOn) {
               this.workScheduled++;
               cx.scheduleOn
                   .then(() => this.scheduleWork())
                   .catch(err => logException(this.view.state, err))
                   .then(() => this.workScheduled--);
               cx.scheduleOn = null;
           }
       }
       destroy() {
           if (this.working)
               this.working();
       }
       isWorking() {
           return !!(this.working || this.workScheduled > 0);
       }
   }, {
       eventHandlers: { focus() { this.scheduleWork(); } }
   });
   /**
   The facet used to associate a language with an editor state. Used
   by `Language` object's `extension` property (so you don't need to
   manually wrap your languages in this). Can be used to access the
   current language on a state.
   */
   const language = /*@__PURE__*/Facet.define({
       combine(languages) { return languages.length ? languages[0] : null; },
       enables: [Language.state, parseWorker]
   });
   /**
   This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
   optional set of supporting extensions. Language packages are
   encouraged to export a function that optionally takes a
   configuration object and returns a `LanguageSupport` instance, as
   the main way for client code to use the package.
   */
   class LanguageSupport {
       /**
       Create a language support object.
       */
       constructor(
       /**
       The language object.
       */
       language, 
       /**
       An optional set of supporting extensions. When nesting a
       language in another language, the outer language is encouraged
       to include the supporting extensions for its inner languages
       in its own set of support extensions.
       */
       support = []) {
           this.language = language;
           this.support = support;
           this.extension = [language, support];
       }
   }
   /**
   Language descriptions are used to store metadata about languages
   and to dynamically load them. Their main role is finding the
   appropriate language for a filename or dynamically loading nested
   parsers.
   */
   class LanguageDescription {
       constructor(
       /**
       The name of this language.
       */
       name, 
       /**
       Alternative names for the mode (lowercased, includes `this.name`).
       */
       alias, 
       /**
       File extensions associated with this language.
       */
       extensions, 
       /**
       Optional filename pattern that should be associated with this
       language.
       */
       filename, loadFunc, 
       /**
       If the language has been loaded, this will hold its value.
       */
       support = undefined) {
           this.name = name;
           this.alias = alias;
           this.extensions = extensions;
           this.filename = filename;
           this.loadFunc = loadFunc;
           this.support = support;
           this.loading = null;
       }
       /**
       Start loading the the language. Will return a promise that
       resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
       object when the language successfully loads.
       */
       load() {
           return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));
       }
       /**
       Create a language description.
       */
       static of(spec) {
           let { load, support } = spec;
           if (!load) {
               if (!support)
                   throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
               load = () => Promise.resolve(support);
           }
           return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);
       }
       /**
       Look for a language in the given array of descriptions that
       matches the filename. Will first match
       [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
       and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
       and return the first language that matches.
       */
       static matchFilename(descs, filename) {
           for (let d of descs)
               if (d.filename && d.filename.test(filename))
                   return d;
           let ext = /\.([^.]+)$/.exec(filename);
           if (ext)
               for (let d of descs)
                   if (d.extensions.indexOf(ext[1]) > -1)
                       return d;
           return null;
       }
       /**
       Look for a language whose name or alias matches the the given
       name (case-insensitively). If `fuzzy` is true, and no direct
       matchs is found, this'll also search for a language whose name
       or alias occurs in the string (for names shorter than three
       characters, only when surrounded by non-word characters).
       */
       static matchLanguageName(descs, name, fuzzy = true) {
           name = name.toLowerCase();
           for (let d of descs)
               if (d.alias.some(a => a == name))
                   return d;
           if (fuzzy)
               for (let d of descs)
                   for (let a of d.alias) {
                       let found = name.indexOf(a);
                       if (found > -1 && (a.length > 2 || !/\w/.test(name[found - 1]) && !/\w/.test(name[found + a.length])))
                           return d;
                   }
           return null;
       }
   }

   /**
   Facet that defines a way to provide a function that computes the
   appropriate indentation depth at the start of a given line, or
   `null` to indicate no appropriate indentation could be determined.
   */
   const indentService = /*@__PURE__*/Facet.define();
   /**
   Facet for overriding the unit by which indentation happens.
   Should be a string consisting either entirely of spaces or
   entirely of tabs. When not set, this defaults to 2 spaces.
   */
   const indentUnit = /*@__PURE__*/Facet.define({
       combine: values => {
           if (!values.length)
               return "  ";
           if (!/^(?: +|\t+)$/.test(values[0]))
               throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
           return values[0];
       }
   });
   /**
   Return the _column width_ of an indent unit in the state.
   Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
   facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
   contains tabs.
   */
   function getIndentUnit(state) {
       let unit = state.facet(indentUnit);
       return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
   }
   /**
   Create an indentation string that covers columns 0 to `cols`.
   Will use tabs for as much of the columns as possible when the
   [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
   tabs.
   */
   function indentString(state, cols) {
       let result = "", ts = state.tabSize;
       if (state.facet(indentUnit).charCodeAt(0) == 9)
           while (cols >= ts) {
               result += "\t";
               cols -= ts;
           }
       for (let i = 0; i < cols; i++)
           result += " ";
       return result;
   }
   /**
   Get the indentation at the given position. Will first consult any
   [indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,
   and if none of those return an indentation, this will check the
   syntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)
   and use that if found. Returns a number when an indentation could
   be determined, and null otherwise.
   */
   function getIndentation(context, pos) {
       if (context instanceof EditorState)
           context = new IndentContext(context);
       for (let service of context.state.facet(indentService)) {
           let result = service(context, pos);
           if (result != null)
               return result;
       }
       let tree = syntaxTree(context.state);
       return tree ? syntaxIndentation(context, tree, pos) : null;
   }
   /**
   Indentation contexts are used when calling [indentation
   services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
   useful in indentation logic, and can selectively override the
   indentation reported for some lines.
   */
   class IndentContext {
       /**
       Create an indent context.
       */
       constructor(
       /**
       The editor state.
       */
       state, 
       /**
       @internal
       */
       options = {}) {
           this.state = state;
           this.options = options;
           this.unit = getIndentUnit(state);
       }
       /**
       Get a description of the line at the given position, taking
       [simulated line
       breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
       into account. If there is such a break at `pos`, the `bias`
       argument determines whether the part of the line line before or
       after the break is used.
       */
       lineAt(pos, bias = 1) {
           let line = this.state.doc.lineAt(pos);
           let { simulateBreak, simulateDoubleBreak } = this.options;
           if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
               if (simulateDoubleBreak && simulateBreak == pos)
                   return { text: "", from: pos };
               else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
                   return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
               else
                   return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
           }
           return line;
       }
       /**
       Get the text directly after `pos`, either the entire line
       or the next 100 characters, whichever is shorter.
       */
       textAfterPos(pos, bias = 1) {
           if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
               return "";
           let { text, from } = this.lineAt(pos, bias);
           return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
       }
       /**
       Find the column for the given position.
       */
       column(pos, bias = 1) {
           let { text, from } = this.lineAt(pos, bias);
           let result = this.countColumn(text, pos - from);
           let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
           if (override > -1)
               result += override - this.countColumn(text, text.search(/\S|$/));
           return result;
       }
       /**
       Find the column position (taking tabs into account) of the given
       position in the given string.
       */
       countColumn(line, pos = line.length) {
           return countColumn(line, this.state.tabSize, pos);
       }
       /**
       Find the indentation column of the line at the given point.
       */
       lineIndent(pos, bias = 1) {
           let { text, from } = this.lineAt(pos, bias);
           let override = this.options.overrideIndentation;
           if (override) {
               let overriden = override(from);
               if (overriden > -1)
                   return overriden;
           }
           return this.countColumn(text, text.search(/\S|$/));
       }
       /**
       Returns the [simulated line
       break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
       for this context, if any.
       */
       get simulatedBreak() {
           return this.options.simulateBreak || null;
       }
   }
   /**
   A syntax tree node prop used to associate indentation strategies
   with node types. Such a strategy is a function from an indentation
   context to a column number or null, where null indicates that no
   definitive indentation can be determined.
   */
   const indentNodeProp = /*@__PURE__*/new NodeProp();
   // Compute the indentation for a given position from the syntax tree.
   function syntaxIndentation(cx, ast, pos) {
       return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
   }
   function ignoreClosed(cx) {
       return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
   }
   function indentStrategy(tree) {
       let strategy = tree.type.prop(indentNodeProp);
       if (strategy)
           return strategy;
       let first = tree.firstChild, close;
       if (first && (close = first.type.prop(NodeProp.closedBy))) {
           let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
           return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
       }
       return tree.parent == null ? topIndent : null;
   }
   function indentFrom(node, pos, base) {
       for (; node; node = node.parent) {
           let strategy = indentStrategy(node);
           if (strategy)
               return strategy(TreeIndentContext.create(base, pos, node));
       }
       return null;
   }
   function topIndent() { return 0; }
   /**
   Objects of this type provide context information and helper
   methods to indentation functions registered on syntax nodes.
   */
   class TreeIndentContext extends IndentContext {
       constructor(base, 
       /**
       The position at which indentation is being computed.
       */
       pos, 
       /**
       The syntax tree node to which the indentation strategy
       applies.
       */
       node) {
           super(base.state, base.options);
           this.base = base;
           this.pos = pos;
           this.node = node;
       }
       /**
       @internal
       */
       static create(base, pos, node) {
           return new TreeIndentContext(base, pos, node);
       }
       /**
       Get the text directly after `this.pos`, either the entire line
       or the next 100 characters, whichever is shorter.
       */
       get textAfter() {
           return this.textAfterPos(this.pos);
       }
       /**
       Get the indentation at the reference line for `this.node`, which
       is the line on which it starts, unless there is a node that is
       _not_ a parent of this node covering the start of that line. If
       so, the line at the start of that node is tried, again skipping
       on if it is covered by another such node.
       */
       get baseIndent() {
           let line = this.state.doc.lineAt(this.node.from);
           // Skip line starts that are covered by a sibling (or cousin, etc)
           for (;;) {
               let atBreak = this.node.resolve(line.from);
               while (atBreak.parent && atBreak.parent.from == atBreak.from)
                   atBreak = atBreak.parent;
               if (isParent(atBreak, this.node))
                   break;
               line = this.state.doc.lineAt(atBreak.from);
           }
           return this.lineIndent(line.from);
       }
       /**
       Continue looking for indentations in the node's parent nodes,
       and return the result of that.
       */
       continue() {
           let parent = this.node.parent;
           return parent ? indentFrom(parent, this.pos, this.base) : 0;
       }
   }
   function isParent(parent, of) {
       for (let cur = of; cur; cur = cur.parent)
           if (parent == cur)
               return true;
       return false;
   }
   // Check whether a delimited node is aligned (meaning there are
   // non-skipped nodes on the same line as the opening delimiter). And
   // if so, return the opening token.
   function bracketedAligned(context) {
       let tree = context.node;
       let openToken = tree.childAfter(tree.from), last = tree.lastChild;
       if (!openToken)
           return null;
       let sim = context.options.simulateBreak;
       let openLine = context.state.doc.lineAt(openToken.from);
       let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
       for (let pos = openToken.to;;) {
           let next = tree.childAfter(pos);
           if (!next || next == last)
               return null;
           if (!next.type.isSkipped)
               return next.from < lineEnd ? openToken : null;
           pos = next.to;
       }
   }
   /**
   An indentation strategy for delimited (usually bracketed) nodes.
   Will, by default, indent one unit more than the parent's base
   indent unless the line starts with a closing token. When `align`
   is true and there are non-skipped nodes on the node's opening
   line, the content of the node will be aligned with the end of the
   opening node, like this:

       foo(bar,
           baz)
   */
   function delimitedIndent({ closing, align = true, units = 1 }) {
       return (context) => delimitedStrategy(context, align, units, closing);
   }
   function delimitedStrategy(context, align, units, closing, closedAt) {
       let after = context.textAfter, space = after.match(/^\s*/)[0].length;
       let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
       let aligned = align ? bracketedAligned(context) : null;
       if (aligned)
           return closed ? context.column(aligned.from) : context.column(aligned.to);
       return context.baseIndent + (closed ? 0 : context.unit * units);
   }
   /**
   An indentation strategy that aligns a node's content to its base
   indentation.
   */
   const flatIndent = (context) => context.baseIndent;
   /**
   Creates an indentation strategy that, by default, indents
   continued lines one unit more than the node's base indentation.
   You can provide `except` to prevent indentation of lines that
   match a pattern (for example `/^else\b/` in `if`/`else`
   constructs), and you can change the amount of units used with the
   `units` option.
   */
   function continuedIndent({ except, units = 1 } = {}) {
       return (context) => {
           let matchExcept = except && except.test(context.textAfter);
           return context.baseIndent + (matchExcept ? 0 : units * context.unit);
       };
   }
   const DontIndentBeyond = 200;
   /**
   Enables reindentation on input. When a language defines an
   `indentOnInput` field in its [language
   data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
   expression, the line at the cursor will be reindented whenever new
   text is typed and the input from the start of the line up to the
   cursor matches that regexp.

   To avoid unneccesary reindents, it is recommended to start the
   regexp with `^` (usually followed by `\s*`), and end it with `$`.
   For example, `/^\s*\}$/` will reindent when a closing brace is
   added at the start of a line.
   */
   function indentOnInput() {
       return EditorState.transactionFilter.of(tr => {
           if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
               return tr;
           let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
           if (!rules.length)
               return tr;
           let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
           if (head > line.from + DontIndentBeyond)
               return tr;
           let lineStart = doc.sliceString(line.from, head);
           if (!rules.some(r => r.test(lineStart)))
               return tr;
           let { state } = tr, last = -1, changes = [];
           for (let { head } of state.selection.ranges) {
               let line = state.doc.lineAt(head);
               if (line.from == last)
                   continue;
               last = line.from;
               let indent = getIndentation(state, line.from);
               if (indent == null)
                   continue;
               let cur = /^\s*/.exec(line.text)[0];
               let norm = indentString(state, indent);
               if (cur != norm)
                   changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
           }
           return changes.length ? [tr, { changes, sequential: true }] : tr;
       });
   }
   /**
   This node prop is used to associate folding information with
   syntax node types. Given a syntax node, it should check whether
   that tree is foldable and return the range that can be collapsed
   when it is.
   */
   const foldNodeProp = /*@__PURE__*/new NodeProp();
   /**
   [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
   the first and the last child of a syntax node. Useful for nodes
   that start and end with delimiters.
   */
   function foldInside(node) {
       let first = node.firstChild, last = node.lastChild;
       return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
   }

   /**
   A highlight style associates CSS styles with higlighting
   [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
   */
   class HighlightStyle {
       constructor(spec, options) {
           let modSpec;
           function def(spec) {
               let cls = StyleModule.newName();
               (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
               return cls;
           }
           const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
           const scopeOpt = options.scope;
           this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
               : scopeOpt ? (type) => type == scopeOpt : undefined;
           this.style = tagHighlighter(spec.map(style => ({
               tag: style.tag,
               class: style.class || def(Object.assign({}, style, { tag: null }))
           })), {
               all,
           }).style;
           this.module = modSpec ? new StyleModule(modSpec) : null;
           this.themeType = options.themeType;
       }
       /**
       Create a highlighter style that associates the given styles to
       the given tags. The specs must be objects that hold a style tag
       or array of tags in their `tag` property, and either a single
       `class` property providing a static CSS class (for highlighter
       that rely on external styling), or a
       [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
       set of CSS properties (which define the styling for those tags).
       
       The CSS rules created for a highlighter will be emitted in the
       order of the spec's properties. That means that for elements that
       have multiple tags associated with them, styles defined further
       down in the list will have a higher CSS precedence than styles
       defined earlier.
       */
       static define(specs, options) {
           return new HighlightStyle(specs, options || {});
       }
   }
   /**
   A default highlight style (works well with light themes).
   */
   /*@__PURE__*/HighlightStyle.define([
       { tag: tags$1.meta,
           color: "#7a757a" },
       { tag: tags$1.link,
           textDecoration: "underline" },
       { tag: tags$1.heading,
           textDecoration: "underline",
           fontWeight: "bold" },
       { tag: tags$1.emphasis,
           fontStyle: "italic" },
       { tag: tags$1.strong,
           fontWeight: "bold" },
       { tag: tags$1.strikethrough,
           textDecoration: "line-through" },
       { tag: tags$1.keyword,
           color: "#708" },
       { tag: [tags$1.atom, tags$1.bool, tags$1.url, tags$1.contentSeparator, tags$1.labelName],
           color: "#219" },
       { tag: [tags$1.literal, tags$1.inserted],
           color: "#164" },
       { tag: [tags$1.string, tags$1.deleted],
           color: "#a11" },
       { tag: [tags$1.regexp, tags$1.escape, /*@__PURE__*/tags$1.special(tags$1.string)],
           color: "#e40" },
       { tag: /*@__PURE__*/tags$1.definition(tags$1.variableName),
           color: "#00f" },
       { tag: /*@__PURE__*/tags$1.local(tags$1.variableName),
           color: "#30a" },
       { tag: [tags$1.typeName, tags$1.namespace],
           color: "#085" },
       { tag: tags$1.className,
           color: "#167" },
       { tag: [/*@__PURE__*/tags$1.special(tags$1.variableName), tags$1.macroName],
           color: "#256" },
       { tag: /*@__PURE__*/tags$1.definition(tags$1.propertyName),
           color: "#00c" },
       { tag: tags$1.comment,
           color: "#940" },
       { tag: tags$1.invalid,
           color: "#f00" }
   ]);

   const baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
       "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
       "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
   });
   const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
   const bracketMatchingConfig = /*@__PURE__*/Facet.define({
       combine(configs) {
           return combineConfig(configs, {
               afterCursor: true,
               brackets: DefaultBrackets,
               maxScanDistance: DefaultScanDist,
               renderMatch: defaultRenderMatch
           });
       }
   });
   const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
   function defaultRenderMatch(match) {
       let decorations = [];
       let mark = match.matched ? matchingMark : nonmatchingMark;
       decorations.push(mark.range(match.start.from, match.start.to));
       if (match.end)
           decorations.push(mark.range(match.end.from, match.end.to));
       return decorations;
   }
   const bracketMatchingState = /*@__PURE__*/StateField.define({
       create() { return Decoration.none; },
       update(deco, tr) {
           if (!tr.docChanged && !tr.selection)
               return deco;
           let decorations = [];
           let config = tr.state.facet(bracketMatchingConfig);
           for (let range of tr.state.selection.ranges) {
               if (!range.empty)
                   continue;
               let match = matchBrackets(tr.state, range.head, -1, config)
                   || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                   || (config.afterCursor &&
                       (matchBrackets(tr.state, range.head, 1, config) ||
                           (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
               if (match)
                   decorations = decorations.concat(config.renderMatch(match, tr.state));
           }
           return Decoration.set(decorations, true);
       },
       provide: f => EditorView.decorations.from(f)
   });
   const bracketMatchingUnique = [
       bracketMatchingState,
       baseTheme$3
   ];
   /**
   Create an extension that enables bracket matching. Whenever the
   cursor is next to a bracket, that bracket and the one it matches
   are highlighted. Or, when no matching bracket is found, another
   highlighting style is used to indicate this.
   */
   function bracketMatching(config = {}) {
       return [bracketMatchingConfig.of(config), bracketMatchingUnique];
   }
   function matchingNodes(node, dir, brackets) {
       let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
       if (byProp)
           return byProp;
       if (node.name.length == 1) {
           let index = brackets.indexOf(node.name);
           if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
               return [brackets[index + dir]];
       }
       return null;
   }
   /**
   Find the matching bracket for the token at `pos`, scanning
   direction `dir`. Only the `brackets` and `maxScanDistance`
   properties are used from `config`, if given. Returns null if no
   bracket was found at `pos`, or a match result otherwise.
   */
   function matchBrackets(state, pos, dir, config = {}) {
       let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
       let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
       for (let cur = node; cur; cur = cur.parent) {
           let matches = matchingNodes(cur.type, dir, brackets);
           if (matches && cur.from < cur.to)
               return matchMarkedBrackets(state, pos, dir, cur, matches, brackets);
       }
       return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
   }
   function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
       let parent = token.parent, firstToken = { from: token.from, to: token.to };
       let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
       if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
           do {
               if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                   if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
                       return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: true };
                   }
                   else if (matchingNodes(cursor.type, dir, brackets)) {
                       depth++;
                   }
                   else if (matchingNodes(cursor.type, -dir, brackets)) {
                       depth--;
                       if (depth == 0)
                           return {
                               start: firstToken,
                               end: cursor.from == cursor.to ? undefined : { from: cursor.from, to: cursor.to },
                               matched: false
                           };
                   }
               }
           } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
       return { start: firstToken, matched: false };
   }
   function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
       let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
       let bracket = brackets.indexOf(startCh);
       if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
           return null;
       let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
       let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
       for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
           let text = iter.value;
           if (dir < 0)
               distance += text.length;
           let basePos = pos + distance * dir;
           for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
               let found = brackets.indexOf(text[pos]);
               if (found < 0 || tree.resolve(basePos + pos, 1).type != tokenType)
                   continue;
               if ((found % 2 == 0) == (dir > 0)) {
                   depth++;
               }
               else if (depth == 1) { // Closing
                   return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
               }
               else {
                   depth--;
               }
           }
           if (dir > 0)
               distance += text.length;
       }
       return iter.done ? { start: startToken, matched: false } : null;
   }
   const noTokens = /*@__PURE__*/Object.create(null);
   const typeArray = [NodeType$1.none];
   const warned = [];
   const defaultTable = /*@__PURE__*/Object.create(null);
   for (let [legacyName, name] of [
       ["variable", "variableName"],
       ["variable-2", "variableName.special"],
       ["string-2", "string.special"],
       ["def", "variableName.definition"],
       ["tag", "tagName"],
       ["attribute", "attributeName"],
       ["type", "typeName"],
       ["builtin", "variableName.standard"],
       ["qualifier", "modifier"],
       ["error", "invalid"],
       ["header", "heading"],
       ["property", "propertyName"]
   ])
       defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
   function warnForPart(part, msg) {
       if (warned.indexOf(part) > -1)
           return;
       warned.push(part);
       console.warn(msg);
   }
   function createTokenType(extra, tagStr) {
       let tag = null;
       for (let part of tagStr.split(".")) {
           let value = (extra[part] || tags$1[part]);
           if (!value) {
               warnForPart(part, `Unknown highlighting tag ${part}`);
           }
           else if (typeof value == "function") {
               if (!tag)
                   warnForPart(part, `Modifier ${part} used at start of tag`);
               else
                   tag = value(tag);
           }
           else {
               if (tag)
                   warnForPart(part, `Tag ${part} used as modifier`);
               else
                   tag = value;
           }
       }
       if (!tag)
           return 0;
       let name = tagStr.replace(/ /g, "_"), type = NodeType$1.define({
           id: typeArray.length,
           name,
           props: [styleTags({ [name]: tag })]
       });
       typeArray.push(type);
       return type.id;
   }

   /**
   Comment or uncomment the current selection. Will use line comments
   if available, otherwise falling back to block comments.
   */
   const toggleComment = target => {
       let config = getConfig(target.state);
       return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
   };
   function command(f, option) {
       return ({ state, dispatch }) => {
           if (state.readOnly)
               return false;
           let tr = f(option, state);
           if (!tr)
               return false;
           dispatch(state.update(tr));
           return true;
       };
   }
   /**
   Comment or uncomment the current selection using line comments.
   The line comment syntax is taken from the
   [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
   data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
   */
   const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* Toggle */);
   /**
   Comment the current selection using line comments.
   */
   const lineComment = /*@__PURE__*/command(changeLineComment, 1 /* Comment */);
   /**
   Uncomment the current selection using line comments.
   */
   const lineUncomment = /*@__PURE__*/command(changeLineComment, 2 /* Uncomment */);
   /**
   Comment or uncomment the current selection using block comments.
   The block comment syntax is taken from the
   [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
   data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
   */
   const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* Toggle */);
   /**
   Comment the current selection using block comments.
   */
   const blockComment = /*@__PURE__*/command(changeBlockComment, 1 /* Comment */);
   /**
   Uncomment the current selection using block comments.
   */
   const blockUncomment = /*@__PURE__*/command(changeBlockComment, 2 /* Uncomment */);
   /**
   Comment or uncomment the lines around the current selection using
   block comments.
   */
   const toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* Toggle */);
   function getConfig(state, pos = state.selection.main.head) {
       let data = state.languageDataAt("commentTokens", pos);
       return data.length ? data[0] : {};
   }
   const SearchMargin = 50;
   /**
   Determines if the given range is block-commented in the given
   state.
   */
   function findBlockComment(state, { open, close }, from, to) {
       let textBefore = state.sliceDoc(from - SearchMargin, from);
       let textAfter = state.sliceDoc(to, to + SearchMargin);
       let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
       let beforeOff = textBefore.length - spaceBefore;
       if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
           textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
           return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
               close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
       }
       let startText, endText;
       if (to - from <= 2 * SearchMargin) {
           startText = endText = state.sliceDoc(from, to);
       }
       else {
           startText = state.sliceDoc(from, from + SearchMargin);
           endText = state.sliceDoc(to - SearchMargin, to);
       }
       let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
       let endOff = endText.length - endSpace - close.length;
       if (startText.slice(startSpace, startSpace + open.length) == open &&
           endText.slice(endOff, endOff + close.length) == close) {
           return { open: { pos: from + startSpace + open.length,
                   margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
               close: { pos: to - endSpace - close.length,
                   margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
       }
       return null;
   }
   function selectedLineRanges(state) {
       let ranges = [];
       for (let r of state.selection.ranges) {
           let fromLine = state.doc.lineAt(r.from);
           let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
           let last = ranges.length - 1;
           if (last >= 0 && ranges[last].to > fromLine.from)
               ranges[last].to = toLine.to;
           else
               ranges.push({ from: fromLine.from, to: toLine.to });
       }
       return ranges;
   }
   // Performs toggle, comment and uncomment of block comments in
   // languages that support them.
   function changeBlockComment(option, state, ranges = state.selection.ranges) {
       let tokens = ranges.map(r => getConfig(state, r.from).block);
       if (!tokens.every(c => c))
           return null;
       let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
       if (option != 2 /* Uncomment */ && !comments.every(c => c)) {
           return { changes: state.changes(ranges.map((range, i) => {
                   if (comments[i])
                       return [];
                   return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
               })) };
       }
       else if (option != 1 /* Comment */ && comments.some(c => c)) {
           let changes = [];
           for (let i = 0, comment; i < comments.length; i++)
               if (comment = comments[i]) {
                   let token = tokens[i], { open, close } = comment;
                   changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
               }
           return { changes };
       }
       return null;
   }
   // Performs toggle, comment and uncomment of line comments.
   function changeLineComment(option, state, ranges = state.selection.ranges) {
       let lines = [];
       let prevLine = -1;
       for (let { from, to } of ranges) {
           let startI = lines.length, minIndent = 1e9;
           for (let pos = from; pos <= to;) {
               let line = state.doc.lineAt(pos);
               if (line.from > prevLine && (from == to || to > line.from)) {
                   prevLine = line.from;
                   let token = getConfig(state, pos).line;
                   if (!token)
                       continue;
                   let indent = /^\s*/.exec(line.text)[0].length;
                   let empty = indent == line.length;
                   let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
                   if (indent < line.text.length && indent < minIndent)
                       minIndent = indent;
                   lines.push({ line, comment, token, indent, empty, single: false });
               }
               pos = line.to + 1;
           }
           if (minIndent < 1e9)
               for (let i = startI; i < lines.length; i++)
                   if (lines[i].indent < lines[i].line.text.length)
                       lines[i].indent = minIndent;
           if (lines.length == startI + 1)
               lines[startI].single = true;
       }
       if (option != 2 /* Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
           let changes = [];
           for (let { line, token, indent, empty, single } of lines)
               if (single || !empty)
                   changes.push({ from: line.from + indent, insert: token + " " });
           let changeSet = state.changes(changes);
           return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
       }
       else if (option != 1 /* Comment */ && lines.some(l => l.comment >= 0)) {
           let changes = [];
           for (let { line, comment, token } of lines)
               if (comment >= 0) {
                   let from = line.from + comment, to = from + token.length;
                   if (line.text[to - line.from] == " ")
                       to++;
                   changes.push({ from, to });
               }
           return { changes };
       }
       return null;
   }

   const fromHistory = /*@__PURE__*/Annotation.define();
   /**
   Transaction annotation that will prevent that transaction from
   being combined with other transactions in the undo history. Given
   `"before"`, it'll prevent merging with previous transactions. With
   `"after"`, subsequent transactions won't be combined with this
   one. With `"full"`, the transaction is isolated on both sides.
   */
   const isolateHistory = /*@__PURE__*/Annotation.define();
   /**
   This facet provides a way to register functions that, given a
   transaction, provide a set of effects that the history should
   store when inverting the transaction. This can be used to
   integrate some kinds of effects in the history, so that they can
   be undone (and redone again).
   */
   const invertedEffects = /*@__PURE__*/Facet.define();
   const historyConfig = /*@__PURE__*/Facet.define({
       combine(configs) {
           return combineConfig(configs, {
               minDepth: 100,
               newGroupDelay: 500
           }, { minDepth: Math.max, newGroupDelay: Math.min });
       }
   });
   function changeEnd(changes) {
       let end = 0;
       changes.iterChangedRanges((_, to) => end = to);
       return end;
   }
   const historyField_ = /*@__PURE__*/StateField.define({
       create() {
           return HistoryState.empty;
       },
       update(state, tr) {
           let config = tr.state.facet(historyConfig);
           let fromHist = tr.annotation(fromHistory);
           if (fromHist) {
               let selection = tr.docChanged ? EditorSelection.single(changeEnd(tr.changes)) : undefined;
               let item = HistEvent.fromTransaction(tr, selection), from = fromHist.side;
               let other = from == 0 /* Done */ ? state.undone : state.done;
               if (item)
                   other = updateBranch(other, other.length, config.minDepth, item);
               else
                   other = addSelection(other, tr.startState.selection);
               return new HistoryState(from == 0 /* Done */ ? fromHist.rest : other, from == 0 /* Done */ ? other : fromHist.rest);
           }
           let isolate = tr.annotation(isolateHistory);
           if (isolate == "full" || isolate == "before")
               state = state.isolate();
           if (tr.annotation(Transaction.addToHistory) === false)
               return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
           let event = HistEvent.fromTransaction(tr);
           let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
           if (event)
               state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);
           else if (tr.selection)
               state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
           if (isolate == "full" || isolate == "after")
               state = state.isolate();
           return state;
       },
       toJSON(value) {
           return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
       },
       fromJSON(json) {
           return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
       }
   });
   /**
   Create a history extension with the given configuration.
   */
   function history(config = {}) {
       return [
           historyField_,
           historyConfig.of(config),
           EditorView.domEventHandlers({
               beforeinput(e, view) {
                   let command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
                   if (!command)
                       return false;
                   e.preventDefault();
                   return command(view);
               }
           })
       ];
   }
   /**
   The state field used to store the history data. Should probably
   only be used when you want to
   [serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or
   [deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way
   that preserves history.
   */
   const historyField = historyField_;
   function cmd(side, selection) {
       return function ({ state, dispatch }) {
           if (!selection && state.readOnly)
               return false;
           let historyState = state.field(historyField_, false);
           if (!historyState)
               return false;
           let tr = historyState.pop(side, state, selection);
           if (!tr)
               return false;
           dispatch(tr);
           return true;
       };
   }
   /**
   Undo a single group of history events. Returns false if no group
   was available.
   */
   const undo = /*@__PURE__*/cmd(0 /* Done */, false);
   /**
   Redo a group of history events. Returns false if no group was
   available.
   */
   const redo = /*@__PURE__*/cmd(1 /* Undone */, false);
   /**
   Undo a change or selection change.
   */
   const undoSelection = /*@__PURE__*/cmd(0 /* Done */, true);
   /**
   Redo a change or selection change.
   */
   const redoSelection = /*@__PURE__*/cmd(1 /* Undone */, true);
   function depth(side) {
       return function (state) {
           let histState = state.field(historyField_, false);
           if (!histState)
               return 0;
           let branch = side == 0 /* Done */ ? histState.done : histState.undone;
           return branch.length - (branch.length && !branch[0].changes ? 1 : 0);
       };
   }
   /**
   The amount of undoable change events available in a given state.
   */
   const undoDepth = /*@__PURE__*/depth(0 /* Done */);
   /**
   The amount of redoable change events available in a given state.
   */
   const redoDepth = /*@__PURE__*/depth(1 /* Undone */);
   // History events store groups of changes or effects that need to be
   // undone/redone together.
   class HistEvent {
       constructor(
       // The changes in this event. Normal events hold at least one
       // change or effect. But it may be necessary to store selection
       // events before the first change, in which case a special type of
       // instance is created which doesn't hold any changes, with
       // changes == startSelection == undefined
       changes, 
       // The effects associated with this event
       effects, mapped, 
       // The selection before this event
       startSelection, 
       // Stores selection changes after this event, to be used for
       // selection undo/redo.
       selectionsAfter) {
           this.changes = changes;
           this.effects = effects;
           this.mapped = mapped;
           this.startSelection = startSelection;
           this.selectionsAfter = selectionsAfter;
       }
       setSelAfter(after) {
           return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
       }
       toJSON() {
           var _a, _b, _c;
           return {
               changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
               mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
               startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
               selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
           };
       }
       static fromJSON(json) {
           return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
       }
       // This does not check `addToHistory` and such, it assumes the
       // transaction needs to be converted to an item. Returns null when
       // there are no changes or effects in the transaction.
       static fromTransaction(tr, selection) {
           let effects = none$2;
           for (let invert of tr.startState.facet(invertedEffects)) {
               let result = invert(tr);
               if (result.length)
                   effects = effects.concat(result);
           }
           if (!effects.length && tr.changes.empty)
               return null;
           return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none$2);
       }
       static selection(selections) {
           return new HistEvent(undefined, none$2, undefined, undefined, selections);
       }
   }
   function updateBranch(branch, to, maxLen, newEvent) {
       let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
       let newBranch = branch.slice(start, to);
       newBranch.push(newEvent);
       return newBranch;
   }
   function isAdjacent(a, b) {
       let ranges = [], isAdjacent = false;
       a.iterChangedRanges((f, t) => ranges.push(f, t));
       b.iterChangedRanges((_f, _t, f, t) => {
           for (let i = 0; i < ranges.length;) {
               let from = ranges[i++], to = ranges[i++];
               if (t >= from && f <= to)
                   isAdjacent = true;
           }
       });
       return isAdjacent;
   }
   function eqSelectionShape(a, b) {
       return a.ranges.length == b.ranges.length &&
           a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
   }
   function conc(a, b) {
       return !a.length ? b : !b.length ? a : a.concat(b);
   }
   const none$2 = [];
   const MaxSelectionsPerEvent = 200;
   function addSelection(branch, selection) {
       if (!branch.length) {
           return [HistEvent.selection([selection])];
       }
       else {
           let lastEvent = branch[branch.length - 1];
           let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
           if (sels.length && sels[sels.length - 1].eq(selection))
               return branch;
           sels.push(selection);
           return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
       }
   }
   // Assumes the top item has one or more selectionAfter values
   function popSelection(branch) {
       let last = branch[branch.length - 1];
       let newBranch = branch.slice();
       newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
       return newBranch;
   }
   // Add a mapping to the top event in the given branch. If this maps
   // away all the changes and effects in that item, drop it and
   // propagate the mapping to the next item.
   function addMappingToBranch(branch, mapping) {
       if (!branch.length)
           return branch;
       let length = branch.length, selections = none$2;
       while (length) {
           let event = mapEvent(branch[length - 1], mapping, selections);
           if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
               let result = branch.slice(0, length);
               result[length - 1] = event;
               return result;
           }
           else { // Drop this event, since there's no changes or effects left
               mapping = event.mapped;
               length--;
               selections = event.selectionsAfter;
           }
       }
       return selections.length ? [HistEvent.selection(selections)] : none$2;
   }
   function mapEvent(event, mapping, extraSelections) {
       let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none$2, extraSelections);
       // Change-less events don't store mappings (they are always the last event in a branch)
       if (!event.changes)
           return HistEvent.selection(selections);
       let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
       let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
       return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
   }
   const joinableUserEvent = /^(input\.type|delete)($|\.)/;
   class HistoryState {
       constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
           this.done = done;
           this.undone = undone;
           this.prevTime = prevTime;
           this.prevUserEvent = prevUserEvent;
       }
       isolate() {
           return this.prevTime ? new HistoryState(this.done, this.undone) : this;
       }
       addChanges(event, time, userEvent, newGroupDelay, maxLen) {
           let done = this.done, lastEvent = done[done.length - 1];
           if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
               (!userEvent || joinableUserEvent.test(userEvent)) &&
               ((!lastEvent.selectionsAfter.length &&
                   time - this.prevTime < newGroupDelay &&
                   isAdjacent(lastEvent.changes, event.changes)) ||
                   // For compose (but not compose.start) events, always join with previous event
                   userEvent == "input.type.compose")) {
               done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none$2));
           }
           else {
               done = updateBranch(done, done.length, maxLen, event);
           }
           return new HistoryState(done, none$2, time, userEvent);
       }
       addSelection(selection, time, userEvent, newGroupDelay) {
           let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none$2;
           if (last.length > 0 &&
               time - this.prevTime < newGroupDelay &&
               userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
               eqSelectionShape(last[last.length - 1], selection))
               return this;
           return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
       }
       addMapping(mapping) {
           return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
       }
       pop(side, state, selection) {
           let branch = side == 0 /* Done */ ? this.done : this.undone;
           if (branch.length == 0)
               return null;
           let event = branch[branch.length - 1];
           if (selection && event.selectionsAfter.length) {
               return state.update({
                   selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                   annotations: fromHistory.of({ side, rest: popSelection(branch) }),
                   userEvent: side == 0 /* Done */ ? "select.undo" : "select.redo",
                   scrollIntoView: true
               });
           }
           else if (!event.changes) {
               return null;
           }
           else {
               let rest = branch.length == 1 ? none$2 : branch.slice(0, branch.length - 1);
               if (event.mapped)
                   rest = addMappingToBranch(rest, event.mapped);
               return state.update({
                   changes: event.changes,
                   selection: event.startSelection,
                   effects: event.effects,
                   annotations: fromHistory.of({ side, rest }),
                   filter: false,
                   userEvent: side == 0 /* Done */ ? "undo" : "redo",
                   scrollIntoView: true
               });
           }
       }
   }
   HistoryState.empty = /*@__PURE__*/new HistoryState(none$2, none$2);
   /**
   Default key bindings for the undo history.

   - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
   - Mod-y (Mod-Shift-z on macOS): [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
   - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
   - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
   */
   const historyKeymap = [
       { key: "Mod-z", run: undo, preventDefault: true },
       { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
       { key: "Mod-u", run: undoSelection, preventDefault: true },
       { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
   ];

   function updateSel(sel, by) {
       return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
   }
   function setSel(state, selection) {
       return state.update({ selection, scrollIntoView: true, userEvent: "select" });
   }
   function moveSel({ state, dispatch }, how) {
       let selection = updateSel(state.selection, how);
       if (selection.eq(state.selection))
           return false;
       dispatch(setSel(state, selection));
       return true;
   }
   function rangeEnd(range, forward) {
       return EditorSelection.cursor(forward ? range.to : range.from);
   }
   function cursorByChar(view, forward) {
       return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
   }
   function ltrAtCursor(view) {
       return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
   }
   /**
   Move the selection one character to the left (which is backward in
   left-to-right text, forward in right-to-left text).
   */
   const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
   /**
   Move the selection one character to the right.
   */
   const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
   /**
   Move the selection one character forward.
   */
   const cursorCharForward = view => cursorByChar(view, true);
   /**
   Move the selection one character backward.
   */
   const cursorCharBackward = view => cursorByChar(view, false);
   function cursorByGroup(view, forward) {
       return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
   }
   /**
   Move the selection to the left across one group of word or
   non-word (but also non-space) characters.
   */
   const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
   /**
   Move the selection one group to the right.
   */
   const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
   /**
   Move the selection one group forward.
   */
   const cursorGroupForward = view => cursorByGroup(view, true);
   /**
   Move the selection one group backward.
   */
   const cursorGroupBackward = view => cursorByGroup(view, false);
   function moveBySubword(view, range, forward) {
       let categorize = view.state.charCategorizer(range.from);
       return view.moveByChar(range, forward, start => {
           let cat = CharCategory.Space, pos = range.from;
           let done = false, sawUpper = false, sawLower = false;
           let step = (next) => {
               if (done)
                   return false;
               pos += forward ? next.length : -next.length;
               let nextCat = categorize(next), ahead;
               if (cat == CharCategory.Space)
                   cat = nextCat;
               if (cat != nextCat)
                   return false;
               if (cat == CharCategory.Word) {
                   if (next.toLowerCase() == next) {
                       if (!forward && sawUpper)
                           return false;
                       sawLower = true;
                   }
                   else if (sawLower) {
                       if (forward)
                           return false;
                       done = true;
                   }
                   else {
                       if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == CharCategory.Word &&
                           ahead.toLowerCase() == ahead)
                           return false;
                       sawUpper = true;
                   }
               }
               return true;
           };
           step(start);
           return step;
       });
   }
   function cursorBySubword(view, forward) {
       return moveSel(view, range => range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward));
   }
   /**
   Move the selection one group or camel-case subword forward.
   */
   const cursorSubwordForward = view => cursorBySubword(view, true);
   /**
   Move the selection one group or camel-case subword backward.
   */
   const cursorSubwordBackward = view => cursorBySubword(view, false);
   function interestingNode(state, node, bracketProp) {
       if (node.type.prop(bracketProp))
           return true;
       let len = node.to - node.from;
       return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
   }
   function moveBySyntax(state, start, forward) {
       let pos = syntaxTree(state).resolveInner(start.head);
       let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
       // Scan forward through child nodes to see if there's an interesting
       // node ahead.
       for (let at = start.head;;) {
           let next = forward ? pos.childAfter(at) : pos.childBefore(at);
           if (!next)
               break;
           if (interestingNode(state, next, bracketProp))
               pos = next;
           else
               at = forward ? next.to : next.from;
       }
       let bracket = pos.type.prop(bracketProp), match, newPos;
       if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
           newPos = forward ? match.end.to : match.end.from;
       else
           newPos = forward ? pos.to : pos.from;
       return EditorSelection.cursor(newPos, forward ? -1 : 1);
   }
   /**
   Move the cursor over the next syntactic element to the left.
   */
   const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
   /**
   Move the cursor over the next syntactic element to the right.
   */
   const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
   function cursorByLine(view, forward) {
       return moveSel(view, range => {
           if (!range.empty)
               return rangeEnd(range, forward);
           let moved = view.moveVertically(range, forward);
           return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
       });
   }
   /**
   Move the selection one line up.
   */
   const cursorLineUp = view => cursorByLine(view, false);
   /**
   Move the selection one line down.
   */
   const cursorLineDown = view => cursorByLine(view, true);
   function pageHeight(view) {
       return Math.max(view.defaultLineHeight, Math.min(view.dom.clientHeight, innerHeight) - 5);
   }
   function cursorByPage(view, forward) {
       let { state } = view, selection = updateSel(state.selection, range => {
           return range.empty ? view.moveVertically(range, forward, pageHeight(view)) : rangeEnd(range, forward);
       });
       if (selection.eq(state.selection))
           return false;
       let startPos = view.coordsAtPos(state.selection.main.head);
       let scrollRect = view.scrollDOM.getBoundingClientRect();
       let effect;
       if (startPos && startPos.top > scrollRect.top && startPos.bottom < scrollRect.bottom &&
           startPos.top - scrollRect.top <= view.scrollDOM.scrollHeight - view.scrollDOM.scrollTop - view.scrollDOM.clientHeight)
           effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollRect.top });
       view.dispatch(setSel(state, selection), { effects: effect });
       return true;
   }
   /**
   Move the selection one page up.
   */
   const cursorPageUp = view => cursorByPage(view, false);
   /**
   Move the selection one page down.
   */
   const cursorPageDown = view => cursorByPage(view, true);
   function moveByLineBoundary(view, start, forward) {
       let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
       if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
           moved = view.moveToLineBoundary(start, forward, false);
       if (!forward && moved.head == line.from && line.length) {
           let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
           if (space && start.head != line.from + space)
               moved = EditorSelection.cursor(line.from + space);
       }
       return moved;
   }
   /**
   Move the selection to the next line wrap point, or to the end of
   the line if there isn't one left on this line.
   */
   const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
   /**
   Move the selection to previous line wrap point, or failing that to
   the start of the line. If the line is indented, and the cursor
   isn't already at the end of the indentation, this will move to the
   end of the indentation instead of the start of the line.
   */
   const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
   /**
   Move the selection to the start of the line.
   */
   const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
   /**
   Move the selection to the end of the line.
   */
   const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
   function toMatchingBracket(state, dispatch, extend) {
       let found = false, selection = updateSel(state.selection, range => {
           let matching = matchBrackets(state, range.head, -1)
               || matchBrackets(state, range.head, 1)
               || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
               || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
           if (!matching || !matching.end)
               return range;
           found = true;
           let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
           return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
       });
       if (!found)
           return false;
       dispatch(setSel(state, selection));
       return true;
   }
   /**
   Move the selection to the bracket matching the one it is currently
   on, if any.
   */
   const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
   /**
   Extend the selection to the bracket matching the one the selection
   head is currently on, if any.
   */
   const selectMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, true);
   function extendSel(view, how) {
       let selection = updateSel(view.state.selection, range => {
           let head = how(range);
           return EditorSelection.range(range.anchor, head.head, head.goalColumn);
       });
       if (selection.eq(view.state.selection))
           return false;
       view.dispatch(setSel(view.state, selection));
       return true;
   }
   function selectByChar(view, forward) {
       return extendSel(view, range => view.moveByChar(range, forward));
   }
   /**
   Move the selection head one character to the left, while leaving
   the anchor in place.
   */
   const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
   /**
   Move the selection head one character to the right.
   */
   const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
   /**
   Move the selection head one character forward.
   */
   const selectCharForward = view => selectByChar(view, true);
   /**
   Move the selection head one character backward.
   */
   const selectCharBackward = view => selectByChar(view, false);
   function selectByGroup(view, forward) {
       return extendSel(view, range => view.moveByGroup(range, forward));
   }
   /**
   Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
   the left.
   */
   const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
   /**
   Move the selection head one group to the right.
   */
   const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
   /**
   Move the selection head one group forward.
   */
   const selectGroupForward = view => selectByGroup(view, true);
   /**
   Move the selection head one group backward.
   */
   const selectGroupBackward = view => selectByGroup(view, false);
   function selectBySubword(view, forward) {
       return extendSel(view, range => moveBySubword(view, range, forward));
   }
   /**
   Move the selection head one group or camel-case subword forward.
   */
   const selectSubwordForward = view => selectBySubword(view, true);
   /**
   Move the selection head one group or subword backward.
   */
   const selectSubwordBackward = view => selectBySubword(view, false);
   /**
   Move the selection head over the next syntactic element to the left.
   */
   const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
   /**
   Move the selection head over the next syntactic element to the right.
   */
   const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
   function selectByLine(view, forward) {
       return extendSel(view, range => view.moveVertically(range, forward));
   }
   /**
   Move the selection head one line up.
   */
   const selectLineUp = view => selectByLine(view, false);
   /**
   Move the selection head one line down.
   */
   const selectLineDown = view => selectByLine(view, true);
   function selectByPage(view, forward) {
       return extendSel(view, range => view.moveVertically(range, forward, pageHeight(view)));
   }
   /**
   Move the selection head one page up.
   */
   const selectPageUp = view => selectByPage(view, false);
   /**
   Move the selection head one page down.
   */
   const selectPageDown = view => selectByPage(view, true);
   /**
   Move the selection head to the next line boundary.
   */
   const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
   /**
   Move the selection head to the previous line boundary.
   */
   const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
   /**
   Move the selection head to the start of the line.
   */
   const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
   /**
   Move the selection head to the end of the line.
   */
   const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
   /**
   Move the selection to the start of the document.
   */
   const cursorDocStart = ({ state, dispatch }) => {
       dispatch(setSel(state, { anchor: 0 }));
       return true;
   };
   /**
   Move the selection to the end of the document.
   */
   const cursorDocEnd = ({ state, dispatch }) => {
       dispatch(setSel(state, { anchor: state.doc.length }));
       return true;
   };
   /**
   Move the selection head to the start of the document.
   */
   const selectDocStart = ({ state, dispatch }) => {
       dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
       return true;
   };
   /**
   Move the selection head to the end of the document.
   */
   const selectDocEnd = ({ state, dispatch }) => {
       dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
       return true;
   };
   /**
   Select the entire document.
   */
   const selectAll = ({ state, dispatch }) => {
       dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
       return true;
   };
   /**
   Expand the selection to cover entire lines.
   */
   const selectLine = ({ state, dispatch }) => {
       let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
       dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
       return true;
   };
   /**
   Select the next syntactic construct that is larger than the
   selection. Note that this will only work insofar as the language
   [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
   syntax tree.
   */
   const selectParentSyntax = ({ state, dispatch }) => {
       let selection = updateSel(state.selection, range => {
           var _a;
           let context = syntaxTree(state).resolveInner(range.head, 1);
           while (!((context.from < range.from && context.to >= range.to) ||
               (context.to > range.to && context.from <= range.from) ||
               !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))
               context = context.parent;
           return EditorSelection.range(context.to, context.from);
       });
       dispatch(setSel(state, selection));
       return true;
   };
   /**
   Simplify the current selection. When multiple ranges are selected,
   reduce it to its main range. Otherwise, if the selection is
   non-empty, convert it to a cursor selection.
   */
   const simplifySelection = ({ state, dispatch }) => {
       let cur = state.selection, selection = null;
       if (cur.ranges.length > 1)
           selection = EditorSelection.create([cur.main]);
       else if (!cur.main.empty)
           selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
       if (!selection)
           return false;
       dispatch(setSel(state, selection));
       return true;
   };
   function deleteBy({ state, dispatch }, by) {
       if (state.readOnly)
           return false;
       let event = "delete.selection";
       let changes = state.changeByRange(range => {
           let { from, to } = range;
           if (from == to) {
               let towards = by(from);
               if (towards < from)
                   event = "delete.backward";
               else if (towards > from)
                   event = "delete.forward";
               from = Math.min(from, towards);
               to = Math.max(to, towards);
           }
           return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };
       });
       if (changes.changes.empty)
           return false;
       dispatch(state.update(changes, { scrollIntoView: true, userEvent: event }));
       return true;
   }
   function skipAtomic(target, pos, forward) {
       if (target instanceof EditorView)
           for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))
               ranges.between(pos, pos, (from, to) => {
                   if (from < pos && to > pos)
                       pos = forward ? to : from;
               });
       return pos;
   }
   const deleteByChar = (target, forward) => deleteBy(target, pos => {
       let { state } = target, line = state.doc.lineAt(pos), before, targetPos;
       if (!forward && pos > line.from && pos < line.from + 200 &&
           !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
           if (before[before.length - 1] == "\t")
               return pos - 1;
           let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
           for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
               pos--;
           targetPos = pos;
       }
       else {
           targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
           if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
               targetPos += forward ? 1 : -1;
       }
       return skipAtomic(target, targetPos, forward);
   });
   /**
   Delete the selection, or, for cursor selections, the character
   before the cursor.
   */
   const deleteCharBackward = view => deleteByChar(view, false);
   /**
   Delete the selection or the character after the cursor.
   */
   const deleteCharForward = view => deleteByChar(view, true);
   const deleteByGroup = (target, forward) => deleteBy(target, start => {
       let pos = start, { state } = target, line = state.doc.lineAt(pos);
       let categorize = state.charCategorizer(pos);
       for (let cat = null;;) {
           if (pos == (forward ? line.to : line.from)) {
               if (pos == start && line.number != (forward ? state.doc.lines : 1))
                   pos += forward ? 1 : -1;
               break;
           }
           let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
           let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
           let nextCat = categorize(nextChar);
           if (cat != null && nextCat != cat)
               break;
           if (nextChar != " " || pos != start)
               cat = nextCat;
           pos = next;
       }
       return skipAtomic(target, pos, forward);
   });
   /**
   Delete the selection or backward until the end of the next
   [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
   whitespace when they consist of a single space.
   */
   const deleteGroupBackward = target => deleteByGroup(target, false);
   /**
   Delete the selection or forward until the end of the next group.
   */
   const deleteGroupForward = target => deleteByGroup(target, true);
   /**
   Delete the selection, or, if it is a cursor selection, delete to
   the end of the line. If the cursor is directly at the end of the
   line, delete the line break after it.
   */
   const deleteToLineEnd = view => deleteBy(view, pos => {
       let lineEnd = view.lineBlockAt(pos).to;
       return skipAtomic(view, pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1), true);
   });
   /**
   Delete the selection, or, if it is a cursor selection, delete to
   the start of the line. If the cursor is directly at the start of the
   line, delete the line break before it.
   */
   const deleteToLineStart = view => deleteBy(view, pos => {
       let lineStart = view.lineBlockAt(pos).from;
       return skipAtomic(view, pos > lineStart ? lineStart : Math.max(0, pos - 1), false);
   });
   /**
   Delete all whitespace directly before a line end from the
   document.
   */
   const deleteTrailingWhitespace = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       let changes = [];
       for (let pos = 0, prev = "", iter = state.doc.iter();;) {
           iter.next();
           if (iter.lineBreak || iter.done) {
               let trailing = prev.search(/\s+$/);
               if (trailing > -1)
                   changes.push({ from: pos - (prev.length - trailing), to: pos });
               if (iter.done)
                   break;
               prev = "";
           }
           else {
               prev = iter.value;
           }
           pos += iter.value.length;
       }
       if (!changes.length)
           return false;
       dispatch(state.update({ changes, userEvent: "delete" }));
       return true;
   };
   /**
   Replace each selection range with a line break, leaving the cursor
   on the line before the break.
   */
   const splitLine = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       let changes = state.changeByRange(range => {
           return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
               range: EditorSelection.cursor(range.from) };
       });
       dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
       return true;
   };
   /**
   Flip the characters before and after the cursor(s).
   */
   const transposeChars = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       let changes = state.changeByRange(range => {
           if (!range.empty || range.from == 0 || range.from == state.doc.length)
               return { range };
           let pos = range.from, line = state.doc.lineAt(pos);
           let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
           let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
           return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
               range: EditorSelection.cursor(to) };
       });
       if (changes.changes.empty)
           return false;
       dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
       return true;
   };
   function selectedLineBlocks(state) {
       let blocks = [], upto = -1;
       for (let range of state.selection.ranges) {
           let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
           if (!range.empty && range.to == endLine.from)
               endLine = state.doc.lineAt(range.to - 1);
           if (upto >= startLine.number) {
               let prev = blocks[blocks.length - 1];
               prev.to = endLine.to;
               prev.ranges.push(range);
           }
           else {
               blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
           }
           upto = endLine.number + 1;
       }
       return blocks;
   }
   function moveLine(state, dispatch, forward) {
       if (state.readOnly)
           return false;
       let changes = [], ranges = [];
       for (let block of selectedLineBlocks(state)) {
           if (forward ? block.to == state.doc.length : block.from == 0)
               continue;
           let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
           let size = nextLine.length + 1;
           if (forward) {
               changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
               for (let r of block.ranges)
                   ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
           }
           else {
               changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
               for (let r of block.ranges)
                   ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
           }
       }
       if (!changes.length)
           return false;
       dispatch(state.update({
           changes,
           scrollIntoView: true,
           selection: EditorSelection.create(ranges, state.selection.mainIndex),
           userEvent: "move.line"
       }));
       return true;
   }
   /**
   Move the selected lines up one line.
   */
   const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
   /**
   Move the selected lines down one line.
   */
   const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
   function copyLine(state, dispatch, forward) {
       if (state.readOnly)
           return false;
       let changes = [];
       for (let block of selectedLineBlocks(state)) {
           if (forward)
               changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
           else
               changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
       }
       dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
       return true;
   }
   /**
   Create a copy of the selected lines. Keep the selection in the top copy.
   */
   const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
   /**
   Create a copy of the selected lines. Keep the selection in the bottom copy.
   */
   const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
   /**
   Delete selected lines.
   */
   const deleteLine = view => {
       if (view.state.readOnly)
           return false;
       let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
           if (from > 0)
               from--;
           else if (to < state.doc.length)
               to++;
           return { from, to };
       }));
       let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
       view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
       return true;
   };
   /**
   Replace the selection with a newline.
   */
   const insertNewline = ({ state, dispatch }) => {
       dispatch(state.update(state.replaceSelection(state.lineBreak), { scrollIntoView: true, userEvent: "input" }));
       return true;
   };
   function isBetweenBrackets(state, pos) {
       if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
           return { from: pos, to: pos };
       let context = syntaxTree(state).resolveInner(pos);
       let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
       if (before && after && before.to <= pos && after.from >= pos &&
           (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
           state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)
           return { from: before.to, to: after.from };
       return null;
   }
   /**
   Replace the selection with a newline and indent the newly created
   line(s). If the current line consists only of whitespace, this
   will also delete that whitespace. When the cursor is between
   matching brackets, an additional newline will be inserted after
   the cursor.
   */
   const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
   /**
   Create a blank, indented line below the current line.
   */
   const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
   function newlineAndIndent(atEof) {
       return ({ state, dispatch }) => {
           if (state.readOnly)
               return false;
           let changes = state.changeByRange(range => {
               let { from, to } = range, line = state.doc.lineAt(from);
               let explode = !atEof && from == to && isBetweenBrackets(state, from);
               if (atEof)
                   from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
               let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
               let indent = getIndentation(cx, from);
               if (indent == null)
                   indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
               while (to < line.to && /\s/.test(line.text[to - line.from]))
                   to++;
               if (explode)
                   ({ from, to } = explode);
               else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                   from = line.from;
               let insert = ["", indentString(state, indent)];
               if (explode)
                   insert.push(indentString(state, cx.lineIndent(line.from, -1)));
               return { changes: { from, to, insert: Text.of(insert) },
                   range: EditorSelection.cursor(from + 1 + insert[1].length) };
           });
           dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
           return true;
       };
   }
   function changeBySelectedLine(state, f) {
       let atLine = -1;
       return state.changeByRange(range => {
           let changes = [];
           for (let pos = range.from; pos <= range.to;) {
               let line = state.doc.lineAt(pos);
               if (line.number > atLine && (range.empty || range.to > line.from)) {
                   f(line, changes, range);
                   atLine = line.number;
               }
               pos = line.to + 1;
           }
           let changeSet = state.changes(changes);
           return { changes,
               range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
       });
   }
   /**
   Auto-indent the selected lines. This uses the [indentation service
   facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
   information.
   */
   const indentSelection = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       let updated = Object.create(null);
       let context = new IndentContext(state, { overrideIndentation: start => {
               let found = updated[start];
               return found == null ? -1 : found;
           } });
       let changes = changeBySelectedLine(state, (line, changes, range) => {
           let indent = getIndentation(context, line.from);
           if (indent == null)
               return;
           if (!/\S/.test(line.text))
               indent = 0;
           let cur = /^\s*/.exec(line.text)[0];
           let norm = indentString(state, indent);
           if (cur != norm || range.from < line.from + cur.length) {
               updated[line.from] = indent;
               changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
           }
       });
       if (!changes.changes.empty)
           dispatch(state.update(changes, { userEvent: "indent" }));
       return true;
   };
   /**
   Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
   lines.
   */
   const indentMore = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
           changes.push({ from: line.from, insert: state.facet(indentUnit) });
       }), { userEvent: "input.indent" }));
       return true;
   };
   /**
   Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
   selected lines.
   */
   const indentLess = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
           let space = /^\s*/.exec(line.text)[0];
           if (!space)
               return;
           let col = countColumn(space, state.tabSize), keep = 0;
           let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
           while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
               keep++;
           changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
       }), { userEvent: "delete.dedent" }));
       return true;
   };
   /**
   Insert a tab character at the cursor or, if something is selected,
   use [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire
   selection.
   */
   const insertTab = ({ state, dispatch }) => {
       if (state.selection.ranges.some(r => !r.empty))
           return indentMore({ state, dispatch });
       dispatch(state.update(state.replaceSelection("\t"), { scrollIntoView: true, userEvent: "input" }));
       return true;
   };
   /**
   Array of key bindings containing the Emacs-style bindings that are
   available on macOS by default.

    - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
    - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
    - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
    - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
    - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
    - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
    - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
    - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
    - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
    - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
    - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
    - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
    - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
    - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
   */
   const emacsStyleKeymap = [
       { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
       { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
       { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
       { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
       { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
       { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
       { key: "Ctrl-d", run: deleteCharForward },
       { key: "Ctrl-h", run: deleteCharBackward },
       { key: "Ctrl-k", run: deleteToLineEnd },
       { key: "Ctrl-Alt-h", run: deleteGroupBackward },
       { key: "Ctrl-o", run: splitLine },
       { key: "Ctrl-t", run: transposeChars },
       { key: "Ctrl-v", run: cursorPageDown },
   ];
   /**
   An array of key bindings closely sticking to platform-standard or
   widely used bindings. (This includes the bindings from
   [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
   property changed to `mac`.)

    - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
    - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
    - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
    - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
    - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
    - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
    - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
    - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
    - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
    - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
    - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
    - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
    - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
    - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
    - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
    - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
    - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
    - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
    - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
    - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
    - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
    - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
    - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
    - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
    - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
    - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
   */
   const standardKeymap = /*@__PURE__*/[
       { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
       { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft },
       { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
       { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
       { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight },
       { mac: "Cmd-ArrowRight", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
       { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
       { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
       { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
       { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
       { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
       { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
       { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
       { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
       { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
       { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
       { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
       { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
       { key: "Enter", run: insertNewlineAndIndent },
       { key: "Mod-a", run: selectAll },
       { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
       { key: "Delete", run: deleteCharForward },
       { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
       { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
       { mac: "Mod-Backspace", run: deleteToLineStart },
       { mac: "Mod-Delete", run: deleteToLineEnd }
   ].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
   /**
   The default keymap. Includes all bindings from
   [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

   - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
   - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
   - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
   - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
   - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
   - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
   - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
   - Ctrl-Enter (Comd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
   - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
   - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
   - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
   - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
   - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
   - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
   - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
   - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
   - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
   */
   const defaultKeymap = /*@__PURE__*/[
       { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
       { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
       { key: "Alt-ArrowUp", run: moveLineUp },
       { key: "Shift-Alt-ArrowUp", run: copyLineUp },
       { key: "Alt-ArrowDown", run: moveLineDown },
       { key: "Shift-Alt-ArrowDown", run: copyLineDown },
       { key: "Escape", run: simplifySelection },
       { key: "Mod-Enter", run: insertBlankLine },
       { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
       { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
       { key: "Mod-[", run: indentLess },
       { key: "Mod-]", run: indentMore },
       { key: "Mod-Alt-\\", run: indentSelection },
       { key: "Shift-Mod-k", run: deleteLine },
       { key: "Shift-Mod-\\", run: cursorMatchingBracket },
       { key: "Mod-/", run: toggleComment },
       { key: "Alt-A", run: toggleBlockComment }
   ].concat(standardKeymap);
   /**
   A binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and
   Shift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).
   Please see the [Tab example](../../examples/tab/) before using
   this.
   */
   const indentWithTab = { key: "Tab", run: indentMore, shift: indentLess };

   /**
   An instance of this is passed to completion source functions.
   */
   class CompletionContext {
       /**
       Create a new completion context. (Mostly useful for testing
       completion sources—in the editor, the extension will create
       these for you.)
       */
       constructor(
       /**
       The editor state that the completion happens in.
       */
       state, 
       /**
       The position at which the completion is happening.
       */
       pos, 
       /**
       Indicates whether completion was activated explicitly, or
       implicitly by typing. The usual way to respond to this is to
       only return completions when either there is part of a
       completable entity before the cursor, or `explicit` is true.
       */
       explicit) {
           this.state = state;
           this.pos = pos;
           this.explicit = explicit;
           /**
           @internal
           */
           this.abortListeners = [];
       }
       /**
       Get the extent, content, and (if there is a token) type of the
       token before `this.pos`.
       */
       tokenBefore(types) {
           let token = syntaxTree(this.state).resolveInner(this.pos, -1);
           while (token && types.indexOf(token.name) < 0)
               token = token.parent;
           return token ? { from: token.from, to: this.pos,
               text: this.state.sliceDoc(token.from, this.pos),
               type: token.type } : null;
       }
       /**
       Get the match of the given expression directly before the
       cursor.
       */
       matchBefore(expr) {
           let line = this.state.doc.lineAt(this.pos);
           let start = Math.max(line.from, this.pos - 250);
           let str = line.text.slice(start - line.from, this.pos - line.from);
           let found = str.search(ensureAnchor(expr, false));
           return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
       }
       /**
       Yields true when the query has been aborted. Can be useful in
       asynchronous queries to avoid doing work that will be ignored.
       */
       get aborted() { return this.abortListeners == null; }
       /**
       Allows you to register abort handlers, which will be called when
       the query is
       [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
       */
       addEventListener(type, listener) {
           if (type == "abort" && this.abortListeners)
               this.abortListeners.push(listener);
       }
   }
   function toSet(chars) {
       let flat = Object.keys(chars).join("");
       let words = /\w/.test(flat);
       if (words)
           flat = flat.replace(/\w/g, "");
       return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
   }
   function prefixMatch(options) {
       let first = Object.create(null), rest = Object.create(null);
       for (let { label } of options) {
           first[label[0]] = true;
           for (let i = 1; i < label.length; i++)
               rest[label[i]] = true;
       }
       let source = toSet(first) + toSet(rest) + "*$";
       return [new RegExp("^" + source), new RegExp(source)];
   }
   /**
   Given a a fixed array of options, return an autocompleter that
   completes them.
   */
   function completeFromList(list) {
       let options = list.map(o => typeof o == "string" ? { label: o } : o);
       let [validFor, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
       return (context) => {
           let token = context.matchBefore(match);
           return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
       };
   }
   /**
   Wrap the given completion source so that it will not fire when the
   cursor is in a syntax node with one of the given names.
   */
   function ifNotIn(nodes, source) {
       return (context) => {
           for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent)
               if (nodes.indexOf(pos.name) > -1)
                   return null;
           return source(context);
       };
   }
   class Option {
       constructor(completion, source, match) {
           this.completion = completion;
           this.source = source;
           this.match = match;
       }
   }
   function cur(state) { return state.selection.main.head; }
   // Make sure the given regexp has a $ at its end and, if `start` is
   // true, a ^ at its start.
   function ensureAnchor(expr, start) {
       var _a;
       let { source } = expr;
       let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
       if (!addStart && !addEnd)
           return expr;
       return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
   }
   /**
   Helper function that returns a transaction spec which inserts a
   completion's text in the main selection range, and any other
   selection range that has the same text in front of it.
   */
   function insertCompletionText(state, text, from, to) {
       return Object.assign(Object.assign({}, state.changeByRange(range => {
           if (range == state.selection.main)
               return {
                   changes: { from: from, to: to, insert: text },
                   range: EditorSelection.cursor(from + text.length)
               };
           let len = to - from;
           if (!range.empty ||
               len && state.sliceDoc(range.from - len, range.from) != state.sliceDoc(from, to))
               return { range };
           return {
               changes: { from: range.from - len, to: range.from, insert: text },
               range: EditorSelection.cursor(range.from - len + text.length)
           };
       })), { userEvent: "input.complete" });
   }
   function applyCompletion(view, option) {
       const apply = option.completion.apply || option.completion.label;
       let result = option.source;
       if (typeof apply == "string")
           view.dispatch(insertCompletionText(view.state, apply, result.from, result.to));
       else
           apply(view, option.completion, result.from, result.to);
   }
   const SourceCache = /*@__PURE__*/new WeakMap();
   function asSource(source) {
       if (!Array.isArray(source))
           return source;
       let known = SourceCache.get(source);
       if (!known)
           SourceCache.set(source, known = completeFromList(source));
       return known;
   }

   // A pattern matcher for fuzzy completion matching. Create an instance
   // once for a pattern, and then use that to match any number of
   // completions.
   class FuzzyMatcher {
       constructor(pattern) {
           this.pattern = pattern;
           this.chars = [];
           this.folded = [];
           // Buffers reused by calls to `match` to track matched character
           // positions.
           this.any = [];
           this.precise = [];
           this.byWord = [];
           for (let p = 0; p < pattern.length;) {
               let char = codePointAt(pattern, p), size = codePointSize(char);
               this.chars.push(char);
               let part = pattern.slice(p, p + size), upper = part.toUpperCase();
               this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
               p += size;
           }
           this.astral = pattern.length != this.chars.length;
       }
       // Matches a given word (completion) against the pattern (input).
       // Will return null for no match, and otherwise an array that starts
       // with the match score, followed by any number of `from, to` pairs
       // indicating the matched parts of `word`.
       //
       // The score is a number that is more negative the worse the match
       // is. See `Penalty` above.
       match(word) {
           if (this.pattern.length == 0)
               return [0];
           if (word.length < this.pattern.length)
               return null;
           let { chars, folded, any, precise, byWord } = this;
           // For single-character queries, only match when they occur right
           // at the start
           if (chars.length == 1) {
               let first = codePointAt(word, 0);
               return first == chars[0] ? [0, 0, codePointSize(first)]
                   : first == folded[0] ? [-200 /* CaseFold */, 0, codePointSize(first)] : null;
           }
           let direct = word.indexOf(this.pattern);
           if (direct == 0)
               return [0, 0, this.pattern.length];
           let len = chars.length, anyTo = 0;
           if (direct < 0) {
               for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                   let next = codePointAt(word, i);
                   if (next == chars[anyTo] || next == folded[anyTo])
                       any[anyTo++] = i;
                   i += codePointSize(next);
               }
               // No match, exit immediately
               if (anyTo < len)
                   return null;
           }
           // This tracks the extent of the precise (non-folded, not
           // necessarily adjacent) match
           let preciseTo = 0;
           // Tracks whether there is a match that hits only characters that
           // appear to be starting words. `byWordFolded` is set to true when
           // a case folded character is encountered in such a match
           let byWordTo = 0, byWordFolded = false;
           // If we've found a partial adjacent match, these track its state
           let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
           let hasLower = /[a-z]/.test(word), wordAdjacent = true;
           // Go over the option's text, scanning for the various kinds of matches
           for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* NonWord */; i < e && byWordTo < len;) {
               let next = codePointAt(word, i);
               if (direct < 0) {
                   if (preciseTo < len && next == chars[preciseTo])
                       precise[preciseTo++] = i;
                   if (adjacentTo < len) {
                       if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                           if (adjacentTo == 0)
                               adjacentStart = i;
                           adjacentEnd = i + 1;
                           adjacentTo++;
                       }
                       else {
                           adjacentTo = 0;
                       }
                   }
               }
               let ch, type = next < 0xff
                   ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Lower */ : next >= 65 && next <= 90 ? 1 /* Upper */ : 0 /* NonWord */)
                   : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Upper */ : ch != ch.toUpperCase() ? 2 /* Lower */ : 0 /* NonWord */);
               if (!i || type == 1 /* Upper */ && hasLower || prevType == 0 /* NonWord */ && type != 0 /* NonWord */) {
                   if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))
                       byWord[byWordTo++] = i;
                   else if (byWord.length)
                       wordAdjacent = false;
               }
               prevType = type;
               i += codePointSize(next);
           }
           if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
               return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0), byWord, word);
           if (adjacentTo == len && adjacentStart == 0)
               return [-200 /* CaseFold */ - word.length, 0, adjacentEnd];
           if (direct > -1)
               return [-700 /* NotStart */ - word.length, direct, direct + this.pattern.length];
           if (adjacentTo == len)
               return [-200 /* CaseFold */ + -700 /* NotStart */ - word.length, adjacentStart, adjacentEnd];
           if (byWordTo == len)
               return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0) + -700 /* NotStart */ +
                   (wordAdjacent ? 0 : -1100 /* Gap */), byWord, word);
           return chars.length == 2 ? null : this.result((any[0] ? -700 /* NotStart */ : 0) + -200 /* CaseFold */ + -1100 /* Gap */, any, word);
       }
       result(score, positions, word) {
           let result = [score - word.length], i = 1;
           for (let pos of positions) {
               let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
               if (i > 1 && result[i - 1] == pos)
                   result[i - 1] = to;
               else {
                   result[i++] = pos;
                   result[i++] = to;
               }
           }
           return result;
       }
   }

   const completionConfig = /*@__PURE__*/Facet.define({
       combine(configs) {
           return combineConfig(configs, {
               activateOnTyping: true,
               override: null,
               closeOnBlur: true,
               maxRenderedOptions: 100,
               defaultKeymap: true,
               optionClass: () => "",
               aboveCursor: false,
               icons: true,
               addToOptions: []
           }, {
               defaultKeymap: (a, b) => a && b,
               closeOnBlur: (a, b) => a && b,
               icons: (a, b) => a && b,
               optionClass: (a, b) => c => joinClass(a(c), b(c)),
               addToOptions: (a, b) => a.concat(b)
           });
       }
   });
   function joinClass(a, b) {
       return a ? b ? a + " " + b : a : b;
   }

   function optionContent(config) {
       let content = config.addToOptions.slice();
       if (config.icons)
           content.push({
               render(completion) {
                   let icon = document.createElement("div");
                   icon.classList.add("cm-completionIcon");
                   if (completion.type)
                       icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
                   icon.setAttribute("aria-hidden", "true");
                   return icon;
               },
               position: 20
           });
       content.push({
           render(completion, _s, match) {
               let labelElt = document.createElement("span");
               labelElt.className = "cm-completionLabel";
               let { label } = completion, off = 0;
               for (let j = 1; j < match.length;) {
                   let from = match[j++], to = match[j++];
                   if (from > off)
                       labelElt.appendChild(document.createTextNode(label.slice(off, from)));
                   let span = labelElt.appendChild(document.createElement("span"));
                   span.appendChild(document.createTextNode(label.slice(from, to)));
                   span.className = "cm-completionMatchedText";
                   off = to;
               }
               if (off < label.length)
                   labelElt.appendChild(document.createTextNode(label.slice(off)));
               return labelElt;
           },
           position: 50
       }, {
           render(completion) {
               if (!completion.detail)
                   return null;
               let detailElt = document.createElement("span");
               detailElt.className = "cm-completionDetail";
               detailElt.textContent = completion.detail;
               return detailElt;
           },
           position: 80
       });
       return content.sort((a, b) => a.position - b.position).map(a => a.render);
   }
   function rangeAroundSelected(total, selected, max) {
       if (total <= max)
           return { from: 0, to: total };
       if (selected <= (total >> 1)) {
           let off = Math.floor(selected / max);
           return { from: off * max, to: (off + 1) * max };
       }
       let off = Math.floor((total - selected) / max);
       return { from: total - (off + 1) * max, to: total - off * max };
   }
   class CompletionTooltip {
       constructor(view, stateField) {
           this.view = view;
           this.stateField = stateField;
           this.info = null;
           this.placeInfo = {
               read: () => this.measureInfo(),
               write: (pos) => this.positionInfo(pos),
               key: this
           };
           let cState = view.state.field(stateField);
           let { options, selected } = cState.open;
           let config = view.state.facet(completionConfig);
           this.optionContent = optionContent(config);
           this.optionClass = config.optionClass;
           this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
           this.dom = document.createElement("div");
           this.dom.className = "cm-tooltip-autocomplete";
           this.dom.addEventListener("mousedown", (e) => {
               for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
                   if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                       applyCompletion(view, options[+match[1]]);
                       e.preventDefault();
                       return;
                   }
               }
           });
           this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));
           this.list.addEventListener("scroll", () => {
               if (this.info)
                   this.view.requestMeasure(this.placeInfo);
           });
       }
       mount() { this.updateSel(); }
       update(update) {
           if (update.state.field(this.stateField) != update.startState.field(this.stateField))
               this.updateSel();
       }
       positioned() {
           if (this.info)
               this.view.requestMeasure(this.placeInfo);
       }
       updateSel() {
           let cState = this.view.state.field(this.stateField), open = cState.open;
           if (open.selected < this.range.from || open.selected >= this.range.to) {
               this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
               this.list.remove();
               this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));
               this.list.addEventListener("scroll", () => {
                   if (this.info)
                       this.view.requestMeasure(this.placeInfo);
               });
           }
           if (this.updateSelectedOption(open.selected)) {
               if (this.info) {
                   this.info.remove();
                   this.info = null;
               }
               let { completion } = open.options[open.selected];
               let { info } = completion;
               if (!info)
                   return;
               let infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);
               if (!infoResult)
                   return;
               if ('then' in infoResult) {
                   infoResult.then(node => {
                       if (node && this.view.state.field(this.stateField, false) == cState)
                           this.addInfoPane(node);
                   }).catch(e => logException(this.view.state, e, "completion info"));
               }
               else {
                   this.addInfoPane(infoResult);
               }
           }
       }
       addInfoPane(content) {
           let dom = this.info = document.createElement("div");
           dom.className = "cm-tooltip cm-completionInfo";
           dom.appendChild(content);
           this.dom.appendChild(dom);
           this.view.requestMeasure(this.placeInfo);
       }
       updateSelectedOption(selected) {
           let set = null;
           for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
               if (i == selected) {
                   if (!opt.hasAttribute("aria-selected")) {
                       opt.setAttribute("aria-selected", "true");
                       set = opt;
                   }
               }
               else {
                   if (opt.hasAttribute("aria-selected"))
                       opt.removeAttribute("aria-selected");
               }
           }
           if (set)
               scrollIntoView(this.list, set);
           return set;
       }
       measureInfo() {
           let sel = this.dom.querySelector("[aria-selected]");
           if (!sel || !this.info)
               return null;
           let listRect = this.dom.getBoundingClientRect();
           let infoRect = this.info.getBoundingClientRect();
           let selRect = sel.getBoundingClientRect();
           if (selRect.top > Math.min(innerHeight, listRect.bottom) - 10 || selRect.bottom < Math.max(0, listRect.top) + 10)
               return null;
           let top = Math.max(0, Math.min(selRect.top, innerHeight - infoRect.height)) - listRect.top;
           let left = this.view.textDirection == Direction.RTL;
           let spaceLeft = listRect.left, spaceRight = innerWidth - listRect.right;
           if (left && spaceLeft < Math.min(infoRect.width, spaceRight))
               left = false;
           else if (!left && spaceRight < Math.min(infoRect.width, spaceLeft))
               left = true;
           return { top, left };
       }
       positionInfo(pos) {
           if (this.info) {
               this.info.style.top = (pos ? pos.top : -1e6) + "px";
               if (pos) {
                   this.info.classList.toggle("cm-completionInfo-left", pos.left);
                   this.info.classList.toggle("cm-completionInfo-right", !pos.left);
               }
           }
       }
       createListBox(options, id, range) {
           const ul = document.createElement("ul");
           ul.id = id;
           ul.setAttribute("role", "listbox");
           ul.setAttribute("aria-expanded", "true");
           ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
           for (let i = range.from; i < range.to; i++) {
               let { completion, match } = options[i];
               const li = ul.appendChild(document.createElement("li"));
               li.id = id + "-" + i;
               li.setAttribute("role", "option");
               let cls = this.optionClass(completion);
               if (cls)
                   li.className = cls;
               for (let source of this.optionContent) {
                   let node = source(completion, this.view.state, match);
                   if (node)
                       li.appendChild(node);
               }
           }
           if (range.from)
               ul.classList.add("cm-completionListIncompleteTop");
           if (range.to < options.length)
               ul.classList.add("cm-completionListIncompleteBottom");
           return ul;
       }
   }
   // We allocate a new function instance every time the completion
   // changes to force redrawing/repositioning of the tooltip
   function completionTooltip(stateField) {
       return (view) => new CompletionTooltip(view, stateField);
   }
   function scrollIntoView(container, element) {
       let parent = container.getBoundingClientRect();
       let self = element.getBoundingClientRect();
       if (self.top < parent.top)
           container.scrollTop -= parent.top - self.top;
       else if (self.bottom > parent.bottom)
           container.scrollTop += self.bottom - parent.bottom;
   }

   // Used to pick a preferred option when two options with the same
   // label occur in the result.
   function score(option) {
       return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +
           (option.type ? 1 : 0);
   }
   function sortOptions(active, state) {
       let options = [], i = 0;
       for (let a of active)
           if (a.hasResult()) {
               if (a.result.filter === false) {
                   let getMatch = a.result.getMatch;
                   for (let option of a.result.options) {
                       let match = [1e9 - i++];
                       if (getMatch)
                           for (let n of getMatch(option))
                               match.push(n);
                       options.push(new Option(option, a, match));
                   }
               }
               else {
                   let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)), match;
                   for (let option of a.result.options)
                       if (match = matcher.match(option.label)) {
                           if (option.boost != null)
                               match[0] += option.boost;
                           options.push(new Option(option, a, match));
                       }
               }
           }
       let result = [], prev = null;
       for (let opt of options.sort(cmpOption)) {
           if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail ||
               (prev.type != null && opt.completion.type != null && prev.type != opt.completion.type) ||
               prev.apply != opt.completion.apply)
               result.push(opt);
           else if (score(opt.completion) > score(prev))
               result[result.length - 1] = opt;
           prev = opt.completion;
       }
       return result;
   }
   class CompletionDialog {
       constructor(options, attrs, tooltip, timestamp, selected) {
           this.options = options;
           this.attrs = attrs;
           this.tooltip = tooltip;
           this.timestamp = timestamp;
           this.selected = selected;
       }
       setSelected(selected, id) {
           return selected == this.selected || selected >= this.options.length ? this
               : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);
       }
       static build(active, state, id, prev, conf) {
           let options = sortOptions(active, state);
           if (!options.length)
               return null;
           let selected = 0;
           if (prev && prev.selected) {
               let selectedValue = prev.options[prev.selected].completion;
               for (let i = 0; i < options.length; i++)
                   if (options[i].completion == selectedValue) {
                       selected = i;
                       break;
                   }
           }
           return new CompletionDialog(options, makeAttrs(id, selected), {
               pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
               create: completionTooltip(completionState),
               above: conf.aboveCursor,
           }, prev ? prev.timestamp : Date.now(), selected);
       }
       map(changes) {
           return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected);
       }
   }
   class CompletionState {
       constructor(active, id, open) {
           this.active = active;
           this.id = id;
           this.open = open;
       }
       static start() {
           return new CompletionState(none$1, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
       }
       update(tr) {
           let { state } = tr, conf = state.facet(completionConfig);
           let sources = conf.override ||
               state.languageDataAt("autocomplete", cur(state)).map(asSource);
           let active = sources.map(source => {
               let value = this.active.find(s => s.source == source) ||
                   new ActiveSource(source, this.active.some(a => a.state != 0 /* Inactive */) ? 1 /* Pending */ : 0 /* Inactive */);
               return value.update(tr, conf);
           });
           if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
               active = this.active;
           let open = tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
               !sameResults(active, this.active) ? CompletionDialog.build(active, state, this.id, this.open, conf)
               : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;
           if (!open && active.every(a => a.state != 1 /* Pending */) && active.some(a => a.hasResult()))
               active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* Inactive */) : a);
           for (let effect of tr.effects)
               if (effect.is(setSelectedEffect))
                   open = open && open.setSelected(effect.value, this.id);
           return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
       }
       get tooltip() { return this.open ? this.open.tooltip : null; }
       get attrs() { return this.open ? this.open.attrs : baseAttrs; }
   }
   function sameResults(a, b) {
       if (a == b)
           return true;
       for (let iA = 0, iB = 0;;) {
           while (iA < a.length && !a[iA].hasResult)
               iA++;
           while (iB < b.length && !b[iB].hasResult)
               iB++;
           let endA = iA == a.length, endB = iB == b.length;
           if (endA || endB)
               return endA == endB;
           if (a[iA++].result != b[iB++].result)
               return false;
       }
   }
   const baseAttrs = {
       "aria-autocomplete": "list"
   };
   function makeAttrs(id, selected) {
       return {
           "aria-autocomplete": "list",
           "aria-haspopup": "listbox",
           "aria-activedescendant": id + "-" + selected,
           "aria-controls": id
       };
   }
   const none$1 = [];
   function cmpOption(a, b) {
       let dScore = b.match[0] - a.match[0];
       if (dScore)
           return dScore;
       return a.completion.label.localeCompare(b.completion.label);
   }
   function getUserEvent(tr) {
       return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
   }
   class ActiveSource {
       constructor(source, state, explicitPos = -1) {
           this.source = source;
           this.state = state;
           this.explicitPos = explicitPos;
       }
       hasResult() { return false; }
       update(tr, conf) {
           let event = getUserEvent(tr), value = this;
           if (event)
               value = value.handleUserEvent(tr, event, conf);
           else if (tr.docChanged)
               value = value.handleChange(tr);
           else if (tr.selection && value.state != 0 /* Inactive */)
               value = new ActiveSource(value.source, 0 /* Inactive */);
           for (let effect of tr.effects) {
               if (effect.is(startCompletionEffect))
                   value = new ActiveSource(value.source, 1 /* Pending */, effect.value ? cur(tr.state) : -1);
               else if (effect.is(closeCompletionEffect))
                   value = new ActiveSource(value.source, 0 /* Inactive */);
               else if (effect.is(setActiveEffect))
                   for (let active of effect.value)
                       if (active.source == value.source)
                           value = active;
           }
           return value;
       }
       handleUserEvent(tr, type, conf) {
           return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* Pending */);
       }
       handleChange(tr) {
           return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);
       }
       map(changes) {
           return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
       }
   }
   class ActiveResult extends ActiveSource {
       constructor(source, explicitPos, result, from, to) {
           super(source, 2 /* Result */, explicitPos);
           this.result = result;
           this.from = from;
           this.to = to;
       }
       hasResult() { return true; }
       handleUserEvent(tr, type, conf) {
           var _a;
           let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
           let pos = cur(tr.state);
           if ((this.explicitPos < 0 ? pos <= from : pos < this.from) ||
               pos > to ||
               type == "delete" && cur(tr.startState) == this.from)
               return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 /* Pending */ : 0 /* Inactive */);
           let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos), updated;
           if (checkValid(this.result.validFor, tr.state, from, to))
               return new ActiveResult(this.source, explicitPos, this.result, from, to);
           if (this.result.update &&
               (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))
               return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));
           return new ActiveSource(this.source, 1 /* Pending */, explicitPos);
       }
       handleChange(tr) {
           return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);
       }
       map(mapping) {
           return mapping.empty ? this :
               new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
       }
   }
   function checkValid(validFor, state, from, to) {
       if (!validFor)
           return false;
       let text = state.sliceDoc(from, to);
       return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
   }
   const startCompletionEffect = /*@__PURE__*/StateEffect.define();
   const closeCompletionEffect = /*@__PURE__*/StateEffect.define();
   const setActiveEffect = /*@__PURE__*/StateEffect.define({
       map(sources, mapping) { return sources.map(s => s.map(mapping)); }
   });
   const setSelectedEffect = /*@__PURE__*/StateEffect.define();
   const completionState = /*@__PURE__*/StateField.define({
       create() { return CompletionState.start(); },
       update(value, tr) { return value.update(tr); },
       provide: f => [
           showTooltip.from(f, val => val.tooltip),
           EditorView.contentAttributes.from(f, state => state.attrs)
       ]
   });

   const CompletionInteractMargin = 75;
   /**
   Returns a command that moves the completion selection forward or
   backward by the given amount.
   */
   function moveCompletionSelection(forward, by = "option") {
       return (view) => {
           let cState = view.state.field(completionState, false);
           if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
               return false;
           let step = 1, tooltip;
           if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
               step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /
                   tooltip.dom.querySelector("li").offsetHeight) - 1);
           let selected = cState.open.selected + step * (forward ? 1 : -1), { length } = cState.open.options;
           if (selected < 0)
               selected = by == "page" ? 0 : length - 1;
           else if (selected >= length)
               selected = by == "page" ? length - 1 : 0;
           view.dispatch({ effects: setSelectedEffect.of(selected) });
           return true;
       };
   }
   /**
   Accept the current completion.
   */
   const acceptCompletion = (view) => {
       let cState = view.state.field(completionState, false);
       if (view.state.readOnly || !cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
           return false;
       applyCompletion(view, cState.open.options[cState.open.selected]);
       return true;
   };
   /**
   Explicitly start autocompletion.
   */
   const startCompletion = (view) => {
       let cState = view.state.field(completionState, false);
       if (!cState)
           return false;
       view.dispatch({ effects: startCompletionEffect.of(true) });
       return true;
   };
   /**
   Close the currently active completion.
   */
   const closeCompletion = (view) => {
       let cState = view.state.field(completionState, false);
       if (!cState || !cState.active.some(a => a.state != 0 /* Inactive */))
           return false;
       view.dispatch({ effects: closeCompletionEffect.of(null) });
       return true;
   };
   class RunningQuery {
       constructor(active, context) {
           this.active = active;
           this.context = context;
           this.time = Date.now();
           this.updates = [];
           // Note that 'undefined' means 'not done yet', whereas 'null' means
           // 'query returned null'.
           this.done = undefined;
       }
   }
   const DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;
   const completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.view = view;
           this.debounceUpdate = -1;
           this.running = [];
           this.debounceAccept = -1;
           this.composing = 0 /* None */;
           for (let active of view.state.field(completionState).active)
               if (active.state == 1 /* Pending */)
                   this.startQuery(active);
       }
       update(update) {
           let cState = update.state.field(completionState);
           if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
               return;
           let doesReset = update.transactions.some(tr => {
               return (tr.selection || tr.docChanged) && !getUserEvent(tr);
           });
           for (let i = 0; i < this.running.length; i++) {
               let query = this.running[i];
               if (doesReset ||
                   query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
                   for (let handler of query.context.abortListeners) {
                       try {
                           handler();
                       }
                       catch (e) {
                           logException(this.view.state, e);
                       }
                   }
                   query.context.abortListeners = null;
                   this.running.splice(i--, 1);
               }
               else {
                   query.updates.push(...update.transactions);
               }
           }
           if (this.debounceUpdate > -1)
               clearTimeout(this.debounceUpdate);
           this.debounceUpdate = cState.active.some(a => a.state == 1 /* Pending */ && !this.running.some(q => q.active.source == a.source))
               ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;
           if (this.composing != 0 /* None */)
               for (let tr of update.transactions) {
                   if (getUserEvent(tr) == "input")
                       this.composing = 2 /* Changed */;
                   else if (this.composing == 2 /* Changed */ && tr.selection)
                       this.composing = 3 /* ChangedAndMoved */;
               }
       }
       startUpdate() {
           this.debounceUpdate = -1;
           let { state } = this.view, cState = state.field(completionState);
           for (let active of cState.active) {
               if (active.state == 1 /* Pending */ && !this.running.some(r => r.active.source == active.source))
                   this.startQuery(active);
           }
       }
       startQuery(active) {
           let { state } = this.view, pos = cur(state);
           let context = new CompletionContext(state, pos, active.explicitPos == pos);
           let pending = new RunningQuery(active, context);
           this.running.push(pending);
           Promise.resolve(active.source(context)).then(result => {
               if (!pending.context.aborted) {
                   pending.done = result || null;
                   this.scheduleAccept();
               }
           }, err => {
               this.view.dispatch({ effects: closeCompletionEffect.of(null) });
               logException(this.view.state, err);
           });
       }
       scheduleAccept() {
           if (this.running.every(q => q.done !== undefined))
               this.accept();
           else if (this.debounceAccept < 0)
               this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);
       }
       // For each finished query in this.running, try to create a result
       // or, if appropriate, restart the query.
       accept() {
           var _a;
           if (this.debounceAccept > -1)
               clearTimeout(this.debounceAccept);
           this.debounceAccept = -1;
           let updated = [];
           let conf = this.view.state.facet(completionConfig);
           for (let i = 0; i < this.running.length; i++) {
               let query = this.running[i];
               if (query.done === undefined)
                   continue;
               this.running.splice(i--, 1);
               if (query.done) {
                   let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));
                   // Replay the transactions that happened since the start of
                   // the request and see if that preserves the result
                   for (let tr of query.updates)
                       active = active.update(tr, conf);
                   if (active.hasResult()) {
                       updated.push(active);
                       continue;
                   }
               }
               let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);
               if (current && current.state == 1 /* Pending */) {
                   if (query.done == null) {
                       // Explicitly failed. Should clear the pending status if it
                       // hasn't been re-set in the meantime.
                       let active = new ActiveSource(query.active.source, 0 /* Inactive */);
                       for (let tr of query.updates)
                           active = active.update(tr, conf);
                       if (active.state != 1 /* Pending */)
                           updated.push(active);
                   }
                   else {
                       // Cleared by subsequent transactions. Restart.
                       this.startQuery(current);
                   }
               }
           }
           if (updated.length)
               this.view.dispatch({ effects: setActiveEffect.of(updated) });
       }
   }, {
       eventHandlers: {
           blur() {
               let state = this.view.state.field(completionState, false);
               if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur)
                   this.view.dispatch({ effects: closeCompletionEffect.of(null) });
           },
           compositionstart() {
               this.composing = 1 /* Started */;
           },
           compositionend() {
               if (this.composing == 3 /* ChangedAndMoved */) {
                   // Safari fires compositionend events synchronously, possibly
                   // from inside an update, so dispatch asynchronously to avoid reentrancy
                   setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
               }
               this.composing = 0 /* None */;
           }
       }
   });

   const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
       ".cm-tooltip.cm-tooltip-autocomplete": {
           "& > ul": {
               fontFamily: "monospace",
               whiteSpace: "nowrap",
               overflow: "hidden auto",
               maxWidth_fallback: "700px",
               maxWidth: "min(700px, 95vw)",
               minWidth: "250px",
               maxHeight: "10em",
               listStyle: "none",
               margin: 0,
               padding: 0,
               "& > li": {
                   overflowX: "hidden",
                   textOverflow: "ellipsis",
                   cursor: "pointer",
                   padding: "1px 3px",
                   lineHeight: 1.2
               },
           }
       },
       "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
           background: "#17c",
           color: "white",
       },
       "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
           background: "#347",
           color: "white",
       },
       ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
           content: '"···"',
           opacity: 0.5,
           display: "block",
           textAlign: "center"
       },
       ".cm-tooltip.cm-completionInfo": {
           position: "absolute",
           padding: "3px 9px",
           width: "max-content",
           maxWidth: "300px",
       },
       ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
       ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
       "&light .cm-snippetField": { backgroundColor: "#00000022" },
       "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
       ".cm-snippetFieldPosition": {
           verticalAlign: "text-top",
           width: 0,
           height: "1.15em",
           margin: "0 -0.7px -.7em",
           borderLeft: "1.4px dotted #888"
       },
       ".cm-completionMatchedText": {
           textDecoration: "underline"
       },
       ".cm-completionDetail": {
           marginLeft: "0.5em",
           fontStyle: "italic"
       },
       ".cm-completionIcon": {
           fontSize: "90%",
           width: ".8em",
           display: "inline-block",
           textAlign: "center",
           paddingRight: ".6em",
           opacity: "0.6"
       },
       ".cm-completionIcon-function, .cm-completionIcon-method": {
           "&:after": { content: "'ƒ'" }
       },
       ".cm-completionIcon-class": {
           "&:after": { content: "'○'" }
       },
       ".cm-completionIcon-interface": {
           "&:after": { content: "'◌'" }
       },
       ".cm-completionIcon-variable": {
           "&:after": { content: "'𝑥'" }
       },
       ".cm-completionIcon-constant": {
           "&:after": { content: "'𝐶'" }
       },
       ".cm-completionIcon-type": {
           "&:after": { content: "'𝑡'" }
       },
       ".cm-completionIcon-enum": {
           "&:after": { content: "'∪'" }
       },
       ".cm-completionIcon-property": {
           "&:after": { content: "'□'" }
       },
       ".cm-completionIcon-keyword": {
           "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
       },
       ".cm-completionIcon-namespace": {
           "&:after": { content: "'▢'" }
       },
       ".cm-completionIcon-text": {
           "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
       }
   });

   class FieldPos {
       constructor(field, line, from, to) {
           this.field = field;
           this.line = line;
           this.from = from;
           this.to = to;
       }
   }
   class FieldRange {
       constructor(field, from, to) {
           this.field = field;
           this.from = from;
           this.to = to;
       }
       map(changes) {
           let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
           let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
           return from == null || to == null ? null : new FieldRange(this.field, from, to);
       }
   }
   class Snippet {
       constructor(lines, fieldPositions) {
           this.lines = lines;
           this.fieldPositions = fieldPositions;
       }
       instantiate(state, pos) {
           let text = [], lineStart = [pos];
           let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
           for (let line of this.lines) {
               if (text.length) {
                   let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
                   for (let i = 0; i < tabs; i++)
                       indent += state.facet(indentUnit);
                   lineStart.push(pos + indent.length - tabs);
                   line = indent + line.slice(tabs);
               }
               text.push(line);
               pos += line.length + 1;
           }
           let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
           return { text, ranges };
       }
       static parse(template) {
           let fields = [];
           let lines = [], positions = [], m;
           for (let line of template.split(/\r\n?|\n/)) {
               while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
                   let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || "", found = -1;
                   for (let i = 0; i < fields.length; i++) {
                       if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)
                           found = i;
                   }
                   if (found < 0) {
                       let i = 0;
                       while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))
                           i++;
                       fields.splice(i, 0, { seq, name });
                       found = i;
                       for (let pos of positions)
                           if (pos.field >= found)
                               pos.field++;
                   }
                   positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
                   line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
               }
               for (let esc; esc = /([$#])\\{/.exec(line);) {
                   line = line.slice(0, esc.index) + esc[1] + "{" + line.slice(esc.index + esc[0].length);
                   for (let pos of positions)
                       if (pos.line == lines.length && pos.from > esc.index) {
                           pos.from--;
                           pos.to--;
                       }
               }
               lines.push(line);
           }
           return new Snippet(lines, positions);
       }
   }
   let fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {
           toDOM() {
               let span = document.createElement("span");
               span.className = "cm-snippetFieldPosition";
               return span;
           }
           ignoreEvent() { return false; }
       } });
   let fieldRange = /*@__PURE__*/Decoration.mark({ class: "cm-snippetField" });
   class ActiveSnippet {
       constructor(ranges, active) {
           this.ranges = ranges;
           this.active = active;
           this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
       }
       map(changes) {
           let ranges = [];
           for (let r of this.ranges) {
               let mapped = r.map(changes);
               if (!mapped)
                   return null;
               ranges.push(mapped);
           }
           return new ActiveSnippet(ranges, this.active);
       }
       selectionInsideField(sel) {
           return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
       }
   }
   const setActive = /*@__PURE__*/StateEffect.define({
       map(value, changes) { return value && value.map(changes); }
   });
   const moveToField = /*@__PURE__*/StateEffect.define();
   const snippetState = /*@__PURE__*/StateField.define({
       create() { return null; },
       update(value, tr) {
           for (let effect of tr.effects) {
               if (effect.is(setActive))
                   return effect.value;
               if (effect.is(moveToField) && value)
                   return new ActiveSnippet(value.ranges, effect.value);
           }
           if (value && tr.docChanged)
               value = value.map(tr.changes);
           if (value && tr.selection && !value.selectionInsideField(tr.selection))
               value = null;
           return value;
       },
       provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)
   });
   function fieldSelection(ranges, field) {
       return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
   }
   /**
   Convert a snippet template to a function that can
   [apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
   using syntax like this:

       "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

   Each `${}` placeholder (you may also use `#{}`) indicates a field
   that the user can fill in. Its name, if any, will be the default
   content for the field.

   When the snippet is activated by calling the returned function,
   the code is inserted at the given position. Newlines in the
   template are indented by the indentation of the start line, plus
   one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
   the newline.

   On activation, (all instances of) the first field are selected.
   The user can move between fields with Tab and Shift-Tab as long as
   the fields are active. Moving to the last field or moving the
   cursor out of the current field deactivates the fields.

   The order of fields defaults to textual order, but you can add
   numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
   a custom order.

   To include a literal `${` or `#{` in your template, put a
   backslash after the dollar or hash and before the brace (`$\\{`).
   This will be removed and the sequence will not be interpreted as a
   placeholder.
   */
   function snippet(template) {
       let snippet = Snippet.parse(template);
       return (editor, _completion, from, to) => {
           let { text, ranges } = snippet.instantiate(editor.state, from);
           let spec = {
               changes: { from, to, insert: Text.of(text) },
               scrollIntoView: true
           };
           if (ranges.length)
               spec.selection = fieldSelection(ranges, 0);
           if (ranges.length > 1) {
               let active = new ActiveSnippet(ranges, 0);
               let effects = spec.effects = [setActive.of(active)];
               if (editor.state.field(snippetState, false) === undefined)
                   effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme$2]));
           }
           editor.dispatch(editor.state.update(spec));
       };
   }
   function moveField(dir) {
       return ({ state, dispatch }) => {
           let active = state.field(snippetState, false);
           if (!active || dir < 0 && active.active == 0)
               return false;
           let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
           dispatch(state.update({
               selection: fieldSelection(active.ranges, next),
               effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
           }));
           return true;
       };
   }
   /**
   A command that clears the active snippet, if any.
   */
   const clearSnippet = ({ state, dispatch }) => {
       let active = state.field(snippetState, false);
       if (!active)
           return false;
       dispatch(state.update({ effects: setActive.of(null) }));
       return true;
   };
   /**
   Move to the next snippet field, if available.
   */
   const nextSnippetField = /*@__PURE__*/moveField(1);
   /**
   Move to the previous snippet field, if available.
   */
   const prevSnippetField = /*@__PURE__*/moveField(-1);
   const defaultSnippetKeymap = [
       { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
       { key: "Escape", run: clearSnippet }
   ];
   /**
   A facet that can be used to configure the key bindings used by
   snippets. The default binds Tab to
   [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
   [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
   to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
   */
   const snippetKeymap = /*@__PURE__*/Facet.define({
       combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }
   });
   const addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
   /**
   Create a completion from a snippet. Returns an object with the
   properties from `completion`, plus an `apply` function that
   applies the snippet.
   */
   function snippetCompletion(template, completion) {
       return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
   }
   const snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
       mousedown(event, view) {
           let active = view.state.field(snippetState, false), pos;
           if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
               return false;
           let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
           if (!match || match.field == active.active)
               return false;
           view.dispatch({
               selection: fieldSelection(active.ranges, match.field),
               effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)
           });
           return true;
       }
   });

   const defaults = {
       brackets: ["(", "[", "{", "'", '"'],
       before: ")]}:;>"
   };
   const closeBracketEffect = /*@__PURE__*/StateEffect.define({
       map(value, mapping) {
           let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
           return mapped == null ? undefined : mapped;
       }
   });
   const skipBracketEffect = /*@__PURE__*/StateEffect.define({
       map(value, mapping) { return mapping.mapPos(value); }
   });
   const closedBracket = /*@__PURE__*/new class extends RangeValue {
   };
   closedBracket.startSide = 1;
   closedBracket.endSide = -1;
   const bracketState = /*@__PURE__*/StateField.define({
       create() { return RangeSet.empty; },
       update(value, tr) {
           if (tr.selection) {
               let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
               let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
               if (lineStart != tr.changes.mapPos(prevLineStart, -1))
                   value = RangeSet.empty;
           }
           value = value.map(tr.changes);
           for (let effect of tr.effects) {
               if (effect.is(closeBracketEffect))
                   value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
               else if (effect.is(skipBracketEffect))
                   value = value.update({ filter: from => from != effect.value });
           }
           return value;
       }
   });
   /**
   Extension to enable bracket-closing behavior. When a closeable
   bracket is typed, its closing bracket is immediately inserted
   after the cursor. When closing a bracket directly in front of a
   closing bracket inserted by the extension, the cursor moves over
   that bracket.
   */
   function closeBrackets() {
       return [inputHandler, bracketState];
   }
   const definedClosing = "()[]{}<>";
   function closing(ch) {
       for (let i = 0; i < definedClosing.length; i += 2)
           if (definedClosing.charCodeAt(i) == ch)
               return definedClosing.charAt(i + 1);
       return fromCodePoint(ch < 128 ? ch : ch + 1);
   }
   function config$1(state, pos) {
       return state.languageDataAt("closeBrackets", pos)[0] || defaults;
   }
   const android$1 = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
   const inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {
       if ((android$1 ? view.composing : view.compositionStarted) || view.state.readOnly)
           return false;
       let sel = view.state.selection.main;
       if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
           from != sel.from || to != sel.to)
           return false;
       let tr = insertBracket(view.state, insert);
       if (!tr)
           return false;
       view.dispatch(tr);
       return true;
   });
   /**
   Command that implements deleting a pair of matching brackets when
   the cursor is between them.
   */
   const deleteBracketPair = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       let conf = config$1(state, state.selection.main.head);
       let tokens = conf.brackets || defaults.brackets;
       let dont = null, changes = state.changeByRange(range => {
           if (range.empty) {
               let before = prevChar(state.doc, range.head);
               for (let token of tokens) {
                   if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))
                       return { changes: { from: range.head - token.length, to: range.head + token.length },
                           range: EditorSelection.cursor(range.head - token.length),
                           userEvent: "delete.backward" };
               }
           }
           return { range: dont = range };
       });
       if (!dont)
           dispatch(state.update(changes, { scrollIntoView: true }));
       return !dont;
   };
   /**
   Close-brackets related key bindings. Binds Backspace to
   [`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
   */
   const closeBracketsKeymap = [
       { key: "Backspace", run: deleteBracketPair }
   ];
   /**
   Implements the extension's behavior on text insertion. If the
   given string counts as a bracket in the language around the
   selection, and replacing the selection with it requires custom
   behavior (inserting a closing version or skipping past a
   previously-closed bracket), this function returns a transaction
   representing that custom behavior. (You only need this if you want
   to programmatically insert brackets—the
   [`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
   take care of running this for user input.)
   */
   function insertBracket(state, bracket) {
       let conf = config$1(state, state.selection.main.head);
       let tokens = conf.brackets || defaults.brackets;
       for (let tok of tokens) {
           let closed = closing(codePointAt(tok, 0));
           if (bracket == tok)
               return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1)
                   : handleOpen(state, tok, closed, conf.before || defaults.before);
           if (bracket == closed && closedBracketAt(state, state.selection.main.from))
               return handleClose(state, tok, closed);
       }
       return null;
   }
   function closedBracketAt(state, pos) {
       let found = false;
       state.field(bracketState).between(0, state.doc.length, from => {
           if (from == pos)
               found = true;
       });
       return found;
   }
   function nextChar(doc, pos) {
       let next = doc.sliceString(pos, pos + 2);
       return next.slice(0, codePointSize(codePointAt(next, 0)));
   }
   function prevChar(doc, pos) {
       let prev = doc.sliceString(pos - 2, pos);
       return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
   }
   function handleOpen(state, open, close, closeBefore) {
       let dont = null, changes = state.changeByRange(range => {
           if (!range.empty)
               return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
                   effects: closeBracketEffect.of(range.to + open.length),
                   range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
           let next = nextChar(state.doc, range.head);
           if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
               return { changes: { insert: open + close, from: range.head },
                   effects: closeBracketEffect.of(range.head + open.length),
                   range: EditorSelection.cursor(range.head + open.length) };
           return { range: dont = range };
       });
       return dont ? null : state.update(changes, {
           scrollIntoView: true,
           userEvent: "input.type"
       });
   }
   function handleClose(state, _open, close) {
       let dont = null, moved = state.selection.ranges.map(range => {
           if (range.empty && nextChar(state.doc, range.head) == close)
               return EditorSelection.cursor(range.head + close.length);
           return dont = range;
       });
       return dont ? null : state.update({
           selection: EditorSelection.create(moved, state.selection.mainIndex),
           scrollIntoView: true,
           effects: state.selection.ranges.map(({ from }) => skipBracketEffect.of(from))
       });
   }
   // Handles cases where the open and close token are the same, and
   // possibly triple quotes (as in `"""abc"""`-style quoting).
   function handleSame(state, token, allowTriple) {
       let dont = null, changes = state.changeByRange(range => {
           if (!range.empty)
               return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
                   effects: closeBracketEffect.of(range.to + token.length),
                   range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
           let pos = range.head, next = nextChar(state.doc, pos);
           if (next == token) {
               if (nodeStart$1(state, pos)) {
                   return { changes: { insert: token + token, from: pos },
                       effects: closeBracketEffect.of(pos + token.length),
                       range: EditorSelection.cursor(pos + token.length) };
               }
               else if (closedBracketAt(state, pos)) {
                   let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
                   return { range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),
                       effects: skipBracketEffect.of(pos) };
               }
           }
           else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
               nodeStart$1(state, pos - 2 * token.length)) {
               return { changes: { insert: token + token + token + token, from: pos },
                   effects: closeBracketEffect.of(pos + token.length),
                   range: EditorSelection.cursor(pos + token.length) };
           }
           else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
               let prev = state.sliceDoc(pos - 1, pos);
               if (prev != token && state.charCategorizer(pos)(prev) != CharCategory.Word && !probablyInString(state, pos, token))
                   return { changes: { insert: token + token, from: pos },
                       effects: closeBracketEffect.of(pos + token.length),
                       range: EditorSelection.cursor(pos + token.length) };
           }
           return { range: dont = range };
       });
       return dont ? null : state.update(changes, {
           scrollIntoView: true,
           userEvent: "input.type"
       });
   }
   function nodeStart$1(state, pos) {
       let tree = syntaxTree(state).resolveInner(pos + 1);
       return tree.parent && tree.from == pos;
   }
   function probablyInString(state, pos, quoteToken) {
       let node = syntaxTree(state).resolveInner(pos, -1);
       for (let i = 0; i < 5; i++) {
           if (state.sliceDoc(node.from, node.from + quoteToken.length) == quoteToken)
               return true;
           let parent = node.to == pos && node.parent;
           if (!parent)
               break;
           node = parent;
       }
       return false;
   }

   /**
   Returns an extension that enables autocompletion.
   */
   function autocompletion(config = {}) {
       return [
           completionState,
           completionConfig.of(config),
           completionPlugin,
           completionKeymapExt,
           baseTheme$2
       ];
   }
   /**
   Basic keybindings for autocompletion.

    - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
    - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
    - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
    - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
    - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
    - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
    - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
   */
   const completionKeymap = [
       { key: "Ctrl-Space", run: startCompletion },
       { key: "Escape", run: closeCompletion },
       { key: "ArrowDown", run: /*@__PURE__*/moveCompletionSelection(true) },
       { key: "ArrowUp", run: /*@__PURE__*/moveCompletionSelection(false) },
       { key: "PageDown", run: /*@__PURE__*/moveCompletionSelection(true, "page") },
       { key: "PageUp", run: /*@__PURE__*/moveCompletionSelection(false, "page") },
       { key: "Enter", run: acceptCompletion }
   ];
   const completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

   function crelt() {
     var elt = arguments[0];
     if (typeof elt == "string") elt = document.createElement(elt);
     var i = 1, next = arguments[1];
     if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
       for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
         var value = next[name];
         if (typeof value == "string") elt.setAttribute(name, value);
         else if (value != null) elt[name] = value;
       }
       i++;
     }
     for (; i < arguments.length; i++) add(elt, arguments[i]);
     return elt
   }

   function add(elt, child) {
     if (typeof child == "string") {
       elt.appendChild(document.createTextNode(child));
     } else if (child == null) ; else if (child.nodeType != null) {
       elt.appendChild(child);
     } else if (Array.isArray(child)) {
       for (var i = 0; i < child.length; i++) add(elt, child[i]);
     } else {
       throw new RangeError("Unsupported child node: " + child)
     }
   }

   const basicNormalize = typeof String.prototype.normalize == "function"
       ? x => x.normalize("NFKD") : x => x;
   /**
   A search cursor provides an iterator over text matches in a
   document.
   */
   class SearchCursor {
       /**
       Create a text cursor. The query is the search string, `from` to
       `to` provides the region to search.
       
       When `normalize` is given, it will be called, on both the query
       string and the content it is matched against, before comparing.
       You can, for example, create a case-insensitive search by
       passing `s => s.toLowerCase()`.
       
       Text is always normalized with
       [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
       (when supported).
       */
       constructor(text, query, from = 0, to = text.length, normalize) {
           /**
           The current match (only holds a meaningful value after
           [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
           `done` is false).
           */
           this.value = { from: 0, to: 0 };
           /**
           Whether the end of the iterated region has been reached.
           */
           this.done = false;
           this.matches = [];
           this.buffer = "";
           this.bufferPos = 0;
           this.iter = text.iterRange(from, to);
           this.bufferStart = from;
           this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
           this.query = this.normalize(query);
       }
       peek() {
           if (this.bufferPos == this.buffer.length) {
               this.bufferStart += this.buffer.length;
               this.iter.next();
               if (this.iter.done)
                   return -1;
               this.bufferPos = 0;
               this.buffer = this.iter.value;
           }
           return codePointAt(this.buffer, this.bufferPos);
       }
       /**
       Look for the next match. Updates the iterator's
       [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
       [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
       at least once before using the cursor.
       */
       next() {
           while (this.matches.length)
               this.matches.pop();
           return this.nextOverlapping();
       }
       /**
       The `next` method will ignore matches that partially overlap a
       previous match. This method behaves like `next`, but includes
       such matches.
       */
       nextOverlapping() {
           for (;;) {
               let next = this.peek();
               if (next < 0) {
                   this.done = true;
                   return this;
               }
               let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
               this.bufferPos += codePointSize(next);
               let norm = this.normalize(str);
               for (let i = 0, pos = start;; i++) {
                   let code = norm.charCodeAt(i);
                   let match = this.match(code, pos);
                   if (match) {
                       this.value = match;
                       return this;
                   }
                   if (i == norm.length - 1)
                       break;
                   if (pos == start && i < str.length && str.charCodeAt(i) == code)
                       pos++;
               }
           }
       }
       match(code, pos) {
           let match = null;
           for (let i = 0; i < this.matches.length; i += 2) {
               let index = this.matches[i], keep = false;
               if (this.query.charCodeAt(index) == code) {
                   if (index == this.query.length - 1) {
                       match = { from: this.matches[i + 1], to: pos + 1 };
                   }
                   else {
                       this.matches[i]++;
                       keep = true;
                   }
               }
               if (!keep) {
                   this.matches.splice(i, 2);
                   i -= 2;
               }
           }
           if (this.query.charCodeAt(0) == code) {
               if (this.query.length == 1)
                   match = { from: pos, to: pos + 1 };
               else
                   this.matches.push(1, pos);
           }
           return match;
       }
   }
   if (typeof Symbol != "undefined")
       SearchCursor.prototype[Symbol.iterator] = function () { return this; };

   const empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec("") };
   const baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
   /**
   This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
   but searches for a regular expression pattern instead of a plain
   string.
   */
   class RegExpCursor {
       /**
       Create a cursor that will search the given range in the given
       document. `query` should be the raw pattern (as you'd pass it to
       `new RegExp`).
       */
       constructor(text, query, options, from = 0, to = text.length) {
           this.to = to;
           this.curLine = "";
           /**
           Set to `true` when the cursor has reached the end of the search
           range.
           */
           this.done = false;
           /**
           Will contain an object with the extent of the match and the
           match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
           sucessfully finds a match.
           */
           this.value = empty;
           if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
               return new MultilineRegExpCursor(text, query, options, from, to);
           this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
           this.iter = text.iter();
           let startLine = text.lineAt(from);
           this.curLineStart = startLine.from;
           this.matchPos = from;
           this.getLine(this.curLineStart);
       }
       getLine(skip) {
           this.iter.next(skip);
           if (this.iter.lineBreak) {
               this.curLine = "";
           }
           else {
               this.curLine = this.iter.value;
               if (this.curLineStart + this.curLine.length > this.to)
                   this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
               this.iter.next();
           }
       }
       nextLine() {
           this.curLineStart = this.curLineStart + this.curLine.length + 1;
           if (this.curLineStart > this.to)
               this.curLine = "";
           else
               this.getLine(0);
       }
       /**
       Move to the next match, if there is one.
       */
       next() {
           for (let off = this.matchPos - this.curLineStart;;) {
               this.re.lastIndex = off;
               let match = this.matchPos <= this.to && this.re.exec(this.curLine);
               if (match) {
                   let from = this.curLineStart + match.index, to = from + match[0].length;
                   this.matchPos = to + (from == to ? 1 : 0);
                   if (from == this.curLine.length)
                       this.nextLine();
                   if (from < to || from > this.value.to) {
                       this.value = { from, to, match };
                       return this;
                   }
                   off = this.matchPos - this.curLineStart;
               }
               else if (this.curLineStart + this.curLine.length < this.to) {
                   this.nextLine();
                   off = 0;
               }
               else {
                   this.done = true;
                   return this;
               }
           }
       }
   }
   const flattened = /*@__PURE__*/new WeakMap();
   // Reusable (partially) flattened document strings
   class FlattenedDoc {
       constructor(from, text) {
           this.from = from;
           this.text = text;
       }
       get to() { return this.from + this.text.length; }
       static get(doc, from, to) {
           let cached = flattened.get(doc);
           if (!cached || cached.from >= to || cached.to <= from) {
               let flat = new FlattenedDoc(from, doc.sliceString(from, to));
               flattened.set(doc, flat);
               return flat;
           }
           if (cached.from == from && cached.to == to)
               return cached;
           let { text, from: cachedFrom } = cached;
           if (cachedFrom > from) {
               text = doc.sliceString(from, cachedFrom) + text;
               cachedFrom = from;
           }
           if (cached.to < to)
               text += doc.sliceString(cached.to, to);
           flattened.set(doc, new FlattenedDoc(cachedFrom, text));
           return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
       }
   }
   class MultilineRegExpCursor {
       constructor(text, query, options, from, to) {
           this.text = text;
           this.to = to;
           this.done = false;
           this.value = empty;
           this.matchPos = from;
           this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
           this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Base */));
       }
       chunkEnd(pos) {
           return pos >= this.to ? this.to : this.text.lineAt(pos).to;
       }
       next() {
           for (;;) {
               let off = this.re.lastIndex = this.matchPos - this.flat.from;
               let match = this.re.exec(this.flat.text);
               // Skip empty matches directly after the last match
               if (match && !match[0] && match.index == off) {
                   this.re.lastIndex = off + 1;
                   match = this.re.exec(this.flat.text);
               }
               // If a match goes almost to the end of a noncomplete chunk, try
               // again, since it'll likely be able to match more
               if (match && this.flat.to < this.to && match.index + match[0].length > this.flat.text.length - 10)
                   match = null;
               if (match) {
                   let from = this.flat.from + match.index, to = from + match[0].length;
                   this.value = { from, to, match };
                   this.matchPos = to + (from == to ? 1 : 0);
                   return this;
               }
               else {
                   if (this.flat.to == this.to) {
                       this.done = true;
                       return this;
                   }
                   // Grow the flattened doc
                   this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
               }
           }
       }
   }
   if (typeof Symbol != "undefined") {
       RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =
           function () { return this; };
   }
   function validRegExp(source) {
       try {
           new RegExp(source, baseFlags);
           return true;
       }
       catch (_a) {
           return false;
       }
   }

   function createLineDialog(view) {
       let input = crelt("input", { class: "cm-textfield", name: "line" });
       let dom = crelt("form", {
           class: "cm-gotoLine",
           onkeydown: (event) => {
               if (event.keyCode == 27) { // Escape
                   event.preventDefault();
                   view.dispatch({ effects: dialogEffect.of(false) });
                   view.focus();
               }
               else if (event.keyCode == 13) { // Enter
                   event.preventDefault();
                   go();
               }
           },
           onsubmit: (event) => {
               event.preventDefault();
               go();
           }
       }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")));
       function go() {
           let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
           if (!match)
               return;
           let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
           let [, sign, ln, cl, percent] = match;
           let col = cl ? +cl.slice(1) : 0;
           let line = ln ? +ln : startLine.number;
           if (ln && percent) {
               let pc = line / 100;
               if (sign)
                   pc = pc * (sign == "-" ? -1 : 1) + (startLine.number / state.doc.lines);
               line = Math.round(state.doc.lines * pc);
           }
           else if (ln && sign) {
               line = line * (sign == "-" ? -1 : 1) + startLine.number;
           }
           let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
           view.dispatch({
               effects: dialogEffect.of(false),
               selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),
               scrollIntoView: true
           });
           view.focus();
       }
       return { dom };
   }
   const dialogEffect = /*@__PURE__*/StateEffect.define();
   const dialogField = /*@__PURE__*/StateField.define({
       create() { return true; },
       update(value, tr) {
           for (let e of tr.effects)
               if (e.is(dialogEffect))
                   value = e.value;
           return value;
       },
       provide: f => showPanel.from(f, val => val ? createLineDialog : null)
   });
   /**
   Command that shows a dialog asking the user for a line number, and
   when a valid position is provided, moves the cursor to that line.

   Supports line numbers, relative line offsets prefixed with `+` or
   `-`, document percentages suffixed with `%`, and an optional
   column position by adding `:` and a second number after the line
   number.

   The dialog can be styled with the `panel.gotoLine` theme
   selector.
   */
   const gotoLine = view => {
       let panel = getPanel(view, createLineDialog);
       if (!panel) {
           let effects = [dialogEffect.of(true)];
           if (view.state.field(dialogField, false) == null)
               effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));
           view.dispatch({ effects });
           panel = getPanel(view, createLineDialog);
       }
       if (panel)
           panel.dom.querySelector("input").focus();
       return true;
   };
   const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
       ".cm-panel.cm-gotoLine": {
           padding: "2px 6px 4px",
           "& label": { fontSize: "80%" }
       }
   });

   const defaultHighlightOptions = {
       highlightWordAroundCursor: false,
       minSelectionLength: 1,
       maxMatches: 100,
       wholeWords: false
   };
   const highlightConfig = /*@__PURE__*/Facet.define({
       combine(options) {
           return combineConfig(options, defaultHighlightOptions, {
               highlightWordAroundCursor: (a, b) => a || b,
               minSelectionLength: Math.min,
               maxMatches: Math.min
           });
       }
   });
   /**
   This extension highlights text that matches the selection. It uses
   the `"cm-selectionMatch"` class for the highlighting. When
   `highlightWordAroundCursor` is enabled, the word at the cursor
   itself will be highlighted with `"cm-selectionMatch-main"`.
   */
   function highlightSelectionMatches(options) {
       let ext = [defaultTheme, matchHighlighter];
       if (options)
           ext.push(highlightConfig.of(options));
       return ext;
   }
   const matchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch" });
   const mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
   // Whether the characters directly outside the given positions are non-word characters
   function insideWordBoundaries(check, state, from, to) {
       return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
           (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
   }
   // Whether the characters directly at the given positions are word characters
   function insideWord(check, state, from, to) {
       return check(state.sliceDoc(from, from + 1)) == CharCategory.Word
           && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
   }
   const matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.decorations = this.getDeco(view);
       }
       update(update) {
           if (update.selectionSet || update.docChanged || update.viewportChanged)
               this.decorations = this.getDeco(update.view);
       }
       getDeco(view) {
           let conf = view.state.facet(highlightConfig);
           let { state } = view, sel = state.selection;
           if (sel.ranges.length > 1)
               return Decoration.none;
           let range = sel.main, query, check = null;
           if (range.empty) {
               if (!conf.highlightWordAroundCursor)
                   return Decoration.none;
               let word = state.wordAt(range.head);
               if (!word)
                   return Decoration.none;
               check = state.charCategorizer(range.head);
               query = state.sliceDoc(word.from, word.to);
           }
           else {
               let len = range.to - range.from;
               if (len < conf.minSelectionLength || len > 200)
                   return Decoration.none;
               if (conf.wholeWords) {
                   query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?
                   check = state.charCategorizer(range.head);
                   if (!(insideWordBoundaries(check, state, range.from, range.to)
                       && insideWord(check, state, range.from, range.to)))
                       return Decoration.none;
               }
               else {
                   query = state.sliceDoc(range.from, range.to).trim();
                   if (!query)
                       return Decoration.none;
               }
           }
           let deco = [];
           for (let part of view.visibleRanges) {
               let cursor = new SearchCursor(state.doc, query, part.from, part.to);
               while (!cursor.next().done) {
                   let { from, to } = cursor.value;
                   if (!check || insideWordBoundaries(check, state, from, to)) {
                       if (range.empty && from <= range.from && to >= range.to)
                           deco.push(mainMatchDeco.range(from, to));
                       else if (from >= range.to || to <= range.from)
                           deco.push(matchDeco.range(from, to));
                       if (deco.length > conf.maxMatches)
                           return Decoration.none;
                   }
               }
           }
           return Decoration.set(deco);
       }
   }, {
       decorations: v => v.decorations
   });
   const defaultTheme = /*@__PURE__*/EditorView.baseTheme({
       ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
       ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
   });
   // Select the words around the cursors.
   const selectWord = ({ state, dispatch }) => {
       let { selection } = state;
       let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
       if (newSel.eq(selection))
           return false;
       dispatch(state.update({ selection: newSel }));
       return true;
   };
   // Find next occurrence of query relative to last cursor. Wrap around
   // the document if there are no more matches.
   function findNextOccurrence(state, query) {
       let { main, ranges } = state.selection;
       let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
       for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
           cursor.next();
           if (cursor.done) {
               if (cycled)
                   return null;
               cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
               cycled = true;
           }
           else {
               if (cycled && ranges.some(r => r.from == cursor.value.from))
                   continue;
               if (fullWord) {
                   let word = state.wordAt(cursor.value.from);
                   if (!word || word.from != cursor.value.from || word.to != cursor.value.to)
                       continue;
               }
               return cursor.value;
           }
       }
   }
   /**
   Select next occurrence of the current selection. Expand selection
   to the surrounding word when the selection is empty.
   */
   const selectNextOccurrence = ({ state, dispatch }) => {
       let { ranges } = state.selection;
       if (ranges.some(sel => sel.from === sel.to))
           return selectWord({ state, dispatch });
       let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
       if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))
           return false;
       let range = findNextOccurrence(state, searchedText);
       if (!range)
           return false;
       dispatch(state.update({
           selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
           effects: EditorView.scrollIntoView(range.to)
       }));
       return true;
   };

   const searchConfigFacet = /*@__PURE__*/Facet.define({
       combine(configs) {
           var _a;
           return {
               top: configs.reduce((val, conf) => val !== null && val !== void 0 ? val : conf.top, undefined) || false,
               caseSensitive: configs.reduce((val, conf) => val !== null && val !== void 0 ? val : conf.caseSensitive, undefined) || false,
               createPanel: ((_a = configs.find(c => c.createPanel)) === null || _a === void 0 ? void 0 : _a.createPanel) || (view => new SearchPanel(view))
           };
       }
   });
   /**
   Add search state to the editor configuration, and optionally
   configure the search extension.
   ([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically
   enable this if it isn't already on).
   */
   function search$2(config) {
       return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;
   }
   /**
   A search query. Part of the editor's search state.
   */
   class SearchQuery {
       /**
       Create a query object.
       */
       constructor(config) {
           this.search = config.search;
           this.caseSensitive = !!config.caseSensitive;
           this.regexp = !!config.regexp;
           this.replace = config.replace || "";
           this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
           this.unquoted = config.literal ? this.search : this.search.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\");
       }
       /**
       Compare this query to another query.
       */
       eq(other) {
           return this.search == other.search && this.replace == other.replace &&
               this.caseSensitive == other.caseSensitive && this.regexp == other.regexp;
       }
       /**
       @internal
       */
       create() {
           return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
       }
       /**
       Get a search cursor for this query, searching through the given
       range in the given document.
       */
       getCursor(doc, from = 0, to = doc.length) {
           return this.regexp ? regexpCursor(this, doc, from, to) : stringCursor(this, doc, from, to);
       }
   }
   class QueryType {
       constructor(spec) {
           this.spec = spec;
       }
   }
   function stringCursor(spec, doc, from, to) {
       return new SearchCursor(doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase());
   }
   class StringQuery extends QueryType {
       constructor(spec) {
           super(spec);
       }
       nextMatch(doc, curFrom, curTo) {
           let cursor = stringCursor(this.spec, doc, curTo, doc.length).nextOverlapping();
           if (cursor.done)
               cursor = stringCursor(this.spec, doc, 0, curFrom).nextOverlapping();
           return cursor.done ? null : cursor.value;
       }
       // Searching in reverse is, rather than implementing inverted search
       // cursor, done by scanning chunk after chunk forward.
       prevMatchInRange(doc, from, to) {
           for (let pos = to;;) {
               let start = Math.max(from, pos - 10000 /* ChunkSize */ - this.spec.unquoted.length);
               let cursor = stringCursor(this.spec, doc, start, pos), range = null;
               while (!cursor.nextOverlapping().done)
                   range = cursor.value;
               if (range)
                   return range;
               if (start == from)
                   return null;
               pos -= 10000 /* ChunkSize */;
           }
       }
       prevMatch(doc, curFrom, curTo) {
           return this.prevMatchInRange(doc, 0, curFrom) ||
               this.prevMatchInRange(doc, curTo, doc.length);
       }
       getReplacement(_result) { return this.spec.replace; }
       matchAll(doc, limit) {
           let cursor = stringCursor(this.spec, doc, 0, doc.length), ranges = [];
           while (!cursor.next().done) {
               if (ranges.length >= limit)
                   return null;
               ranges.push(cursor.value);
           }
           return ranges;
       }
       highlight(doc, from, to, add) {
           let cursor = stringCursor(this.spec, doc, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, doc.length));
           while (!cursor.next().done)
               add(cursor.value.from, cursor.value.to);
       }
   }
   function regexpCursor(spec, doc, from, to) {
       return new RegExpCursor(doc, spec.search, spec.caseSensitive ? undefined : { ignoreCase: true }, from, to);
   }
   class RegExpQuery extends QueryType {
       nextMatch(doc, curFrom, curTo) {
           let cursor = regexpCursor(this.spec, doc, curTo, doc.length).next();
           if (cursor.done)
               cursor = regexpCursor(this.spec, doc, 0, curFrom).next();
           return cursor.done ? null : cursor.value;
       }
       prevMatchInRange(doc, from, to) {
           for (let size = 1;; size++) {
               let start = Math.max(from, to - size * 10000 /* ChunkSize */);
               let cursor = regexpCursor(this.spec, doc, start, to), range = null;
               while (!cursor.next().done)
                   range = cursor.value;
               if (range && (start == from || range.from > start + 10))
                   return range;
               if (start == from)
                   return null;
           }
       }
       prevMatch(doc, curFrom, curTo) {
           return this.prevMatchInRange(doc, 0, curFrom) ||
               this.prevMatchInRange(doc, curTo, doc.length);
       }
       getReplacement(result) {
           return this.spec.replace.replace(/\$([$&\d+])/g, (m, i) => i == "$" ? "$"
               : i == "&" ? result.match[0]
                   : i != "0" && +i < result.match.length ? result.match[i]
                       : m);
       }
       matchAll(doc, limit) {
           let cursor = regexpCursor(this.spec, doc, 0, doc.length), ranges = [];
           while (!cursor.next().done) {
               if (ranges.length >= limit)
                   return null;
               ranges.push(cursor.value);
           }
           return ranges;
       }
       highlight(doc, from, to, add) {
           let cursor = regexpCursor(this.spec, doc, Math.max(0, from - 250 /* HighlightMargin */), Math.min(to + 250 /* HighlightMargin */, doc.length));
           while (!cursor.next().done)
               add(cursor.value.from, cursor.value.to);
       }
   }
   /**
   A state effect that updates the current search query. Note that
   this only has an effect if the search state has been initialized
   (by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or
   by running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least
   once).
   */
   const setSearchQuery = /*@__PURE__*/StateEffect.define();
   const togglePanel = /*@__PURE__*/StateEffect.define();
   const searchState = /*@__PURE__*/StateField.define({
       create(state) {
           return new SearchState(defaultQuery(state).create(), null);
       },
       update(value, tr) {
           for (let effect of tr.effects) {
               if (effect.is(setSearchQuery))
                   value = new SearchState(effect.value.create(), value.panel);
               else if (effect.is(togglePanel))
                   value = new SearchState(value.query, effect.value ? createSearchPanel : null);
           }
           return value;
       },
       provide: f => showPanel.from(f, val => val.panel)
   });
   /**
   Get the current search query from an editor state.
   */
   function getSearchQuery(state) {
       let curState = state.field(searchState, false);
       return curState ? curState.query.spec : defaultQuery(state);
   }
   class SearchState {
       constructor(query, panel) {
           this.query = query;
           this.panel = panel;
       }
   }
   const matchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
   const searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.view = view;
           this.decorations = this.highlight(view.state.field(searchState));
       }
       update(update) {
           let state = update.state.field(searchState);
           if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
               this.decorations = this.highlight(state);
       }
       highlight({ query, panel }) {
           if (!panel || !query.spec.valid)
               return Decoration.none;
           let { view } = this;
           let builder = new RangeSetBuilder();
           for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
               let { from, to } = ranges[i];
               while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* HighlightMargin */)
                   to = ranges[++i].to;
               query.highlight(view.state.doc, from, to, (from, to) => {
                   let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);
                   builder.add(from, to, selected ? selectedMatchMark : matchMark);
               });
           }
           return builder.finish();
       }
   }, {
       decorations: v => v.decorations
   });
   function searchCommand(f) {
       return view => {
           let state = view.state.field(searchState, false);
           return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
       };
   }
   /**
   Open the search panel if it isn't already open, and move the
   selection to the first match after the current main selection.
   Will wrap around to the start of the document when it reaches the
   end.
   */
   const findNext = /*@__PURE__*/searchCommand((view, { query }) => {
       let { from, to } = view.state.selection.main;
       let next = query.nextMatch(view.state.doc, from, to);
       if (!next || next.from == from && next.to == to)
           return false;
       view.dispatch({
           selection: { anchor: next.from, head: next.to },
           scrollIntoView: true,
           effects: announceMatch(view, next),
           userEvent: "select.search"
       });
       return true;
   });
   /**
   Move the selection to the previous instance of the search query,
   before the current main selection. Will wrap past the start
   of the document to start searching at the end again.
   */
   const findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {
       let { state } = view, { from, to } = state.selection.main;
       let range = query.prevMatch(state.doc, from, to);
       if (!range)
           return false;
       view.dispatch({
           selection: { anchor: range.from, head: range.to },
           scrollIntoView: true,
           effects: announceMatch(view, range),
           userEvent: "select.search"
       });
       return true;
   });
   /**
   Select all instances of the search query.
   */
   const selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {
       let ranges = query.matchAll(view.state.doc, 1000);
       if (!ranges || !ranges.length)
           return false;
       view.dispatch({
           selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),
           userEvent: "select.search.matches"
       });
       return true;
   });
   /**
   Select all instances of the currently selected text.
   */
   const selectSelectionMatches = ({ state, dispatch }) => {
       let sel = state.selection;
       if (sel.ranges.length > 1 || sel.main.empty)
           return false;
       let { from, to } = sel.main;
       let ranges = [], main = 0;
       for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
           if (ranges.length > 1000)
               return false;
           if (cur.value.from == from)
               main = ranges.length;
           ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
       }
       dispatch(state.update({
           selection: EditorSelection.create(ranges, main),
           userEvent: "select.search.matches"
       }));
       return true;
   };
   /**
   Replace the current match of the search query.
   */
   const replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {
       let { state } = view, { from, to } = state.selection.main;
       if (state.readOnly)
           return false;
       let next = query.nextMatch(state.doc, from, from);
       if (!next)
           return false;
       let changes = [], selection, replacement;
       let announce = [];
       if (next.from == from && next.to == to) {
           replacement = state.toText(query.getReplacement(next));
           changes.push({ from: next.from, to: next.to, insert: replacement });
           next = query.nextMatch(state.doc, next.from, next.to);
           announce.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
       }
       if (next) {
           let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
           selection = { anchor: next.from - off, head: next.to - off };
           announce.push(announceMatch(view, next));
       }
       view.dispatch({
           changes, selection,
           scrollIntoView: !!selection,
           effects: announce,
           userEvent: "input.replace"
       });
       return true;
   });
   /**
   Replace all instances of the search query with the given
   replacement.
   */
   const replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {
       if (view.state.readOnly)
           return false;
       let changes = query.matchAll(view.state.doc, 1e9).map(match => {
           let { from, to } = match;
           return { from, to, insert: query.getReplacement(match) };
       });
       if (!changes.length)
           return false;
       let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
       view.dispatch({
           changes,
           effects: EditorView.announce.of(announceText),
           userEvent: "input.replace.all"
       });
       return true;
   });
   function createSearchPanel(view) {
       return view.state.facet(searchConfigFacet).createPanel(view);
   }
   function defaultQuery(state, fallback) {
       var _a;
       let sel = state.selection.main;
       let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
       let caseSensitive = (_a = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _a !== void 0 ? _a : state.facet(searchConfigFacet).caseSensitive;
       return fallback && !selText ? fallback : new SearchQuery({ search: selText.replace(/\n/g, "\\n"), caseSensitive });
   }
   /**
   Make sure the search panel is open and focused.
   */
   const openSearchPanel = view => {
       let state = view.state.field(searchState, false);
       if (state && state.panel) {
           let panel = getPanel(view, createSearchPanel);
           if (!panel)
               return false;
           let searchInput = panel.dom.querySelector("[main-field]");
           if (searchInput && searchInput != view.root.activeElement) {
               let query = defaultQuery(view.state, state.query.spec);
               if (query.valid)
                   view.dispatch({ effects: setSearchQuery.of(query) });
               searchInput.focus();
               searchInput.select();
           }
       }
       else {
           view.dispatch({ effects: [
                   togglePanel.of(true),
                   state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
               ] });
       }
       return true;
   };
   /**
   Close the search panel.
   */
   const closeSearchPanel = view => {
       let state = view.state.field(searchState, false);
       if (!state || !state.panel)
           return false;
       let panel = getPanel(view, createSearchPanel);
       if (panel && panel.dom.contains(view.root.activeElement))
           view.focus();
       view.dispatch({ effects: togglePanel.of(false) });
       return true;
   };
   /**
   Default search-related key bindings.

    - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
    - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
    - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
    - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
    - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
   */
   const searchKeymap = [
       { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
       { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
       { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
       { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
       { key: "Mod-Shift-l", run: selectSelectionMatches },
       { key: "Alt-g", run: gotoLine },
       { key: "Mod-d", run: selectNextOccurrence, preventDefault: true },
   ];
   class SearchPanel {
       constructor(view) {
           this.view = view;
           let query = this.query = view.state.field(searchState).query.spec;
           this.commit = this.commit.bind(this);
           this.searchField = crelt("input", {
               value: query.search,
               placeholder: phrase(view, "Find"),
               "aria-label": phrase(view, "Find"),
               class: "cm-textfield",
               name: "search",
               "main-field": "true",
               onchange: this.commit,
               onkeyup: this.commit
           });
           this.replaceField = crelt("input", {
               value: query.replace,
               placeholder: phrase(view, "Replace"),
               "aria-label": phrase(view, "Replace"),
               class: "cm-textfield",
               name: "replace",
               onchange: this.commit,
               onkeyup: this.commit
           });
           this.caseField = crelt("input", {
               type: "checkbox",
               name: "case",
               checked: query.caseSensitive,
               onchange: this.commit
           });
           this.reField = crelt("input", {
               type: "checkbox",
               name: "re",
               checked: query.regexp,
               onchange: this.commit
           });
           function button(name, onclick, content) {
               return crelt("button", { class: "cm-button", name, onclick, type: "button" }, content);
           }
           this.dom = crelt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
               this.searchField,
               button("next", () => findNext(view), [phrase(view, "next")]),
               button("prev", () => findPrevious(view), [phrase(view, "previous")]),
               button("select", () => selectMatches(view), [phrase(view, "all")]),
               crelt("label", null, [this.caseField, phrase(view, "match case")]),
               crelt("label", null, [this.reField, phrase(view, "regexp")]),
               ...view.state.readOnly ? [] : [
                   crelt("br"),
                   this.replaceField,
                   button("replace", () => replaceNext(view), [phrase(view, "replace")]),
                   button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")]),
                   crelt("button", {
                       name: "close",
                       onclick: () => closeSearchPanel(view),
                       "aria-label": phrase(view, "close"),
                       type: "button"
                   }, ["×"])
               ]
           ]);
       }
       commit() {
           let query = new SearchQuery({
               search: this.searchField.value,
               caseSensitive: this.caseField.checked,
               regexp: this.reField.checked,
               replace: this.replaceField.value
           });
           if (!query.eq(this.query)) {
               this.query = query;
               this.view.dispatch({ effects: setSearchQuery.of(query) });
           }
       }
       keydown(e) {
           if (runScopeHandlers(this.view, e, "search-panel")) {
               e.preventDefault();
           }
           else if (e.keyCode == 13 && e.target == this.searchField) {
               e.preventDefault();
               (e.shiftKey ? findPrevious : findNext)(this.view);
           }
           else if (e.keyCode == 13 && e.target == this.replaceField) {
               e.preventDefault();
               replaceNext(this.view);
           }
       }
       update(update) {
           for (let tr of update.transactions)
               for (let effect of tr.effects) {
                   if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
                       this.setQuery(effect.value);
               }
       }
       setQuery(query) {
           this.query = query;
           this.searchField.value = query.search;
           this.replaceField.value = query.replace;
           this.caseField.checked = query.caseSensitive;
           this.reField.checked = query.regexp;
       }
       mount() {
           this.searchField.select();
       }
       get pos() { return 80; }
       get top() { return this.view.state.facet(searchConfigFacet).top; }
   }
   function phrase(view, phrase) { return view.state.phrase(phrase); }
   const AnnounceMargin = 30;
   const Break = /[\s\.,:;?!]/;
   function announceMatch(view, { from, to }) {
       let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;
       let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
       let text = view.state.sliceDoc(start, end);
       if (start != line.from) {
           for (let i = 0; i < AnnounceMargin; i++)
               if (!Break.test(text[i + 1]) && Break.test(text[i])) {
                   text = text.slice(i);
                   break;
               }
       }
       if (end != lineEnd) {
           for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
               if (!Break.test(text[i - 1]) && Break.test(text[i])) {
                   text = text.slice(0, i);
                   break;
               }
       }
       return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line.number}.`);
   }
   const baseTheme = /*@__PURE__*/EditorView.baseTheme({
       ".cm-panel.cm-search": {
           padding: "2px 6px 4px",
           position: "relative",
           "& [name=close]": {
               position: "absolute",
               top: "0",
               right: "4px",
               backgroundColor: "inherit",
               border: "none",
               font: "inherit",
               padding: 0,
               margin: 0
           },
           "& input, & button, & label": {
               margin: ".2em .6em .2em 0"
           },
           "& input[type=checkbox]": {
               marginRight: ".2em"
           },
           "& label": {
               fontSize: "80%",
               whiteSpace: "pre"
           }
       },
       "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
       "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
       "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
       "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
   });
   const searchExtensions = [
       searchState,
       /*@__PURE__*/Prec.lowest(searchHighlighter),
       baseTheme
   ];

   class CompositeBlock {
       constructor(type, 
       // Used for indentation in list items, markup character in lists
       value, from, hash, end, children, positions) {
           this.type = type;
           this.value = value;
           this.from = from;
           this.hash = hash;
           this.end = end;
           this.children = children;
           this.positions = positions;
           this.hashProp = [[NodeProp.contextHash, hash]];
       }
       static create(type, value, from, parentHash, end) {
           let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;
           return new CompositeBlock(type, value, from, hash, end, [], []);
       }
       addChild(child, pos) {
           if (child.prop(NodeProp.contextHash) != this.hash)
               child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);
           this.children.push(child);
           this.positions.push(pos);
       }
       toTree(nodeSet, end = this.end) {
           let last = this.children.length - 1;
           if (last >= 0)
               end = Math.max(end, this.positions[last] + this.children[last].length + this.from);
           let tree = new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({
               makeTree: (children, positions, length) => new Tree(NodeType$1.none, children, positions, length, this.hashProp)
           });
           return tree;
       }
   }
   var Type;
   (function (Type) {
       Type[Type["Document"] = 1] = "Document";
       Type[Type["CodeBlock"] = 2] = "CodeBlock";
       Type[Type["FencedCode"] = 3] = "FencedCode";
       Type[Type["Blockquote"] = 4] = "Blockquote";
       Type[Type["HorizontalRule"] = 5] = "HorizontalRule";
       Type[Type["BulletList"] = 6] = "BulletList";
       Type[Type["OrderedList"] = 7] = "OrderedList";
       Type[Type["ListItem"] = 8] = "ListItem";
       Type[Type["ATXHeading1"] = 9] = "ATXHeading1";
       Type[Type["ATXHeading2"] = 10] = "ATXHeading2";
       Type[Type["ATXHeading3"] = 11] = "ATXHeading3";
       Type[Type["ATXHeading4"] = 12] = "ATXHeading4";
       Type[Type["ATXHeading5"] = 13] = "ATXHeading5";
       Type[Type["ATXHeading6"] = 14] = "ATXHeading6";
       Type[Type["SetextHeading1"] = 15] = "SetextHeading1";
       Type[Type["SetextHeading2"] = 16] = "SetextHeading2";
       Type[Type["HTMLBlock"] = 17] = "HTMLBlock";
       Type[Type["LinkReference"] = 18] = "LinkReference";
       Type[Type["Paragraph"] = 19] = "Paragraph";
       Type[Type["CommentBlock"] = 20] = "CommentBlock";
       Type[Type["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
       // Inline
       Type[Type["Escape"] = 22] = "Escape";
       Type[Type["Entity"] = 23] = "Entity";
       Type[Type["HardBreak"] = 24] = "HardBreak";
       Type[Type["Emphasis"] = 25] = "Emphasis";
       Type[Type["StrongEmphasis"] = 26] = "StrongEmphasis";
       Type[Type["Link"] = 27] = "Link";
       Type[Type["Image"] = 28] = "Image";
       Type[Type["InlineCode"] = 29] = "InlineCode";
       Type[Type["HTMLTag"] = 30] = "HTMLTag";
       Type[Type["Comment"] = 31] = "Comment";
       Type[Type["ProcessingInstruction"] = 32] = "ProcessingInstruction";
       Type[Type["URL"] = 33] = "URL";
       // Smaller tokens
       Type[Type["HeaderMark"] = 34] = "HeaderMark";
       Type[Type["QuoteMark"] = 35] = "QuoteMark";
       Type[Type["ListMark"] = 36] = "ListMark";
       Type[Type["LinkMark"] = 37] = "LinkMark";
       Type[Type["EmphasisMark"] = 38] = "EmphasisMark";
       Type[Type["CodeMark"] = 39] = "CodeMark";
       Type[Type["CodeText"] = 40] = "CodeText";
       Type[Type["CodeInfo"] = 41] = "CodeInfo";
       Type[Type["LinkTitle"] = 42] = "LinkTitle";
       Type[Type["LinkLabel"] = 43] = "LinkLabel";
   })(Type || (Type = {}));
   /// Data structure used to accumulate a block's content during [leaf
   /// block parsing](#BlockParser.leaf).
   class LeafBlock {
       /// @internal
       constructor(
       /// The start position of the block.
       start, 
       /// The block's text content.
       content) {
           this.start = start;
           this.content = content;
           /// @internal
           this.marks = [];
           /// The block parsers active for this block.
           this.parsers = [];
       }
   }
   /// Data structure used during block-level per-line parsing.
   class Line {
       constructor() {
           /// The line's full text.
           this.text = "";
           /// The base indent provided by the composite contexts (that have
           /// been handled so far).
           this.baseIndent = 0;
           /// The string position corresponding to the base indent.
           this.basePos = 0;
           /// The number of contexts handled @internal
           this.depth = 0;
           /// Any markers (i.e. block quote markers) parsed for the contexts. @internal
           this.markers = [];
           /// The position of the next non-whitespace character beyond any
           /// list, blockquote, or other composite block markers.
           this.pos = 0;
           /// The column of the next non-whitespace character.
           this.indent = 0;
           /// The character code of the character after `pos`.
           this.next = -1;
       }
       /// @internal
       forward() {
           if (this.basePos > this.pos)
               this.forwardInner();
       }
       /// @internal
       forwardInner() {
           let newPos = this.skipSpace(this.basePos);
           this.indent = this.countIndent(newPos, this.pos, this.indent);
           this.pos = newPos;
           this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
       }
       /// Skip whitespace after the given position, return the position of
       /// the next non-space character or the end of the line if there's
       /// only space after `from`.
       skipSpace(from) { return skipSpace(this.text, from); }
       /// @internal
       reset(text) {
           this.text = text;
           this.baseIndent = this.basePos = this.pos = this.indent = 0;
           this.forwardInner();
           this.depth = 1;
           while (this.markers.length)
               this.markers.pop();
       }
       /// Move the line's base position forward to the given position.
       /// This should only be called by composite [block
       /// parsers](#BlockParser.parse) or [markup skipping
       /// functions](#NodeSpec.composite).
       moveBase(to) {
           this.basePos = to;
           this.baseIndent = this.countIndent(to, this.pos, this.indent);
       }
       /// Move the line's base position forward to the given _column_.
       moveBaseColumn(indent) {
           this.baseIndent = indent;
           this.basePos = this.findColumn(indent);
       }
       /// Store a composite-block-level marker. Should be called from
       /// [markup skipping functions](#NodeSpec.composite) when they
       /// consume any non-whitespace characters.
       addMarker(elt) {
           this.markers.push(elt);
       }
       /// Find the column position at `to`, optionally starting at a given
       /// position and column.
       countIndent(to, from = 0, indent = 0) {
           for (let i = from; i < to; i++)
               indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
           return indent;
       }
       /// Find the position corresponding to the given column.
       findColumn(goal) {
           let i = 0;
           for (let indent = 0; i < this.text.length && indent < goal; i++)
               indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
           return i;
       }
       /// @internal
       scrub() {
           if (!this.baseIndent)
               return this.text;
           let result = "";
           for (let i = 0; i < this.basePos; i++)
               result += " ";
           return result + this.text.slice(this.basePos);
       }
   }
   function skipForList(bl, cx, line) {
       if (line.pos == line.text.length ||
           (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))
           return true;
       if (line.indent >= line.baseIndent + 4)
           return false;
       let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);
       return size > 0 &&
           (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&
           line.text.charCodeAt(line.pos + size - 1) == bl.value;
   }
   const DefaultSkipMarkup = {
       [Type.Blockquote](bl, cx, line) {
           if (line.next != 62 /* '>' */)
               return false;
           line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));
           line.moveBase(line.pos + (space$2(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
           bl.end = cx.lineStart + line.text.length;
           return true;
       },
       [Type.ListItem](bl, _cx, line) {
           if (line.indent < line.baseIndent + bl.value && line.next > -1)
               return false;
           line.moveBaseColumn(line.baseIndent + bl.value);
           return true;
       },
       [Type.OrderedList]: skipForList,
       [Type.BulletList]: skipForList,
       [Type.Document]() { return true; }
   };
   function space$2(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }
   function skipSpace(line, i = 0) {
       while (i < line.length && space$2(line.charCodeAt(i)))
           i++;
       return i;
   }
   function skipSpaceBack(line, i, to) {
       while (i > to && space$2(line.charCodeAt(i - 1)))
           i--;
       return i;
   }
   function isFencedCode(line) {
       if (line.next != 96 && line.next != 126 /* '`~' */)
           return -1;
       let pos = line.pos + 1;
       while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
           pos++;
       if (pos < line.pos + 3)
           return -1;
       if (line.next == 96)
           for (let i = pos; i < line.text.length; i++)
               if (line.text.charCodeAt(i) == 96)
                   return -1;
       return pos;
   }
   function isBlockquote(line) {
       return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
   }
   function isHorizontalRule(line, cx, breaking) {
       if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)
           return -1;
       let count = 1;
       for (let pos = line.pos + 1; pos < line.text.length; pos++) {
           let ch = line.text.charCodeAt(pos);
           if (ch == line.next)
               count++;
           else if (!space$2(ch))
               return -1;
       }
       // Setext headers take precedence
       if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)
           return -1;
       return count < 3 ? -1 : 1;
   }
   function inList(cx, type) {
       for (let i = cx.stack.length - 1; i >= 0; i--)
           if (cx.stack[i].type == type)
               return true;
       return false;
   }
   function isBulletList(line, cx, breaking) {
       return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&
           (line.pos == line.text.length - 1 || space$2(line.text.charCodeAt(line.pos + 1))) &&
           (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
   }
   function isOrderedList(line, cx, breaking) {
       let pos = line.pos, next = line.next;
       for (;;) {
           if (next >= 48 && next <= 57 /* '0-9' */)
               pos++;
           else
               break;
           if (pos == line.text.length)
               return -1;
           next = line.text.charCodeAt(pos);
       }
       if (pos == line.pos || pos > line.pos + 9 ||
           (next != 46 && next != 41 /* '.)' */) ||
           (pos < line.text.length - 1 && !space$2(line.text.charCodeAt(pos + 1))) ||
           breaking && !inList(cx, Type.OrderedList) &&
               (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))
           return -1;
       return pos + 1 - line.pos;
   }
   function isAtxHeading(line) {
       if (line.next != 35 /* '#' */)
           return -1;
       let pos = line.pos + 1;
       while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
           pos++;
       if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
           return -1;
       let size = pos - line.pos;
       return size > 6 ? -1 : size;
   }
   function isSetextUnderline(line) {
       if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)
           return -1;
       let pos = line.pos + 1;
       while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
           pos++;
       let end = pos;
       while (pos < line.text.length && space$2(line.text.charCodeAt(pos)))
           pos++;
       return pos == line.text.length ? end : -1;
   }
   const EmptyLine = /^[ \t]*$/, CommentEnd = /-->/, ProcessingEnd = /\?>/;
   const HTMLBlockStyle = [
       [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
       [/^\s*<!--/, CommentEnd],
       [/^\s*<\?/, ProcessingEnd],
       [/^\s*<![A-Z]/, />/],
       [/^\s*<!\[CDATA\[/, /\]\]>/],
       [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
       [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
   ];
   function isHTMLBlock(line, _cx, breaking) {
       if (line.next != 60 /* '<' */)
           return -1;
       let rest = line.text.slice(line.pos);
       for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)
           if (HTMLBlockStyle[i][0].test(rest))
               return i;
       return -1;
   }
   function getListIndent(line, pos) {
       let indentAfter = line.countIndent(pos, line.pos, line.indent);
       let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
       return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
   }
   function addCodeText(marks, from, to) {
       let last = marks.length - 1;
       if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)
           marks[last].to = to;
       else
           marks.push(elt(Type.CodeText, from, to));
   }
   // Rules for parsing blocks. A return value of false means the rule
   // doesn't apply here, true means it does. When true is returned and
   // `p.line` has been updated, the rule is assumed to have consumed a
   // leaf block. Otherwise, it is assumed to have opened a context.
   const DefaultBlockParsers = {
       LinkReference: undefined,
       IndentedCode(cx, line) {
           let base = line.baseIndent + 4;
           if (line.indent < base)
               return false;
           let start = line.findColumn(base);
           let from = cx.lineStart + start, to = cx.lineStart + line.text.length;
           let marks = [], pendingMarks = [];
           addCodeText(marks, from, to);
           while (cx.nextLine() && line.depth >= cx.stack.length) {
               if (line.pos == line.text.length) { // Empty
                   addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);
                   for (let m of line.markers)
                       pendingMarks.push(m);
               }
               else if (line.indent < base) {
                   break;
               }
               else {
                   if (pendingMarks.length) {
                       for (let m of pendingMarks) {
                           if (m.type == Type.CodeText)
                               addCodeText(marks, m.from, m.to);
                           else
                               marks.push(m);
                       }
                       pendingMarks = [];
                   }
                   addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                   for (let m of line.markers)
                       marks.push(m);
                   to = cx.lineStart + line.text.length;
                   let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);
                   if (codeStart < to)
                       addCodeText(marks, codeStart, to);
               }
           }
           if (pendingMarks.length) {
               pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);
               if (pendingMarks.length)
                   line.markers = pendingMarks.concat(line.markers);
           }
           cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);
           return true;
       },
       FencedCode(cx, line) {
           let fenceEnd = isFencedCode(line);
           if (fenceEnd < 0)
               return false;
           let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;
           let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
           let marks = [elt(Type.CodeMark, from, from + len)];
           if (infoFrom < infoTo)
               marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));
           for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {
               let i = line.pos;
               if (line.indent - line.baseIndent < 4)
                   while (i < line.text.length && line.text.charCodeAt(i) == ch)
                       i++;
               if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
                   for (let m of line.markers)
                       marks.push(m);
                   marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));
                   cx.nextLine();
                   break;
               }
               else {
                   if (!first)
                       addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                   for (let m of line.markers)
                       marks.push(m);
                   let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;
                   if (textStart < textEnd)
                       addCodeText(marks, textStart, textEnd);
               }
           }
           cx.addNode(cx.buffer.writeElements(marks, -from)
               .finish(Type.FencedCode, cx.prevLineEnd() - from), from);
           return true;
       },
       Blockquote(cx, line) {
           let size = isBlockquote(line);
           if (size < 0)
               return false;
           cx.startContext(Type.Blockquote, line.pos);
           cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);
           line.moveBase(line.pos + size);
           return null;
       },
       HorizontalRule(cx, line) {
           if (isHorizontalRule(line, cx, false) < 0)
               return false;
           let from = cx.lineStart + line.pos;
           cx.nextLine();
           cx.addNode(Type.HorizontalRule, from);
           return true;
       },
       BulletList(cx, line) {
           let size = isBulletList(line, cx, false);
           if (size < 0)
               return false;
           if (cx.block.type != Type.BulletList)
               cx.startContext(Type.BulletList, line.basePos, line.next);
           let newBase = getListIndent(line, line.pos + 1);
           cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
           cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
           line.moveBaseColumn(newBase);
           return null;
       },
       OrderedList(cx, line) {
           let size = isOrderedList(line, cx, false);
           if (size < 0)
               return false;
           if (cx.block.type != Type.OrderedList)
               cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
           let newBase = getListIndent(line, line.pos + size);
           cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
           cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
           line.moveBaseColumn(newBase);
           return null;
       },
       ATXHeading(cx, line) {
           let size = isAtxHeading(line);
           if (size < 0)
               return false;
           let off = line.pos, from = cx.lineStart + off;
           let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;
           while (after > off && line.text.charCodeAt(after - 1) == line.next)
               after--;
           if (after == endOfSpace || after == off || !space$2(line.text.charCodeAt(after - 1)))
               after = line.text.length;
           let buf = cx.buffer
               .write(Type.HeaderMark, 0, size)
               .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);
           if (after < line.text.length)
               buf.write(Type.HeaderMark, after - off, endOfSpace - off);
           let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);
           cx.nextLine();
           cx.addNode(node, from);
           return true;
       },
       HTMLBlock(cx, line) {
           let type = isHTMLBlock(line, cx, false);
           if (type < 0)
               return false;
           let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];
           let marks = [], trailing = end != EmptyLine;
           while (!end.test(line.text) && cx.nextLine()) {
               if (line.depth < cx.stack.length) {
                   trailing = false;
                   break;
               }
               for (let m of line.markers)
                   marks.push(m);
           }
           if (trailing)
               cx.nextLine();
           let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;
           let to = cx.prevLineEnd();
           cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);
           return true;
       },
       SetextHeading: undefined // Specifies relative precedence for block-continue function
   };
   // This implements a state machine that incrementally parses link references. At each
   // next line, it looks ahead to see if the line continues the reference or not. If it
   // doesn't and a valid link is available ending before that line, it finishes that.
   // Similarly, on `finish` (when the leaf is terminated by external circumstances), it
   // creates a link reference if there's a valid reference up to the current point.
   class LinkReferenceParser {
       constructor(leaf) {
           this.stage = 0 /* Start */;
           this.elts = [];
           this.pos = 0;
           this.start = leaf.start;
           this.advance(leaf.content);
       }
       nextLine(cx, line, leaf) {
           if (this.stage == -1 /* Failed */)
               return false;
           let content = leaf.content + "\n" + line.scrub();
           let finish = this.advance(content);
           if (finish > -1 && finish < content.length)
               return this.complete(cx, leaf, finish);
           return false;
       }
       finish(cx, leaf) {
           if ((this.stage == 2 /* Link */ || this.stage == 3 /* Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)
               return this.complete(cx, leaf, leaf.content.length);
           return false;
       }
       complete(cx, leaf, len) {
           cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));
           return true;
       }
       nextStage(elt) {
           if (elt) {
               this.pos = elt.to - this.start;
               this.elts.push(elt);
               this.stage++;
               return true;
           }
           if (elt === false)
               this.stage = -1 /* Failed */;
           return false;
       }
       advance(content) {
           for (;;) {
               if (this.stage == -1 /* Failed */) {
                   return -1;
               }
               else if (this.stage == 0 /* Start */) {
                   if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))
                       return -1;
                   if (content.charCodeAt(this.pos) != 58 /* ':' */)
                       return this.stage = -1 /* Failed */;
                   this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));
                   this.pos++;
               }
               else if (this.stage == 1 /* Label */) {
                   if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))
                       return -1;
               }
               else if (this.stage == 2 /* Link */) {
                   let skip = skipSpace(content, this.pos), end = 0;
                   if (skip > this.pos) {
                       let title = parseLinkTitle(content, skip, this.start);
                       if (title) {
                           let titleEnd = lineEnd(content, title.to - this.start);
                           if (titleEnd > 0) {
                               this.nextStage(title);
                               end = titleEnd;
                           }
                       }
                   }
                   if (!end)
                       end = lineEnd(content, this.pos);
                   return end > 0 && end < content.length ? end : -1;
               }
               else { // RefStage.Title
                   return lineEnd(content, this.pos);
               }
           }
       }
   }
   function lineEnd(text, pos) {
       for (; pos < text.length; pos++) {
           let next = text.charCodeAt(pos);
           if (next == 10)
               break;
           if (!space$2(next))
               return -1;
       }
       return pos;
   }
   class SetextHeadingParser {
       nextLine(cx, line, leaf) {
           let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);
           let next = line.next;
           if (underline < 0)
               return false;
           let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);
           cx.nextLine();
           cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [
               ...cx.parser.parseInline(leaf.content, leaf.start),
               underlineMark
           ]));
           return true;
       }
       finish() {
           return false;
       }
   }
   const DefaultLeafBlocks = {
       LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },
       SetextHeading() { return new SetextHeadingParser; }
   };
   const DefaultEndLeaf = [
       (_, line) => isAtxHeading(line) >= 0,
       (_, line) => isFencedCode(line) >= 0,
       (_, line) => isBlockquote(line) >= 0,
       (p, line) => isBulletList(line, p, true) >= 0,
       (p, line) => isOrderedList(line, p, true) >= 0,
       (p, line) => isHorizontalRule(line, p, true) >= 0,
       (p, line) => isHTMLBlock(line, p, true) >= 0
   ];
   const scanLineResult = { text: "", end: 0 };
   /// Block-level parsing functions get access to this context object.
   class BlockContext {
       /// @internal
       constructor(
       /// The parser configuration used.
       parser, 
       /// @internal
       input, fragments, 
       /// @internal
       ranges) {
           this.parser = parser;
           this.input = input;
           this.ranges = ranges;
           this.line = new Line();
           this.atEnd = false;
           /// @internal
           this.dontInject = new Set;
           this.stoppedAt = null;
           /// The range index that absoluteLineStart points into @internal
           this.rangeI = 0;
           this.to = ranges[ranges.length - 1].to;
           this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
           this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);
           this.stack = [this.block];
           this.fragments = fragments.length ? new FragmentCursor$1(fragments, input) : null;
           this.readLine();
       }
       get parsedPos() {
           return this.absoluteLineStart;
       }
       advance() {
           if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
               return this.finish();
           let { line } = this;
           for (;;) {
               while (line.depth < this.stack.length)
                   this.finishContext();
               for (let mark of line.markers)
                   this.addNode(mark.type, mark.from, mark.to);
               if (line.pos < line.text.length)
                   break;
               // Empty line
               if (!this.nextLine())
                   return this.finish();
           }
           if (this.fragments && this.reuseFragment(line.basePos))
               return null;
           start: for (;;) {
               for (let type of this.parser.blockParsers)
                   if (type) {
                       let result = type(this, line);
                       if (result != false) {
                           if (result == true)
                               return null;
                           line.forward();
                           continue start;
                       }
                   }
               break;
           }
           let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
           for (let parse of this.parser.leafBlockParsers)
               if (parse) {
                   let parser = parse(this, leaf);
                   if (parser)
                       leaf.parsers.push(parser);
               }
           lines: while (this.nextLine()) {
               if (line.pos == line.text.length)
                   break;
               if (line.indent < line.baseIndent + 4) {
                   for (let stop of this.parser.endLeafBlock)
                       if (stop(this, line, leaf))
                           break lines;
               }
               for (let parser of leaf.parsers)
                   if (parser.nextLine(this, line, leaf))
                       return null;
               leaf.content += "\n" + line.scrub();
               for (let m of line.markers)
                   leaf.marks.push(m);
           }
           this.finishLeaf(leaf);
           return null;
       }
       stopAt(pos) {
           if (this.stoppedAt != null && this.stoppedAt < pos)
               throw new RangeError("Can't move stoppedAt forward");
           this.stoppedAt = pos;
       }
       reuseFragment(start) {
           if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||
               !this.fragments.matches(this.block.hash))
               return false;
           let taken = this.fragments.takeNodes(this);
           if (!taken)
               return false;
           let withoutGaps = taken, end = this.absoluteLineStart + taken;
           for (let i = 1; i < this.ranges.length; i++) {
               let gapFrom = this.ranges[i - 1].to, gapTo = this.ranges[i].from;
               if (gapFrom >= this.lineStart && gapTo < end)
                   withoutGaps -= gapTo - gapFrom;
           }
           this.lineStart += withoutGaps;
           this.absoluteLineStart += taken;
           this.moveRangeI();
           if (this.absoluteLineStart < this.to) {
               this.lineStart++;
               this.absoluteLineStart++;
               this.readLine();
           }
           else {
               this.atEnd = true;
               this.readLine();
           }
           return true;
       }
       /// The number of parent blocks surrounding the current block.
       get depth() {
           return this.stack.length;
       }
       /// Get the type of the parent block at the given depth. When no
       /// depth is passed, return the type of the innermost parent.
       parentType(depth = this.depth - 1) {
           return this.parser.nodeSet.types[this.stack[depth].type];
       }
       /// Move to the next input line. This should only be called by
       /// (non-composite) [block parsers](#BlockParser.parse) that consume
       /// the line directly, or leaf block parser
       /// [`nextLine`](#LeafBlockParser.nextLine) methods when they
       /// consume the current line (and return true).
       nextLine() {
           this.lineStart += this.line.text.length;
           if (this.absoluteLineEnd >= this.to) {
               this.absoluteLineStart = this.absoluteLineEnd;
               this.atEnd = true;
               this.readLine();
               return false;
           }
           else {
               this.lineStart++;
               this.absoluteLineStart = this.absoluteLineEnd + 1;
               this.moveRangeI();
               this.readLine();
               return true;
           }
       }
       moveRangeI() {
           while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {
               this.rangeI++;
               this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
           }
       }
       /// @internal
       scanLine(start) {
           let r = scanLineResult;
           r.end = start;
           if (start >= this.to) {
               r.text = "";
           }
           else {
               r.text = this.lineChunkAt(start);
               r.end += r.text.length;
               if (this.ranges.length > 1) {
                   let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
                   while (this.ranges[rangeI].to < r.end) {
                       rangeI++;
                       let nextFrom = this.ranges[rangeI].from;
                       let after = this.lineChunkAt(nextFrom);
                       r.end = nextFrom + after.length;
                       r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
                       textOffset = r.end - r.text.length;
                   }
               }
           }
           return r;
       }
       /// @internal
       readLine() {
           let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);
           this.absoluteLineEnd = end;
           line.reset(text);
           for (; line.depth < this.stack.length; line.depth++) {
               let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];
               if (!handler)
                   throw new Error("Unhandled block context " + Type[cx.type]);
               if (!handler(cx, this, line))
                   break;
               line.forward();
           }
       }
       lineChunkAt(pos) {
           let next = this.input.chunk(pos), text;
           if (!this.input.lineChunks) {
               let eol = next.indexOf("\n");
               text = eol < 0 ? next : next.slice(0, eol);
           }
           else {
               text = next == "\n" ? "" : next;
           }
           return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
       }
       /// The end position of the previous line.
       prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }
       /// @internal
       startContext(type, start, value = 0) {
           this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);
           this.stack.push(this.block);
       }
       /// Start a composite block. Should only be called from [block
       /// parser functions](#BlockParser.parse) that return null.
       startComposite(type, start, value = 0) {
           this.startContext(this.parser.getNodeType(type), start, value);
       }
       /// @internal
       addNode(block, from, to) {
           if (typeof block == "number")
               block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);
           this.block.addChild(block, from - this.block.from);
       }
       /// Add a block element. Can be called by [block
       /// parsers](#BlockParser.parse).
       addElement(elt) {
           this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);
       }
       /// Add a block element from a [leaf parser](#LeafBlockParser). This
       /// makes sure any extra composite block markup (such as blockquote
       /// markers) inside the block are also added to the syntax tree.
       addLeafElement(leaf, elt) {
           this.addNode(this.buffer
               .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)
               .finish(elt.type, elt.to - elt.from), elt.from);
       }
       /// @internal
       finishContext() {
           let cx = this.stack.pop();
           let top = this.stack[this.stack.length - 1];
           top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);
           this.block = top;
       }
       finish() {
           while (this.stack.length > 1)
               this.finishContext();
           return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
       }
       addGaps(tree) {
           return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;
       }
       /// @internal
       finishLeaf(leaf) {
           for (let parser of leaf.parsers)
               if (parser.finish(this, leaf))
                   return;
           let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
           this.addNode(this.buffer
               .writeElements(inline, -leaf.start)
               .finish(Type.Paragraph, leaf.content.length), leaf.start);
       }
       elt(type, from, to, children) {
           if (typeof type == "string")
               return elt(this.parser.getNodeType(type), from, to, children);
           return new TreeElement(type, from);
       }
       /// @internal
       get buffer() { return new Buffer(this.parser.nodeSet); }
   }
   function injectGaps(ranges, rangeI, tree, offset, dont) {
       if (dont.has(tree.tree))
           return tree.tree;
       let rangeEnd = ranges[rangeI].to;
       let children = [], positions = [], start = tree.from + offset;
       function movePastNext(upto, inclusive) {
           while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {
               let size = ranges[rangeI + 1].from - rangeEnd;
               offset += size;
               upto += size;
               rangeI++;
               rangeEnd = ranges[rangeI].to;
           }
       }
       for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {
           movePastNext(ch.from + offset, true);
           let from = ch.from + offset, node;
           if (ch.to + offset > rangeEnd) {
               node = injectGaps(ranges, rangeI, ch, offset, dont);
               movePastNext(ch.to + offset, false);
           }
           else {
               node = ch.toTree();
           }
           children.push(node);
           positions.push(from - start);
       }
       movePastNext(tree.to + offset, false);
       return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);
   }
   /// A Markdown parser configuration.
   class MarkdownParser extends Parser$1 {
       /// @internal
       constructor(
       /// The parser's syntax [node
       /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).
       nodeSet, 
       /// @internal
       blockParsers, 
       /// @internal
       leafBlockParsers, 
       /// @internal
       blockNames, 
       /// @internal
       endLeafBlock, 
       /// @internal
       skipContextMarkup, 
       /// @internal
       inlineParsers, 
       /// @internal
       inlineNames, 
       /// @internal
       wrappers) {
           super();
           this.nodeSet = nodeSet;
           this.blockParsers = blockParsers;
           this.leafBlockParsers = leafBlockParsers;
           this.blockNames = blockNames;
           this.endLeafBlock = endLeafBlock;
           this.skipContextMarkup = skipContextMarkup;
           this.inlineParsers = inlineParsers;
           this.inlineNames = inlineNames;
           this.wrappers = wrappers;
           /// @internal
           this.nodeTypes = Object.create(null);
           for (let t of nodeSet.types)
               this.nodeTypes[t.name] = t.id;
       }
       createParse(input, fragments, ranges) {
           let parse = new BlockContext(this, input, fragments, ranges);
           for (let w of this.wrappers)
               parse = w(parse, input, fragments, ranges);
           return parse;
       }
       /// Reconfigure the parser.
       configure(spec) {
           let config = resolveConfig(spec);
           if (!config)
               return this;
           let { nodeSet, skipContextMarkup } = this;
           let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
           if (nonEmpty(config.defineNodes)) {
               skipContextMarkup = Object.assign({}, skipContextMarkup);
               let nodeTypes = nodeSet.types.slice(), styles;
               for (let s of config.defineNodes) {
                   let { name, block, composite, style } = typeof s == "string" ? { name: s } : s;
                   if (nodeTypes.some(t => t.name == name))
                       continue;
                   if (composite)
                       skipContextMarkup[nodeTypes.length] =
                           (bl, cx, line) => composite(cx, line, bl.value);
                   let id = nodeTypes.length;
                   let group = composite ? ["Block", "BlockContext"] : !block ? undefined
                       : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
                   nodeTypes.push(NodeType$1.define({
                       id,
                       name,
                       props: group && [[NodeProp.group, group]]
                   }));
                   if (style) {
                       if (!styles)
                           styles = {};
                       if (Array.isArray(style) || style instanceof Tag)
                           styles[name] = style;
                       else
                           Object.assign(styles, style);
                   }
               }
               nodeSet = new NodeSet(nodeTypes);
               if (styles)
                   nodeSet = nodeSet.extend(styleTags(styles));
           }
           if (nonEmpty(config.props))
               nodeSet = nodeSet.extend(...config.props);
           if (nonEmpty(config.remove)) {
               for (let rm of config.remove) {
                   let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);
                   if (block > -1)
                       blockParsers[block] = leafBlockParsers[block] = undefined;
                   if (inline > -1)
                       inlineParsers[inline] = undefined;
               }
           }
           if (nonEmpty(config.parseBlock)) {
               for (let spec of config.parseBlock) {
                   let found = blockNames.indexOf(spec.name);
                   if (found > -1) {
                       blockParsers[found] = spec.parse;
                       leafBlockParsers[found] = spec.leaf;
                   }
                   else {
                       let pos = spec.before ? findName(blockNames, spec.before)
                           : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;
                       blockParsers.splice(pos, 0, spec.parse);
                       leafBlockParsers.splice(pos, 0, spec.leaf);
                       blockNames.splice(pos, 0, spec.name);
                   }
                   if (spec.endLeaf)
                       endLeafBlock.push(spec.endLeaf);
               }
           }
           if (nonEmpty(config.parseInline)) {
               for (let spec of config.parseInline) {
                   let found = inlineNames.indexOf(spec.name);
                   if (found > -1) {
                       inlineParsers[found] = spec.parse;
                   }
                   else {
                       let pos = spec.before ? findName(inlineNames, spec.before)
                           : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;
                       inlineParsers.splice(pos, 0, spec.parse);
                       inlineNames.splice(pos, 0, spec.name);
                   }
               }
           }
           if (config.wrap)
               wrappers = wrappers.concat(config.wrap);
           return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
       }
       /// @internal
       getNodeType(name) {
           let found = this.nodeTypes[name];
           if (found == null)
               throw new RangeError(`Unknown node type '${name}'`);
           return found;
       }
       /// Parse the given piece of inline text at the given offset,
       /// returning an array of [`Element`](#Element) objects representing
       /// the inline content.
       parseInline(text, offset) {
           let cx = new InlineContext(this, text, offset);
           outer: for (let pos = offset; pos < cx.end;) {
               let next = cx.char(pos);
               for (let token of this.inlineParsers)
                   if (token) {
                       let result = token(cx, next, pos);
                       if (result >= 0) {
                           pos = result;
                           continue outer;
                       }
                   }
               pos++;
           }
           return cx.resolveMarkers(0);
       }
   }
   function nonEmpty(a) {
       return a != null && a.length > 0;
   }
   function resolveConfig(spec) {
       if (!Array.isArray(spec))
           return spec;
       if (spec.length == 0)
           return null;
       let conf = resolveConfig(spec[0]);
       if (spec.length == 1)
           return conf;
       let rest = resolveConfig(spec.slice(1));
       if (!rest || !conf)
           return conf || rest;
       let conc = (a, b) => (a || none).concat(b || none);
       let wrapA = conf.wrap, wrapB = rest.wrap;
       return {
           props: conc(conf.props, rest.props),
           defineNodes: conc(conf.defineNodes, rest.defineNodes),
           parseBlock: conc(conf.parseBlock, rest.parseBlock),
           parseInline: conc(conf.parseInline, rest.parseInline),
           remove: conc(conf.remove, rest.remove),
           wrap: !wrapA ? wrapB : !wrapB ? wrapA :
               (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)
       };
   }
   function findName(names, name) {
       let found = names.indexOf(name);
       if (found < 0)
           throw new RangeError(`Position specified relative to unknown parser ${name}`);
       return found;
   }
   let nodeTypes = [NodeType$1.none];
   for (let i = 1, name; name = Type[i]; i++) {
       nodeTypes[i] = NodeType$1.define({
           id: i,
           name,
           props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]]
       });
   }
   const none = [];
   class Buffer {
       constructor(nodeSet) {
           this.nodeSet = nodeSet;
           this.content = [];
           this.nodes = [];
       }
       write(type, from, to, children = 0) {
           this.content.push(type, from, to, 4 + children * 4);
           return this;
       }
       writeElements(elts, offset = 0) {
           for (let e of elts)
               e.writeTo(this, offset);
           return this;
       }
       finish(type, length) {
           return Tree.build({
               buffer: this.content,
               nodeSet: this.nodeSet,
               reused: this.nodes,
               topID: type,
               length
           });
       }
   }
   /// Elements are used to compose syntax nodes during parsing.
   class Element$1 {
       /// @internal
       constructor(
       /// The node's
       /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).
       type, 
       /// The start of the node, as an offset from the start of the document.
       from, 
       /// The end of the node.
       to, 
       /// The node's child nodes @internal
       children = none) {
           this.type = type;
           this.from = from;
           this.to = to;
           this.children = children;
       }
       /// @internal
       writeTo(buf, offset) {
           let startOff = buf.content.length;
           buf.writeElements(this.children, offset);
           buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
       }
       /// @internal
       toTree(nodeSet) {
           return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
       }
   }
   class TreeElement {
       constructor(tree, from) {
           this.tree = tree;
           this.from = from;
       }
       get to() { return this.from + this.tree.length; }
       get type() { return this.tree.type.id; }
       get children() { return none; }
       writeTo(buf, offset) {
           buf.nodes.push(this.tree);
           buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
       }
       toTree() { return this.tree; }
   }
   function elt(type, from, to, children) {
       return new Element$1(type, from, to, children);
   }
   const EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
   const EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
   const LinkStart = {}, ImageStart = {};
   class InlineDelimiter {
       constructor(type, from, to, side) {
           this.type = type;
           this.from = from;
           this.to = to;
           this.side = side;
       }
   }
   const Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
   let Punctuation = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
   try {
       Punctuation = new RegExp("[\\p{Pc}|\\p{Pd}|\\p{Pe}|\\p{Pf}|\\p{Pi}|\\p{Po}|\\p{Ps}]", "u");
   }
   catch (_) { }
   const DefaultInline = {
       Escape(cx, next, start) {
           if (next != 92 /* '\\' */ || start == cx.end - 1)
               return -1;
           let escaped = cx.char(start + 1);
           for (let i = 0; i < Escapable.length; i++)
               if (Escapable.charCodeAt(i) == escaped)
                   return cx.append(elt(Type.Escape, start, start + 2));
           return -1;
       },
       Entity(cx, next, start) {
           if (next != 38 /* '&' */)
               return -1;
           let m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx.slice(start + 1, start + 31));
           return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;
       },
       InlineCode(cx, next, start) {
           if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)
               return -1;
           let pos = start + 1;
           while (pos < cx.end && cx.char(pos) == 96)
               pos++;
           let size = pos - start, curSize = 0;
           for (; pos < cx.end; pos++) {
               if (cx.char(pos) == 96) {
                   curSize++;
                   if (curSize == size && cx.char(pos + 1) != 96)
                       return cx.append(elt(Type.InlineCode, start, pos + 1, [
                           elt(Type.CodeMark, start, start + size),
                           elt(Type.CodeMark, pos + 1 - size, pos + 1)
                       ]));
               }
               else {
                   curSize = 0;
               }
           }
           return -1;
       },
       HTMLTag(cx, next, start) {
           if (next != 60 /* '<' */ || start == cx.end - 1)
               return -1;
           let after = cx.slice(start + 1, cx.end);
           let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
           if (url)
               return cx.append(elt(Type.URL, start, start + 1 + url[0].length));
           let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
           if (comment)
               return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));
           let procInst = /^\?[^]*?\?>/.exec(after);
           if (procInst)
               return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));
           let m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
           if (!m)
               return -1;
           return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));
       },
       Emphasis(cx, next, start) {
           if (next != 95 && next != 42)
               return -1;
           let pos = start + 1;
           while (cx.char(pos) == next)
               pos++;
           let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);
           let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
           let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
           let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
           let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
           let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);
           let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);
           return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Open */ : 0) | (canClose ? 2 /* Close */ : 0)));
       },
       HardBreak(cx, next, start) {
           if (next == 92 /* '\\' */ && cx.char(start + 1) == 10 /* '\n' */)
               return cx.append(elt(Type.HardBreak, start, start + 2));
           if (next == 32) {
               let pos = start + 1;
               while (cx.char(pos) == 32)
                   pos++;
               if (cx.char(pos) == 10 && pos >= start + 2)
                   return cx.append(elt(Type.HardBreak, start, pos + 1));
           }
           return -1;
       },
       Link(cx, next, start) {
           return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Open */)) : -1;
       },
       Image(cx, next, start) {
           return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */
               ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Open */)) : -1;
       },
       LinkEnd(cx, next, start) {
           if (next != 93 /* ']' */)
               return -1;
           // Scanning back to the next link/image start marker
           for (let i = cx.parts.length - 1; i >= 0; i--) {
               let part = cx.parts[i];
               if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
                   // If this one has been set invalid (because it would produce
                   // a nested link) or there's no valid link here ignore both.
                   if (!part.side || cx.skipSpace(part.to) == start && !/[(\[]/.test(cx.slice(start + 1, start + 2))) {
                       cx.parts[i] = null;
                       return -1;
                   }
                   // Finish the content and replace the entire range in
                   // this.parts with the link/image node.
                   let content = cx.takeContent(i);
                   let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);
                   // Set any open-link markers before this link to invalid.
                   if (part.type == LinkStart)
                       for (let j = 0; j < i; j++) {
                           let p = cx.parts[j];
                           if (p instanceof InlineDelimiter && p.type == LinkStart)
                               p.side = 0;
                       }
                   return link.to;
               }
           }
           return -1;
       }
   };
   function finishLink(cx, content, type, start, startPos) {
       let { text } = cx, next = cx.char(startPos), endPos = startPos;
       content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));
       content.push(elt(Type.LinkMark, startPos - 1, startPos));
       if (next == 40 /* '(' */) {
           let pos = cx.skipSpace(startPos + 1);
           let dest = parseURL(text, pos - cx.offset, cx.offset), title;
           if (dest) {
               pos = cx.skipSpace(dest.to);
               title = parseLinkTitle(text, pos - cx.offset, cx.offset);
               if (title)
                   pos = cx.skipSpace(title.to);
           }
           if (cx.char(pos) == 41 /* ')' */) {
               content.push(elt(Type.LinkMark, startPos, startPos + 1));
               endPos = pos + 1;
               if (dest)
                   content.push(dest);
               if (title)
                   content.push(title);
               content.push(elt(Type.LinkMark, pos, endPos));
           }
       }
       else if (next == 91 /* '[' */) {
           let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);
           if (label) {
               content.push(label);
               endPos = label.to;
           }
       }
       return elt(type, start, endPos, content);
   }
   // These return `null` when falling off the end of the input, `false`
   // when parsing fails otherwise (for use in the incremental link
   // reference parser).
   function parseURL(text, start, offset) {
       let next = text.charCodeAt(start);
       if (next == 60 /* '<' */) {
           for (let pos = start + 1; pos < text.length; pos++) {
               let ch = text.charCodeAt(pos);
               if (ch == 62 /* '>' */)
                   return elt(Type.URL, start + offset, pos + 1 + offset);
               if (ch == 60 || ch == 10 /* '<\n' */)
                   return false;
           }
           return null;
       }
       else {
           let depth = 0, pos = start;
           for (let escaped = false; pos < text.length; pos++) {
               let ch = text.charCodeAt(pos);
               if (space$2(ch)) {
                   break;
               }
               else if (escaped) {
                   escaped = false;
               }
               else if (ch == 40 /* '(' */) {
                   depth++;
               }
               else if (ch == 41 /* ')' */) {
                   if (!depth)
                       break;
                   depth--;
               }
               else if (ch == 92 /* '\\' */) {
                   escaped = true;
               }
           }
           return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;
       }
   }
   function parseLinkTitle(text, start, offset) {
       let next = text.charCodeAt(start);
       if (next != 39 && next != 34 && next != 40 /* '"\'(' */)
           return false;
       let end = next == 40 ? 41 : next;
       for (let pos = start + 1, escaped = false; pos < text.length; pos++) {
           let ch = text.charCodeAt(pos);
           if (escaped)
               escaped = false;
           else if (ch == end)
               return elt(Type.LinkTitle, start + offset, pos + 1 + offset);
           else if (ch == 92 /* '\\' */)
               escaped = true;
       }
       return null;
   }
   function parseLinkLabel(text, start, offset, requireNonWS) {
       for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {
           let ch = text.charCodeAt(pos);
           if (escaped)
               escaped = false;
           else if (ch == 93 /* ']' */)
               return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);
           else {
               if (requireNonWS && !space$2(ch))
                   requireNonWS = false;
               if (ch == 91 /* '[' */)
                   return false;
               else if (ch == 92 /* '\\' */)
                   escaped = true;
           }
       }
       return null;
   }
   /// Inline parsing functions get access to this context, and use it to
   /// read the content and emit syntax nodes.
   class InlineContext {
       /// @internal
       constructor(
       /// The parser that is being used.
       parser, 
       /// The text of this inline section.
       text, 
       /// The starting offset of the section in the document.
       offset) {
           this.parser = parser;
           this.text = text;
           this.offset = offset;
           /// @internal
           this.parts = [];
       }
       /// Get the character code at the given (document-relative)
       /// position.
       char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }
       /// The position of the end of this inline section.
       get end() { return this.offset + this.text.length; }
       /// Get a substring of this inline section. Again uses
       /// document-relative positions.
       slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }
       /// @internal
       append(elt) {
           this.parts.push(elt);
           return elt.to;
       }
       /// Add a [delimiter](#DelimiterType) at this given position. `open`
       /// and `close` indicate whether this delimiter is opening, closing,
       /// or both. Returns the end of the delimiter, for convenient
       /// returning from [parse functions](#InlineParser.parse).
       addDelimiter(type, from, to, open, close) {
           return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Open */ : 0) | (close ? 2 /* Close */ : 0)));
       }
       /// Add an inline element. Returns the end of the element.
       addElement(elt) {
           return this.append(elt);
       }
       /// @internal
       resolveMarkers(from) {
           for (let i = from; i < this.parts.length; i++) {
               let close = this.parts[i];
               if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Close */)))
                   continue;
               let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
               let closeSize = close.to - close.from;
               let open, j = i - 1;
               for (; j >= from; j--) {
                   let part = this.parts[j];
                   if (!(part instanceof InlineDelimiter && (part.side & 1 /* Open */) && part.type == close.type) ||
                       emp && ((close.side & 1 /* Open */) || (part.side & 2 /* Close */)) &&
                           (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))
                       continue;
                   open = part;
                   break;
               }
               if (!open)
                   continue;
               let type = close.type.resolve, content = [];
               let start = open.from, end = close.to;
               if (emp) {
                   let size = Math.min(2, open.to - open.from, closeSize);
                   start = open.to - size;
                   end = close.from + size;
                   type = size == 1 ? "Emphasis" : "StrongEmphasis";
               }
               if (open.type.mark)
                   content.push(this.elt(open.type.mark, start, open.to));
               for (let k = j + 1; k < i; k++) {
                   if (this.parts[k] instanceof Element$1)
                       content.push(this.parts[k]);
                   this.parts[k] = null;
               }
               if (close.type.mark)
                   content.push(this.elt(close.type.mark, close.from, end));
               let element = this.elt(type, start, end, content);
               this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;
               let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;
               if (keep)
                   this.parts.splice(i, 0, element);
               else
                   this.parts[i] = element;
           }
           let result = [];
           for (let i = from; i < this.parts.length; i++) {
               let part = this.parts[i];
               if (part instanceof Element$1)
                   result.push(part);
           }
           return result;
       }
       /// Find an opening delimiter of the given type. Returns `null` if
       /// no delimiter is found, or an index that can be passed to
       /// [`takeContent`](#InlineContext.takeContent) otherwise.
       findOpeningDelimiter(type) {
           for (let i = this.parts.length - 1; i >= 0; i--) {
               let part = this.parts[i];
               if (part instanceof InlineDelimiter && part.type == type)
                   return i;
           }
           return null;
       }
       /// Remove all inline elements and delimiters starting from the
       /// given index (which you should get from
       /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
       /// resolve delimiters inside of them, and return them as an array
       /// of elements.
       takeContent(startIndex) {
           let content = this.resolveMarkers(startIndex);
           this.parts.length = startIndex;
           return content;
       }
       /// Skip space after the given (document) position, returning either
       /// the position of the next non-space character or the end of the
       /// section.
       skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }
       elt(type, from, to, children) {
           if (typeof type == "string")
               return elt(this.parser.getNodeType(type), from, to, children);
           return new TreeElement(type, from);
       }
   }
   function injectMarks(elements, marks) {
       if (!marks.length)
           return elements;
       if (!elements.length)
           return marks;
       let elts = elements.slice(), eI = 0;
       for (let mark of marks) {
           while (eI < elts.length && elts[eI].to < mark.to)
               eI++;
           if (eI < elts.length && elts[eI].from < mark.from) {
               let e = elts[eI];
               if (e instanceof Element$1)
                   elts[eI] = new Element$1(e.type, e.from, e.to, injectMarks(e.children, [mark]));
           }
           else {
               elts.splice(eI++, 0, mark);
           }
       }
       return elts;
   }
   // These are blocks that can span blank lines, and should thus only be
   // reused if their next sibling is also being reused.
   const NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];
   class FragmentCursor$1 {
       constructor(fragments, input) {
           this.fragments = fragments;
           this.input = input;
           // Index into fragment array
           this.i = 0;
           // Active fragment
           this.fragment = null;
           this.fragmentEnd = -1;
           // Cursor into the current fragment, if any. When `moveTo` returns
           // true, this points at the first block after `pos`.
           this.cursor = null;
           if (fragments.length)
               this.fragment = fragments[this.i++];
       }
       nextFragment() {
           this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
           this.cursor = null;
           this.fragmentEnd = -1;
       }
       moveTo(pos, lineStart) {
           while (this.fragment && this.fragment.to <= pos)
               this.nextFragment();
           if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
               return false;
           if (this.fragmentEnd < 0) {
               let end = this.fragment.to;
               while (end > 0 && this.input.read(end - 1, end) != "\n")
                   end--;
               this.fragmentEnd = end ? end - 1 : 0;
           }
           let c = this.cursor;
           if (!c) {
               c = this.cursor = this.fragment.tree.cursor();
               c.firstChild();
           }
           let rPos = pos + this.fragment.offset;
           while (c.to <= rPos)
               if (!c.parent())
                   return false;
           for (;;) {
               if (c.from >= rPos)
                   return this.fragment.from <= lineStart;
               if (!c.childAfter(rPos))
                   return false;
           }
       }
       matches(hash) {
           let tree = this.cursor.tree;
           return tree && tree.prop(NodeProp.contextHash) == hash;
       }
       takeNodes(cx) {
           let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);
           let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;
           let prevEnd = end, prevI = blockI;
           for (;;) {
               if (cur.to - off > fragEnd) {
                   if (cur.type.isAnonymous && cur.firstChild())
                       continue;
                   break;
               }
               cx.dontInject.add(cur.tree);
               cx.addNode(cur.tree, cur.from - off);
               // Taken content must always end in a block, because incremental
               // parsing happens on block boundaries. Never stop directly
               // after an indented code block, since those can continue after
               // any number of blank lines.
               if (cur.type.is("Block")) {
                   if (NotLast.indexOf(cur.type.id) < 0) {
                       end = cur.to - off;
                       blockI = cx.block.children.length;
                   }
                   else {
                       end = prevEnd;
                       blockI = prevI;
                       prevEnd = cur.to - off;
                       prevI = cx.block.children.length;
                   }
               }
               if (!cur.nextSibling())
                   break;
           }
           while (cx.block.children.length > blockI) {
               cx.block.children.pop();
               cx.block.positions.pop();
           }
           return end - start;
       }
   }
   const markdownHighlighting = styleTags({
       "Blockquote/...": tags$1.quote,
       HorizontalRule: tags$1.contentSeparator,
       "ATXHeading1/... SetextHeading1/...": tags$1.heading1,
       "ATXHeading2/... SetextHeading2/...": tags$1.heading2,
       "ATXHeading3/...": tags$1.heading3,
       "ATXHeading4/...": tags$1.heading4,
       "ATXHeading5/...": tags$1.heading5,
       "ATXHeading6/...": tags$1.heading6,
       "Comment CommentBlock": tags$1.comment,
       Escape: tags$1.escape,
       Entity: tags$1.character,
       "Emphasis/...": tags$1.emphasis,
       "StrongEmphasis/...": tags$1.strong,
       "Link/... Image/...": tags$1.link,
       "OrderedList/... BulletList/...": tags$1.list,
       "BlockQuote/...": tags$1.quote,
       "InlineCode CodeText": tags$1.monospace,
       URL: tags$1.url,
       "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": tags$1.processingInstruction,
       "CodeInfo LinkLabel": tags$1.labelName,
       LinkTitle: tags$1.string,
       Paragraph: tags$1.content
   });
   /// The default CommonMark parser.
   const parser$3 = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);

   function leftOverSpace(node, from, to) {
       let ranges = [];
       for (let n = node.firstChild, pos = from;; n = n.nextSibling) {
           let nextPos = n ? n.from : to;
           if (nextPos > pos)
               ranges.push({ from: pos, to: nextPos });
           if (!n)
               break;
           pos = n.to;
       }
       return ranges;
   }
   /// Create a Markdown extension to enable nested parsing on code
   /// blocks and/or embedded HTML.
   function parseCode(config) {
       let { codeParser, htmlParser } = config;
       let wrap = parseMixed((node, input) => {
           let id = node.type.id;
           if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {
               let info = "";
               if (id == Type.FencedCode) {
                   let infoNode = node.node.getChild(Type.CodeInfo);
                   if (infoNode)
                       info = input.read(infoNode.from, infoNode.to);
               }
               let parser = codeParser(info);
               if (parser)
                   return { parser, overlay: node => node.type.id == Type.CodeText };
           }
           else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {
               return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };
           }
           return null;
       });
       return { wrap };
   }

   const StrikethroughDelim = { resolve: "Strikethrough", mark: "StrikethroughMark" };
   /// An extension that implements
   /// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)
   /// Strikethrough syntax using `~~` delimiters.
   const Strikethrough = {
       defineNodes: [{
               name: "Strikethrough",
               style: { "Strikethrough/...": tags$1.strikethrough }
           }, {
               name: "StrikethroughMark",
               style: tags$1.processingInstruction
           }],
       parseInline: [{
               name: "Strikethrough",
               parse(cx, next, pos) {
                   if (next != 126 /* '~' */ || cx.char(pos + 1) != 126)
                       return -1;
                   return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, true, true);
               },
               after: "Emphasis"
           }]
   };
   function parseRow(cx, line, startI = 0, elts, offset = 0) {
       let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;
       let parseCell = () => {
           elts.push(cx.elt("TableCell", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));
       };
       for (let i = startI; i < line.length; i++) {
           let next = line.charCodeAt(i);
           if (next == 124 /* '|' */ && !esc) {
               if (!first || cellStart > -1)
                   count++;
               first = false;
               if (elts) {
                   if (cellStart > -1)
                       parseCell();
                   elts.push(cx.elt("TableDelimiter", i + offset, i + offset + 1));
               }
               cellStart = cellEnd = -1;
           }
           else if (esc || next != 32 && next != 9) {
               if (cellStart < 0)
                   cellStart = i;
               cellEnd = i + 1;
           }
           esc = !esc && next == 92;
       }
       if (cellStart > -1) {
           count++;
           if (elts)
               parseCell();
       }
       return count;
   }
   function hasPipe(str, start) {
       for (let i = start; i < str.length; i++) {
           let next = str.charCodeAt(i);
           if (next == 124 /* '|' */)
               return true;
           if (next == 92 /* '\\' */)
               i++;
       }
       return false;
   }
   const delimiterLine = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
   class TableParser {
       constructor() {
           // Null means we haven't seen the second line yet, false means this
           // isn't a table, and an array means this is a table and we've
           // parsed the given rows so far.
           this.rows = null;
       }
       nextLine(cx, line, leaf) {
           if (this.rows == null) { // Second line
               this.rows = false;
               let lineText;
               if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&
                   delimiterLine.test(lineText = line.text.slice(line.pos))) {
                   let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);
                   if (firstCount == parseRow(cx, lineText, line.pos))
                       this.rows = [cx.elt("TableHeader", leaf.start, leaf.start + leaf.content.length, firstRow),
                           cx.elt("TableDelimiter", cx.lineStart + line.pos, cx.lineStart + line.text.length)];
               }
           }
           else if (this.rows) { // Line after the second
               let content = [];
               parseRow(cx, line.text, line.pos, content, cx.lineStart);
               this.rows.push(cx.elt("TableRow", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));
           }
           return false;
       }
       finish(cx, leaf) {
           if (!this.rows)
               return false;
           cx.addLeafElement(leaf, cx.elt("Table", leaf.start, leaf.start + leaf.content.length, this.rows));
           return true;
       }
   }
   /// This extension provides
   /// [GFM-style](https://github.github.com/gfm/#tables-extension-)
   /// tables, using syntax like this:
   ///
   /// ```
   /// | head 1 | head 2 |
   /// | ---    | ---    |
   /// | cell 1 | cell 2 |
   /// ```
   const Table = {
       defineNodes: [
           { name: "Table", block: true },
           { name: "TableHeader", style: { "TableHeader/...": tags$1.heading } },
           "TableRow",
           { name: "TableCell", style: tags$1.content },
           { name: "TableDelimiter", style: tags$1.processingInstruction },
       ],
       parseBlock: [{
               name: "Table",
               leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },
               endLeaf(cx, line, leaf) {
                   if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))
                       return false;
                   let next = cx.scanLine(cx.absoluteLineEnd + 1).text;
                   return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);
               },
               before: "SetextHeading"
           }]
   };
   class TaskParser {
       nextLine() { return false; }
       finish(cx, leaf) {
           cx.addLeafElement(leaf, cx.elt("Task", leaf.start, leaf.start + leaf.content.length, [
               cx.elt("TaskMarker", leaf.start, leaf.start + 3),
               ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)
           ]));
           return true;
       }
   }
   /// Extension providing
   /// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)
   /// task list items, where list items can be prefixed with `[ ]` or
   /// `[x]` to add a checkbox.
   const TaskList = {
       defineNodes: [
           { name: "Task", block: true, style: tags$1.list },
           { name: "TaskMarker", style: tags$1.atom }
       ],
       parseBlock: [{
               name: "TaskList",
               leaf(cx, leaf) {
                   return /^\[[ xX]\]/.test(leaf.content) && cx.parentType().name == "ListItem" ? new TaskParser : null;
               },
               after: "SetextHeading"
           }]
   };
   /// Extension bundle containing [`Table`](#Table),
   /// [`TaskList`](#TaskList) and [`Strikethrough`](#Strikethrough).
   const GFM = [Table, TaskList, Strikethrough];
   function parseSubSuper(ch, node, mark) {
       return (cx, next, pos) => {
           if (next != ch || cx.char(pos + 1) == ch)
               return -1;
           let elts = [cx.elt(mark, pos, pos + 1)];
           for (let i = pos + 1; i < cx.end; i++) {
               let next = cx.char(i);
               if (next == ch)
                   return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));
               if (next == 92 /* '\\' */)
                   elts.push(cx.elt("Escape", i, i++ + 2));
               if (space$2(next))
                   break;
           }
           return -1;
       };
   }
   /// Extension providing
   /// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
   /// superscript using `^` markers.
   const Superscript = {
       defineNodes: [
           { name: "Superscript", style: tags$1.special(tags$1.content) },
           { name: "SuperscriptMark", style: tags$1.processingInstruction }
       ],
       parseInline: [{
               name: "Superscript",
               parse: parseSubSuper(94 /* '^' */, "Superscript", "SuperscriptMark")
           }]
   };
   /// Extension providing
   /// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
   /// subscript using `~` markers.
   const Subscript = {
       defineNodes: [
           { name: "Subscript", style: tags$1.special(tags$1.content) },
           { name: "SubscriptMark", style: tags$1.processingInstruction }
       ],
       parseInline: [{
               name: "Subscript",
               parse: parseSubSuper(126 /* '~' */, "Subscript", "SubscriptMark")
           }]
   };
   /// Extension that parses two colons with only letters, underscores,
   /// and numbers between them as `Emoji` nodes.
   const Emoji = {
       defineNodes: [{ name: "Emoji", style: tags$1.character }],
       parseInline: [{
               name: "Emoji",
               parse(cx, next, pos) {
                   let match;
                   if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))
                       return -1;
                   return cx.addElement(cx.elt("Emoji", pos, pos + 1 + match[0].length));
               }
           }]
   };

   /// A parse stack. These are used internally by the parser to track
   /// parsing progress. They also provide some properties and methods
   /// that external code such as a tokenizer can use to get information
   /// about the parse state.
   class Stack {
       /// @internal
       constructor(
       /// The parse that this stack is part of @internal
       p, 
       /// Holds state, input pos, buffer index triplets for all but the
       /// top state @internal
       stack, 
       /// The current parse state @internal
       state, 
       // The position at which the next reduce should take place. This
       // can be less than `this.pos` when skipped expressions have been
       // added to the stack (which should be moved outside of the next
       // reduction)
       /// @internal
       reducePos, 
       /// The input position up to which this stack has parsed.
       pos, 
       /// The dynamic score of the stack, including dynamic precedence
       /// and error-recovery penalties
       /// @internal
       score, 
       // The output buffer. Holds (type, start, end, size) quads
       // representing nodes created by the parser, where `size` is
       // amount of buffer array entries covered by this node.
       /// @internal
       buffer, 
       // The base offset of the buffer. When stacks are split, the split
       // instance shared the buffer history with its parent up to
       // `bufferBase`, which is the absolute offset (including the
       // offset of previous splits) into the buffer at which this stack
       // starts writing.
       /// @internal
       bufferBase, 
       /// @internal
       curContext, 
       /// @internal
       lookAhead = 0, 
       // A parent stack from which this was split off, if any. This is
       // set up so that it always points to a stack that has some
       // additional buffer content, never to a stack with an equal
       // `bufferBase`.
       /// @internal
       parent) {
           this.p = p;
           this.stack = stack;
           this.state = state;
           this.reducePos = reducePos;
           this.pos = pos;
           this.score = score;
           this.buffer = buffer;
           this.bufferBase = bufferBase;
           this.curContext = curContext;
           this.lookAhead = lookAhead;
           this.parent = parent;
       }
       /// @internal
       toString() {
           return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
       }
       // Start an empty stack
       /// @internal
       static start(p, state, pos = 0) {
           let cx = p.parser.context;
           return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
       }
       /// The stack's current [context](#lr.ContextTracker) value, if
       /// any. Its type will depend on the context tracker's type
       /// parameter, or it will be `null` if there is no context
       /// tracker.
       get context() { return this.curContext ? this.curContext.context : null; }
       // Push a state onto the stack, tracking its start position as well
       // as the buffer base at that point.
       /// @internal
       pushState(state, start) {
           this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
           this.state = state;
       }
       // Apply a reduce action
       /// @internal
       reduce(action) {
           let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;
           let { parser } = this.p;
           let dPrec = parser.dynamicPrecedence(type);
           if (dPrec)
               this.score += dPrec;
           if (depth == 0) {
               this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
               // Zero-depth reductions are a special case—they add stuff to
               // the stack without popping anything off.
               if (type < parser.minRepeatTerm)
                   this.storeNode(type, this.reducePos, this.reducePos, 4, true);
               this.reduceContext(type, this.reducePos);
               return;
           }
           // Find the base index into `this.stack`, content after which will
           // be dropped. Note that with `StayFlag` reductions we need to
           // consume two extra frames (the dummy parent node for the skipped
           // expression and the state that we'll be staying in, which should
           // be moved to `this.state`).
           let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);
           let start = this.stack[base - 2];
           let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;
           // Store normal terms or `R -> R R` repeat reductions
           if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {
               let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;
               this.storeNode(type, start, pos, count + 4, true);
           }
           if (action & 262144 /* StayFlag */) {
               this.state = this.stack[base];
           }
           else {
               let baseStateID = this.stack[base - 3];
               this.state = parser.getGoto(baseStateID, type, true);
           }
           while (this.stack.length > base)
               this.stack.pop();
           this.reduceContext(type, start);
       }
       // Shift a value into the buffer
       /// @internal
       storeNode(term, start, end, size = 4, isReduce = false) {
           if (term == 0 /* Err */ &&
               (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
               // Try to omit/merge adjacent error nodes
               let cur = this, top = this.buffer.length;
               if (top == 0 && cur.parent) {
                   top = cur.bufferBase - cur.parent.bufferBase;
                   cur = cur.parent;
               }
               if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {
                   if (start == end)
                       return;
                   if (cur.buffer[top - 2] >= start) {
                       cur.buffer[top - 2] = end;
                       return;
                   }
               }
           }
           if (!isReduce || this.pos == end) { // Simple case, just append
               this.buffer.push(term, start, end, size);
           }
           else { // There may be skipped nodes that have to be moved forward
               let index = this.buffer.length;
               if (index > 0 && this.buffer[index - 4] != 0 /* Err */)
                   while (index > 0 && this.buffer[index - 2] > end) {
                       // Move this record forward
                       this.buffer[index] = this.buffer[index - 4];
                       this.buffer[index + 1] = this.buffer[index - 3];
                       this.buffer[index + 2] = this.buffer[index - 2];
                       this.buffer[index + 3] = this.buffer[index - 1];
                       index -= 4;
                       if (size > 4)
                           size -= 4;
                   }
               this.buffer[index] = term;
               this.buffer[index + 1] = start;
               this.buffer[index + 2] = end;
               this.buffer[index + 3] = size;
           }
       }
       // Apply a shift action
       /// @internal
       shift(action, next, nextEnd) {
           let start = this.pos;
           if (action & 131072 /* GotoFlag */) {
               this.pushState(action & 65535 /* ValueMask */, this.pos);
           }
           else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift
               let nextState = action, { parser } = this.p;
               if (nextEnd > this.pos || next <= parser.maxNode) {
                   this.pos = nextEnd;
                   if (!parser.stateFlag(nextState, 1 /* Skipped */))
                       this.reducePos = nextEnd;
               }
               this.pushState(nextState, start);
               this.shiftContext(next, start);
               if (next <= parser.maxNode)
                   this.buffer.push(next, start, nextEnd, 4);
           }
           else { // Shift-and-stay, which means this is a skipped token
               this.pos = nextEnd;
               this.shiftContext(next, start);
               if (next <= this.p.parser.maxNode)
                   this.buffer.push(next, start, nextEnd, 4);
           }
       }
       // Apply an action
       /// @internal
       apply(action, next, nextEnd) {
           if (action & 65536 /* ReduceFlag */)
               this.reduce(action);
           else
               this.shift(action, next, nextEnd);
       }
       // Add a prebuilt (reused) node into the buffer.
       /// @internal
       useNode(value, next) {
           let index = this.p.reused.length - 1;
           if (index < 0 || this.p.reused[index] != value) {
               this.p.reused.push(value);
               index++;
           }
           let start = this.pos;
           this.reducePos = this.pos = start + value.length;
           this.pushState(next, start);
           this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
           if (this.curContext)
               this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
       }
       // Split the stack. Due to the buffer sharing and the fact
       // that `this.stack` tends to stay quite shallow, this isn't very
       // expensive.
       /// @internal
       split() {
           let parent = this;
           let off = parent.buffer.length;
           // Because the top of the buffer (after this.pos) may be mutated
           // to reorder reductions and skipped tokens, and shared buffers
           // should be immutable, this copies any outstanding skipped tokens
           // to the new buffer, and puts the base pointer before them.
           while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
               off -= 4;
           let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
           // Make sure parent points to an actual parent with content, if there is such a parent.
           while (parent && base == parent.bufferBase)
               parent = parent.parent;
           return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
       }
       // Try to recover from an error by 'deleting' (ignoring) one token.
       /// @internal
       recoverByDelete(next, nextEnd) {
           let isNode = next <= this.p.parser.maxNode;
           if (isNode)
               this.storeNode(next, this.pos, nextEnd, 4);
           this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);
           this.pos = this.reducePos = nextEnd;
           this.score -= 190 /* Delete */;
       }
       /// Check if the given term would be able to be shifted (optionally
       /// after some reductions) on this stack. This can be useful for
       /// external tokenizers that want to make sure they only provide a
       /// given token when it applies.
       canShift(term) {
           for (let sim = new SimulatedStack(this);;) {
               let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
               if ((action & 65536 /* ReduceFlag */) == 0)
                   return true;
               if (action == 0)
                   return false;
               sim.reduce(action);
           }
       }
       // Apply up to Recover.MaxNext recovery actions that conceptually
       // inserts some missing token or rule.
       /// @internal
       recoverByInsert(next) {
           if (this.stack.length >= 300 /* MaxInsertStackDepth */)
               return [];
           let nextStates = this.p.parser.nextStates(this.state);
           if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {
               let best = [];
               for (let i = 0, s; i < nextStates.length; i += 2) {
                   if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                       best.push(nextStates[i], s);
               }
               if (this.stack.length < 120 /* DampenInsertStackDepth */)
                   for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {
                       let s = nextStates[i + 1];
                       if (!best.some((v, i) => (i & 1) && v == s))
                           best.push(nextStates[i], s);
                   }
               nextStates = best;
           }
           let result = [];
           for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {
               let s = nextStates[i + 1];
               if (s == this.state)
                   continue;
               let stack = this.split();
               stack.pushState(s, this.pos);
               stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);
               stack.shiftContext(nextStates[i], this.pos);
               stack.score -= 200 /* Insert */;
               result.push(stack);
           }
           return result;
       }
       // Force a reduce, if possible. Return false if that can't
       // be done.
       /// @internal
       forceReduce() {
           let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);
           if ((reduce & 65536 /* ReduceFlag */) == 0)
               return false;
           let { parser } = this.p;
           if (!parser.validAction(this.state, reduce)) {
               let depth = reduce >> 19 /* ReduceDepthShift */, term = reduce & 65535 /* ValueMask */;
               let target = this.stack.length - depth * 3;
               if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)
                   return false;
               this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);
               this.score -= 100 /* Reduce */;
           }
           this.reducePos = this.pos;
           this.reduce(reduce);
           return true;
       }
       /// @internal
       forceAll() {
           while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {
               if (!this.forceReduce()) {
                   this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);
                   break;
               }
           }
           return this;
       }
       /// Check whether this state has no further actions (assumed to be a direct descendant of the
       /// top state, since any other states must be able to continue
       /// somehow). @internal
       get deadEnd() {
           if (this.stack.length != 3)
               return false;
           let { parser } = this.p;
           return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&
               !parser.stateSlot(this.state, 4 /* DefaultReduce */);
       }
       /// Restart the stack (put it back in its start state). Only safe
       /// when this.stack.length == 3 (state is directly below the top
       /// state). @internal
       restart() {
           this.state = this.stack[0];
           this.stack.length = 0;
       }
       /// @internal
       sameState(other) {
           if (this.state != other.state || this.stack.length != other.stack.length)
               return false;
           for (let i = 0; i < this.stack.length; i += 3)
               if (this.stack[i] != other.stack[i])
                   return false;
           return true;
       }
       /// Get the parser used by this stack.
       get parser() { return this.p.parser; }
       /// Test whether a given dialect (by numeric ID, as exported from
       /// the terms file) is enabled.
       dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
       shiftContext(term, start) {
           if (this.curContext)
               this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
       }
       reduceContext(term, start) {
           if (this.curContext)
               this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
       }
       /// @internal
       emitContext() {
           let last = this.buffer.length - 1;
           if (last < 0 || this.buffer[last] != -3)
               this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
       }
       /// @internal
       emitLookAhead() {
           let last = this.buffer.length - 1;
           if (last < 0 || this.buffer[last] != -4)
               this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
       }
       updateContext(context) {
           if (context != this.curContext.context) {
               let newCx = new StackContext(this.curContext.tracker, context);
               if (newCx.hash != this.curContext.hash)
                   this.emitContext();
               this.curContext = newCx;
           }
       }
       /// @internal
       setLookAhead(lookAhead) {
           if (lookAhead > this.lookAhead) {
               this.emitLookAhead();
               this.lookAhead = lookAhead;
           }
       }
       /// @internal
       close() {
           if (this.curContext && this.curContext.tracker.strict)
               this.emitContext();
           if (this.lookAhead > 0)
               this.emitLookAhead();
       }
   }
   class StackContext {
       constructor(tracker, context) {
           this.tracker = tracker;
           this.context = context;
           this.hash = tracker.strict ? tracker.hash(context) : 0;
       }
   }
   var Recover;
   (function (Recover) {
       Recover[Recover["Insert"] = 200] = "Insert";
       Recover[Recover["Delete"] = 190] = "Delete";
       Recover[Recover["Reduce"] = 100] = "Reduce";
       Recover[Recover["MaxNext"] = 4] = "MaxNext";
       Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
       Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
   })(Recover || (Recover = {}));
   // Used to cheaply run some reductions to scan ahead without mutating
   // an entire stack
   class SimulatedStack {
       constructor(start) {
           this.start = start;
           this.state = start.state;
           this.stack = start.stack;
           this.base = this.stack.length;
       }
       reduce(action) {
           let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;
           if (depth == 0) {
               if (this.stack == this.start.stack)
                   this.stack = this.stack.slice();
               this.stack.push(this.state, 0, 0);
               this.base += 3;
           }
           else {
               this.base -= (depth - 1) * 3;
           }
           let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
           this.state = goto;
       }
   }
   // This is given to `Tree.build` to build a buffer, and encapsulates
   // the parent-stack-walking necessary to read the nodes.
   class StackBufferCursor {
       constructor(stack, pos, index) {
           this.stack = stack;
           this.pos = pos;
           this.index = index;
           this.buffer = stack.buffer;
           if (this.index == 0)
               this.maybeNext();
       }
       static create(stack, pos = stack.bufferBase + stack.buffer.length) {
           return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
       }
       maybeNext() {
           let next = this.stack.parent;
           if (next != null) {
               this.index = this.stack.bufferBase - next.bufferBase;
               this.stack = next;
               this.buffer = next.buffer;
           }
       }
       get id() { return this.buffer[this.index - 4]; }
       get start() { return this.buffer[this.index - 3]; }
       get end() { return this.buffer[this.index - 2]; }
       get size() { return this.buffer[this.index - 1]; }
       next() {
           this.index -= 4;
           this.pos -= 4;
           if (this.index == 0)
               this.maybeNext();
       }
       fork() {
           return new StackBufferCursor(this.stack, this.pos, this.index);
       }
   }

   class CachedToken {
       constructor() {
           this.start = -1;
           this.value = -1;
           this.end = -1;
           this.extended = -1;
           this.lookAhead = 0;
           this.mask = 0;
           this.context = 0;
       }
   }
   const nullToken = new CachedToken;
   /// [Tokenizers](#lr.ExternalTokenizer) interact with the input
   /// through this interface. It presents the input as a stream of
   /// characters, tracking lookahead and hiding the complexity of
   /// [ranges](#common.Parser.parse^ranges) from tokenizer code.
   class InputStream {
       /// @internal
       constructor(
       /// @internal
       input, 
       /// @internal
       ranges) {
           this.input = input;
           this.ranges = ranges;
           /// @internal
           this.chunk = "";
           /// @internal
           this.chunkOff = 0;
           /// Backup chunk
           this.chunk2 = "";
           this.chunk2Pos = 0;
           /// The character code of the next code unit in the input, or -1
           /// when the stream is at the end of the input.
           this.next = -1;
           /// @internal
           this.token = nullToken;
           this.rangeIndex = 0;
           this.pos = this.chunkPos = ranges[0].from;
           this.range = ranges[0];
           this.end = ranges[ranges.length - 1].to;
           this.readNext();
       }
       /// @internal
       resolveOffset(offset, assoc) {
           let range = this.range, index = this.rangeIndex;
           let pos = this.pos + offset;
           while (pos < range.from) {
               if (!index)
                   return null;
               let next = this.ranges[--index];
               pos -= range.from - next.to;
               range = next;
           }
           while (assoc < 0 ? pos > range.to : pos >= range.to) {
               if (index == this.ranges.length - 1)
                   return null;
               let next = this.ranges[++index];
               pos += next.from - range.to;
               range = next;
           }
           return pos;
       }
       /// Look at a code unit near the stream position. `.peek(0)` equals
       /// `.next`, `.peek(-1)` gives you the previous character, and so
       /// on.
       ///
       /// Note that looking around during tokenizing creates dependencies
       /// on potentially far-away content, which may reduce the
       /// effectiveness incremental parsing—when looking forward—or even
       /// cause invalid reparses when looking backward more than 25 code
       /// units, since the library does not track lookbehind.
       peek(offset) {
           let idx = this.chunkOff + offset, pos, result;
           if (idx >= 0 && idx < this.chunk.length) {
               pos = this.pos + offset;
               result = this.chunk.charCodeAt(idx);
           }
           else {
               let resolved = this.resolveOffset(offset, 1);
               if (resolved == null)
                   return -1;
               pos = resolved;
               if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                   result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
               }
               else {
                   let i = this.rangeIndex, range = this.range;
                   while (range.to <= pos)
                       range = this.ranges[++i];
                   this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                   if (pos + this.chunk2.length > range.to)
                       this.chunk2 = this.chunk2.slice(0, range.to - pos);
                   result = this.chunk2.charCodeAt(0);
               }
           }
           if (pos >= this.token.lookAhead)
               this.token.lookAhead = pos + 1;
           return result;
       }
       /// Accept a token. By default, the end of the token is set to the
       /// current stream position, but you can pass an offset (relative to
       /// the stream position) to change that.
       acceptToken(token, endOffset = 0) {
           let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
           if (end == null || end < this.token.start)
               throw new RangeError("Token end out of bounds");
           this.token.value = token;
           this.token.end = end;
       }
       getChunk() {
           if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
               let { chunk, chunkPos } = this;
               this.chunk = this.chunk2;
               this.chunkPos = this.chunk2Pos;
               this.chunk2 = chunk;
               this.chunk2Pos = chunkPos;
               this.chunkOff = this.pos - this.chunkPos;
           }
           else {
               this.chunk2 = this.chunk;
               this.chunk2Pos = this.chunkPos;
               let nextChunk = this.input.chunk(this.pos);
               let end = this.pos + nextChunk.length;
               this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
               this.chunkPos = this.pos;
               this.chunkOff = 0;
           }
       }
       readNext() {
           if (this.chunkOff >= this.chunk.length) {
               this.getChunk();
               if (this.chunkOff == this.chunk.length)
                   return this.next = -1;
           }
           return this.next = this.chunk.charCodeAt(this.chunkOff);
       }
       /// Move the stream forward N (defaults to 1) code units. Returns
       /// the new value of [`next`](#lr.InputStream.next).
       advance(n = 1) {
           this.chunkOff += n;
           while (this.pos + n >= this.range.to) {
               if (this.rangeIndex == this.ranges.length - 1)
                   return this.setDone();
               n -= this.range.to - this.pos;
               this.range = this.ranges[++this.rangeIndex];
               this.pos = this.range.from;
           }
           this.pos += n;
           if (this.pos >= this.token.lookAhead)
               this.token.lookAhead = this.pos + 1;
           return this.readNext();
       }
       setDone() {
           this.pos = this.chunkPos = this.end;
           this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
           this.chunk = "";
           return this.next = -1;
       }
       /// @internal
       reset(pos, token) {
           if (token) {
               this.token = token;
               token.start = pos;
               token.lookAhead = pos + 1;
               token.value = token.extended = -1;
           }
           else {
               this.token = nullToken;
           }
           if (this.pos != pos) {
               this.pos = pos;
               if (pos == this.end) {
                   this.setDone();
                   return this;
               }
               while (pos < this.range.from)
                   this.range = this.ranges[--this.rangeIndex];
               while (pos >= this.range.to)
                   this.range = this.ranges[++this.rangeIndex];
               if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                   this.chunkOff = pos - this.chunkPos;
               }
               else {
                   this.chunk = "";
                   this.chunkOff = 0;
               }
               this.readNext();
           }
           return this;
       }
       /// @internal
       read(from, to) {
           if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
               return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
           if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
               return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
           if (from >= this.range.from && to <= this.range.to)
               return this.input.read(from, to);
           let result = "";
           for (let r of this.ranges) {
               if (r.from >= to)
                   break;
               if (r.to > from)
                   result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
           }
           return result;
       }
   }
   /// @internal
   class TokenGroup {
       constructor(data, id) {
           this.data = data;
           this.id = id;
       }
       token(input, stack) { readToken(this.data, input, stack, this.id); }
   }
   TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
   /// `@external tokens` declarations in the grammar should resolve to
   /// an instance of this class.
   class ExternalTokenizer {
       /// Create a tokenizer. The first argument is the function that,
       /// given an input stream, scans for the types of tokens it
       /// recognizes at the stream's position, and calls
       /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds
       /// one.
       constructor(
       /// @internal
       token, options = {}) {
           this.token = token;
           this.contextual = !!options.contextual;
           this.fallback = !!options.fallback;
           this.extend = !!options.extend;
       }
   }
   // Tokenizer data is stored a big uint16 array containing, for each
   // state:
   //
   //  - A group bitmask, indicating what token groups are reachable from
   //    this state, so that paths that can only lead to tokens not in
   //    any of the current groups can be cut off early.
   //
   //  - The position of the end of the state's sequence of accepting
   //    tokens
   //
   //  - The number of outgoing edges for the state
   //
   //  - The accepting tokens, as (token id, group mask) pairs
   //
   //  - The outgoing edges, as (start character, end character, state
   //    index) triples, with end character being exclusive
   //
   // This function interprets that data, running through a stream as
   // long as new states with the a matching group mask can be reached,
   // and updating `input.token` when it matches a token.
   function readToken(data, input, stack, group) {
       let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;
       scan: for (;;) {
           if ((groupMask & data[state]) == 0)
               break;
           let accEnd = data[state + 1];
           // Check whether this state can lead to a token in the current group
           // Accept tokens in this state, possibly overwriting
           // lower-precedence / shorter tokens
           for (let i = state + 3; i < accEnd; i += 2)
               if ((data[i + 1] & groupMask) > 0) {
                   let term = data[i];
                   if (dialect.allows(term) &&
                       (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {
                       input.acceptToken(term);
                       break;
                   }
               }
           let next = input.next, low = 0, high = data[state + 2];
           // Special case for EOF
           if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* End */) {
               state = data[accEnd + high * 3 - 1];
               continue scan;
           }
           // Do a binary search on the state's edges
           for (; low < high;) {
               let mid = (low + high) >> 1;
               let index = accEnd + mid + (mid << 1);
               let from = data[index], to = data[index + 1];
               if (next < from)
                   high = mid;
               else if (next >= to)
                   low = mid + 1;
               else {
                   state = data[index + 2];
                   input.advance();
                   continue scan;
               }
           }
           break;
       }
   }

   // See lezer-generator/src/encode.ts for comments about the encoding
   // used here
   function decodeArray(input, Type = Uint16Array) {
       if (typeof input != "string")
           return input;
       let array = null;
       for (let pos = 0, out = 0; pos < input.length;) {
           let value = 0;
           for (;;) {
               let next = input.charCodeAt(pos++), stop = false;
               if (next == 126 /* BigValCode */) {
                   value = 65535 /* BigVal */;
                   break;
               }
               if (next >= 92 /* Gap2 */)
                   next--;
               if (next >= 34 /* Gap1 */)
                   next--;
               let digit = next - 32 /* Start */;
               if (digit >= 46 /* Base */) {
                   digit -= 46 /* Base */;
                   stop = true;
               }
               value += digit;
               if (stop)
                   break;
               value *= 46 /* Base */;
           }
           if (array)
               array[out++] = value;
           else
               array = new Type(value);
       }
       return array;
   }

   // Environment variable used to control console output
   const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
   let stackIDs = null;
   var Safety;
   (function (Safety) {
       Safety[Safety["Margin"] = 25] = "Margin";
   })(Safety || (Safety = {}));
   function cutAt(tree, pos, side) {
       let cursor = tree.cursor(IterMode.IncludeAnonymous);
       cursor.moveTo(pos);
       for (;;) {
           if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
               for (;;) {
                   if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                       return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))
                           : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));
                   if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                       break;
                   if (!cursor.parent())
                       return side < 0 ? 0 : tree.length;
               }
       }
   }
   class FragmentCursor {
       constructor(fragments, nodeSet) {
           this.fragments = fragments;
           this.nodeSet = nodeSet;
           this.i = 0;
           this.fragment = null;
           this.safeFrom = -1;
           this.safeTo = -1;
           this.trees = [];
           this.start = [];
           this.index = [];
           this.nextFragment();
       }
       nextFragment() {
           let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
           if (fr) {
               this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
               this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
               while (this.trees.length) {
                   this.trees.pop();
                   this.start.pop();
                   this.index.pop();
               }
               this.trees.push(fr.tree);
               this.start.push(-fr.offset);
               this.index.push(0);
               this.nextStart = this.safeFrom;
           }
           else {
               this.nextStart = 1e9;
           }
       }
       // `pos` must be >= any previously given `pos` for this cursor
       nodeAt(pos) {
           if (pos < this.nextStart)
               return null;
           while (this.fragment && this.safeTo <= pos)
               this.nextFragment();
           if (!this.fragment)
               return null;
           for (;;) {
               let last = this.trees.length - 1;
               if (last < 0) { // End of tree
                   this.nextFragment();
                   return null;
               }
               let top = this.trees[last], index = this.index[last];
               if (index == top.children.length) {
                   this.trees.pop();
                   this.start.pop();
                   this.index.pop();
                   continue;
               }
               let next = top.children[index];
               let start = this.start[last] + top.positions[index];
               if (start > pos) {
                   this.nextStart = start;
                   return null;
               }
               if (next instanceof Tree) {
                   if (start == pos) {
                       if (start < this.safeFrom)
                           return null;
                       let end = start + next.length;
                       if (end <= this.safeTo) {
                           let lookAhead = next.prop(NodeProp.lookAhead);
                           if (!lookAhead || end + lookAhead < this.fragment.to)
                               return next;
                       }
                   }
                   this.index[last]++;
                   if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                       this.trees.push(next);
                       this.start.push(start);
                       this.index.push(0);
                   }
               }
               else {
                   this.index[last]++;
                   this.nextStart = start + next.length;
               }
           }
       }
   }
   class TokenCache {
       constructor(parser, stream) {
           this.stream = stream;
           this.tokens = [];
           this.mainToken = null;
           this.actions = [];
           this.tokens = parser.tokenizers.map(_ => new CachedToken);
       }
       getActions(stack) {
           let actionIndex = 0;
           let main = null;
           let { parser } = stack.p, { tokenizers } = parser;
           let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);
           let context = stack.curContext ? stack.curContext.hash : 0;
           let lookAhead = 0;
           for (let i = 0; i < tokenizers.length; i++) {
               if (((1 << i) & mask) == 0)
                   continue;
               let tokenizer = tokenizers[i], token = this.tokens[i];
               if (main && !tokenizer.fallback)
                   continue;
               if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                   this.updateCachedToken(token, tokenizer, stack);
                   token.mask = mask;
                   token.context = context;
               }
               if (token.lookAhead > token.end + 25 /* Margin */)
                   lookAhead = Math.max(token.lookAhead, lookAhead);
               if (token.value != 0 /* Err */) {
                   let startIndex = actionIndex;
                   if (token.extended > -1)
                       actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                   actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                   if (!tokenizer.extend) {
                       main = token;
                       if (actionIndex > startIndex)
                           break;
                   }
               }
           }
           while (this.actions.length > actionIndex)
               this.actions.pop();
           if (lookAhead)
               stack.setLookAhead(lookAhead);
           if (!main && stack.pos == this.stream.end) {
               main = new CachedToken;
               main.value = stack.p.parser.eofTerm;
               main.start = main.end = stack.pos;
               actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
           }
           this.mainToken = main;
           return this.actions;
       }
       getMainToken(stack) {
           if (this.mainToken)
               return this.mainToken;
           let main = new CachedToken, { pos, p } = stack;
           main.start = pos;
           main.end = Math.min(pos + 1, p.stream.end);
           main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;
           return main;
       }
       updateCachedToken(token, tokenizer, stack) {
           tokenizer.token(this.stream.reset(stack.pos, token), stack);
           if (token.value > -1) {
               let { parser } = stack.p;
               for (let i = 0; i < parser.specialized.length; i++)
                   if (parser.specialized[i] == token.value) {
                       let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                       if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                           if ((result & 1) == 0 /* Specialize */)
                               token.value = result >> 1;
                           else
                               token.extended = result >> 1;
                           break;
                       }
                   }
           }
           else {
               token.value = 0 /* Err */;
               token.end = Math.min(stack.p.stream.end, stack.pos + 1);
           }
       }
       putAction(action, token, end, index) {
           // Don't add duplicate actions
           for (let i = 0; i < index; i += 3)
               if (this.actions[i] == action)
                   return index;
           this.actions[index++] = action;
           this.actions[index++] = token;
           this.actions[index++] = end;
           return index;
       }
       addActions(stack, token, end, index) {
           let { state } = stack, { parser } = stack.p, { data } = parser;
           for (let set = 0; set < 2; set++) {
               for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {
                   if (data[i] == 65535 /* End */) {
                       if (data[i + 1] == 1 /* Next */) {
                           i = pair(data, i + 2);
                       }
                       else {
                           if (index == 0 && data[i + 1] == 2 /* Other */)
                               index = this.putAction(pair(data, i + 2), token, end, index);
                           break;
                       }
                   }
                   if (data[i] == token)
                       index = this.putAction(pair(data, i + 1), token, end, index);
               }
           }
           return index;
       }
   }
   var Rec;
   (function (Rec) {
       Rec[Rec["Distance"] = 5] = "Distance";
       Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
       // When two stacks have been running independently long enough to
       // add this many elements to their buffers, prune one.
       Rec[Rec["MinBufferLengthPrune"] = 500] = "MinBufferLengthPrune";
       Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit";
       // Once a stack reaches this depth (in .stack.length) force-reduce
       // it back to CutTo to avoid creating trees that overflow the stack
       // on recursive traversal.
       Rec[Rec["CutDepth"] = 15000] = "CutDepth";
       Rec[Rec["CutTo"] = 9000] = "CutTo";
   })(Rec || (Rec = {}));
   class Parse {
       constructor(parser, input, fragments, ranges) {
           this.parser = parser;
           this.input = input;
           this.ranges = ranges;
           this.recovering = 0;
           this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
           this.minStackPos = 0;
           this.reused = [];
           this.stoppedAt = null;
           this.stream = new InputStream(input, ranges);
           this.tokens = new TokenCache(parser, this.stream);
           this.topTerm = parser.top[1];
           let { from } = ranges[0];
           this.stacks = [Stack.start(this, parser.top[0], from)];
           this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
               ? new FragmentCursor(fragments, parser.nodeSet) : null;
       }
       get parsedPos() {
           return this.minStackPos;
       }
       // Move the parser forward. This will process all parse stacks at
       // `this.pos` and try to advance them to a further position. If no
       // stack for such a position is found, it'll start error-recovery.
       //
       // When the parse is finished, this will return a syntax tree. When
       // not, it returns `null`.
       advance() {
           let stacks = this.stacks, pos = this.minStackPos;
           // This will hold stacks beyond `pos`.
           let newStacks = this.stacks = [];
           let stopped, stoppedTokens;
           // Keep advancing any stacks at `pos` until they either move
           // forward or can't be advanced. Gather stacks that can't be
           // advanced further in `stopped`.
           for (let i = 0; i < stacks.length; i++) {
               let stack = stacks[i];
               for (;;) {
                   this.tokens.mainToken = null;
                   if (stack.pos > pos) {
                       newStacks.push(stack);
                   }
                   else if (this.advanceStack(stack, newStacks, stacks)) {
                       continue;
                   }
                   else {
                       if (!stopped) {
                           stopped = [];
                           stoppedTokens = [];
                       }
                       stopped.push(stack);
                       let tok = this.tokens.getMainToken(stack);
                       stoppedTokens.push(tok.value, tok.end);
                   }
                   break;
               }
           }
           if (!newStacks.length) {
               let finished = stopped && findFinished(stopped);
               if (finished)
                   return this.stackToTree(finished);
               if (this.parser.strict) {
                   if (verbose && stopped)
                       console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                   throw new SyntaxError("No parse at " + pos);
               }
               if (!this.recovering)
                   this.recovering = 5 /* Distance */;
           }
           if (this.recovering && stopped) {
               let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
                   : this.runRecovery(stopped, stoppedTokens, newStacks);
               if (finished)
                   return this.stackToTree(finished.forceAll());
           }
           if (this.recovering) {
               let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;
               if (newStacks.length > maxRemaining) {
                   newStacks.sort((a, b) => b.score - a.score);
                   while (newStacks.length > maxRemaining)
                       newStacks.pop();
               }
               if (newStacks.some(s => s.reducePos > pos))
                   this.recovering--;
           }
           else if (newStacks.length > 1) {
               // Prune stacks that are in the same state, or that have been
               // running without splitting for a while, to avoid getting stuck
               // with multiple successful stacks running endlessly on.
               outer: for (let i = 0; i < newStacks.length - 1; i++) {
                   let stack = newStacks[i];
                   for (let j = i + 1; j < newStacks.length; j++) {
                       let other = newStacks[j];
                       if (stack.sameState(other) ||
                           stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {
                           if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                               newStacks.splice(j--, 1);
                           }
                           else {
                               newStacks.splice(i--, 1);
                               continue outer;
                           }
                       }
                   }
               }
           }
           this.minStackPos = newStacks[0].pos;
           for (let i = 1; i < newStacks.length; i++)
               if (newStacks[i].pos < this.minStackPos)
                   this.minStackPos = newStacks[i].pos;
           return null;
       }
       stopAt(pos) {
           if (this.stoppedAt != null && this.stoppedAt < pos)
               throw new RangeError("Can't move stoppedAt forward");
           this.stoppedAt = pos;
       }
       // Returns an updated version of the given stack, or null if the
       // stack can't advance normally. When `split` and `stacks` are
       // given, stacks split off by ambiguous operations will be pushed to
       // `split`, or added to `stacks` if they move `pos` forward.
       advanceStack(stack, stacks, split) {
           let start = stack.pos, { parser } = this;
           let base = verbose ? this.stackID(stack) + " -> " : "";
           if (this.stoppedAt != null && start > this.stoppedAt)
               return stack.forceReduce() ? stack : null;
           if (this.fragments) {
               let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
               for (let cached = this.fragments.nodeAt(start); cached;) {
                   let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                   if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                       stack.useNode(cached, match);
                       if (verbose)
                           console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                       return true;
                   }
                   if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                       break;
                   let inner = cached.children[0];
                   if (inner instanceof Tree && cached.positions[0] == 0)
                       cached = inner;
                   else
                       break;
               }
           }
           let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);
           if (defaultReduce > 0) {
               stack.reduce(defaultReduce);
               if (verbose)
                   console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);
               return true;
           }
           if (stack.stack.length >= 15000 /* CutDepth */) {
               while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) { }
           }
           let actions = this.tokens.getActions(stack);
           for (let i = 0; i < actions.length;) {
               let action = actions[i++], term = actions[i++], end = actions[i++];
               let last = i == actions.length || !split;
               let localStack = last ? stack : stack.split();
               localStack.apply(action, term, end);
               if (verbose)
                   console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
               if (last)
                   return true;
               else if (localStack.pos > start)
                   stacks.push(localStack);
               else
                   split.push(localStack);
           }
           return false;
       }
       // Advance a given stack forward as far as it will go. Returns the
       // (possibly updated) stack if it got stuck, or null if it moved
       // forward and was given to `pushStackDedup`.
       advanceFully(stack, newStacks) {
           let pos = stack.pos;
           for (;;) {
               if (!this.advanceStack(stack, null, null))
                   return false;
               if (stack.pos > pos) {
                   pushStackDedup(stack, newStacks);
                   return true;
               }
           }
       }
       runRecovery(stacks, tokens, newStacks) {
           let finished = null, restarted = false;
           for (let i = 0; i < stacks.length; i++) {
               let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
               let base = verbose ? this.stackID(stack) + " -> " : "";
               if (stack.deadEnd) {
                   if (restarted)
                       continue;
                   restarted = true;
                   stack.restart();
                   if (verbose)
                       console.log(base + this.stackID(stack) + " (restarted)");
                   let done = this.advanceFully(stack, newStacks);
                   if (done)
                       continue;
               }
               let force = stack.split(), forceBase = base;
               for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {
                   if (verbose)
                       console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                   let done = this.advanceFully(force, newStacks);
                   if (done)
                       break;
                   if (verbose)
                       forceBase = this.stackID(force) + " -> ";
               }
               for (let insert of stack.recoverByInsert(token)) {
                   if (verbose)
                       console.log(base + this.stackID(insert) + " (via recover-insert)");
                   this.advanceFully(insert, newStacks);
               }
               if (this.stream.end > stack.pos) {
                   if (tokenEnd == stack.pos) {
                       tokenEnd++;
                       token = 0 /* Err */;
                   }
                   stack.recoverByDelete(token, tokenEnd);
                   if (verbose)
                       console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                   pushStackDedup(stack, newStacks);
               }
               else if (!finished || finished.score < stack.score) {
                   finished = stack;
               }
           }
           return finished;
       }
       // Convert the stack's buffer to a syntax tree.
       stackToTree(stack) {
           stack.close();
           return Tree.build({ buffer: StackBufferCursor.create(stack),
               nodeSet: this.parser.nodeSet,
               topID: this.topTerm,
               maxBufferLength: this.parser.bufferLength,
               reused: this.reused,
               start: this.ranges[0].from,
               length: stack.pos - this.ranges[0].from,
               minRepeatType: this.parser.minRepeatTerm });
       }
       stackID(stack) {
           let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
           if (!id)
               stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
           return id + stack;
       }
   }
   function pushStackDedup(stack, newStacks) {
       for (let i = 0; i < newStacks.length; i++) {
           let other = newStacks[i];
           if (other.pos == stack.pos && other.sameState(stack)) {
               if (newStacks[i].score < stack.score)
                   newStacks[i] = stack;
               return;
           }
       }
       newStacks.push(stack);
   }
   class Dialect {
       constructor(source, flags, disabled) {
           this.source = source;
           this.flags = flags;
           this.disabled = disabled;
       }
       allows(term) { return !this.disabled || this.disabled[term] == 0; }
   }
   const id = x => x;
   /// Context trackers are used to track stateful context (such as
   /// indentation in the Python grammar, or parent elements in the XML
   /// grammar) needed by external tokenizers. You declare them in a
   /// grammar file as `@context exportName from "module"`.
   ///
   /// Context values should be immutable, and can be updated (replaced)
   /// on shift or reduce actions.
   ///
   /// The export used in a `@context` declaration should be of this
   /// type.
   class ContextTracker {
       /// Define a context tracker.
       constructor(spec) {
           this.start = spec.start;
           this.shift = spec.shift || id;
           this.reduce = spec.reduce || id;
           this.reuse = spec.reuse || id;
           this.hash = spec.hash || (() => 0);
           this.strict = spec.strict !== false;
       }
   }
   /// Holds the parse tables for a given grammar, as generated by
   /// `lezer-generator`, and provides [methods](#common.Parser) to parse
   /// content with.
   class LRParser extends Parser$1 {
       /// @internal
       constructor(spec) {
           super();
           /// @internal
           this.wrappers = [];
           if (spec.version != 14 /* Version */)
               throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* Version */})`);
           let nodeNames = spec.nodeNames.split(" ");
           this.minRepeatTerm = nodeNames.length;
           for (let i = 0; i < spec.repeatNodeCount; i++)
               nodeNames.push("");
           let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
           let nodeProps = [];
           for (let i = 0; i < nodeNames.length; i++)
               nodeProps.push([]);
           function setProp(nodeID, prop, value) {
               nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
           }
           if (spec.nodeProps)
               for (let propSpec of spec.nodeProps) {
                   let prop = propSpec[0];
                   if (typeof prop == "string")
                       prop = NodeProp[prop];
                   for (let i = 1; i < propSpec.length;) {
                       let next = propSpec[i++];
                       if (next >= 0) {
                           setProp(next, prop, propSpec[i++]);
                       }
                       else {
                           let value = propSpec[i + -next];
                           for (let j = -next; j > 0; j--)
                               setProp(propSpec[i++], prop, value);
                           i++;
                       }
                   }
               }
           this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType$1.define({
               name: i >= this.minRepeatTerm ? undefined : name,
               id: i,
               props: nodeProps[i],
               top: topTerms.indexOf(i) > -1,
               error: i == 0,
               skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
           })));
           if (spec.propSources)
               this.nodeSet = this.nodeSet.extend(...spec.propSources);
           this.strict = false;
           this.bufferLength = DefaultBufferLength;
           let tokenArray = decodeArray(spec.tokenData);
           this.context = spec.context;
           this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);
           this.specializers = [];
           if (spec.specialized)
               for (let i = 0; i < spec.specialized.length; i++) {
                   this.specialized[i] = spec.specialized[i].term;
                   this.specializers[i] = spec.specialized[i].get;
               }
           this.states = decodeArray(spec.states, Uint32Array);
           this.data = decodeArray(spec.stateData);
           this.goto = decodeArray(spec.goto);
           this.maxTerm = spec.maxTerm;
           this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
           this.topRules = spec.topRules;
           this.dialects = spec.dialects || {};
           this.dynamicPrecedences = spec.dynamicPrecedences || null;
           this.tokenPrecTable = spec.tokenPrec;
           this.termNames = spec.termNames || null;
           this.maxNode = this.nodeSet.types.length - 1;
           this.dialect = this.parseDialect();
           this.top = this.topRules[Object.keys(this.topRules)[0]];
       }
       createParse(input, fragments, ranges) {
           let parse = new Parse(this, input, fragments, ranges);
           for (let w of this.wrappers)
               parse = w(parse, input, fragments, ranges);
           return parse;
       }
       /// Get a goto table entry @internal
       getGoto(state, term, loose = false) {
           let table = this.goto;
           if (term >= table[0])
               return -1;
           for (let pos = table[term + 1];;) {
               let groupTag = table[pos++], last = groupTag & 1;
               let target = table[pos++];
               if (last && loose)
                   return target;
               for (let end = pos + (groupTag >> 1); pos < end; pos++)
                   if (table[pos] == state)
                       return target;
               if (last)
                   return -1;
           }
       }
       /// Check if this state has an action for a given terminal @internal
       hasAction(state, terminal) {
           let data = this.data;
           for (let set = 0; set < 2; set++) {
               for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {
                   if ((next = data[i]) == 65535 /* End */) {
                       if (data[i + 1] == 1 /* Next */)
                           next = data[i = pair(data, i + 2)];
                       else if (data[i + 1] == 2 /* Other */)
                           return pair(data, i + 2);
                       else
                           break;
                   }
                   if (next == terminal || next == 0 /* Err */)
                       return pair(data, i + 1);
               }
           }
           return 0;
       }
       /// @internal
       stateSlot(state, slot) {
           return this.states[(state * 6 /* Size */) + slot];
       }
       /// @internal
       stateFlag(state, flag) {
           return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;
       }
       /// @internal
       validAction(state, action) {
           if (action == this.stateSlot(state, 4 /* DefaultReduce */))
               return true;
           for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
               if (this.data[i] == 65535 /* End */) {
                   if (this.data[i + 1] == 1 /* Next */)
                       i = pair(this.data, i + 2);
                   else
                       return false;
               }
               if (action == pair(this.data, i + 1))
                   return true;
           }
       }
       /// Get the states that can follow this one through shift actions or
       /// goto jumps. @internal
       nextStates(state) {
           let result = [];
           for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
               if (this.data[i] == 65535 /* End */) {
                   if (this.data[i + 1] == 1 /* Next */)
                       i = pair(this.data, i + 2);
                   else
                       break;
               }
               if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {
                   let value = this.data[i + 1];
                   if (!result.some((v, i) => (i & 1) && v == value))
                       result.push(this.data[i], value);
               }
           }
           return result;
       }
       /// @internal
       overrides(token, prev) {
           let iPrev = findOffset(this.data, this.tokenPrecTable, prev);
           return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
       }
       /// Configure the parser. Returns a new parser instance that has the
       /// given settings modified. Settings not provided in `config` are
       /// kept from the original parser.
       configure(config) {
           // Hideous reflection-based kludge to make it easy to create a
           // slightly modified copy of a parser.
           let copy = Object.assign(Object.create(LRParser.prototype), this);
           if (config.props)
               copy.nodeSet = this.nodeSet.extend(...config.props);
           if (config.top) {
               let info = this.topRules[config.top];
               if (!info)
                   throw new RangeError(`Invalid top rule name ${config.top}`);
               copy.top = info;
           }
           if (config.tokenizers)
               copy.tokenizers = this.tokenizers.map(t => {
                   let found = config.tokenizers.find(r => r.from == t);
                   return found ? found.to : t;
               });
           if (config.contextTracker)
               copy.context = config.contextTracker;
           if (config.dialect)
               copy.dialect = this.parseDialect(config.dialect);
           if (config.strict != null)
               copy.strict = config.strict;
           if (config.wrap)
               copy.wrappers = copy.wrappers.concat(config.wrap);
           if (config.bufferLength != null)
               copy.bufferLength = config.bufferLength;
           return copy;
       }
       /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
       /// are registered for this parser.
       hasWrappers() {
           return this.wrappers.length > 0;
       }
       /// Returns the name associated with a given term. This will only
       /// work for all terms when the parser was generated with the
       /// `--names` option. By default, only the names of tagged terms are
       /// stored.
       getName(term) {
           return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
       }
       /// The eof term id is always allocated directly after the node
       /// types. @internal
       get eofTerm() { return this.maxNode + 1; }
       /// The type of top node produced by the parser.
       get topNode() { return this.nodeSet.types[this.top[1]]; }
       /// @internal
       dynamicPrecedence(term) {
           let prec = this.dynamicPrecedences;
           return prec == null ? 0 : prec[term] || 0;
       }
       /// @internal
       parseDialect(dialect) {
           let values = Object.keys(this.dialects), flags = values.map(() => false);
           if (dialect)
               for (let part of dialect.split(" ")) {
                   let id = values.indexOf(part);
                   if (id >= 0)
                       flags[id] = true;
               }
           let disabled = null;
           for (let i = 0; i < values.length; i++)
               if (!flags[i]) {
                   for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)
                       (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
               }
           return new Dialect(dialect, flags, disabled);
       }
       /// (used by the output of the parser generator) @internal
       static deserialize(spec) {
           return new LRParser(spec);
       }
   }
   function pair(data, off) { return data[off] | (data[off + 1] << 16); }
   function findOffset(data, start, term) {
       for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)
           if (next == term)
               return i - start;
       return -1;
   }
   function findFinished(stacks) {
       let best = null;
       for (let stack of stacks) {
           let stopped = stack.p.stoppedAt;
           if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
               stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&
               (!best || best.score < stack.score))
               best = stack;
       }
       return best;
   }

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const scriptText = 53,
     StartCloseScriptTag = 1,
     styleText = 54,
     StartCloseStyleTag = 2,
     textareaText = 55,
     StartCloseTextareaTag = 3,
     StartTag = 4,
     StartScriptTag = 5,
     StartStyleTag = 6,
     StartTextareaTag = 7,
     StartSelfClosingTag = 8,
     StartCloseTag = 9,
     NoMatchStartCloseTag = 10,
     MismatchedStartCloseTag = 11,
     missingCloseTag = 56,
     IncompleteCloseTag = 12,
     commentContent$1 = 57,
     Element = 18,
     ScriptText = 27,
     StyleText = 30,
     TextareaText = 33,
     OpenTag = 35,
     Dialect_noMatch = 0;

   /* Hand-written tokenizers for HTML. */

   const selfClosers = {
     area: true, base: true, br: true, col: true, command: true,
     embed: true, frame: true, hr: true, img: true, input: true,
     keygen: true, link: true, meta: true, param: true, source: true,
     track: true, wbr: true, menuitem: true
   };

   const implicitlyClosed = {
     dd: true, li: true, optgroup: true, option: true, p: true,
     rp: true, rt: true, tbody: true, td: true, tfoot: true,
     th: true, tr: true
   };

   const closeOnOpen = {
     dd: {dd: true, dt: true},
     dt: {dd: true, dt: true},
     li: {li: true},
     option: {option: true, optgroup: true},
     optgroup: {optgroup: true},
     p: {
       address: true, article: true, aside: true, blockquote: true, dir: true,
       div: true, dl: true, fieldset: true, footer: true, form: true,
       h1: true, h2: true, h3: true, h4: true, h5: true, h6: true,
       header: true, hgroup: true, hr: true, menu: true, nav: true, ol: true,
       p: true, pre: true, section: true, table: true, ul: true
     },
     rp: {rp: true, rt: true},
     rt: {rp: true, rt: true},
     tbody: {tbody: true, tfoot: true},
     td: {td: true, th: true},
     tfoot: {tbody: true},
     th: {td: true, th: true},
     thead: {tbody: true, tfoot: true},
     tr: {tr: true}
   };

   function nameChar(ch) {
     return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161
   }

   function isSpace(ch) {
     return ch == 9 || ch == 10 || ch == 13 || ch == 32
   }

   let cachedName = null, cachedInput = null, cachedPos = 0;
   function tagNameAfter(input, offset) {
     let pos = input.pos + offset;
     if (cachedPos == pos && cachedInput == input) return cachedName
     let next = input.peek(offset);
     while (isSpace(next)) next = input.peek(++offset);
     let name = "";
     for (;;) {
       if (!nameChar(next)) break
       name += String.fromCharCode(next);
       next = input.peek(++offset);
     }
     // Undefined to signal there's a <? or <!, null for just missing
     cachedInput = input; cachedPos = pos;
     return cachedName = name ? name.toLowerCase() : next == question || next == bang ? undefined : null
   }

   const lessThan = 60, greaterThan = 62, slash$1 = 47, question = 63, bang = 33, dash$2 = 45;

   function ElementContext(name, parent) {
     this.name = name;
     this.parent = parent;
     this.hash = parent ? parent.hash : 0;
     for (let i = 0; i < name.length; i++) this.hash += (this.hash << 4) + name.charCodeAt(i) + (name.charCodeAt(i) << 8);
   }

   const startTagTerms = [StartTag, StartSelfClosingTag, StartScriptTag, StartStyleTag, StartTextareaTag];

   const elementContext = new ContextTracker({
     start: null,
     shift(context, term, stack, input) {
       return startTagTerms.indexOf(term) > -1 ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
     },
     reduce(context, term) {
       return term == Element && context ? context.parent : context
     },
     reuse(context, node, stack, input) {
       let type = node.type.id;
       return type == StartTag || type == OpenTag
         ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
     },
     hash(context) { return context ? context.hash : 0 },
     strict: false
   });

   const tagStart = new ExternalTokenizer((input, stack) => {
     if (input.next != lessThan) {
       // End of file, close any open tags
       if (input.next < 0 && stack.context) input.acceptToken(missingCloseTag);
       return
     }
     input.advance();
     let close = input.next == slash$1;
     if (close) input.advance();
     let name = tagNameAfter(input, 0);
     if (name === undefined) return
     if (!name) return input.acceptToken(close ? IncompleteCloseTag : StartTag)

     let parent = stack.context ? stack.context.name : null;
     if (close) {
       if (name == parent) return input.acceptToken(StartCloseTag)
       if (parent && implicitlyClosed[parent]) return input.acceptToken(missingCloseTag, -2)
       if (stack.dialectEnabled(Dialect_noMatch)) return input.acceptToken(NoMatchStartCloseTag)
       for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return
       input.acceptToken(MismatchedStartCloseTag);
     } else {
       if (name == "script") return input.acceptToken(StartScriptTag)
       if (name == "style") return input.acceptToken(StartStyleTag)
       if (name == "textarea") return input.acceptToken(StartTextareaTag)
       if (selfClosers.hasOwnProperty(name)) return input.acceptToken(StartSelfClosingTag)
       if (parent && closeOnOpen[parent] && closeOnOpen[parent][name]) input.acceptToken(missingCloseTag, -1);
       else input.acceptToken(StartTag);
     }
   }, {contextual: true});

   const commentContent = new ExternalTokenizer(input => {
     for (let dashes = 0, i = 0;; i++) {
       if (input.next < 0) {
         if (i) input.acceptToken(commentContent$1);
         break
       }
       if (input.next == dash$2) {
         dashes++;
       } else if (input.next == greaterThan && dashes >= 2) {
         if (i > 3) input.acceptToken(commentContent$1, -2);
         break
       } else {
         dashes = 0;
       }
       input.advance();
     }
   });

   function contentTokenizer(tag, textToken, endToken) {
     let lastState = 2 + tag.length;
     return new ExternalTokenizer(input => {
       // state means:
       // - 0 nothing matched
       // - 1 '<' matched
       // - 2 '</' + possibly whitespace matched
       // - 3-(1+tag.length) part of the tag matched
       // - lastState whole tag + possibly whitespace matched
       for (let state = 0, matchedLen = 0, i = 0;; i++) {
         if (input.next < 0) {
           if (i) input.acceptToken(textToken);
           break
         }
         if (state == 0 && input.next == lessThan ||
             state == 1 && input.next == slash$1 ||
             state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {
           state++;
           matchedLen++;
         } else if ((state == 2 || state == lastState) && isSpace(input.next)) {
           matchedLen++;
         } else if (state == lastState && input.next == greaterThan) {
           if (i > matchedLen)
             input.acceptToken(textToken, -matchedLen);
           else
             input.acceptToken(endToken, -(matchedLen - 2));
           break
         } else if ((input.next == 10 /* '\n' */ || input.next == 13 /* '\r' */) && i) {
           input.acceptToken(textToken, 1);
           break
         } else {
           state = matchedLen = 0;
         }
         input.advance();
       }
     })
   }

   const scriptTokens = contentTokenizer("script", scriptText, StartCloseScriptTag);

   const styleTokens = contentTokenizer("style", styleText, StartCloseStyleTag);

   const textareaTokens = contentTokenizer("textarea", textareaText, StartCloseTextareaTag);

   const htmlHighlighting = styleTags({
     "Text RawText": tags$1.content,
     "StartTag StartCloseTag SelfCloserEndTag EndTag SelfCloseEndTag": tags$1.angleBracket,
     TagName: tags$1.tagName,
     "MismatchedCloseTag/TagName": [tags$1.tagName,  tags$1.invalid],
     AttributeName: tags$1.attributeName,
     "AttributeValue UnquotedAttributeValue": tags$1.attributeValue,
     Is: tags$1.definitionOperator,
     "EntityReference CharacterReference": tags$1.character,
     Comment: tags$1.blockComment,
     ProcessingInst: tags$1.processingInstruction,
     DoctypeDecl: tags$1.documentMeta
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const parser$2 = LRParser.deserialize({
     version: 14,
     states: ",xOVOxOOO!WQ!bO'#CoO!]Q!bO'#CyO!bQ!bO'#C|O!gQ!bO'#DPO!lQ!bO'#DRO!qOXO'#CnO!|OYO'#CnO#XO[O'#CnO$eOxO'#CnOOOW'#Cn'#CnO$lO!rO'#DSO$tQ!bO'#DUO$yQ!bO'#DVOOOW'#Dj'#DjOOOW'#DX'#DXQVOxOOO%OQ#tO,59ZO%WQ#tO,59eO%`Q#tO,59hO%hQ#tO,59kO%pQ#tO,59mOOOX'#D]'#D]O%xOXO'#CwO&TOXO,59YOOOY'#D^'#D^O&]OYO'#CzO&hOYO,59YOOO['#D_'#D_O&pO[O'#C}O&{O[O,59YOOOW'#D`'#D`O'TOxO,59YO'[Q!bO'#DQOOOW,59Y,59YOOO`'#Da'#DaO'aO!rO,59nOOOW,59n,59nO'iQ!bO,59pO'nQ!bO,59qOOOW-E7V-E7VO'sQ#tO'#CqOOQO'#DY'#DYO(OQ#tO1G.uOOOX1G.u1G.uO(WQ#tO1G/POOOY1G/P1G/PO(`Q#tO1G/SOOO[1G/S1G/SO(hQ#tO1G/VOOOW1G/V1G/VO(pQ#tO1G/XOOOW1G/X1G/XOOOX-E7Z-E7ZO(xQ!bO'#CxOOOW1G.t1G.tOOOY-E7[-E7[O(}Q!bO'#C{OOO[-E7]-E7]O)SQ!bO'#DOOOOW-E7^-E7^O)XQ!bO,59lOOO`-E7_-E7_OOOW1G/Y1G/YOOOW1G/[1G/[OOOW1G/]1G/]O)^Q&jO,59]OOQO-E7W-E7WOOOX7+$a7+$aOOOY7+$k7+$kOOO[7+$n7+$nOOOW7+$q7+$qOOOW7+$s7+$sO)iQ!bO,59dO)nQ!bO,59gO)sQ!bO,59jOOOW1G/W1G/WO)xO,UO'#CtO*WO7[O'#CtOOQO1G.w1G.wOOOW1G/O1G/OOOOW1G/R1G/ROOOW1G/U1G/UOOOO'#DZ'#DZO*fO,UO,59`OOQO,59`,59`OOOO'#D['#D[O*tO7[O,59`OOOO-E7X-E7XOOQO1G.z1G.zOOOO-E7Y-E7Y",
     stateData: "+[~O!]OS~OSSOTPOUQOVROWTOY]OZ[O[^O^^O_^O`^Oa^Ow^Oz_O!cZO~OdaO~OdbO~OdcO~OddO~OdeO~O!VfOPkP!YkP~O!WiOQnP!YnP~O!XlORqP!YqP~OSSOTPOUQOVROWTOXqOY]OZ[O[^O^^O_^O`^Oa^Ow^O!cZO~O!YrO~P#dO!ZsO!duO~OdvO~OdwO~OfyOj|O~OfyOj!OO~OfyOj!QO~OfyOj!SO~OfyOj!UO~O!VfOPkX!YkX~OP!WO!Y!XO~O!WiOQnX!YnX~OQ!ZO!Y!XO~O!XlORqX!YqX~OR!]O!Y!XO~O!Y!XO~P#dOd!_O~O!ZsO!d!aO~Oj!bO~Oj!cO~Og!dOfeXjeX~OfyOj!fO~OfyOj!gO~OfyOj!hO~OfyOj!iO~OfyOj!jO~Od!kO~Od!lO~Od!mO~Oj!nO~Oi!qO!_!oO!a!pO~Oj!rO~Oj!sO~Oj!tO~O_!uO`!uO!_!wO!`!uO~O_!xO`!xO!a!wO!b!xO~O_!uO`!uO!_!{O!`!uO~O_!xO`!xO!a!{O!b!xO~O`_a!cwz!c~",
     goto: "%o!_PPPPPPPPPPPPPPPPPP!`!fP!lPP!xPP!{#O#R#X#[#_#e#h#k#q#w!`P!`!`P#}$T$k$q$w$}%T%Z%aPPPPPPPP%gX^OX`pXUOX`pezabcde{}!P!R!TR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ}bQ!PcQ!RdQ!TeZ!e{}!P!R!TQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
     nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue EndTag ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
     maxTerm: 66,
     context: elementContext,
     nodeProps: [
       ["closedBy", -11,1,2,3,4,5,6,7,8,9,10,11,"EndTag",-4,19,29,32,35,"CloseTag"],
       ["group", -9,12,15,16,17,18,38,39,40,41,"Entity",14,"Entity TextContent",-3,27,30,33,"TextContent Entity"],
       ["openedBy", 26,"StartTag StartCloseTag",-4,28,31,34,36,"OpenTag"]
     ],
     propSources: [htmlHighlighting],
     skippedNodes: [0],
     repeatNodeCount: 9,
     tokenData: "!#b!aR!WOX$kXY)sYZ)sZ]$k]^)s^p$kpq)sqr$krs*zsv$kvw+dwx2yx}$k}!O3f!O!P$k!P!Q7_!Q![$k![!]8u!]!^$k!^!_>b!_!`!!p!`!a8T!a!c$k!c!}8u!}#R$k#R#S8u#S#T$k#T#o8u#o$f$k$f$g&R$g%W$k%W%o8u%o%p$k%p&a8u&a&b$k&b1p8u1p4U$k4U4d8u4d4e$k4e$IS8u$IS$I`$k$I`$Ib8u$Ib$Kh$k$Kh%#t8u%#t&/x$k&/x&Et8u&Et&FV$k&FV;'S8u;'S;:j<t;:j?&r$k?&r?Ah8u?Ah?BY$k?BY?Mn8u?Mn~$k!Z$vc^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx!P$k!P!Q&R!Q!^$k!^!_(k!_!a&R!a$f$k$f$g&R$g~$k!R&[V^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&Rq&xT^P!bpOv&qwx'Xx!^&q!^!_'g!_~&qP'^R^POv'Xw!^'X!_~'Xp'lQ!bpOv'gx~'ga'yU^P!``Or'rrs'Xsv'rw!^'r!^!_(]!_~'r`(bR!``Or(]sv(]w~(]!Q(rT!``!bpOr(krs'gsv(kwx(]x~(kW)WXiWOX)RZ])R^p)Rqr)Rsw)Rx!P)R!Q!^)R!a$f)R$g~)R!a*O^^P!``!bp!]^OX&RXY)sYZ)sZ]&R]^)s^p&Rpq)sqr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R!Z+TT!_h^P!bpOv&qwx'Xx!^&q!^!_'g!_~&q!Z+kbiWaPOX,sXZ.QZ],s]^.Q^p,sqr,srs.Qst/]tw,swx.Qx!P,s!P!Q.Q!Q!],s!]!^)R!^!a.Q!a$f,s$f$g.Q$g~,s!Z,xbiWOX,sXZ.QZ],s]^.Q^p,sqr,srs.Qst)Rtw,swx.Qx!P,s!P!Q.Q!Q!],s!]!^.i!^!a.Q!a$f,s$f$g.Q$g~,s!R.TTOp.Qqs.Qt!].Q!]!^.d!^~.Q!R.iO_!R!Z.pXiW_!ROX)RZ])R^p)Rqr)Rsw)Rx!P)R!Q!^)R!a$f)R$g~)R!Z/baiWOX0gXZ1qZ]0g]^1q^p0gqr0grs1qsw0gwx1qx!P0g!P!Q1q!Q!]0g!]!^)R!^!a1q!a$f0g$f$g1q$g~0g!Z0laiWOX0gXZ1qZ]0g]^1q^p0gqr0grs1qsw0gwx1qx!P0g!P!Q1q!Q!]0g!]!^2V!^!a1q!a$f0g$f$g1q$g~0g!R1tSOp1qq!]1q!]!^2Q!^~1q!R2VO`!R!Z2^XiW`!ROX)RZ])R^p)Rqr)Rsw)Rx!P)R!Q!^)R!a$f)R$g~)R!Z3SU!ax^P!``Or'rrs'Xsv'rw!^'r!^!_(]!_~'r!]3qe^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx}$k}!O5S!O!P$k!P!Q&R!Q!^$k!^!_(k!_!a&R!a$f$k$f$g&R$g~$k!]5_d^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx!P$k!P!Q&R!Q!^$k!^!_(k!_!`&R!`!a6m!a$f$k$f$g&R$g~$k!T6xV^P!``!bp!dQOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R!X7hX^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_!`&R!`!a8T!a~&R!X8`VjU^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R!a9U!YfSdQ^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx}$k}!O8u!O!P8u!P!Q&R!Q![8u![!]8u!]!^$k!^!_(k!_!a&R!a!c$k!c!}8u!}#R$k#R#S8u#S#T$k#T#o8u#o$f$k$f$g&R$g$}$k$}%O8u%O%W$k%W%o8u%o%p$k%p&a8u&a&b$k&b1p8u1p4U8u4U4d8u4d4e$k4e$IS8u$IS$I`$k$I`$Ib8u$Ib$Je$k$Je$Jg8u$Jg$Kh$k$Kh%#t8u%#t&/x$k&/x&Et8u&Et&FV$k&FV;'S8u;'S;:j<t;:j?&r$k?&r?Ah8u?Ah?BY$k?BY?Mn8u?Mn~$k!a=Pe^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx!P$k!P!Q&R!Q!^$k!^!_(k!_!a&R!a$f$k$f$g&R$g;=`$k;=`<%l8u<%l~$k!R>iW!``!bpOq(kqr?Rrs'gsv(kwx(]x!a(k!a!bKj!b~(k!R?YZ!``!bpOr(krs'gsv(kwx(]x}(k}!O?{!O!f(k!f!gAR!g#W(k#W#XGz#X~(k!R@SV!``!bpOr(krs'gsv(kwx(]x}(k}!O@i!O~(k!R@rT!``!bp!cPOr(krs'gsv(kwx(]x~(k!RAYV!``!bpOr(krs'gsv(kwx(]x!q(k!q!rAo!r~(k!RAvV!``!bpOr(krs'gsv(kwx(]x!e(k!e!fB]!f~(k!RBdV!``!bpOr(krs'gsv(kwx(]x!v(k!v!wBy!w~(k!RCQV!``!bpOr(krs'gsv(kwx(]x!{(k!{!|Cg!|~(k!RCnV!``!bpOr(krs'gsv(kwx(]x!r(k!r!sDT!s~(k!RD[V!``!bpOr(krs'gsv(kwx(]x!g(k!g!hDq!h~(k!RDxW!``!bpOrDqrsEbsvDqvwEvwxFfx!`Dq!`!aGb!a~DqqEgT!bpOvEbvxEvx!`Eb!`!aFX!a~EbPEyRO!`Ev!`!aFS!a~EvPFXOzPqF`Q!bpzPOv'gx~'gaFkV!``OrFfrsEvsvFfvwEvw!`Ff!`!aGQ!a~FfaGXR!``zPOr(]sv(]w~(]!RGkT!``!bpzPOr(krs'gsv(kwx(]x~(k!RHRV!``!bpOr(krs'gsv(kwx(]x#c(k#c#dHh#d~(k!RHoV!``!bpOr(krs'gsv(kwx(]x#V(k#V#WIU#W~(k!RI]V!``!bpOr(krs'gsv(kwx(]x#h(k#h#iIr#i~(k!RIyV!``!bpOr(krs'gsv(kwx(]x#m(k#m#nJ`#n~(k!RJgV!``!bpOr(krs'gsv(kwx(]x#d(k#d#eJ|#e~(k!RKTV!``!bpOr(krs'gsv(kwx(]x#X(k#X#YDq#Y~(k!RKqW!``!bpOrKjrsLZsvKjvwLowxNPx!aKj!a!b! g!b~KjqL`T!bpOvLZvxLox!aLZ!a!bM^!b~LZPLrRO!aLo!a!bL{!b~LoPMORO!`Lo!`!aMX!a~LoPM^OwPqMcT!bpOvLZvxLox!`LZ!`!aMr!a~LZqMyQ!bpwPOv'gx~'gaNUV!``OrNPrsLosvNPvwLow!aNP!a!bNk!b~NPaNpV!``OrNPrsLosvNPvwLow!`NP!`!a! V!a~NPa! ^R!``wPOr(]sv(]w~(]!R! nW!``!bpOrKjrsLZsvKjvwLowxNPx!`Kj!`!a!!W!a~Kj!R!!aT!``!bpwPOr(krs'gsv(kwx(]x~(k!V!!{VgS^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R",
     tokenizers: [scriptTokens, styleTokens, textareaTokens, tagStart, commentContent, 0, 1, 2, 3, 4, 5],
     topRules: {"Document":[0,13]},
     dialects: {noMatch: 0},
     tokenPrec: 464
   });

   function getAttrs(element, input) {
     let attrs = Object.create(null);
     for (let att of element.firstChild.getChildren("Attribute")) {
       let name = att.getChild("AttributeName"), value = att.getChild("AttributeValue") || att.getChild("UnquotedAttributeValue");
       if (name) attrs[input.read(name.from, name.to)] =
         !value ? "" : value.name == "AttributeValue" ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
     }
     return attrs
   }

   function maybeNest(node, input, tags) {
     let attrs;
     for (let tag of tags) {
       if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(node.node.parent, input))))
         return {parser: tag.parser}
     }
     return null
   }

   // tags: {
   //   tag: "script" | "style" | "textarea",
   //   attrs?: ({[attr: string]: string}) => boolean,
   //   parser: Parser
   // }[]
    
   function configureNesting(tags) {
     let script = [], style = [], textarea = [];
     for (let tag of tags) {
       let array = tag.tag == "script" ? script : tag.tag == "style" ? style : tag.tag == "textarea" ? textarea : null;
       if (!array) throw new RangeError("Only script, style, and textarea tags can host nested parsers")
       array.push(tag);
     }
     return parseMixed((node, input) => {
       let id = node.type.id;
       if (id == ScriptText) return maybeNest(node, input, script)
       if (id == StyleText) return maybeNest(node, input, style)
       if (id == TextareaText) return maybeNest(node, input, textarea)
       return null
     })
   }

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const descendantOp = 93,
     Unit = 1,
     callee = 94,
     identifier$2 = 95,
     VariableName = 2;

   /* Hand-written tokenizers for CSS tokens that can't be
      expressed by Lezer's built-in tokenizer. */

   const space$1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
                  8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
   const colon = 58, parenL = 40, underscore = 95, bracketL = 91, dash$1 = 45, period = 46,
         hash = 35, percent = 37;

   function isAlpha(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }

   function isDigit(ch) { return ch >= 48 && ch <= 57 }

   const identifiers = new ExternalTokenizer((input, stack) => {
     for (let inside = false, dashes = 0, i = 0;; i++) {
       let {next} = input;
       if (isAlpha(next) || next == dash$1 || next == underscore || (inside && isDigit(next))) {
         if (!inside && (next != dash$1 || i > 0)) inside = true;
         if (dashes === i && next == dash$1) dashes++;
         input.advance();
       } else {
         if (inside)
           input.acceptToken(next == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier$2);
         break
       }
     }
   });

   const descendant = new ExternalTokenizer(input => {
     if (space$1.includes(input.peek(-1))) {
       let {next} = input;
       if (isAlpha(next) || next == underscore || next == hash || next == period ||
           next == bracketL || next == colon || next == dash$1)
         input.acceptToken(descendantOp);
     }
   });

   const unitToken = new ExternalTokenizer(input => {
     if (!space$1.includes(input.peek(-1))) {
       let {next} = input;
       if (next == percent) { input.advance(); input.acceptToken(Unit); }
       if (isAlpha(next)) {
         do { input.advance(); } while (isAlpha(input.next))
         input.acceptToken(Unit);
       }
     }
   });

   const cssHighlighting = styleTags({
     "import charset namespace keyframes": tags$1.definitionKeyword,
     "media supports": tags$1.controlKeyword,
     "from to selector": tags$1.keyword,
     NamespaceName: tags$1.namespace,
     KeyframeName: tags$1.labelName,
     TagName: tags$1.tagName,
     ClassName: tags$1.className,
     PseudoClassName: tags$1.constant(tags$1.className),
     IdName: tags$1.labelName,
     "FeatureName PropertyName": tags$1.propertyName,
     AttributeName: tags$1.attributeName,
     NumberLiteral: tags$1.number,
     KeywordQuery: tags$1.keyword,
     UnaryQueryOp: tags$1.operatorKeyword,
     "CallTag ValueName": tags$1.atom,
     VariableName: tags$1.variableName,
     Callee: tags$1.operatorKeyword,
     Unit: tags$1.unit,
     "UniversalSelector NestingSelector": tags$1.definitionOperator,
     AtKeyword: tags$1.keyword,
     MatchOp: tags$1.compareOperator,
     "ChildOp SiblingOp, LogicOp": tags$1.logicOperator,
     BinOp: tags$1.arithmeticOperator,
     Important: tags$1.modifier,
     Comment: tags$1.blockComment,
     ParenthesizedContent: tags$1.special(tags$1.name),
     ColorLiteral: tags$1.color,
     StringLiteral: tags$1.string,
     ":": tags$1.punctuation,
     "PseudoOp #": tags$1.derefOperator,
     "; ,": tags$1.separator,
     "( )": tags$1.paren,
     "[ ]": tags$1.squareBracket,
     "{ }": tags$1.brace
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const spec_callee = {__proto__:null,lang:32, "nth-child":32, "nth-last-child":32, "nth-of-type":32, dir:32, url:60, "url-prefix":60, domain:60, regexp:60, selector:134};
   const spec_AtKeyword = {__proto__:null,"@import":114, "@media":138, "@charset":142, "@namespace":146, "@keyframes":152, "@supports":164};
   const spec_identifier$1 = {__proto__:null,not:128, only:128, from:158, to:160};
   const parser$1 = LRParser.deserialize({
     version: 14,
     states: "7WOYQ[OOOOQP'#Cd'#CdOOQP'#Cc'#CcO!ZQ[O'#CfO!}QXO'#CaO#UQ[O'#ChO#aQ[O'#DPO#fQ[O'#DTOOQP'#Ec'#EcO#kQdO'#DeO$VQ[O'#DrO#kQdO'#DtO$hQ[O'#DvO$sQ[O'#DyO$xQ[O'#EPO%WQ[O'#EROOQS'#Eb'#EbOOQS'#ES'#ESQYQ[OOOOQP'#Cg'#CgOOQP,59Q,59QO!ZQ[O,59QO%_Q[O'#EVO%yQWO,58{O&RQ[O,59SO#aQ[O,59kO#fQ[O,59oO%_Q[O,59sO%_Q[O,59uO%_Q[O,59vO'bQ[O'#D`OOQS,58{,58{OOQP'#Ck'#CkOOQO'#C}'#C}OOQP,59S,59SO'iQWO,59SO'nQWO,59SOOQP'#DR'#DROOQP,59k,59kOOQO'#DV'#DVO'sQ`O,59oOOQS'#Cp'#CpO#kQdO'#CqO'{QvO'#CsO)VQtO,5:POOQO'#Cx'#CxO'iQWO'#CwO)kQWO'#CyOOQS'#Ef'#EfOOQO'#Dh'#DhO)pQ[O'#DoO*OQWO'#EiO$xQ[O'#DmO*^QWO'#DpOOQO'#Ej'#EjO%|QWO,5:^O*cQpO,5:`OOQS'#Dx'#DxO*kQWO,5:bO*pQ[O,5:bOOQO'#D{'#D{O*xQWO,5:eO*}QWO,5:kO+VQWO,5:mOOQS-E8Q-E8QOOQP1G.l1G.lO+yQXO,5:qOOQO-E8T-E8TOOQS1G.g1G.gOOQP1G.n1G.nO'iQWO1G.nO'nQWO1G.nOOQP1G/V1G/VO,WQ`O1G/ZO,qQXO1G/_O-XQXO1G/aO-oQXO1G/bO.VQXO'#CdO.zQWO'#DaOOQS,59z,59zO/PQWO,59zO/XQ[O,59zO/`QdO'#CoO/gQ[O'#DOOOQP1G/Z1G/ZO#kQdO1G/ZO/nQpO,59]OOQS,59_,59_O#kQdO,59aO/vQWO1G/kOOQS,59c,59cO/{Q!bO,59eO0TQWO'#DhO0`QWO,5:TO0eQWO,5:ZO$xQ[O,5:VO$xQ[O'#EYO0mQWO,5;TO0xQWO,5:XO%_Q[O,5:[OOQS1G/x1G/xOOQS1G/z1G/zOOQS1G/|1G/|O1ZQWO1G/|O1`QdO'#D|OOQS1G0P1G0POOQS1G0V1G0VOOQS1G0X1G0XOOQP7+$Y7+$YOOQP7+$u7+$uO#kQdO7+$uO#kQdO,59{O1nQ[O'#EXO1xQWO1G/fOOQS1G/f1G/fO1xQWO1G/fO2QQtO'#ETO2uQdO'#EeO3PQWO,59ZO3UQXO'#EhO3]QWO,59jO3bQpO7+$uOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%V7+%VO3jQWO1G/PO#kQdO1G/oOOQO1G/u1G/uOOQO1G/q1G/qO3oQWO,5:tOOQO-E8W-E8WO3}QXO1G/vOOQS7+%h7+%hO4UQYO'#CsO%|QWO'#EZO4^QdO,5:hOOQS,5:h,5:hO4lQpO<<HaO4tQtO1G/gOOQO,5:s,5:sO5XQ[O,5:sOOQO-E8V-E8VOOQS7+%Q7+%QO5cQWO7+%QOOQS-E8R-E8RO#kQdO'#EUO5kQWO,5;POOQT1G.u1G.uO5sQWO,5;SOOQP1G/U1G/UOOQP<<Ha<<HaOOQS7+$k7+$kO5{QdO7+%ZOOQO7+%b7+%bOOQS,5:u,5:uOOQS-E8X-E8XOOQS1G0S1G0SOOQPAN={AN={O6SQtO'#EWO#kQdO'#EWO6}QdO7+%ROOQO7+%R7+%ROOQO1G0_1G0_OOQS<<Hl<<HlO7_QdO,5:pOOQO-E8S-E8SOOQO<<Hu<<HuO7iQtO,5:rOOQS-E8U-E8UOOQO<<Hm<<Hm",
     stateData: "8j~O#TOSROS~OUWOXWO]TO^TOtUOxVO!Y_O!ZXO!gYO!iZO!k[O!n]O!t^O#RPO#WRO~O#RcO~O]hO^hOpfOtiOxjO|kO!PmO#PlO#WeO~O!RnO~P!`O`sO#QqO#RpO~O#RuO~O#RwO~OQ!QObzOf!QOh!QOn!PO#Q}O#RyO#Z{O~Ob!SO!b!UO!e!VO#R!RO!R#]P~Oh![On!PO#R!ZO~O#R!^O~Ob!SO!b!UO!e!VO#R!RO~O!W#]P~P$VOUWOXWO]TO^TOtUOxVO#RPO#WRO~OpfO!RnO~O`!hO#QqO#RpO~OQ!pOUWOXWO]TO^TOtUOxVO!Y_O!ZXO!gYO!iZO!k[O!n]O!t^O#R!oO#WRO~O!Q!qO~P&^Ob!tO~Ob!uO~Ov!vOz!wO~OP!yObgXjgX!WgX!bgX!egX#RgXagXQgXfgXhgXngXpgX#QgX#ZgXvgX!QgX!VgX~Ob!SOj!zO!b!UO!e!VO#R!RO!W#]P~Ob!}O~Ob!SO!b!UO!e!VO#R#OO~Op#SO!`#RO!R#]X!W#]X~Ob#VO~Oj!zO!W#XO~O!W#YO~Oh#ZOn!PO~O!R#[O~O!RnO!`#RO~O!RnO!W#_O~O]hO^hOtiOxjO|kO!PmO#PlO#WeO~Op!ya!R!yaa!ya~P+_Ov#aOz#bO~O]hO^hOtiOxjO#WeO~Op{i|{i!P{i!R{i#P{ia{i~P,`Op}i|}i!P}i!R}i#P}ia}i~P,`Op!Oi|!Oi!P!Oi!R!Oi#P!Oia!Oi~P,`O]WX]!UX^WXpWXtWXxWX|WX!PWX!RWX#PWX#WWX~O]#cO~O!Q#fO!W#dO~O!Q#fO~P&^Oa#XP~P#kOa#[P~P%_Oa#nOj!zO~O!W#pO~Oh#qOo#qO~O]!^Xa![X!`![X~O]#rO~Oa#sO!`#RO~Op#SO!R#]a!W#]a~O!`#ROp!aa!R!aa!W!aaa!aa~O!W#xO~O!Q#|O!q#zO!r#zO#Z#yO~O!Q!{X!W!{X~P&^O!Q$SO!W#dO~Oj!zOQ!wXa!wXb!wXf!wXh!wXn!wXp!wX#Q!wX#R!wX#Z!wX~Op$VOa#XX~P#kOa$XO~Oa#[X~P!`Oa$ZO~Oj!zOv$[O~Oa$]O~O!`#ROp!|a!R!|a!W!|a~Oa$_O~P+_OP!yO!RgX~O!Q$bO!q#zO!r#zO#Z#yO~Oj!zOv$cO~Oj!zOp$eO!V$gO!Q!Ti!W!Ti~P#kO!Q!{a!W!{a~P&^O!Q$iO!W#dO~Op$VOa#Xa~OpfOa#[a~Oa$lO~P#kOj!zOQ!zXb!zXf!zXh!zXn!zXp!zX!Q!zX!V!zX!W!zX#Q!zX#R!zX#Z!zX~Op$eO!V$oO!Q!Tq!W!Tq~P#kOa!xap!xa~P#kOj!zOQ!zab!zaf!zah!zan!zap!za!Q!za!V!za!W!za#Q!za#R!za#Z!za~Oo#Zj!Pj~",
     goto: ",O#_PPPPP#`P#h#vP#h$U#hPP$[PPP$b$k$kP$}P$kP$k%e%wPPP&a&g#hP&mP#hP&sP#hP#h#hPPP&y']'iPP#`PP'o'o'y'oP'oP'o'oP#`P#`P#`P'|#`P(P(SPP#`P#`(V(e(s(y)T)Z)e)kPPPPPP)q)yP*e*hP+^+a+j]`Obn!s#d$QiWObfklmn!s!u#V#d$QiQObfklmn!s!u#V#d$QQdRR!ceQrTR!ghQ!gsQ!|!OR#`!hq!QXZz!t!w!z#b#c#i#r$O$V$^$e$f$jp!QXZz!t!w!z#b#c#i#r$O$V$^$e$f$jT#z#[#{q!OXZz!t!w!z#b#c#i#r$O$V$^$e$f$jp!QXZz!t!w!z#b#c#i#r$O$V$^$e$f$jQ![[R#Z!]QtTR!ihQ!gtR#`!iQvUR!jiQxVR!kjQoSQ!fgQ#W!XQ#^!`Q#_!aR$`#zQ!rnQ#g!sQ$P#dR$h$QX!pn!s#d$Qa!WY^_|!S!U#R#SR#P!SR!][R!_]R#]!_QbOU!bb!s$QQ!snR$Q#dQ#i!tU$U#i$^$jQ$^#rR$j$VQ$W#iR$k$WQgSS!eg$YR$Y#kQ$f$OR$n$fQ#e!rS$R#e$TR$T#gQ#T!TR#v#TQ#{#[R$a#{]aObn!s#d$Q[SObn!s#d$QQ!dfQ!lkQ!mlQ!nmQ#k!uR#w#VR#j!tQ|XQ!YZQ!xz[#h!t#i#r$V$^$jQ#m!wQ#o!zQ#}#bQ$O#cS$d$O$fR$m$eR#l!uQ!XYQ!a_R!{|U!TY_|Q!`^Q#Q!SQ#U!UQ#t#RR#u#S",
     nodeNames: "⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent , PseudoClassName ArgList IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList from to SupportsStatement supports AtRule",
     maxTerm: 106,
     nodeProps: [
       ["openedBy", 17,"(",48,"{"],
       ["closedBy", 18,")",49,"}"]
     ],
     propSources: [cssHighlighting],
     skippedNodes: [0,3],
     repeatNodeCount: 8,
     tokenData: "Ay~R![OX$wX^%]^p$wpq%]qr(crs+}st,otu2Uuv$wvw2rwx2}xy3jyz3uz{3z{|4_|}8U}!O8a!O!P8x!P!Q9Z!Q![;e![!]<Y!]!^<x!^!_$w!_!`=T!`!a=`!a!b$w!b!c>O!c!}$w!}#O?[#O#P$w#P#Q?g#Q#R2U#R#T$w#T#U?r#U#c$w#c#d@q#d#o$w#o#pAQ#p#q2U#q#rA]#r#sAh#s#y$w#y#z%]#z$f$w$f$g%]$g#BY$w#BY#BZ%]#BZ$IS$w$IS$I_%]$I_$I|$w$I|$JO%]$JO$JT$w$JT$JU%]$JU$KV$w$KV$KW%]$KW&FU$w&FU&FV%]&FV~$wW$zQOy%Qz~%QW%VQoWOy%Qz~%Q~%bf#T~OX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q~&}f#T~oWOX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q^(fSOy%Qz#]%Q#]#^(r#^~%Q^(wSoWOy%Qz#a%Q#a#b)T#b~%Q^)YSoWOy%Qz#d%Q#d#e)f#e~%Q^)kSoWOy%Qz#c%Q#c#d)w#d~%Q^)|SoWOy%Qz#f%Q#f#g*Y#g~%Q^*_SoWOy%Qz#h%Q#h#i*k#i~%Q^*pSoWOy%Qz#T%Q#T#U*|#U~%Q^+RSoWOy%Qz#b%Q#b#c+_#c~%Q^+dSoWOy%Qz#h%Q#h#i+p#i~%Q^+wQ!VUoWOy%Qz~%Q~,QUOY+}Zr+}rs,ds#O+}#O#P,i#P~+}~,iOh~~,lPO~+}_,tWtPOy%Qz!Q%Q!Q![-^![!c%Q!c!i-^!i#T%Q#T#Z-^#Z~%Q^-cWoWOy%Qz!Q%Q!Q![-{![!c%Q!c!i-{!i#T%Q#T#Z-{#Z~%Q^.QWoWOy%Qz!Q%Q!Q![.j![!c%Q!c!i.j!i#T%Q#T#Z.j#Z~%Q^.qWfUoWOy%Qz!Q%Q!Q![/Z![!c%Q!c!i/Z!i#T%Q#T#Z/Z#Z~%Q^/bWfUoWOy%Qz!Q%Q!Q![/z![!c%Q!c!i/z!i#T%Q#T#Z/z#Z~%Q^0PWoWOy%Qz!Q%Q!Q![0i![!c%Q!c!i0i!i#T%Q#T#Z0i#Z~%Q^0pWfUoWOy%Qz!Q%Q!Q![1Y![!c%Q!c!i1Y!i#T%Q#T#Z1Y#Z~%Q^1_WoWOy%Qz!Q%Q!Q![1w![!c%Q!c!i1w!i#T%Q#T#Z1w#Z~%Q^2OQfUoWOy%Qz~%QY2XSOy%Qz!_%Q!_!`2e!`~%QY2lQzQoWOy%Qz~%QX2wQXPOy%Qz~%Q~3QUOY2}Zw2}wx,dx#O2}#O#P3d#P~2}~3gPO~2}_3oQbVOy%Qz~%Q~3zOa~_4RSUPjSOy%Qz!_%Q!_!`2e!`~%Q_4fUjS!PPOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q^4}SoWOy%Qz!Q%Q!Q![5Z![~%Q^5bWoW#ZUOy%Qz!Q%Q!Q![5Z![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q^6PWoWOy%Qz{%Q{|6i|}%Q}!O6i!O!Q%Q!Q![6z![~%Q^6nSoWOy%Qz!Q%Q!Q![6z![~%Q^7RSoW#ZUOy%Qz!Q%Q!Q![6z![~%Q^7fYoW#ZUOy%Qz!O%Q!O!P5Z!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q_8ZQpVOy%Qz~%Q^8fUjSOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q_8}S#WPOy%Qz!Q%Q!Q![5Z![~%Q~9`RjSOy%Qz{9i{~%Q~9nSoWOy9iyz9zz{:o{~9i~9}ROz9zz{:W{~9z~:ZTOz9zz{:W{!P9z!P!Q:j!Q~9z~:oOR~~:tUoWOy9iyz9zz{:o{!P9i!P!Q;W!Q~9i~;_QoWR~Oy%Qz~%Q^;jY#ZUOy%Qz!O%Q!O!P5Z!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%QX<_S]POy%Qz![%Q![!]<k!]~%QX<rQ^PoWOy%Qz~%Q_<}Q!WVOy%Qz~%QY=YQzQOy%Qz~%QX=eS|POy%Qz!`%Q!`!a=q!a~%QX=xQ|PoWOy%Qz~%QX>RUOy%Qz!c%Q!c!}>e!}#T%Q#T#o>e#o~%QX>lY!YPoWOy%Qz}%Q}!O>e!O!Q%Q!Q![>e![!c%Q!c!}>e!}#T%Q#T#o>e#o~%QX?aQxPOy%Qz~%Q^?lQvUOy%Qz~%QX?uSOy%Qz#b%Q#b#c@R#c~%QX@WSoWOy%Qz#W%Q#W#X@d#X~%QX@kQ!`PoWOy%Qz~%QX@tSOy%Qz#f%Q#f#g@d#g~%QXAVQ!RPOy%Qz~%Q_AbQ!QVOy%Qz~%QZAmS!PPOy%Qz!_%Q!_!`2e!`~%Q",
     tokenizers: [descendant, unitToken, identifiers, 0, 1, 2, 3],
     topRules: {"StyleSheet":[0,4]},
     specialized: [{term: 94, get: value => spec_callee[value] || -1},{term: 56, get: value => spec_AtKeyword[value] || -1},{term: 95, get: value => spec_identifier$1[value] || -1}],
     tokenPrec: 1078
   });

   let _properties = null;
   function properties() {
       if (!_properties && typeof document == "object" && document.body) {
           let names = [];
           for (let prop in document.body.style) {
               if (!/[A-Z]|^-|^(item|length)$/.test(prop))
                   names.push(prop);
           }
           _properties = names.sort().map(name => ({ type: "property", label: name }));
       }
       return _properties || [];
   }
   const pseudoClasses = /*@__PURE__*/[
       "active", "after", "before", "checked", "default",
       "disabled", "empty", "enabled", "first-child", "first-letter",
       "first-line", "first-of-type", "focus", "hover", "in-range",
       "indeterminate", "invalid", "lang", "last-child", "last-of-type",
       "link", "not", "nth-child", "nth-last-child", "nth-last-of-type",
       "nth-of-type", "only-of-type", "only-child", "optional", "out-of-range",
       "placeholder", "read-only", "read-write", "required", "root",
       "selection", "target", "valid", "visited"
   ].map(name => ({ type: "class", label: name }));
   const values$1 = /*@__PURE__*/[
       "above", "absolute", "activeborder", "additive", "activecaption", "after-white-space",
       "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always",
       "antialiased", "appworkspace", "asterisks", "attr", "auto", "auto-flow", "avoid", "avoid-column",
       "avoid-page", "avoid-region", "axis-pan", "background", "backwards", "baseline", "below",
       "bidi-override", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box",
       "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "button-bevel",
       "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "capitalize",
       "caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle",
       "cjk-decimal", "clear", "clip", "close-quote", "col-resize", "collapse", "color", "color-burn",
       "color-dodge", "column", "column-reverse", "compact", "condensed", "contain", "content",
       "contents", "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover",
       "crop", "cross", "crosshair", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal",
       "decimal-leading-zero", "default", "default-button", "dense", "destination-atop", "destination-in",
       "destination-out", "destination-over", "difference", "disc", "discard", "disclosure-closed",
       "disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "e-resize",
       "ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end",
       "ethiopic-abegede-gez", "ethiopic-halehame-aa-er", "ethiopic-halehame-gez", "ew-resize", "exclusion",
       "expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fill-box",
       "fixed", "flat", "flex", "flex-end", "flex-start", "footnotes", "forwards", "from",
       "geometricPrecision", "graytext", "grid", "groove", "hand", "hard-light", "help", "hidden", "hide",
       "higher", "highlight", "highlighttext", "horizontal", "hsl", "hsla", "hue", "icon", "ignore",
       "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext",
       "inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-grid",
       "inline-table", "inset", "inside", "intrinsic", "invert", "italic", "justify", "keep-all",
       "landscape", "large", "larger", "left", "level", "lighter", "lighten", "line-through", "linear",
       "linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower",
       "lower-hexadecimal", "lower-latin", "lower-norwegian", "lowercase", "ltr", "luminosity", "manipulation",
       "match", "matrix", "matrix3d", "medium", "menu", "menutext", "message-box", "middle", "min-intrinsic",
       "mix", "monospace", "move", "multiple", "multiple_mask_images", "multiply", "n-resize", "narrower",
       "ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none",
       "normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize",
       "oblique", "opacity", "open-quote", "optimizeLegibility", "optimizeSpeed", "outset", "outside",
       "outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused",
       "perspective", "pinch-zoom", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait",
       "pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio",
       "read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat",
       "repeating-linear-gradient", "repeating-radial-gradient", "repeat-x", "repeat-y", "reset", "reverse",
       "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round",
       "row", "row-resize", "row-reverse", "rtl", "run-in", "running", "s-resize", "sans-serif", "saturation",
       "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen", "scroll", "scrollbar", "scroll-position",
       "se-resize", "self-start", "self-end", "semi-condensed", "semi-expanded", "separate", "serif", "show",
       "single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal",
       "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps",
       "small-caption", "smaller", "soft-light", "solid", "source-atop", "source-in", "source-out",
       "source-over", "space", "space-around", "space-between", "space-evenly", "spell-out", "square", "start",
       "static", "status-bar", "stretch", "stroke", "stroke-box", "sub", "subpixel-antialiased", "svg_masks",
       "super", "sw-resize", "symbolic", "symbols", "system-ui", "table", "table-caption", "table-cell",
       "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row",
       "table-row-group", "text", "text-bottom", "text-top", "textarea", "textfield", "thick", "thin",
       "threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "to", "top",
       "transform", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent",
       "ultra-condensed", "ultra-expanded", "underline", "unidirectional-pan", "unset", "up", "upper-latin",
       "uppercase", "url", "var", "vertical", "vertical-text", "view-box", "visible", "visibleFill",
       "visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe",
       "windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor", "xx-large", "xx-small"
   ].map(name => ({ type: "keyword", label: name })).concat(/*@__PURE__*/[
       "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige",
       "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown",
       "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue",
       "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod",
       "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen",
       "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen",
       "darkslateblue", "darkslategray", "darkturquoise", "darkviolet",
       "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick",
       "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite",
       "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew",
       "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender",
       "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral",
       "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink",
       "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray",
       "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta",
       "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple",
       "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise",
       "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin",
       "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered",
       "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred",
       "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue",
       "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown",
       "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue",
       "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan",
       "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white",
       "whitesmoke", "yellow", "yellowgreen"
   ].map(name => ({ type: "constant", label: name })));
   const tags = /*@__PURE__*/[
       "a", "abbr", "address", "article", "aside", "b", "bdi", "bdo", "blockquote", "body",
       "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "dd", "del",
       "details", "dfn", "dialog", "div", "dl", "dt", "em", "figcaption", "figure", "footer",
       "form", "header", "hgroup", "h1", "h2", "h3", "h4", "h5", "h6", "hr", "html", "i", "iframe",
       "img", "input", "ins", "kbd", "label", "legend", "li", "main", "meter", "nav", "ol", "output",
       "p", "pre", "ruby", "section", "select", "small", "source", "span", "strong", "sub", "summary",
       "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "tr", "u", "ul"
   ].map(name => ({ type: "type", label: name }));
   const identifier$1 = /^[\w-]*/;
   /**
   CSS property and value keyword completion source.
   */
   const cssCompletionSource = context => {
       let { state, pos } = context, node = syntaxTree(state).resolveInner(pos, -1);
       if (node.name == "PropertyName")
           return { from: node.from, options: properties(), validFor: identifier$1 };
       if (node.name == "ValueName")
           return { from: node.from, options: values$1, validFor: identifier$1 };
       if (node.name == "PseudoClassName")
           return { from: node.from, options: pseudoClasses, validFor: identifier$1 };
       if (node.name == "TagName") {
           for (let { parent } = node; parent; parent = parent.parent)
               if (parent.name == "Block")
                   return { from: node.from, options: properties(), validFor: identifier$1 };
           return { from: node.from, options: tags, validFor: identifier$1 };
       }
       if (!context.explicit)
           return null;
       let above = node.resolve(pos), before = above.childBefore(pos);
       if (before && before.name == ":" && above.name == "PseudoClassSelector")
           return { from: pos, options: pseudoClasses, validFor: identifier$1 };
       if (before && before.name == ":" && above.name == "Declaration" || above.name == "ArgList")
           return { from: pos, options: values$1, validFor: identifier$1 };
       if (above.name == "Block")
           return { from: pos, options: properties(), validFor: identifier$1 };
       return null;
   };

   /**
   A language provider based on the [Lezer CSS
   parser](https://github.com/lezer-parser/css), extended with
   highlighting and indentation information.
   */
   const cssLanguage = /*@__PURE__*/LRLanguage.define({
       parser: /*@__PURE__*/parser$1.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   Declaration: /*@__PURE__*/continuedIndent()
               }),
               /*@__PURE__*/foldNodeProp.add({
                   Block: foldInside
               })
           ]
       }),
       languageData: {
           commentTokens: { block: { open: "/*", close: "*/" } },
           indentOnInput: /^\s*\}$/,
           wordChars: "-"
       }
   });
   /**
   Language support for CSS.
   */
   function css$1() {
       return new LanguageSupport(cssLanguage, cssLanguage.data.of({ autocomplete: cssCompletionSource }));
   }

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const TSExtends = 1,
     noSemi = 281,
     incdec = 2,
     incdecPrefix = 3,
     templateContent = 282,
     InterpolationStart = 4,
     templateEnd = 283,
     insertSemi = 284,
     spaces = 286,
     newline = 287,
     LineComment = 5,
     BlockComment = 6,
     Dialect_ts = 1;

   /* Hand-written tokenizers for JavaScript tokens that can't be
      expressed by lezer's built-in tokenizer. */

   const space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200,
                  8201, 8202, 8232, 8233, 8239, 8287, 12288];

   const braceR = 125, braceL = 123, semicolon = 59, slash = 47, star = 42,
         plus = 43, minus = 45, dollar = 36, backtick = 96, backslash = 92;

   const trackNewline = new ContextTracker({
     start: false,
     shift(context, term) {
       return term == LineComment || term == BlockComment || term == spaces ? context : term == newline
     },
     strict: false
   });

   const insertSemicolon = new ExternalTokenizer((input, stack) => {
     let {next} = input;
     if ((next == braceR || next == -1 || stack.context) && stack.canShift(insertSemi))
       input.acceptToken(insertSemi);
   }, {contextual: true, fallback: true});

   const noSemicolon = new ExternalTokenizer((input, stack) => {
     let {next} = input, after;
     if (space.indexOf(next) > -1) return
     if (next == slash && ((after = input.peek(1)) == slash || after == star)) return
     if (next != braceR && next != semicolon && next != -1 && !stack.context && stack.canShift(noSemi))
       input.acceptToken(noSemi);
   }, {contextual: true});

   const incdecToken = new ExternalTokenizer((input, stack) => {
     let {next} = input;
     if (next == plus || next == minus) {
       input.advance();
       if (next == input.next) {
         input.advance();
         let mayPostfix = !stack.context && stack.canShift(incdec);
         input.acceptToken(mayPostfix ? incdec : incdecPrefix);
       }
     }
   }, {contextual: true});

   const template = new ExternalTokenizer(input => {
     for (let afterDollar = false, i = 0;; i++) {
       let {next} = input;
       if (next < 0) {
         if (i) input.acceptToken(templateContent);
         break
       } else if (next == backtick) {
         if (i) input.acceptToken(templateContent);
         else input.acceptToken(templateEnd, 1);
         break
       } else if (next == braceL && afterDollar) {
         if (i == 1) input.acceptToken(InterpolationStart, 1);
         else input.acceptToken(templateContent, -1);
         break
       } else if (next == 10 /* "\n" */ && i) {
         // Break up template strings on lines, to avoid huge tokens
         input.advance();
         input.acceptToken(templateContent);
         break
       } else if (next == backslash) {
         input.advance();
       }
       afterDollar = next == dollar;
       input.advance();
     }
   });

   const tsExtends = new ExternalTokenizer((input, stack) => {
     if (input.next != 101 || !stack.dialectEnabled(Dialect_ts)) return
     input.advance();
     for (let i = 0; i < 6; i++) {
       if (input.next != "xtends".charCodeAt(i)) return
       input.advance();
     }
     if (input.next >= 57 && input.next <= 65 || input.next >= 48 && input.next <= 90 ||
         input.next == 95 || input.next >= 97 && input.next <= 122 || input.next > 160) return
     input.acceptToken(TSExtends);
   });

   const jsHighlight = styleTags({
     "get set async static": tags$1.modifier,
     "for while do if else switch try catch finally return throw break continue default case": tags$1.controlKeyword,
     "in of await yield void typeof delete instanceof": tags$1.operatorKeyword,
     "let var const function class extends": tags$1.definitionKeyword,
     "import export from": tags$1.moduleKeyword,
     "with debugger as new": tags$1.keyword,
     TemplateString: tags$1.special(tags$1.string),
     Super: tags$1.atom,
     BooleanLiteral: tags$1.bool,
     this: tags$1.self,
     null: tags$1.null,
     Star: tags$1.modifier,
     VariableName: tags$1.variableName,
     "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags$1.function(tags$1.variableName),
     VariableDefinition: tags$1.definition(tags$1.variableName),
     Label: tags$1.labelName,
     PropertyName: tags$1.propertyName,
     PrivatePropertyName: tags$1.special(tags$1.propertyName),
     "CallExpression/MemberExpression/PropertyName": tags$1.function(tags$1.propertyName),
     "FunctionDeclaration/VariableDefinition": tags$1.function(tags$1.definition(tags$1.variableName)),
     "ClassDeclaration/VariableDefinition": tags$1.definition(tags$1.className),
     PropertyDefinition: tags$1.definition(tags$1.propertyName),
     PrivatePropertyDefinition: tags$1.definition(tags$1.special(tags$1.propertyName)),
     UpdateOp: tags$1.updateOperator,
     LineComment: tags$1.lineComment,
     BlockComment: tags$1.blockComment,
     Number: tags$1.number,
     String: tags$1.string,
     ArithOp: tags$1.arithmeticOperator,
     LogicOp: tags$1.logicOperator,
     BitOp: tags$1.bitwiseOperator,
     CompareOp: tags$1.compareOperator,
     RegExp: tags$1.regexp,
     Equals: tags$1.definitionOperator,
     "Arrow : Spread": tags$1.punctuation,
     "( )": tags$1.paren,
     "[ ]": tags$1.squareBracket,
     "{ }": tags$1.brace,
     "InterpolationStart InterpolationEnd": tags$1.special(tags$1.brace),
     ".": tags$1.derefOperator,
     ", ;": tags$1.separator,

     TypeName: tags$1.typeName,
     TypeDefinition: tags$1.definition(tags$1.typeName),
     "type enum interface implements namespace module declare": tags$1.definitionKeyword,
     "abstract global Privacy readonly override": tags$1.modifier,
     "is keyof unique infer": tags$1.operatorKeyword,

     JSXAttributeValue: tags$1.attributeValue,
     JSXText: tags$1.content,
     "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags$1.angleBracket,
     "JSXIdentifier JSXNameSpacedName": tags$1.tagName,
     "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags$1.attributeName
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const spec_identifier = {__proto__:null,export:18, as:23, from:29, default:32, async:37, function:38, this:48, true:56, false:56, void:66, typeof:70, null:86, super:88, new:122, await:139, yield:141, delete:142, class:152, extends:154, public:197, private:197, protected:197, readonly:199, instanceof:220, in:222, const:224, import:256, keyof:307, unique:311, infer:317, is:351, abstract:371, implements:373, type:375, let:378, var:380, interface:387, enum:391, namespace:397, module:399, declare:403, global:407, for:428, of:437, while:440, with:444, do:448, if:452, else:454, switch:458, case:464, try:470, catch:474, finally:478, return:482, throw:486, break:490, continue:494, debugger:498};
   const spec_word = {__proto__:null,async:109, get:111, set:113, public:161, private:161, protected:161, static:163, abstract:165, override:167, readonly:173, new:355};
   const spec_LessThan = {__proto__:null,"<":129};
   const parser = LRParser.deserialize({
     version: 14,
     states: "$8SO`QdOOO'QQ(C|O'#ChO'XOWO'#DVO)dQdO'#D]O)tQdO'#DhO){QdO'#DrO-xQdO'#DxOOQO'#E]'#E]O.]Q`O'#E[O.bQ`O'#E[OOQ(C['#Ef'#EfO0aQ(C|O'#ItO2wQ(C|O'#IuO3eQ`O'#EzO3jQ!bO'#FaOOQ(C['#FS'#FSO3rO#tO'#FSO4QQ&jO'#FhO5bQ`O'#FgOOQ(C['#Iu'#IuOOQ(CW'#It'#ItOOQS'#J^'#J^O5gQ`O'#HpO5lQ(ChO'#HqOOQS'#Ih'#IhOOQS'#Hr'#HrQ`QdOOO){QdO'#DjO5tQ`O'#G[O5yQ&jO'#CmO6XQ`O'#EZO6dQ`O'#EgO6iQ,UO'#FRO7TQ`O'#G[O7YQ`O'#G`O7eQ`O'#G`O7sQ`O'#GcO7sQ`O'#GdO7sQ`O'#GfO5tQ`O'#GiO8dQ`O'#GlO9rQ`O'#CdO:SQ`O'#GyO:[Q`O'#HPO:[Q`O'#HRO`QdO'#HTO:[Q`O'#HVO:[Q`O'#HYO:aQ`O'#H`O:fQ(CjO'#HfO){QdO'#HhO:qQ(CjO'#HjO:|Q(CjO'#HlO5lQ(ChO'#HnO){QdO'#DWOOOW'#Ht'#HtO;XOWO,59qOOQ(C[,59q,59qO=jQtO'#ChO=tQdO'#HuO>XQ`O'#IvO@WQtO'#IvO'dQdO'#IvO@_Q`O,59wO@uQ7[O'#DbOAnQ`O'#E]OA{Q`O'#JROBWQ`O'#JQOBWQ`O'#JQOB`Q`O,5:yOBeQ`O'#JPOBlQaO'#DyO5yQ&jO'#EZOBzQ`O'#EZOCVQpO'#FROOQ(C[,5:S,5:SOC_QdO,5:SOE]Q(C|O,5:^OEyQ`O,5:dOFdQ(ChO'#JOO7YQ`O'#I}OFkQ`O'#I}OFsQ`O,5:xOFxQ`O'#I}OGWQdO,5:vOIWQ&jO'#EWOJeQ`O,5:vOKwQ&jO'#DlOLOQdO'#DqOLYQ7[O,5;PO){QdO,5;POOQS'#Er'#ErOOQS'#Et'#EtO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;ROOQS'#Ex'#ExOLbQdO,5;cOOQ(C[,5;h,5;hOOQ(C[,5;i,5;iONbQ`O,5;iOOQ(C[,5;j,5;jO){QdO'#IPONgQ(ChO,5<TO! RQ&jO,5;RO){QdO,5;fO! kQ!bO'#JVO! YQ!bO'#JVO! rQ!bO'#JVO!!TQ!bO,5;qOOOO,5;{,5;{O!!cQdO'#FcOOOO'#IO'#IOO3rO#tO,5;nO!!jQ!bO'#FeOOQ(C[,5;n,5;nO!#WQ,VO'#CrOOQ(C]'#Cu'#CuO!#kQ`O'#CuO!#pOWO'#CyO!$^Q,VO,5<QO!$eQ`O,5<SO!%tQ&jO'#FrO!&RQ`O'#FsO!&WQ`O'#FsO!&]Q&jO'#FwO!'[Q7[O'#F{O!'}Q,VO'#IqOOQ(C]'#Iq'#IqO!(XQaO'#IpO!(gQ`O'#IoO!(oQ`O'#CqOOQ(C]'#Cs'#CsOOQ(C]'#C|'#C|O!(wQ`O'#DOOJjQ&jO'#FjOJjQ&jO'#FlO!(|Q`O'#FnO!)RQ`O'#FoO!&WQ`O'#FuOJjQ&jO'#FzO!)WQ`O'#E^O!)oQ`O,5<RO`QdO,5>[OOQS'#Ik'#IkOOQS,5>],5>]OOQS-E;p-E;pO!+kQ(C|O,5:UOOQ(CX'#Cp'#CpO!,[Q&kO,5<vOOQO'#Cf'#CfO!,mQ(ChO'#IlO5bQ`O'#IlO:aQ`O,59XO!-OQ!bO,59XO!-WQ&jO,59XO5yQ&jO,59XO!-cQ`O,5:vO!-kQ`O'#GxO!-yQ`O'#JbO){QdO,5;kO!.RQ7[O,5;mO!.WQ`O,5=cO!.]Q`O,5=cO!.bQ`O,5=cO5lQ(ChO,5=cO5tQ`O,5<vO!.pQ`O'#E_O!/UQ7[O'#E`OOQ(CW'#JP'#JPO!/gQ(ChO'#J_O5lQ(ChO,5<zO7sQ`O,5=QOOQP'#Cr'#CrO!/rQ!bO,5<}O!/zQ!cO,5=OO!0VQ`O,5=QO!0[QpO,5=TO:aQ`O'#GnO5tQ`O'#GpO!0dQ`O'#GpO5yQ&jO'#GsO!0iQ`O'#GsOOQS,5=W,5=WO!0nQ`O'#GtO!0vQ`O'#CmO!0{Q`O,59OO!1VQ`O,59OO!3XQdO,59OOOQS,59O,59OO!3fQ(ChO,59OO){QdO,59OO!3qQdO'#G{OOQS'#G|'#G|OOQS'#G}'#G}O`QdO,5=eO!4RQ`O,5=eO){QdO'#DxO`QdO,5=kO`QdO,5=mO!4WQ`O,5=oO`QdO,5=qO!4]Q`O,5=tO!4bQdO,5=zOOQS,5>Q,5>QO){QdO,5>QO5lQ(ChO,5>SOOQS,5>U,5>UO!8cQ`O,5>UOOQS,5>W,5>WO!8cQ`O,5>WOOQS,5>Y,5>YO!8hQpO,59rOOOW-E;r-E;rOOQ(C[1G/]1G/]O!8mQtO,5>aO'dQdO,5>aOOQO,5>f,5>fO!8wQdO'#HuOOQO-E;s-E;sO!9UQ`O,5?bO!9^QtO,5?bO!9eQ`O,5?lOOQ(C[1G/c1G/cO!9mQ!bO'#DTOOQO'#Ix'#IxO){QdO'#IxO!:[Q!bO'#IxO!:yQ!bO'#DcO!;[Q7[O'#DcO!=gQdO'#DcO!=nQ`O'#IwO!=vQ`O,59|O!={Q`O'#EaO!>ZQ`O'#JSO!>cQ`O,5:zO!>yQ7[O'#DcO){QdO,5?mO!?TQ`O'#HzOOQO-E;x-E;xO!9eQ`O,5?lOOQ(CW1G0e1G0eO!@aQ7[O'#D|OOQ(C[,5:e,5:eO){QdO,5:eOIWQ&jO,5:eO!@hQaO,5:eO:aQ`O,5:uO!-OQ!bO,5:uO!-WQ&jO,5:uO5yQ&jO,5:uOOQ(C[1G/n1G/nOOQ(C[1G0O1G0OOOQ(CW'#EV'#EVO){QdO,5?jO!@sQ(ChO,5?jO!AUQ(ChO,5?jO!A]Q`O,5?iO!AeQ`O'#H|O!A]Q`O,5?iOOQ(CW1G0d1G0dO7YQ`O,5?iOOQ(C[1G0b1G0bO!BPQ(C|O1G0bO!CRQ(CyO,5:rOOQ(C]'#Fq'#FqO!CoQ(C}O'#IqOGWQdO1G0bO!EqQ,VO'#IyO!E{Q`O,5:WO!FQQtO'#IzO){QdO'#IzO!F[Q`O,5:]OOQ(C]'#DT'#DTOOQ(C[1G0k1G0kO!FaQ`O1G0kO!HrQ(C|O1G0mO!HyQ(C|O1G0mO!K^Q(C|O1G0mO!KeQ(C|O1G0mO!MlQ(C|O1G0mO!NPQ(C|O1G0mO#!pQ(C|O1G0mO#!wQ(C|O1G0mO#%[Q(C|O1G0mO#%cQ(C|O1G0mO#'WQ(C|O1G0mO#*QQMlO'#ChO#+{QMlO1G0}O#-vQMlO'#IuOOQ(C[1G1T1G1TO#.ZQ(C|O,5>kOOQ(CW-E;}-E;}O#.zQ(C}O1G0mOOQ(C[1G0m1G0mO#1PQ(C|O1G1QO#1pQ!bO,5;sO#1uQ!bO,5;tO#1zQ!bO'#F[O#2`Q`O'#FZOOQO'#JW'#JWOOQO'#H}'#H}O#2eQ!bO1G1]OOQ(C[1G1]1G1]OOOO1G1f1G1fO#2sQMlO'#ItO#2}Q`O,5;}OLbQdO,5;}OOOO-E;|-E;|OOQ(C[1G1Y1G1YOOQ(C[,5<P,5<PO#3SQ!bO,5<POOQ(C],59a,59aOIWQ&jO'#C{OOOW'#Hs'#HsO#3XOWO,59eOOQ(C],59e,59eO){QdO1G1lO!)RQ`O'#IRO#3dQ`O,5<eOOQ(C],5<b,5<bOOQO'#GV'#GVOJjQ&jO,5<pOOQO'#GX'#GXOJjQ&jO,5<rOIWQ&jO,5<tOOQO1G1n1G1nO#3oQqO'#CpO#4SQqO,5<^O#4ZQ`O'#JZO5tQ`O'#JZO#4iQ`O,5<`OJjQ&jO,5<_O#4nQ`O'#FtO#4yQ`O,5<_O#5OQqO'#FqO#5]QqO'#J[O#5gQ`O'#J[OIWQ&jO'#J[O#5lQ`O,5<cOOQ(CW'#Dg'#DgO#5qQ!bO'#F|O!'VQ7[O'#F|O!'VQ7[O'#GOO#6SQ`O'#GPO!&WQ`O'#GSO#6XQ(ChO'#ITO#6dQ7[O,5<gOOQ(C],5<g,5<gO#6kQ7[O'#F|O#6yQ7[O'#F}O#7RQ7[O'#F}OOQ(C],5<u,5<uOJjQ&jO,5?[OJjQ&jO,5?[O#7WQ`O'#IUO#7cQ`O,5?ZO#7kQ`O,59]OOQ(C]'#Ch'#ChO#8[Q,VO,59jOOQ(C],59j,59jO#8}Q,VO,5<UO#9pQ,VO,5<WO#9zQ`O,5<YOOQ(C],5<Z,5<ZO#:PQ`O,5<aO#:UQ,VO,5<fOGWQdO1G1mO#:fQ`O1G1mOOQS1G3v1G3vOOQ(C[1G/p1G/pONbQ`O1G/pOOQS1G2b1G2bOIWQ&jO1G2bO){QdO1G2bOIWQ&jO1G2bO#:kQaO1G2bO#<QQ&jO'#EWOOQ(CW,5?W,5?WO#<[Q(ChO,5?WOOQS1G.s1G.sO:aQ`O1G.sO!-OQ!bO1G.sO!-WQ&jO1G.sO#<mQ`O1G0bO#<rQ`O'#ChO#<}Q`O'#JcO#=VQ`O,5=dO#=[Q`O'#JcO#=aQ`O'#JcO#=iQ`O'#I^O#=wQ`O,5?|O#>PQtO1G1VOOQ(C[1G1X1G1XO5tQ`O1G2}O#>WQ`O1G2}O#>]Q`O1G2}O#>bQ`O1G2}OOQS1G2}1G2}O#>gQ&kO1G2bO7YQ`O'#JQO7YQ`O'#EaO7YQ`O'#IWO#>xQ(ChO,5?yOOQS1G2f1G2fO!0VQ`O1G2lOIWQ&jO1G2iO#?TQ`O1G2iOOQS1G2j1G2jOIWQ&jO1G2jO#?YQaO1G2jO#?bQ7[O'#GhOOQS1G2l1G2lO!'VQ7[O'#IYO!0[QpO1G2oOOQS1G2o1G2oOOQS,5=Y,5=YO#?jQ&kO,5=[O5tQ`O,5=[O#6SQ`O,5=_O5bQ`O,5=_O!-OQ!bO,5=_O!-WQ&jO,5=_O5yQ&jO,5=_O#?{Q`O'#JaO#@WQ`O,5=`OOQS1G.j1G.jO#@]Q(ChO1G.jO#@hQ`O1G.jO#@mQ`O1G.jO5lQ(ChO1G.jO#@uQtO,5@OO#APQ`O,5@OO#A[QdO,5=gO#AcQ`O,5=gO7YQ`O,5@OOOQS1G3P1G3PO`QdO1G3POOQS1G3V1G3VOOQS1G3X1G3XO:[Q`O1G3ZO#AhQdO1G3]O#EcQdO'#H[OOQS1G3`1G3`O#EpQ`O'#HbO:aQ`O'#HdOOQS1G3f1G3fO#ExQdO1G3fO5lQ(ChO1G3lOOQS1G3n1G3nOOQ(CW'#Fx'#FxO5lQ(ChO1G3pO5lQ(ChO1G3rOOOW1G/^1G/^O#IvQpO,5<TO#JOQtO1G3{OOQO1G4Q1G4QO){QdO,5>aO#JYQ`O1G4|O#JbQ`O1G5WO#JjQ`O,5?dOLbQdO,5:{O7YQ`O,5:{O:aQ`O,59}OLbQdO,59}O!-OQ!bO,59}O#JoQMlO,59}OOQO,5:{,5:{O#JyQ7[O'#HvO#KaQ`O,5?cOOQ(C[1G/h1G/hO#KiQ7[O'#H{O#K}Q`O,5?nOOQ(CW1G0f1G0fO!;[Q7[O,59}O#LVQtO1G5XO7YQ`O,5>fOOQ(CW'#ES'#ESO#LaQ(DjO'#ETO!@XQ7[O'#D}OOQO'#Hy'#HyO#L{Q7[O,5:hOOQ(C[,5:h,5:hO#MSQ7[O'#D}O#MeQ7[O'#D}O#MlQ7[O'#EYO#MoQ7[O'#ETO#M|Q7[O'#ETO!@XQ7[O'#ETO#NaQ`O1G0PO#NfQqO1G0POOQ(C[1G0P1G0PO){QdO1G0POIWQ&jO1G0POOQ(C[1G0a1G0aO:aQ`O1G0aO!-OQ!bO1G0aO!-WQ&jO1G0aO#NmQ(C|O1G5UO){QdO1G5UO#N}Q(ChO1G5UO$ `Q`O1G5TO7YQ`O,5>hOOQO,5>h,5>hO$ hQ`O,5>hOOQO-E;z-E;zO$ `Q`O1G5TO$ vQ(C}O,59jO$#xQ(C}O,5<UO$%}Q(C}O,5<WO$(SQ(C}O,5<fOOQ(C[7+%|7+%|O$*_Q(C|O7+%|O$+OQ&jO'#HwO$+YQ`O,5?eOOQ(C]1G/r1G/rO$+bQdO'#HxO$+oQ`O,5?fO$+wQtO,5?fOOQ(C[1G/w1G/wOOQ(C[7+&V7+&VO$,RQMlO,5:^O){QdO7+&iO$,]QMlO,5:UOOQO1G1_1G1_OOQO1G1`1G1`O$,jQ!LQO,5;vOLbQdO,5;uOOQO-E;{-E;{OOQ(C[7+&w7+&wOOOO7+'Q7+'QOOOO1G1i1G1iO$,uQ`O1G1iOOQ(C[1G1k1G1kO$,zQqO,59gOOOW-E;q-E;qOOQ(C]1G/P1G/PO$-RQ(C|O7+'WOOQ(C],5>m,5>mO$-rQ`O,5>mOOQ(C]1G2P1G2PP$-wQ`O'#IRPOQ(C]-E<P-E<PO$.hQ,VO1G2[O$/ZQ,VO1G2^O$/eQqO1G2`OOQ(C]1G1x1G1xO$/lQ`O'#IQO$/zQ`O,5?uO$/zQ`O,5?uO$0SQ`O,5?uO$0_Q`O,5?uOOQO1G1z1G1zO$0mQ,VO1G1yOJjQ&jO1G1yO$0}Q&jO'#ISO$1_Q`O,5?vOIWQ&jO,5?vO$1gQqO,5?vOOQ(C]1G1}1G1}OOQ(CW,5<h,5<hOOQ(CW,5<i,5<iO$1qQ`O,5<iO#5}Q`O,5<iO!-OQ!bO,5<hO$1vQ`O,5<jOOQ(CW,5<k,5<kO$1qQ`O,5<nOOQO,5>o,5>oOOQO-E<R-E<ROOQ(C]1G2R1G2RO!'VQ7[O,5<hO$2OQ`O,5<iO!'VQ7[O,5<jO!'VQ7[O,5<iO$2ZQ,VO1G4vO$2eQ,VO1G4vOOQO,5>p,5>pOOQO-E<S-E<SOOQP1G.w1G.wO!.RQ7[O,59lO){QdO,59lO$2rQ`O1G1tOJjQ&jO1G1{O$2wQ(C|O7+'XOOQ(C[7+'X7+'XOGWQdO7+'XOOQ(C[7+%[7+%[O$3hQqO'#J]O#NaQ`O7+'|O$3rQ`O7+'|O$3zQqO7+'|OOQS7+'|7+'|OIWQ&jO7+'|O){QdO7+'|OIWQ&jO7+'|O$4UQ(CyO'#ChO$4iQ(CyO,5<lO$5ZQ`O,5<lOOQ(CW1G4r1G4rOOQS7+$_7+$_O:aQ`O7+$_O!-OQ!bO7+$_OGWQdO7+%|O$5`Q`O'#I]O$5qQ`O,5?}OOQO1G3O1G3OO5tQ`O,5?}O$5qQ`O,5?}O$5yQ`O,5?}OOQO,5>x,5>xOOQO-E<[-E<[OOQ(C[7+&q7+&qO$6OQ`O7+(iO5lQ(ChO7+(iO5tQ`O7+(iO$6TQ`O7+(iO$6YQaO7+'|OOQ(CW,5>r,5>rOOQ(CW-E<U-E<UOOQS7+(W7+(WO$6hQ(CyO7+(TOIWQ&jO7+(TO$6rQqO7+(UOOQS7+(U7+(UOIWQ&jO7+(UO$6yQ`O'#J`O$7UQ`O,5=SOOQO,5>t,5>tOOQO-E<W-E<WOOQS7+(Z7+(ZO$8OQ7[O'#GqOOQS1G2v1G2vOIWQ&jO1G2vO){QdO1G2vOIWQ&jO1G2vO$8VQaO1G2vO$8eQ&kO1G2vO5lQ(ChO1G2yO#6SQ`O1G2yO5bQ`O1G2yO!-OQ!bO1G2yO!-WQ&jO1G2yO$8vQ`O'#I[O$9RQ`O,5?{O$9ZQ7[O,5?{OOQ(CW1G2z1G2zOOQS7+$U7+$UO$9cQ`O7+$UO5lQ(ChO7+$UO$9hQ`O7+$UO){QdO1G5jO){QdO1G5kO$9mQdO1G3RO$9tQ`O1G3RO$9yQdO1G3RO$:QQ(ChO1G5jOOQS7+(k7+(kO5lQ(ChO7+(uO`QdO7+(wOOQS'#Jf'#JfOOQS'#I_'#I_O$:[QdO,5=vOOQS,5=v,5=vO){QdO'#H]O$:iQ`O'#H_OOQS,5=|,5=|O7YQ`O,5=|OOQS,5>O,5>OOOQS7+)Q7+)QOOQS7+)W7+)WOOQS7+)[7+)[OOQS7+)^7+)^OOQO1G5O1G5OO$:nQMlO1G0gO$:xQ`O1G0gOOQO1G/i1G/iO$;TQMlO1G/iO:aQ`O1G/iOLbQdO'#DcOOQO,5>b,5>bOOQO-E;t-E;tOOQO,5>g,5>gOOQO-E;y-E;yO!-OQ!bO1G/iO:aQ`O,5:iOOQO,5:o,5:oO){QdO,5:oO$;_Q(ChO,5:oO$;jQ(ChO,5:oO!-OQ!bO,5:iOOQO-E;w-E;wOOQ(C[1G0S1G0SO!@XQ7[O,5:iO$;xQ7[O,5:iO$<ZQ(DjO,5:oO$<uQ7[O,5:iO!@XQ7[O,5:oOOQO,5:t,5:tO$<|Q7[O,5:oO$=ZQ(ChO,5:oOOQ(C[7+%k7+%kO#NaQ`O7+%kO#NfQqO7+%kOOQ(C[7+%{7+%{O:aQ`O7+%{O!-OQ!bO7+%{O$=oQ(C|O7+*pO){QdO7+*pOOQO1G4S1G4SO7YQ`O1G4SO$>PQ`O7+*oO$>XQ(C}O1G2[O$@^Q(C}O1G2^O$BcQ(C}O1G1yO$DnQ,VO,5>cOOQO-E;u-E;uO$DxQtO,5>dO){QdO,5>dOOQO-E;v-E;vO$ESQ`O1G5QO$E[QMlO1G0bO$GcQMlO1G0mO$GjQMlO1G0mO$IkQMlO1G0mO$IrQMlO1G0mO$KgQMlO1G0mO$KzQMlO1G0mO$NXQMlO1G0mO$N`QMlO1G0mO%!aQMlO1G0mO%!hQMlO1G0mO%$]QMlO1G0mO%$pQ(C|O<<JTO%%rQMmO1G0mO%'|QMmO'#IqO%)iQMlO1G1QOLbQdO'#F^OOQO'#JX'#JXOOQO1G1b1G1bO%)vQ`O1G1aO%){QMlO,5>kOOOO7+'T7+'TOOOW1G/R1G/ROOQ(C]1G4X1G4XOJjQ&jO7+'zO%*VQ`O,5>lO5tQ`O,5>lOOQO-E<O-E<OO%*eQ`O1G5aO%*eQ`O1G5aO%*mQ`O1G5aO%*xQ,VO7+'eO%+YQqO,5>nO%+dQ`O,5>nOIWQ&jO,5>nOOQO-E<Q-E<QO%+iQqO1G5bO%+sQ`O1G5bOOQ(CW1G2T1G2TO$1qQ`O1G2TOOQ(CW1G2S1G2SO%+{Q`O1G2UOIWQ&jO1G2UOOQ(CW1G2Y1G2YO!-OQ!bO1G2SO#5}Q`O1G2TO%,QQ`O1G2UO%,YQ`O1G2TOJjQ&jO7+*bOOQ(C]1G/W1G/WO%,eQ`O1G/WOOQ(C]7+'`7+'`O%,jQ,VO7+'gO%,zQ(C|O<<JsOOQ(C[<<Js<<JsOIWQ&jO'#IVO%-kQ`O,5?wOOQS<<Kh<<KhOIWQ&jO<<KhO#NaQ`O<<KhO%-sQ`O<<KhO%-{QqO<<KhOIWQ&jO1G2WOOQS<<Gy<<GyO:aQ`O<<GyO%.VQ(C|O<<IhOOQ(C[<<Ih<<IhOOQO,5>w,5>wO%.vQ`O,5>wO%.{Q`O,5>wOOQO-E<Z-E<ZO%/TQ`O1G5iO%/TQ`O1G5iO5tQ`O1G5iO%/]Q`O<<LTOOQS<<LT<<LTO%/bQ`O<<LTO5lQ(ChO<<LTO){QdO<<KhOIWQ&jO<<KhOOQS<<Ko<<KoO$6hQ(CyO<<KoOOQS<<Kp<<KpO$6rQqO<<KpO%/gQ7[O'#IXO%/rQ`O,5?zOLbQdO,5?zOOQS1G2n1G2nO#LaQ(DjO'#ETO!@XQ7[O'#GrOOQO'#IZ'#IZO%/zQ7[O,5=]OOQS,5=],5=]O%0RQ7[O'#ETO%0^Q7[O'#ETO%0uQ7[O'#ETO%1PQ7[O'#GrO%1bQ`O7+(bO%1gQ`O7+(bO%1oQqO7+(bOOQS7+(b7+(bOIWQ&jO7+(bO){QdO7+(bOIWQ&jO7+(bO%1yQaO7+(bOOQS7+(e7+(eO5lQ(ChO7+(eO#6SQ`O7+(eO5bQ`O7+(eO!-OQ!bO7+(eO%2XQ`O,5>vOOQO-E<Y-E<YOOQO'#Gu'#GuO%2dQ`O1G5gO5lQ(ChO<<GpOOQS<<Gp<<GpO%2lQ`O<<GpO%2qQ`O7++UO%2vQ`O7++VOOQS7+(m7+(mO%2{Q`O7+(mO%3QQdO7+(mO%3XQ`O7+(mO){QdO7++UO){QdO7++VOOQS<<La<<LaOOQS<<Lc<<LcOOQS-E<]-E<]OOQS1G3b1G3bO%3^Q`O,5=wOOQS,5=y,5=yO%3cQ`O1G3hOLbQdO7+&ROOQO7+%T7+%TO%3hQMlO1G5XO:aQ`O7+%TOOQO1G0T1G0TO%3rQ(C|O1G0ZOOQO1G0Z1G0ZO){QdO1G0ZO%3|Q(ChO1G0ZO:aQ`O1G0TO!-OQ!bO1G0TO!@XQ7[O1G0TO%4XQ(ChO1G0ZO%4gQ7[O1G0TO%4xQ(ChO1G0ZO%5^Q(DjO1G0ZO%5hQ7[O1G0TO!@XQ7[O1G0ZOOQ(C[<<IV<<IVOOQ(C[<<Ig<<IgO:aQ`O<<IgO%5oQ(C|O<<N[OOQO7+)n7+)nO%6PQ(C}O7+'eO%8[Q(C}O7+'gO%:gQtO1G4OO%:qQMlO7+%|O%;gQMmO,59jO%=hQMmO,5<UO%?lQMmO,5<WO%A[QMmO,5<fO%B}QMlO7+'WO%C[QMlO7+'XO%CiQ`O,5;xOOQO7+&{7+&{O%CnQ,VO<<KfOOQO1G4W1G4WO%CuQ`O1G4WO%DQQ`O1G4WO%D`Q`O7+*{O%D`Q`O7+*{OIWQ&jO1G4YO%DhQqO1G4YO%DrQ`O7+*|OOQ(CW7+'o7+'oO$1qQ`O7+'pO%DzQqO7+'pOOQ(CW7+'n7+'nO$1qQ`O7+'oO%ERQ`O7+'pOIWQ&jO7+'pO#5}Q`O7+'oO%EWQ,VO<<M|OOQ(C]7+$r7+$rO%EbQqO,5>qOOQO-E<T-E<TO#NaQ`OANASOOQSANASANASOIWQ&jOANASO%ElQ(CyO7+'rOOQSAN=eAN=eO5tQ`O1G4cOOQO1G4c1G4cO%E|Q`O1G4cO%FRQ`O7++TO%FRQ`O7++TO5lQ(ChOANAoO%FZQ`OANAoOOQSANAoANAoO%F`Q`OANASO%FhQqOANASOOQSANAZANAZOOQSANA[ANA[O%FrQ`O,5>sOOQO-E<V-E<VO%F}QMlO1G5fO#6SQ`O,5=^O5bQ`O,5=^O!-OQ!bO,5=^OOQO-E<X-E<XOOQS1G2w1G2wO$<ZQ(DjO,5:oO!@XQ7[O,5=^O%GXQ7[O,5=^O%GjQ7[O,5:oOOQS<<K|<<K|OIWQ&jO<<K|O%1bQ`O<<K|O%GtQ`O<<K|O%G|QqO<<K|O){QdO<<K|OIWQ&jO<<K|OOQS<<LP<<LPO5lQ(ChO<<LPO#6SQ`O<<LPO5bQ`O<<LPO%HWQ7[O1G4bO%H`Q`O7++ROOQSAN=[AN=[O5lQ(ChOAN=[OOQS<<Np<<NpOOQS<<Nq<<NqOOQS<<LX<<LXO%HhQ`O<<LXO%HmQdO<<LXO%HtQ`O<<NpO%HyQ`O<<NqOOQS1G3c1G3cO:aQ`O7+)SO%IOQMlO<<ImOOQO<<Ho<<HoOOQO7+%u7+%uO%3rQ(C|O7+%uO){QdO7+%uOOQO7+%o7+%oO:aQ`O7+%oO!-OQ!bO7+%oO%IYQ(ChO7+%uO!@XQ7[O7+%oO%IeQ(ChO7+%uO%IsQ7[O7+%oO%JUQ(ChO7+%uOOQ(C[AN?RAN?RO%JjQMlO<<JTO%JwQMmO1G1yO%MOQMmO1G2[O& SQMmO1G2^O&!rQMlO<<JsO&#PQMlO<<IhOOQO1G1d1G1dOJjQ&jOANAQOOQO7+)r7+)rO&#^Q`O7+)rO&#iQ`O<<NgO&#qQqO7+)tOOQ(CW<<K[<<K[O$1qQ`O<<K[OOQ(CW<<KZ<<KZO&#{QqO<<K[O$1qQ`O<<KZOOQSG26nG26nO#NaQ`OG26nOOQO7+)}7+)}O5tQ`O7+)}O&$SQ`O<<NoOOQSG27ZG27ZO5lQ(ChOG27ZOIWQ&jOG26nOLbQdO1G4_O&$[Q`O7++QO5lQ(ChO1G2xO#6SQ`O1G2xO5bQ`O1G2xO!-OQ!bO1G2xO!@XQ7[O1G2xO%5^Q(DjO1G0ZO&$dQ7[O1G2xO%1bQ`OANAhOOQSANAhANAhOIWQ&jOANAhO&$uQ`OANAhO&$}QqOANAhOOQSANAkANAkO5lQ(ChOANAkO#6SQ`OANAkOOQO'#Gv'#GvOOQO7+)|7+)|OOQSG22vG22vOOQSANAsANAsO&%XQ`OANAsOOQSAND[AND[OOQSAND]AND]OOQS<<Ln<<LnOOQO<<Ia<<IaO%3rQ(C|O<<IaOOQO<<IZ<<IZO:aQ`O<<IZO){QdO<<IaO!-OQ!bO<<IZO&%^Q(ChO<<IaO!@XQ7[O<<IZO&%iQ(ChO<<IaO&%wQMmO7+'eO&'jQMmO7+'gO&)]Q,VOG26lOOQO<<M^<<M^OOQ(CWAN@vAN@vO$1qQ`OAN@vOOQ(CWAN@uAN@uOOQSLD,YLD,YOOQO<<Mi<<MiOOQSLD,uLD,uO#NaQ`OLD,YO&)mQMlO7+)yOOQO7+(d7+(dO5lQ(ChO7+(dO#6SQ`O7+(dO5bQ`O7+(dO!-OQ!bO7+(dO!@XQ7[O7+(dOOQSG27SG27SO%1bQ`OG27SOIWQ&jOG27SOOQSG27VG27VO5lQ(ChOG27VOOQSG27_G27_OOQOAN>{AN>{OOQOAN>uAN>uO%3rQ(C|OAN>{O:aQ`OAN>uO){QdOAN>{O!-OQ!bOAN>uO&)wQ(ChOAN>{O&*SQ(C}OG26lOOQ(CWG26bG26bOOQS!$( t!$( tOOQO<<LO<<LOO5lQ(ChO<<LOO#6SQ`O<<LOO5bQ`O<<LOO!-OQ!bO<<LOOOQSLD,nLD,nO%1bQ`OLD,nOOQSLD,qLD,qOOQOG24gG24gOOQOG24aG24aO%3rQ(C|OG24gO:aQ`OG24aO){QdOG24gO&,pQ!LRO,5:rO&-gQ$ITO'#IqOOQOANAjANAjO5lQ(ChOANAjO#6SQ`OANAjO5bQ`OANAjOOQS!$(!Y!$(!YOOQOLD*RLD*ROOQOLD){LD){O%3rQ(C|OLD*RO&.ZQMmOG26lO&/|Q!LRO,59jO&0pQ!LRO,5<UO&1dQ!LRO,5<WO&2WQ!LRO,5<fOOQOG27UG27UO5lQ(ChOG27UO#6SQ`OG27UOOQO!$'Mm!$'MmO&2}Q!LRO1G2[O&3qQ!LRO1G2^O&4eQ!LRO1G1yOOQOLD,pLD,pO5lQ(ChOLD,pO&5[Q!LRO7+'eO&6RQ!LRO7+'gOOQO!$(![!$(![O&6xQ!LROG26lOLbQdO'#DrO&7oQtO'#ItOLbQdO'#DjO&7vQ(C|O'#ChO&8aQtO'#ChO&8qQdO,5:vO&:qQ&jO'#EWOLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO'#IPO&<OQ`O,5<TO&=eQ&jO,5;ROLbQdO,5;fO!(wQ`O'#DOO!(wQ`O'#DOO!(wQ`O'#DOOIWQ&jO'#FjO&:qQ&jO'#FjO&<WQ&jO'#FjOIWQ&jO'#FlO&:qQ&jO'#FlO&<WQ&jO'#FlOIWQ&jO'#FzO&:qQ&jO'#FzO&<WQ&jO'#FzOLbQdO,5?mO&8qQdO1G0bO&=lQMlO'#ChOLbQdO1G1lOIWQ&jO,5<pO&:qQ&jO,5<pO&<WQ&jO,5<pOIWQ&jO,5<rO&:qQ&jO,5<rO&<WQ&jO,5<rOIWQ&jO,5<_O&:qQ&jO,5<_O&<WQ&jO,5<_O&8qQdO1G1mOLbQdO7+&iOIWQ&jO1G1yO&:qQ&jO1G1yO&<WQ&jO1G1yOIWQ&jO1G1{O&:qQ&jO1G1{O&<WQ&jO1G1{O&8qQdO7+'XO&8qQdO7+%|O&=vQ`O7+'pOIWQ&jOANAQO&:qQ&jOANAQO&<WQ&jOANAQO&=vQ`O<<K[O&=vQ`OAN@vO&={Q`O'#E[O&>QQ`O'#E[O&>YQ`O'#EzO&>_Q`O'#EgO&>dQ`O'#JRO&>oQ`O'#JPO&>zQ`O,5:vO&?PQ,VO,5<QO&?WQ`O'#FsO&?]Q`O'#FsO&?bQ`O'#FsO&?gQ`O,5<RO&?oQ`O,5:vO&?wQMlO1G0}O&@OQ`O,5<_O&@TQ`O,5<_O&@YQ`O,5<_O&@_Q`O,5<aO&@dQ`O,5<aO&@iQ`O,5<aO&@nQ`O1G1mO&@sQ`O1G0bO&@xQ`O1G2UO&@}Q,VO<<KfO&AUQ,VO<<KfO&A]Q,VO<<KfO&AdQqO7+'pO&AkQ`O7+'pO&ApQqO<<K[O4QQ&jO'#FhO5bQ`O'#FgOBzQ`O'#EZOLbQdO,5;cO!&WQ`O'#FsO!&WQ`O'#FsO!&WQ`O'#FsO!&WQ`O'#FuO!&WQ`O'#FuO!&WQ`O'#FuO&AwQ`O,5<jOJjQ&jO7+'zOJjQ&jO7+'zOJjQ&jO7+'zOIWQ&jO1G2UO&BPQ`O1G2UOIWQ&jO7+'pO!'VQ7[O'#GOO$/eQqO1G2`O$/eQqO1G2`O$/eQqO1G2`O!'VQ7[O,5<jOIWQ&jO,5<tOIWQ&jO,5<tOIWQ&jO,5<t",
     stateData: "&B}~O'YOS'ZOSTOSUOS~OQTORTOXyO]cO_hObnOcmOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!TSO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!nlO#dsO#tpO#x^O%PqO%RtO%TrO%UrO%XuO%ZvO%^wO%_wO%axO%nzO%t{O%v|O%x}O%z!OO%}!PO&T!QO&Z!RO&]!SO&_!TO&a!UO&c!VO']PO'fQO'oYO'|aO~OQ[XZ[X_[Xj[Xu[Xv[Xx[X!R[X!a[X!b[X!d[X!j[X!{[X#WdX#[[X#][X#^[X#_[X#`[X#a[X#b[X#c[X#e[X#g[X#i[X#j[X#o[X'W[X'f[X'p[X'w[X'x[X~O!]$lX~P$zOS!WO'U!XO'V!ZO~OQTORTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!T!bO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O']![O'fQO'oYO'|aO~O!Q!`O!R!]O!O'jP!O'tP~P'dO!S!mO~P`OQTORTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!T!bO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O']9aO'fQO'oYO'|aO~OQTORTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!T!bO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O'fQO'oYO'|aO~O!Q!rO#U!uO#V!rO']9bO!c'qP~P+{O#W!vO~O!]!wO#W!vO~OQ#^OZ#dOj#ROu!{Ov!{Ox!|O!R#bO!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO#j#ZO'fQO'p#[O'w!}O'x#OO~O_'hX'W'hX!c'hX!O'hX!T'hX%Q'hX!]'hX~P.jO!{#eO#o#eOQ'iXZ'iX_'iXj'iXu'iXv'iXx'iX!R'iX!a'iX!b'iX!d'iX!j'iX#['iX#]'iX#^'iX#_'iX#`'iX#a'iX#b'iX#e'iX#g'iX#i'iX#j'iX'f'iX'p'iX'w'iX'x'iX~O#c'iX'W'iX!O'iX!c'iXn'iX!T'iX%Q'iX!]'iX~P0zO!{#eO~O#z#fO$R#jO~O!T#kO#x^O$U#lO$W#nO~O]#qOh$QOj#rOk#qOl#qOq$ROs$SOx#yO!T#zO!_$XO!d#vO#V$YO#t$VO$_$TO$a$UO$d$WO']#pO'b$PO'f#sO'a'cP~O!d$ZO~O!]$]O~O_$^O'W$^O~O']$bO~O!d$ZO']$bO'^$dO'b$PO~Oc$jO!d$ZO']$bO~O#c#TO~O]$sOu$oO!T$lO!d$nO%R$rO']$bO'^$dO^(UP~O!n$tO~Ox$uO!T$vO']$bO~Ox$uO!T$vO%Z$zO']$bO~O']${O~O#dsO%RtO%TrO%UrO%XuO%ZvO%^wO%_wO~Ob%UOc%TO!n%RO%P%SO%c%QO~P7xOb%XOcmO!T%WO!nlO#dsO%PqO%TrO%UrO%XuO%ZvO%^wO%_wO%axO~O`%[O!{%_O%R%YO'^$dO~P8wO!d%`O!g%dO~O!d%eO~O!TSO~O_$^O'T%mO'W$^O~O_$^O'T%pO'W$^O~O_$^O'T%rO'W$^O~OS!WO'U!XO'V%vO~OQ[XZ[Xj[Xu[Xv[Xx[X!R[X!RdX!a[X!b[X!d[X!j[X!{[X!{dX#WdX#[[X#][X#^[X#_[X#`[X#a[X#b[X#c[X#e[X#g[X#i[X#j[X#o[X'f[X'p[X'w[X'x[X~O!O[X!OdX~P;dO!Q%xO!O&iX!O&nX!R&iX!R&nX~P'dO!R%zO!O'jX~OQ#^OZ#dOj#ROu!{Ov!{Ox!|O!R%zO!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO#j#ZO'fQO'p#[O'w!}O'x#OO~O!O'jX~P>aO!O&PO~Ox&SO!W&^O!X&VO!Y&VO'^$dO~O]&TOk&TO!Q&WO'g&QO!S'kP!S'vP~P@dO!O'sX!R'sX!]'sX!c'sX'p'sX~O!{'sX#W#PX!S'sX~PA]O!{&_O!O'uX!R'uX~O!R&`O!O'tX~O!O&cO~O!{#eO~PA]OP&gO!T&dO!o&fO']$bO~Oc&lO!d$ZO']$bO~Ou$oO!d$nO~O!S&mO~P`Ou!{Ov!{Ox!|O!b!yO!d!zO'fQOQ!faZ!faj!fa!R!fa!a!fa!j!fa#[!fa#]!fa#^!fa#_!fa#`!fa#a!fa#b!fa#c!fa#e!fa#g!fa#i!fa#j!fa'p!fa'w!fa'x!fa~O_!fa'W!fa!O!fa!c!fan!fa!T!fa%Q!fa!]!fa~PCfO!c&nO~O!]!wO!{&pO'p&oO!R'rX_'rX'W'rX~O!c'rX~PFOO!R&tO!c'qX~O!c&vO~Ox$uO!T$vO#V&wO']$bO~OQTORTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!TSO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O']9aO'fQO'oYO'|aO~O]#qOh$QOj#rOk#qOl#qOq$ROs9tOx#yO!T#zO!_;eO!d#vO#V9}O#t$VO$_9wO$a9zO$d$WO']&{O'b$PO'f#sO~O#W&}O~O]#qOh$QOj#rOk#qOl#qOq$ROs$SOx#yO!T#zO!_$XO!d#vO#V$YO#t$VO$_$TO$a$UO$d$WO']&{O'b$PO'f#sO~O'a'mP~PJjO!Q'RO!c'nP~P){O'g'TO'oYO~OQ9^OR9^O]cOb;`Oc!jOhcOj9^OkcOlcOq9^Os9^OxRO{cO|cO}cO!T!bO!_9`O!dUO!g9^O!h9^O!i9^O!j9^O!k9^O!n!iO#t!lO#x^O']'cO'fQO'oYO'|;^O~O!d!zO~O!R#bO_$]a'W$]a!c$]a!O$]a!T$]a%Q$]a!]$]a~O#d'jO~PIWO!]'lO!T'yX#w'yX#z'yX$R'yX~Ou'mO~P! YOu'mO!T'yX#w'yX#z'yX$R'yX~O!T'oO#w'sO#z'nO$R'tO~O!Q'wO~PLbO#z#fO$R'zO~OP$eXu$eXx$eX!b$eX'w$eX'x$eX~OPfX!RfX!{fX'afX'a$eX~P!!rOk'|O~OS'}O'U(OO'V(QO~OP(ZOu(SOx(TO'w(VO'x(XO~O'a(RO~P!#{O'a([O~O]#qOh$QOj#rOk#qOl#qOq$ROs9tOx#yO!T#zO!_;eO!d#vO#V9}O#t$VO$_9wO$a9zO$d$WO'b$PO'f#sO~O!Q(`O'](]O!c'}P~P!$jO#W(bO~O!d(cO~O!Q(hO'](eO!O(OP~P!$jOj(uOx(mO!W(sO!X(lO!Y(lO!d(cO!x(tO$w(oO'^$dO'g(jO~O!S(rO~P!&jO!b!yOP'eXu'eXx'eX'w'eX'x'eX!R'eX!{'eX~O'a'eX#m'eX~P!'cOP(xO!{(wO!R'dX'a'dX~O!R(yO'a'cX~O']${O'a'cP~O'](|O~O!d)RO~O']&{O~Ox$uO!Q!rO!T$vO#U!uO#V!rO']$bO!c'qP~O!]!wO#W)VO~OQ#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO#j#ZO'fQO'p#[O'w!}O'x#OO~O_!^a!R!^a'W!^a!O!^a!c!^an!^a!T!^a%Q!^a!]!^a~P!)wOP)_O!T&dO!o)^O%Q)]O'b$PO~O!])aO!T'`X_'`X!R'`X'W'`X~O!d$ZO'b$PO~O!d$ZO']$bO'b$PO~O!]!wO#W&}O~O])lO%R)mO'])iO!S(VP~O!R)nO^(UX~O'g'TO~OZ)rO~O^)sO~O!T$lO']$bO'^$dO^(UP~Ox$uO!Q)xO!R&`O!T$vO']$bO!O'tP~O]&ZOk&ZO!Q)yO'g'TO!S'vP~O!R)zO_(RX'W(RX~O!{*OO'b$PO~OP*RO!T#zO'b$PO~O!T*TO~Ou*VO!TSO~O!n*[O~Oc*aO~O'](|O!S(TP~Oc$jO~O%RtO']${O~P8wOZ*gO^*fO~OQTORTO]cObnOcmOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!nlO#x^O%PqO'fQO'oYO'|aO~O!T!bO#t!lO']9aO~P!1_O^*fO_$^O'W$^O~O_*kO#d*mO%T*mO%U*mO~P){O!d%`O~O%t*rO~O!T*tO~O&V*vO&X*wOQ&SaR&SaX&Sa]&Sa_&Sab&Sac&Sah&Saj&Sak&Sal&Saq&Sas&Sax&Sa{&Sa|&Sa}&Sa!T&Sa!_&Sa!d&Sa!g&Sa!h&Sa!i&Sa!j&Sa!k&Sa!n&Sa#d&Sa#t&Sa#x&Sa%P&Sa%R&Sa%T&Sa%U&Sa%X&Sa%Z&Sa%^&Sa%_&Sa%a&Sa%n&Sa%t&Sa%v&Sa%x&Sa%z&Sa%}&Sa&T&Sa&Z&Sa&]&Sa&_&Sa&a&Sa&c&Sa'S&Sa']&Sa'f&Sa'o&Sa'|&Sa!S&Sa%{&Sa`&Sa&Q&Sa~O']*|O~On+PO~O!O&ia!R&ia~P!)wO!Q+TO!O&iX!R&iX~P){O!R%zO!O'ja~O!O'ja~P>aO!R&`O!O'ta~O!RwX!R!ZX!SwX!S!ZX!]wX!]!ZX!d!ZX!{wX'b!ZX~O!]+YO!{+XO!R#TX!R'lX!S#TX!S'lX!]'lX!d'lX'b'lX~O!]+[O!d$ZO'b$PO!R!VX!S!VX~O]&ROk&ROx&SO'g(jO~OQ9^OR9^O]cOb;`Oc!jOhcOj9^OkcOlcOq9^Os9^OxRO{cO|cO}cO!T!bO!_9`O!dUO!g9^O!h9^O!i9^O!j9^O!k9^O!n!iO#t!lO#x^O'fQO'oYO'|;^O~O']:SO~P!;jO!R+`O!S'kX~O!S+bO~O!]+YO!{+XO!R#TX!S#TX~O!R+cO!S'vX~O!S+eO~O]&ROk&ROx&SO'^$dO'g(jO~O!X+fO!Y+fO~P!>hOx$uO!Q+hO!T$vO']$bO!O&nX!R&nX~O_+lO!W+oO!X+kO!Y+kO!r+sO!s+qO!t+rO!u+pO!x+tO'^$dO'g(jO'o+iO~O!S+nO~P!?iOP+yO!T&dO!o+xO~O!{,PO!R'ra!c'ra_'ra'W'ra~O!]!wO~P!@sO!R&tO!c'qa~Ox$uO!Q,SO!T$vO#U,UO#V,SO']$bO!R&pX!c&pX~O_#Oi!R#Oi'W#Oi!O#Oi!c#Oin#Oi!T#Oi%Q#Oi!]#Oi~P!)wOP;tOu(SOx(TO'w(VO'x(XO~O#W!za!R!za!c!za!{!za!T!za_!za'W!za!O!za~P!BpO#W'eXQ'eXZ'eX_'eXj'eXv'eX!a'eX!d'eX!j'eX#['eX#]'eX#^'eX#_'eX#`'eX#a'eX#b'eX#c'eX#e'eX#g'eX#i'eX#j'eX'W'eX'f'eX'p'eX!c'eX!O'eX!T'eXn'eX%Q'eX!]'eX~P!'cO!R,_O'a'mX~P!#{O'a,aO~O!R,bO!c'nX~P!)wO!c,eO~O!O,fO~OQ#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O'fQOZ#Zi_#Zij#Zi!R#Zi!a#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'w#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~O#[#Zi~P!FfO#[#PO~P!FfOQ#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO'fQOZ#Zi_#Zi!R#Zi!a#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'w#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~Oj#Zi~P!IQOj#RO~P!IQOQ#^Oj#ROu!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO'fQO_#Zi!R#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'w#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~OZ#Zi!a#Zi#a#Zi#b#Zi#c#Zi~P!KlOZ#dO!a#TO#a#TO#b#TO#c#TO~P!KlOQ#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO'fQO_#Zi!R#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~O'w#Zi~P!NdO'w!}O~P!NdOQ#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO'fQO'w!}O_#Zi!R#Zi#i#Zi#j#Zi'W#Zi'p#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~O'x#Zi~P##OO'x#OO~P##OOQ#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO'fQO'w!}O'x#OO~O_#Zi!R#Zi#j#Zi'W#Zi'p#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~P#%jOQ[XZ[Xj[Xu[Xv[Xx[X!a[X!b[X!d[X!j[X!{[X#WdX#[[X#][X#^[X#_[X#`[X#a[X#b[X#c[X#e[X#g[X#i[X#j[X#o[X'f[X'p[X'w[X'x[X!R[X!S[X~O#m[X~P#'}OQ#^OZ9rOj9gOu!{Ov!{Ox!|O!a9iO!b!yO!d!zO!j#^O#[9eO#]9fO#^9fO#_9fO#`9hO#a9iO#b9iO#c9iO#e9jO#g9lO#i9nO#j9oO'fQO'p#[O'w!}O'x#OO~O#m,hO~P#*XOQ'iXZ'iXj'iXu'iXv'iXx'iX!a'iX!b'iX!d'iX!j'iX#['iX#]'iX#^'iX#_'iX#`'iX#a'iX#b'iX#e'iX#g'iX#i'iX#j'iX'f'iX'p'iX'w'iX'x'iX!R'iX~O!{9sO#o9sO#c'iX#m'iX!S'iX~P#,SO_&sa!R&sa'W&sa!c&san&sa!O&sa!T&sa%Q&sa!]&sa~P!)wOQ#ZiZ#Zi_#Zij#Ziv#Zi!R#Zi!a#Zi!b#Zi!d#Zi!j#Zi#[#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'f#Zi'p#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~P!BpO_#ni!R#ni'W#ni!O#ni!c#nin#ni!T#ni%Q#ni!]#ni~P!)wO#z,jO~O#z,kO~O!]'lO!{,lO!T$OX#w$OX#z$OX$R$OX~O!Q,mO~O!T'oO#w,oO#z'nO$R,pO~O!R9pO!S'hX~P#*XO!S,qO~O$R,sO~OS'}O'U(OO'V,vO~O],yOk,yO!O,zO~O!RdX!]dX!cdX!c$eX'pdX~P!!rO!c-QO~P!BpO!R-RO!]!wO'p&oO!c'}X~O!c-WO~O!Q(`O']$bO!c'}P~O#W-YO~O!O$eX!R$eX!]$lX~P!!rO!R-ZO!O(OX~P!BpO!]-]O~O!O-_O~Oj-cO!]!wO!d$ZO'b$PO'p&oO~O!])aO~O_$^O!R-hO'W$^O~O!S-jO~P!&jO!X-kO!Y-kO'^$dO'g(jO~Ox-mO'g(jO~O!x-nO~O']${O!R&xX'a&xX~O!R(yO'a'ca~O'a-sO~Ou-tOv-tOx-uOPra'wra'xra!Rra!{ra~O'ara#mra~P#7pOu(SOx(TOP$^a'w$^a'x$^a!R$^a!{$^a~O'a$^a#m$^a~P#8fOu(SOx(TOP$`a'w$`a'x$`a!R$`a!{$`a~O'a$`a#m$`a~P#9XO]-vO~O#W-wO~O'a$na!R$na!{$na#m$na~P!#{O#W-zO~OP.TO!T&dO!o.SO%Q.RO~O]#qOj#rOk#qOl#qOq$ROs9tOx#yO!T#zO!_;eO!d#vO#V9}O#t$VO$_9wO$a9zO$d$WO'b$PO'f#sO~Oh.VO'].UO~P#:yO!])aO!T'`a_'`a!R'`a'W'`a~O#W.]O~OZ[X!RdX!SdX~O!R.^O!S(VX~O!S.`O~OZ.aO~O].cO'])iO~O!T$lO']$bO^'QX!R'QX~O!R)nO^(Ua~O!c.fO~P!)wO].hO~OZ.iO~O^.jO~OP.TO!T&dO!o.SO%Q.RO'b$PO~O!R)zO_(Ra'W(Ra~O!{.pO~OP.sO!T#zO~O'g'TO!S(SP~OP.}O!T.yO!o.|O%Q.{O'b$PO~OZ/XO!R/VO!S(TX~O!S/YO~O^/[O_$^O'W$^O~O]/]O~O]/^O'](|O~O#c/_O%r/`O~P0zO!{#eO#c/_O%r/`O~O_/aO~P){O_/cO~O%{/gOQ%yiR%yiX%yi]%yi_%yib%yic%yih%yij%yik%yil%yiq%yis%yix%yi{%yi|%yi}%yi!T%yi!_%yi!d%yi!g%yi!h%yi!i%yi!j%yi!k%yi!n%yi#d%yi#t%yi#x%yi%P%yi%R%yi%T%yi%U%yi%X%yi%Z%yi%^%yi%_%yi%a%yi%n%yi%t%yi%v%yi%x%yi%z%yi%}%yi&T%yi&Z%yi&]%yi&_%yi&a%yi&c%yi'S%yi']%yi'f%yi'o%yi'|%yi!S%yi`%yi&Q%yi~O`/mO!S/kO&Q/lO~P`O!TSO!d/oO~O&X*wOQ&SiR&SiX&Si]&Si_&Sib&Sic&Sih&Sij&Sik&Sil&Siq&Sis&Six&Si{&Si|&Si}&Si!T&Si!_&Si!d&Si!g&Si!h&Si!i&Si!j&Si!k&Si!n&Si#d&Si#t&Si#x&Si%P&Si%R&Si%T&Si%U&Si%X&Si%Z&Si%^&Si%_&Si%a&Si%n&Si%t&Si%v&Si%x&Si%z&Si%}&Si&T&Si&Z&Si&]&Si&_&Si&a&Si&c&Si'S&Si']&Si'f&Si'o&Si'|&Si!S&Si%{&Si`&Si&Q&Si~O!R#bOn$]a~O!O&ii!R&ii~P!)wO!R%zO!O'ji~O!R&`O!O'ti~O!O/uO~O!R!Va!S!Va~P#*XO]&ROk&RO!Q/{O'g(jO!R&jX!S&jX~P@dO!R+`O!S'ka~O]&ZOk&ZO!Q)yO'g'TO!R&oX!S&oX~O!R+cO!S'va~O!O'ui!R'ui~P!)wO_$^O!]!wO!d$ZO!j0VO!{0TO'W$^O'b$PO'p&oO~O!S0YO~P!?iO!X0ZO!Y0ZO'^$dO'g(jO'o+iO~O!W0[O~P#MSO!TSO!W0[O!u0^O!x0_O~P#MSO!W0[O!s0aO!t0aO!u0^O!x0_O~P#MSO!T&dO~O!T&dO~P!BpO!R'ri!c'ri_'ri'W'ri~P!)wO!{0jO!R'ri!c'ri_'ri'W'ri~O!R&tO!c'qi~Ox$uO!T$vO#V0lO']$bO~O#WraQraZra_rajra!ara!bra!dra!jra#[ra#]ra#^ra#_ra#`ra#ara#bra#cra#era#gra#ira#jra'Wra'fra'pra!cra!Ora!Tranra%Qra!]ra~P#7pO#W$^aQ$^aZ$^a_$^aj$^av$^a!a$^a!b$^a!d$^a!j$^a#[$^a#]$^a#^$^a#_$^a#`$^a#a$^a#b$^a#c$^a#e$^a#g$^a#i$^a#j$^a'W$^a'f$^a'p$^a!c$^a!O$^a!T$^an$^a%Q$^a!]$^a~P#8fO#W$`aQ$`aZ$`a_$`aj$`av$`a!a$`a!b$`a!d$`a!j$`a#[$`a#]$`a#^$`a#_$`a#`$`a#a$`a#b$`a#c$`a#e$`a#g$`a#i$`a#j$`a'W$`a'f$`a'p$`a!c$`a!O$`a!T$`an$`a%Q$`a!]$`a~P#9XO#W$naQ$naZ$na_$naj$nav$na!R$na!a$na!b$na!d$na!j$na#[$na#]$na#^$na#_$na#`$na#a$na#b$na#c$na#e$na#g$na#i$na#j$na'W$na'f$na'p$na!c$na!O$na!T$na!{$nan$na%Q$na!]$na~P!BpO_#Oq!R#Oq'W#Oq!O#Oq!c#Oqn#Oq!T#Oq%Q#Oq!]#Oq~P!)wO!R&kX'a&kX~PJjO!R,_O'a'ma~O!Q0tO!R&lX!c&lX~P){O!R,bO!c'na~O!R,bO!c'na~P!)wO#m!fa!S!fa~PCfO#m!^a!R!^a!S!^a~P#*XO!T1XO#x^O$P1YO~O!S1^O~On1_O~P!BpO_$Yq!R$Yq'W$Yq!O$Yq!c$Yqn$Yq!T$Yq%Q$Yq!]$Yq~P!)wO!O1`O~O],yOk,yO~Ou(SOx(TO'x(XOP$xi'w$xi!R$xi!{$xi~O'a$xi#m$xi~P$.POu(SOx(TOP$zi'w$zi'x$zi!R$zi!{$zi~O'a$zi#m$zi~P$.rO'p#[O~P!BpO!Q1cO']$bO!R&tX!c&tX~O!R-RO!c'}a~O!R-RO!]!wO!c'}a~O!R-RO!]!wO'p&oO!c'}a~O'a$gi!R$gi!{$gi#m$gi~P!#{O!Q1kO'](eO!O&vX!R&vX~P!$jO!R-ZO!O(Oa~O!R-ZO!O(Oa~P!BpO!]!wO~O!]!wO#c1sO~Oj1vO!]!wO'p&oO~O!R'di'a'di~P!#{O!{1yO!R'di'a'di~P!#{O!c1|O~O_$Zq!R$Zq'W$Zq!O$Zq!c$Zqn$Zq!T$Zq%Q$Zq!]$Zq~P!)wO!R2QO!T(PX~P!BpO!T&dO%Q2TO~O!T&dO%Q2TO~P!BpO!T$eX$u[X_$eX!R$eX'W$eX~P!!rO$u2XOPgXugXxgX!TgX'wgX'xgX_gX!RgX'WgX~O$u2XO~O]2_O%R2`O'])iO!R'PX!S'PX~O!R.^O!S(Va~OZ2dO~O^2eO~O]2hO~OP2jO!T&dO!o2iO%Q2TO~O_$^O'W$^O~P!BpO!T#zO~P!BpO!R2oO!{2qO!S(SX~O!S2rO~Ox;oO!W2{O!X2tO!Y2tO!r2zO!s2yO!t2yO!x2xO'^$dO'g(jO'o+iO~O!S2wO~P$7ZOP3SO!T.yO!o3RO%Q3QO~OP3SO!T.yO!o3RO%Q3QO'b$PO~O'](|O!R'OX!S'OX~O!R/VO!S(Ta~O]3^O'g3]O~O]3_O~O^3aO~O!c3dO~P){O_3fO~O_3fO~P){O#c3hO%r3iO~PFOO`/mO!S3mO&Q/lO~P`O!]3oO~O!R#Ti!S#Ti~P#*XO!{3qO!R#Ti!S#Ti~O!R!Vi!S!Vi~P#*XO_$^O!{3xO'W$^O~O_$^O!]!wO!{3xO'W$^O~O!X3|O!Y3|O'^$dO'g(jO'o+iO~O_$^O!]!wO!d$ZO!j3}O!{3xO'W$^O'b$PO'p&oO~O!W4OO~P$;xO!W4OO!u4RO!x4SO~P$;xO_$^O!]!wO!j3}O!{3xO'W$^O'p&oO~O!R'rq!c'rq_'rq'W'rq~P!)wO!R&tO!c'qq~O#W$xiQ$xiZ$xi_$xij$xiv$xi!a$xi!b$xi!d$xi!j$xi#[$xi#]$xi#^$xi#_$xi#`$xi#a$xi#b$xi#c$xi#e$xi#g$xi#i$xi#j$xi'W$xi'f$xi'p$xi!c$xi!O$xi!T$xin$xi%Q$xi!]$xi~P$.PO#W$ziQ$ziZ$zi_$zij$ziv$zi!a$zi!b$zi!d$zi!j$zi#[$zi#]$zi#^$zi#_$zi#`$zi#a$zi#b$zi#c$zi#e$zi#g$zi#i$zi#j$zi'W$zi'f$zi'p$zi!c$zi!O$zi!T$zin$zi%Q$zi!]$zi~P$.rO#W$giQ$giZ$gi_$gij$giv$gi!R$gi!a$gi!b$gi!d$gi!j$gi#[$gi#]$gi#^$gi#_$gi#`$gi#a$gi#b$gi#c$gi#e$gi#g$gi#i$gi#j$gi'W$gi'f$gi'p$gi!c$gi!O$gi!T$gi!{$gin$gi%Q$gi!]$gi~P!BpO!R&ka'a&ka~P!#{O!R&la!c&la~P!)wO!R,bO!c'ni~O#m#Oi!R#Oi!S#Oi~P#*XOQ#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O'fQOZ#Zij#Zi!a#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'w#Zi'x#Zi!R#Zi!S#Zi~O#[#Zi~P$EiO#[9eO~P$EiOQ#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[9eO#]9fO#^9fO#_9fO'fQOZ#Zi!a#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'w#Zi'x#Zi!R#Zi!S#Zi~Oj#Zi~P$GqOj9gO~P$GqOQ#^Oj9gOu!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[9eO#]9fO#^9fO#_9fO#`9hO'fQO#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'w#Zi'x#Zi!R#Zi!S#Zi~OZ#Zi!a#Zi#a#Zi#b#Zi#c#Zi~P$IyOZ9rO!a9iO#a9iO#b9iO#c9iO~P$IyOQ#^OZ9rOj9gOu!{Ov!{Ox!|O!a9iO!b!yO!d!zO!j#^O#[9eO#]9fO#^9fO#_9fO#`9hO#a9iO#b9iO#c9iO#e9jO'fQO#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'x#Zi!R#Zi!S#Zi~O'w#Zi~P$L_O'w!}O~P$L_OQ#^OZ9rOj9gOu!{Ov!{Ox!|O!a9iO!b!yO!d!zO!j#^O#[9eO#]9fO#^9fO#_9fO#`9hO#a9iO#b9iO#c9iO#e9jO#g9lO'fQO'w!}O#i#Zi#j#Zi#m#Zi'p#Zi!R#Zi!S#Zi~O'x#Zi~P$NgO'x#OO~P$NgOQ#^OZ9rOj9gOu!{Ov!{Ox!|O!a9iO!b!yO!d!zO!j#^O#[9eO#]9fO#^9fO#_9fO#`9hO#a9iO#b9iO#c9iO#e9jO#g9lO#i9nO'fQO'w!}O'x#OO~O#j#Zi#m#Zi'p#Zi!R#Zi!S#Zi~P%!oO_#ky!R#ky'W#ky!O#ky!c#kyn#ky!T#ky%Q#ky!]#ky~P!)wOP;vOu(SOx(TO'w(VO'x(XO~OQ#ZiZ#Zij#Ziv#Zi!a#Zi!b#Zi!d#Zi!j#Zi#[#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'f#Zi'p#Zi!R#Zi!S#Zi~P%%aO!b!yOP'eXu'eXx'eX'w'eX'x'eX!S'eX~OQ'eXZ'eXj'eXv'eX!a'eX!d'eX!j'eX#['eX#]'eX#^'eX#_'eX#`'eX#a'eX#b'eX#c'eX#e'eX#g'eX#i'eX#j'eX#m'eX'f'eX'p'eX!R'eX~P%'eO#m#ni!R#ni!S#ni~P#*XO!S4eO~O!R&sa!S&sa~P#*XO!]!wO'p&oO!R&ta!c&ta~O!R-RO!c'}i~O!R-RO!]!wO!c'}i~O'a$gq!R$gq!{$gq#m$gq~P!#{O!O&va!R&va~P!BpO!]4lO~O!R-ZO!O(Oi~P!BpO!R-ZO!O(Oi~O!O4pO~O!]!wO#c4uO~Oj4vO!]!wO'p&oO~O!O4xO~O'a$iq!R$iq!{$iq#m$iq~P!#{O_$Zy!R$Zy'W$Zy!O$Zy!c$Zyn$Zy!T$Zy%Q$Zy!]$Zy~P!)wO!R2QO!T(Pa~O!T&dO%Q4}O~O!T&dO%Q4}O~P!BpO_#Oy!R#Oy'W#Oy!O#Oy!c#Oyn#Oy!T#Oy%Q#Oy!]#Oy~P!)wOZ5QO~O]5SO'])iO~O!R.^O!S(Vi~O]5VO~O^5WO~O'g'TO!R&{X!S&{X~O!R2oO!S(Sa~O!S5eO~P$7ZOx;sO'g(jO'o+iO~O!W5hO!X5gO!Y5gO!x0_O'^$dO'g(jO'o+iO~O!s5iO!t5iO~P%0^O!X5gO!Y5gO'^$dO'g(jO'o+iO~O!T.yO~O!T.yO%Q5kO~O!T.yO%Q5kO~P!BpOP5pO!T.yO!o5oO%Q5kO~OZ5uO!R'Oa!S'Oa~O!R/VO!S(Ti~O]5xO~O!c5yO~O!c5zO~O!c5{O~O!c5{O~P){O_5}O~O!]6QO~O!c6RO~O!R'ui!S'ui~P#*XO_$^O'W$^O~P!)wO_$^O!{6WO'W$^O~O_$^O!]!wO!{6WO'W$^O~O!X6]O!Y6]O'^$dO'g(jO'o+iO~O_$^O!]!wO!j6^O!{6WO'W$^O'p&oO~O!d$ZO'b$PO~P%4xO!W6_O~P%4gO!R'ry!c'ry_'ry'W'ry~P!)wO#W$gqQ$gqZ$gq_$gqj$gqv$gq!R$gq!a$gq!b$gq!d$gq!j$gq#[$gq#]$gq#^$gq#_$gq#`$gq#a$gq#b$gq#c$gq#e$gq#g$gq#i$gq#j$gq'W$gq'f$gq'p$gq!c$gq!O$gq!T$gq!{$gqn$gq%Q$gq!]$gq~P!BpO#W$iqQ$iqZ$iq_$iqj$iqv$iq!R$iq!a$iq!b$iq!d$iq!j$iq#[$iq#]$iq#^$iq#_$iq#`$iq#a$iq#b$iq#c$iq#e$iq#g$iq#i$iq#j$iq'W$iq'f$iq'p$iq!c$iq!O$iq!T$iq!{$iqn$iq%Q$iq!]$iq~P!BpO!R&li!c&li~P!)wO#m#Oq!R#Oq!S#Oq~P#*XOu-tOv-tOx-uOPra'wra'xra!Sra~OQraZrajra!ara!bra!dra!jra#[ra#]ra#^ra#_ra#`ra#ara#bra#cra#era#gra#ira#jra#mra'fra'pra!Rra~P%;OOu(SOx(TOP$^a'w$^a'x$^a!S$^a~OQ$^aZ$^aj$^av$^a!a$^a!b$^a!d$^a!j$^a#[$^a#]$^a#^$^a#_$^a#`$^a#a$^a#b$^a#c$^a#e$^a#g$^a#i$^a#j$^a#m$^a'f$^a'p$^a!R$^a~P%=SOu(SOx(TOP$`a'w$`a'x$`a!S$`a~OQ$`aZ$`aj$`av$`a!a$`a!b$`a!d$`a!j$`a#[$`a#]$`a#^$`a#_$`a#`$`a#a$`a#b$`a#c$`a#e$`a#g$`a#i$`a#j$`a#m$`a'f$`a'p$`a!R$`a~P%?WOQ$naZ$naj$nav$na!a$na!b$na!d$na!j$na#[$na#]$na#^$na#_$na#`$na#a$na#b$na#c$na#e$na#g$na#i$na#j$na#m$na'f$na'p$na!R$na!S$na~P%%aO#m$Yq!R$Yq!S$Yq~P#*XO#m$Zq!R$Zq!S$Zq~P#*XO!S6hO~O#m6iO~P!#{O!]!wO!R&ti!c&ti~O!]!wO'p&oO!R&ti!c&ti~O!R-RO!c'}q~O!O&vi!R&vi~P!BpO!R-ZO!O(Oq~O!O6oO~P!BpO!O6oO~O!R'dy'a'dy~P!#{O!R&ya!T&ya~P!BpO!T$tq_$tq!R$tq'W$tq~P!BpOZ6vO~O!R.^O!S(Vq~O]6yO~O!T&dO%Q6zO~O!T&dO%Q6zO~P!BpO!{6{O!R&{a!S&{a~O!R2oO!S(Si~P#*XO!X7RO!Y7RO'^$dO'g(jO'o+iO~O!W7TO!x4SO~P%GXO!T.yO%Q7WO~O!T.yO%Q7WO~P!BpO]7_O'g7^O~O!R/VO!S(Tq~O!c7aO~O!c7aO~P){O!c7cO~O!c7dO~O!R#Ty!S#Ty~P#*XO_$^O!{7jO'W$^O~O_$^O!]!wO!{7jO'W$^O~O!X7mO!Y7mO'^$dO'g(jO'o+iO~O_$^O!]!wO!j7nO!{7jO'W$^O'p&oO~O#m#ky!R#ky!S#ky~P#*XOQ$giZ$gij$giv$gi!a$gi!b$gi!d$gi!j$gi#[$gi#]$gi#^$gi#_$gi#`$gi#a$gi#b$gi#c$gi#e$gi#g$gi#i$gi#j$gi#m$gi'f$gi'p$gi!R$gi!S$gi~P%%aOu(SOx(TO'x(XOP$xi'w$xi!S$xi~OQ$xiZ$xij$xiv$xi!a$xi!b$xi!d$xi!j$xi#[$xi#]$xi#^$xi#_$xi#`$xi#a$xi#b$xi#c$xi#e$xi#g$xi#i$xi#j$xi#m$xi'f$xi'p$xi!R$xi~P%LjOu(SOx(TOP$zi'w$zi'x$zi!S$zi~OQ$ziZ$zij$ziv$zi!a$zi!b$zi!d$zi!j$zi#[$zi#]$zi#^$zi#_$zi#`$zi#a$zi#b$zi#c$zi#e$zi#g$zi#i$zi#j$zi#m$zi'f$zi'p$zi!R$zi~P%NnO#m$Zy!R$Zy!S$Zy~P#*XO#m#Oy!R#Oy!S#Oy~P#*XO!]!wO!R&tq!c&tq~O!R-RO!c'}y~O!O&vq!R&vq~P!BpO!O7tO~P!BpO!R.^O!S(Vy~O!R2oO!S(Sq~O!X8QO!Y8QO'^$dO'g(jO'o+iO~O!T.yO%Q8TO~O!T.yO%Q8TO~P!BpO!c8WO~O_$^O!{8]O'W$^O~O_$^O!]!wO!{8]O'W$^O~OQ$gqZ$gqj$gqv$gq!a$gq!b$gq!d$gq!j$gq#[$gq#]$gq#^$gq#_$gq#`$gq#a$gq#b$gq#c$gq#e$gq#g$gq#i$gq#j$gq#m$gq'f$gq'p$gq!R$gq!S$gq~P%%aOQ$iqZ$iqj$iqv$iq!a$iq!b$iq!d$iq!j$iq#[$iq#]$iq#^$iq#_$iq#`$iq#a$iq#b$iq#c$iq#e$iq#g$iq#i$iq#j$iq#m$iq'f$iq'p$iq!R$iq!S$iq~P%%aO'a$|!Z!R$|!Z!{$|!Z#m$|!Z~P!#{O!R&{q!S&{q~P#*XO_$^O!{8oO'W$^O~O#W$|!ZQ$|!ZZ$|!Z_$|!Zj$|!Zv$|!Z!R$|!Z!a$|!Z!b$|!Z!d$|!Z!j$|!Z#[$|!Z#]$|!Z#^$|!Z#_$|!Z#`$|!Z#a$|!Z#b$|!Z#c$|!Z#e$|!Z#g$|!Z#i$|!Z#j$|!Z'W$|!Z'f$|!Z'p$|!Z!c$|!Z!O$|!Z!T$|!Z!{$|!Zn$|!Z%Q$|!Z!]$|!Z~P!BpOP;uOu(SOx(TO'w(VO'x(XO~O!S!za!W!za!X!za!Y!za!r!za!s!za!t!za!x!za'^!za'g!za'o!za~P&,_O!W'eX!X'eX!Y'eX!r'eX!s'eX!t'eX!x'eX'^'eX'g'eX'o'eX~P%'eOQ$|!ZZ$|!Zj$|!Zv$|!Z!a$|!Z!b$|!Z!d$|!Z!j$|!Z#[$|!Z#]$|!Z#^$|!Z#_$|!Z#`$|!Z#a$|!Z#b$|!Z#c$|!Z#e$|!Z#g$|!Z#i$|!Z#j$|!Z#m$|!Z'f$|!Z'p$|!Z!R$|!Z!S$|!Z~P%%aO!Wra!Xra!Yra!rra!sra!tra!xra'^ra'gra'ora~P%;OO!W$^a!X$^a!Y$^a!r$^a!s$^a!t$^a!x$^a'^$^a'g$^a'o$^a~P%=SO!W$`a!X$`a!Y$`a!r$`a!s$`a!t$`a!x$`a'^$`a'g$`a'o$`a~P%?WO!S$na!W$na!X$na!Y$na!r$na!s$na!t$na!x$na'^$na'g$na'o$na~P&,_O!W$xi!X$xi!Y$xi!r$xi!s$xi!t$xi!x$xi'^$xi'g$xi'o$xi~P%LjO!W$zi!X$zi!Y$zi!r$zi!s$zi!t$zi!x$zi'^$zi'g$zi'o$zi~P%NnO!S$gi!W$gi!X$gi!Y$gi!r$gi!s$gi!t$gi!x$gi'^$gi'g$gi'o$gi~P&,_O!S$gq!W$gq!X$gq!Y$gq!r$gq!s$gq!t$gq!x$gq'^$gq'g$gq'o$gq~P&,_O!S$iq!W$iq!X$iq!Y$iq!r$iq!s$iq!t$iq!x$iq'^$iq'g$iq'o$iq~P&,_O!S$|!Z!W$|!Z!X$|!Z!Y$|!Z!r$|!Z!s$|!Z!t$|!Z!x$|!Z'^$|!Z'g$|!Z'o$|!Z~P&,_On'hX~P.jOn[X!O[X!c[X%r[X!T[X%Q[X!][X~P$zO!]dX!c[X!cdX'pdX~P;dOQ9^OR9^O]cOb;`Oc!jOhcOj9^OkcOlcOq9^Os9^OxRO{cO|cO}cO!TSO!_9`O!dUO!g9^O!h9^O!i9^O!j9^O!k9^O!n!iO#t!lO#x^O']'cO'fQO'oYO'|;^O~O]#qOh$QOj#rOk#qOl#qOq$ROs9uOx#yO!T#zO!_;fO!d#vO#V:OO#t$VO$_9xO$a9{O$d$WO']&{O'b$PO'f#sO~O!R9pO!S$]a~O]#qOh$QOj#rOk#qOl#qOq$ROs9vOx#yO!T#zO!_;gO!d#vO#V:PO#t$VO$_9yO$a9|O$d$WO']&{O'b$PO'f#sO~O#d'jO~P&<WO!S[X!SdX~P;dO!]9dO~O#W9cO~O!]!wO#W9cO~O!{9sO~O#c9iO~O!{:QO!R'uX!S'uX~O!{9sO!R'sX!S'sX~O#W:RO~O'a:TO~P!#{O#W:[O~O#W:]O~O#W:^O~O!]!wO#W:_O~O!]!wO#W:RO~O#m:`O~P#*XO#W:aO~O#W:bO~O#W:cO~O#W:dO~O#W:eO~O#W:fO~O#W:gO~O#W:hO~O!O:iO~O#m:jO~P!#{O#m:kO~P!#{O#m:lO~P!#{O!O:mO~P!BpO!O:mO~O!O:nO~P!BpO!]!wO#c;lO~O!]!wO#c;nO~O#x~!b!r!t!u#U#V'|$_$a$d$u%P%Q%R%X%Z%^%_%a%c~UT#x'|#]}'Y'Z#z'Y']'g~",
     goto: "#Kk(ZPPPPPPPP([P(lP*`PPPP-zPP.a3s7o8SP8SPPP8SP:U8SP8SP:YPP:`P:t?VPPPP?ZPPPP?ZA{PPPBRDdP?ZPFwPPPPHp?ZPPPPPJi?ZPPMjNgPPPPNk!!TP!!]!#^PNg?Z?Z!&n!)i!.[!.[!1kPPP!1r!4h?ZPPPPPPPPPP!7_P!8pPP?Z!9}P?ZP?Z?Z?Z?ZP?Z!;dPP!>]P!AQ!AY!A^!A^P!>YP!Ab!AbP!DVP!DZ?Z?Z!Da!GT8SP8SP8S8SP!HW8S8S!Jf8S!M_8S# g8S8S#!T#$c#$c#$g#$c#$oP#$cP8S#%k8S#'X8S8S-zPPP#(yPP#)c#)cP#)cP#)x#)cPP#*OP#)uP#)u#*b!!X#)u#+P#+V#+Y([#+]([P#+d#+d#+dP([P([P([P([PP([P#+j#+mP#+m([P#+qP#+tP([P([P([P([P([P([([#+z#,U#,[#,b#,p#,v#,|#-W#-^#-m#-s#.R#.X#._#.m#/S#0z#1Y#1`#1f#1l#1r#1|#2S#2Y#2d#2v#2|PPPPPPPP#3SPP#3v#7OPP#8f#8m#8uPP#>a#@t#Fp#Fs#Fv#GR#GUPP#GX#G]#Gz#Hq#Hu#IZPP#I_#Ie#IiP#Il#Ip#Is#Jc#Jy#KO#KR#KU#K[#K_#Kc#KgmhOSj}!n$]%c%f%g%i*o*t/g/jQ$imQ$ppQ%ZyS&V!b+`Q&k!jS(l#z(qQ)g$jQ)t$rQ*`%TQ+f&^S+k&d+mQ+}&lQ-k(sQ/U*aY0Z+o+p+q+r+sS2t.y2vU3|0[0^0aU5g2y2z2{S6]4O4RS7R5h5iQ7m6_R8Q7T$p[ORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%c%e%f%g%i%m%x%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8o!j'e#]#k&W'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aQ(}$SQ)l$lQ*b%WQ*i%`Q,X9tQ.W)aQ.c)mQ/^*gQ2_.^Q3Z/VQ4^9vQ5S2`R8{9upeOSjy}!n$]%Y%c%f%g%i*o*t/g/jR*d%[&WVOSTjkn}!S!W!k!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$]$n%[%_%`%c%e%f%g%i%m%z&S&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;`;a[!cRU!]!`%x&WQ$clQ$hmS$mp$rv$wrs!r!u$Z$u&`&t&w)x)y)z*m+Y+h,S,U/o0lQ%PwQ&h!iQ&j!jS(_#v(cS)f$i$jQ)j$lQ)w$tQ*Z%RQ*_%TS+|&k&lQ-V(`Q.[)gQ.b)mQ.d)nQ.g)rQ/P*[S/T*`*aQ0h+}Q1b-RQ2^.^Q2b.aQ2g.iQ3Y/UQ4i1cQ5R2`Q5U2dQ6u5QR7w6vx#xa!y$T$U$Y(W(Y(b(w(x,_-Y-w1a1y6i;^;i;j;k!Y$fm!j$h$i$j&U&j&k&l(k)f)g+]+j+|+}-d.[0Q0W0]0h1u3{4Q6Z7k8^Q)`$cQ*P$|Q*S$}Q*^%TQ.k)wQ/O*ZU/S*_*`*aQ3T/PS3X/T/UQ5b2sQ5t3YS7P5c5fS8O7Q7SQ8f8PQ8u8g#[;b!w#d#v#y&g'}(Z(h)])_)a*O*R+y-Z-].R.T.p.s.{.}1k1s2Q2T2X2j3Q3S4l4u4}5k5p6z7W8T9w9z9}:U:X:[:a:d:j;l;n;t;u;vd;c9d9x9{:O:V:Y:]:b:e:ke;d9r9y9|:P:W:Z:^:c:f:lW#}a$P(y;^S$|t%YQ$}uQ%OvR)}$z%P#|a!w!y#d#v#y$T$U$Y&g'}(W(Y(Z(b(h(w(x)])_)a*O*R+y,_-Y-Z-]-w.R.T.p.s.{.}1a1k1s1y2Q2T2X2j3Q3S4l4u4}5k5p6i6z7W8T9d9r9w9x9y9z9{9|9}:O:P:U:V:W:X:Y:Z:[:]:^:a:b:c:d:e:f:j:k:l;^;i;j;k;l;n;t;u;vT(O#s(PX)O$S9t9u9vU&Z!b$v+cQ'U!{Q)q$oQ.t*TQ1z-tR5^2o&^cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$]$n%[%_%`%c%e%f%g%i%m%x%z&S&W&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;a$]#aZ!_!o$a%w%}&y'Q'W'X'Y'Z'[']'^'_'`'a'b'd'g'k'u)p+R+^+g,O,^,d,g,i,w-x/v/y0i0s0w0x0y0z0{0|0}1O1P1Q1R1S1T1W1]2O2[3s3v4W4[4]4b4c5`6S6V6b6f6g7g7z8Z8m8y9_:|T!XQ!Y&_cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$]$n%[%_%`%c%e%f%g%i%m%x%z&S&W&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aQ&X!bR/|+`Y&R!b&V&^+`+fS(k#z(qS+j&d+mS-d(l(sQ-e(mQ-l(tQ.v*VU0W+k+o+pU0]+q+r+sS0b+t2xQ1u-kQ1w-mQ1x-nS2s.y2vU3{0Z0[0^Q4P0_Q4Q0aS5c2t2{S5f2y2zU6Z3|4O4RQ6`4SS7Q5g5hQ7S5iS7k6]6_S8P7R7TQ8^7mQ8g8QQ;h;oR;m;slhOSj}!n$]%c%f%g%i*o*t/g/jQ%k!QS&x!v9cQ)d$gQ*X%PQ*Y%QQ+z&iS,]&}:RS-y)V:_Q.Y)eQ.x*WQ/n*vQ/p*wQ/x+ZQ0`+qQ0f+{S2P-z:gQ2Y.ZS2].]:hQ3r/zQ3u0RQ4U0gQ5P2ZQ6T3tQ6X3zQ6a4VQ7e6RQ7h6YQ8Y7iQ8l8[R8x8n$W#`Z!_!o%w%}&y'Q'W'X'Y'Z'[']'^'_'`'a'b'd'g'k'u)p+R+^+g,O,^,d,g,w-x/v/y0i0s0w0x0y0z0{0|0}1O1P1Q1R1S1T1W1]2O2[3s3v4W4[4]4b4c5`6S6V6b6f6g7g7z8Z8m8y9_:|W(v#{&|1V8qT)Z$a,i$W#_Z!_!o%w%}&y'Q'W'X'Y'Z'[']'^'_'`'a'b'd'g'k'u)p+R+^+g,O,^,d,g,w-x/v/y0i0s0w0x0y0z0{0|0}1O1P1Q1R1S1T1W1]2O2[3s3v4W4[4]4b4c5`6S6V6b6f6g7g7z8Z8m8y9_:|Q'f#`S)Y$a,iR-{)Z&^cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$]$n%[%_%`%c%e%f%g%i%m%x%z&S&W&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aQ%f{Q%g|Q%i!OQ%j!PR/f*rQ&e!iQ)[$cQ+w&hS.Q)`)wS0c+u+vW2S-}.O.P.kS4T0d0eU4|2U2V2WU6s4{5Y5ZQ7v6tR8b7yT+l&d+mS+j&d+mU0W+k+o+pU0]+q+r+sS0b+t2xS2s.y2vU3{0Z0[0^Q4P0_Q4Q0aS5c2t2{S5f2y2zU6Z3|4O4RQ6`4SS7Q5g5hQ7S5iS7k6]6_S8P7R7TQ8^7mR8g8QS+l&d+mT2u.y2vS&r!q/dQ-U(_Q-b(kS0V+j2sQ1g-VS1p-c-lU3}0]0b5fQ4h1bS4s1v1xU6^4P4Q7SQ6k4iQ6r4vR7n6`Q!xXS&q!q/dQ)W$[Q)b$eQ)h$kQ,Q&rQ-T(_Q-a(kQ-f(nQ.X)cQ/Q*]S0U+j2sS1f-U-VS1o-b-lQ1r-eQ1t-gQ3V/RW3y0V0]0b5fQ4g1bQ4k1gS4o1p1xQ4t1wQ5r3WW6[3}4P4Q7SS6j4h4iS6n4p:iQ6p4sQ6}5aQ7[5sS7l6^6`Q7r6kS7s6o:mQ7u6rQ7|7OQ8V7]Q8_7nS8a7t:nQ8d7}Q8s8eQ9Q8tQ9X9RQ:u:pQ;T:zQ;U:{Q;V;hR;[;m$rWORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%`%c%e%f%g%i%m%x%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8oS!xn!k!j:o#]#k&W'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aR:u;`$rXORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%`%c%e%f%g%i%m%x%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8oQ$[b!Y$em!j$h$i$j&U&j&k&l(k)f)g+]+j+|+}-d.[0Q0W0]0h1u3{4Q6Z7k8^S$kn!kQ)c$fQ*]%TW/R*^*_*`*aU3W/S/T/UQ5a2sS5s3X3YU7O5b5c5fQ7]5tU7}7P7Q7SS8e8O8PS8t8f8gQ9R8u!j:p#]#k&W'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aQ:z;_R:{;`$f]OSTjk}!S!W!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%c%e%f%g%i%m%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8oY!hRU!]!`%xv$wrs!r!u$Z$u&`&t&w)x)y)z*m+Y+h,S,U/o0lQ*j%`!h:q#]#k'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aR:t&WS&[!b$vR0O+c$p[ORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%c%e%f%g%i%m%x%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8o!j'e#]#k&W'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aR*i%`$roORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%`%c%e%f%g%i%m%x%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8oQ'U!{!k:r#]#k&W'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;a!h#VZ!_$a%w%}&y'Q'_'`'a'b'g'k)p+R+g,O,^,d,w-x0i0s1T2O2[3v4W4[6V7g8Z8m8y9_!R9k'd'u+^,i/v/y0w1P1Q1R1S1W1]3s4]4b4c5`6S6b6f6g7z:|!d#XZ!_$a%w%}&y'Q'a'b'g'k)p+R+g,O,^,d,w-x0i0s1T2O2[3v4W4[6V7g8Z8m8y9_}9m'd'u+^,i/v/y0w1R1S1W1]3s4]4b4c5`6S6b6f6g7z:|!`#]Z!_$a%w%}&y'Q'g'k)p+R+g,O,^,d,w-x0i0s1T2O2[3v4W4[6V7g8Z8m8y9_Q1a-Px;a'd'u+^,i/v/y0w1W1]3s4]4b4c5`6S6b6f6g7z:|Q;i;pQ;j;qR;k;r&^cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$]$n%[%_%`%c%e%f%g%i%m%x%z&S&W&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aS#l`#mR1Y,l&e_ORSTU`jk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k#m$]$n%[%_%`%c%e%f%g%i%m%x%z&S&W&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,l,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aS#g^#nT'n#i'rT#h^#nT'p#i'r&e`ORSTU`jk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k#m$]$n%[%_%`%c%e%f%g%i%m%x%z&S&W&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,l,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aT#l`#mQ#o`R'y#m$rbORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%`%c%e%f%g%i%m%x%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8o!k;_#]#k&W'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;a#RdOSUj}!S!W!n!|#k$]%[%_%`%c%e%f%g%i%m&S&f'w)^*k*o*t+x,m-u.S.|/_/`/a/c/g/j/l1X2i3R3f3h3i5o5}x#{a!y$T$U$Y(W(Y(b(w(x,_-Y-w1a1y6i;^;i;j;k#[&|!w#d#v#y&g'}(Z(h)])_)a*O*R+y-Z-].R.T.p.s.{.}1k1s2Q2T2X2j3Q3S4l4u4}5k5p6z7W8T9w9z9}:U:X:[:a:d:j;l;n;t;u;vQ)S$WQ,x(Sd1V9r9y9|:P:W:Z:^:c:f:le8q9d9x9{:O:V:Y:]:b:e:kx#wa!y$T$U$Y(W(Y(b(w(x,_-Y-w1a1y6i;^;i;j;kQ(d#xS(n#z(qQ)T$XQ-g(o#[:w!w#d#v#y&g'}(Z(h)])_)a*O*R+y-Z-].R.T.p.s.{.}1k1s2Q2T2X2j3Q3S4l4u4}5k5p6z7W8T9w9z9}:U:X:[:a:d:j;l;n;t;u;vd:x9d9x9{:O:V:Y:]:b:e:kd:y9r9y9|:P:W:Z:^:c:f:lQ:};bQ;O;cQ;P;dQ;Q;eQ;R;fR;S;gx#{a!y$T$U$Y(W(Y(b(w(x,_-Y-w1a1y6i;^;i;j;k#[&|!w#d#v#y&g'}(Z(h)])_)a*O*R+y-Z-].R.T.p.s.{.}1k1s2Q2T2X2j3Q3S4l4u4}5k5p6z7W8T9w9z9}:U:X:[:a:d:j;l;n;t;u;vd1V9r9y9|:P:W:Z:^:c:f:le8q9d9x9{:O:V:Y:]:b:e:klfOSj}!n$]%c%f%g%i*o*t/g/jQ(g#yQ*}%pQ+O%rR1j-Z%O#|a!w!y#d#v#y$T$U$Y&g'}(W(Y(Z(b(h(w(x)])_)a*O*R+y,_-Y-Z-]-w.R.T.p.s.{.}1a1k1s1y2Q2T2X2j3Q3S4l4u4}5k5p6i6z7W8T9d9r9w9x9y9z9{9|9}:O:P:U:V:W:X:Y:Z:[:]:^:a:b:c:d:e:f:j:k:l;^;i;j;k;l;n;t;u;vQ*Q$}Q.r*SQ2m.qR5]2nT(p#z(qS(p#z(qT2u.y2vQ)b$eQ-f(nQ.X)cQ/Q*]Q3V/RQ5r3WQ6}5aQ7[5sQ7|7OQ8V7]Q8d7}Q8s8eQ9Q8tR9X9Rp(W#t'O)U-X-o-p0q1h1}4f4w7q:v;W;X;Y!n:U&z'i(^(f+v,[,t-P-^-|.P.o.q0e0p1i1m2W2l2n3O4Y4Z4m4q4y5O5Z5n6m6q7Y8`;Z;];p;q;r[:V8p9O9V9Y9Z9]]:W1U4a6c7o7p8zr(Y#t'O)U,}-X-o-p0q1h1}4f4w7q:v;W;X;Y!p:X&z'i(^(f+v,[,t-P-^-|.P.o.q0e0n0p1i1m2W2l2n3O4Y4Z4m4q4y5O5Z5n6m6q7Y8`;Z;];p;q;r^:Y8p9O9T9V9Y9Z9]_:Z1U4a6c6d7o7p8zpeOSjy}!n$]%Y%c%f%g%i*o*t/g/jQ%VxR*k%`peOSjy}!n$]%Y%c%f%g%i*o*t/g/jR%VxQ*U%OR.n)}qeOSjy}!n$]%Y%c%f%g%i*o*t/g/jQ.z*ZS3P/O/PW5j2|2}3O3TU7V5l5m5nU8R7U7X7YQ8h8SR8v8iQ%^yR*e%YR3^/XR7_5uS$mp$rR.d)nQ%czR*o%dR*u%jT/h*t/jR*y%kQ*x%kR/q*yQjOQ!nST$`j!nQ(P#sR,u(PQ!YQR%u!YQ!^RU%{!^%|+UQ%|!_R+U%}Q+a&XR/}+aQ,`'OR0r,`Q,c'QS0u,c0vR0v,dQ+m&dR0X+mS!eR$uU&a!e&b+VQ&b!fR+V&OQ+d&[R0P+dQ&u!sQ,R&sU,V&u,R0mR0m,WQ'r#iR,n'rQ#m`R'x#mQ#cZU'h#c+Q9qQ+Q9_R9q'uQ-S(_W1d-S1e4j6lU1e-T-U-VS4j1f1gR6l4k$k(U#t&z'O'i(^(f)P)Q)U+v,Y,Z,[,t,}-O-P-X-^-o-p-|.P.o.q0e0n0o0p0q1U1h1i1m1}2W2l2n3O4Y4Z4_4`4a4f4m4q4w4y5O5Z5n6c6d6e6m6q7Y7o7p7q8`8p8z8|8}9O9T9U9V9Y9Z9]:v;W;X;Y;Z;];p;q;rQ-[(fU1l-[1n4nQ1n-^R4n1mQ(q#zR-i(qQ(z$OR-r(zQ2R-|R4z2RQ){$xR.m){Q2p.tS5_2p6|R6|5`Q*W%PR.w*WQ2v.yR5d2vQ/W*bS3[/W5vR5v3^Q._)jW2a._2c5T6wQ2c.bQ5T2bR6w5UQ)o$mR.e)oQ/j*tR3l/jWiOSj!nQ%h}Q)X$]Q*n%cQ*p%fQ*q%gQ*s%iQ/e*oS/h*t/jR3k/gQ$_gQ%l!RQ%o!TQ%q!UQ%s!VQ)v$sQ)|$yQ*d%^Q*{%nQ-h(pS/Z*e*hQ/r*zQ/s*}Q/t+OS0S+j2sQ2f.hQ2k.oQ3U/QQ3`/]Q3j/fY3w0U0V0]0b5fQ5X2hQ5[2lQ5q3VQ5w3_[6U3v3y3}4P4Q7SQ6x5VQ7Z5rQ7`5xW7f6V6[6^6`Q7x6yQ7{6}Q8U7[U8X7g7l7nQ8c7|Q8j8VS8k8Z8_Q8r8dQ8w8mQ9P8sQ9S8yQ9W9QR9[9XQ$gmQ&i!jU)e$h$i$jQ+Z&UU+{&j&k&lQ-`(kS.Z)f)gQ/z+]Q0R+jS0g+|+}Q1q-dQ2Z.[Q3t0QS3z0W0]Q4V0hQ4r1uS6Y3{4QQ7i6ZQ8[7kR8n8^S#ua;^R({$PU$Oa$P;^R-q(yQ#taS&z!w)aQ'O!yQ'i#dQ(^#vQ(f#yQ)P$TQ)Q$UQ)U$YQ+v&gQ,Y9wQ,Z9zQ,[9}Q,t'}Q,}(WQ-O(YQ-P(ZQ-X(bQ-^(hQ-o(wQ-p(xd-|)].R.{2T3Q4}5k6z7W8TQ.P)_Q.o*OQ.q*RQ0e+yQ0n:UQ0o:XQ0p:[Q0q,_Q1U9rQ1h-YQ1i-ZQ1m-]Q1}-wQ2W.TQ2l.pQ2n.sQ3O.}Q4Y:aQ4Z:dQ4_9yQ4`9|Q4a:PQ4f1aQ4m1kQ4q1sQ4w1yQ4y2QQ5O2XQ5Z2jQ5n3SQ6c:^Q6d:WQ6e:ZQ6m4lQ6q4uQ7Y5pQ7o:cQ7p:fQ7q6iQ8`:jQ8p9dQ8z:lQ8|9xQ8}9{Q9O:OQ9T:VQ9U:YQ9V:]Q9Y:bQ9Z:eQ9]:kQ:v;^Q;W;iQ;X;jQ;Y;kQ;Z;lQ;];nQ;p;tQ;q;uR;r;vlgOSj}!n$]%c%f%g%i*o*t/g/jS!pU%eQ%n!SQ%t!WQ'V!|Q'v#kS*h%[%_Q*l%`Q*z%mQ+W&SQ+u&fQ,r'wQ.O)^Q/b*kQ0d+xQ1[,mQ1{-uQ2V.SQ2}.|Q3b/_Q3c/`Q3e/aQ3g/cQ3n/lQ4d1XQ5Y2iQ5m3RQ5|3fQ6O3hQ6P3iQ7X5oR7b5}!vZOSUj}!S!n!|$]%[%_%`%c%e%f%g%i%m&S&f)^*k*o*t+x-u.S.|/_/`/a/c/g/j/l2i3R3f3h3i5o5}Q!_RQ!oTQ$akS%w!]%zQ%}!`Q&y!vQ'Q!zQ'W#PQ'X#QQ'Y#RQ'Z#SQ'[#TQ']#UQ'^#VQ'_#WQ'`#XQ'a#YQ'b#ZQ'd#]Q'g#bQ'k#eW'u#k'w,m1XQ)p$nS+R%x+TS+^&W/{Q+g&_Q,O&pQ,^&}Q,d'RQ,g9^Q,i9`Q,w(RQ-x)VQ/v+XQ/y+[Q0i,PQ0s,bQ0w9cQ0x9eQ0y9fQ0z9gQ0{9hQ0|9iQ0}9jQ1O9kQ1P9lQ1Q9mQ1R9nQ1S9oQ1T,hQ1W9sQ1]9pQ2O-zQ2[.]Q3s:QQ3v0TQ4W0jQ4[0tQ4]:RQ4b:TQ4c:_Q5`2qQ6S3qQ6V3xQ6b:`Q6f:gQ6g:hQ7g6WQ7z6{Q8Z7jQ8m8]Q8y8oQ9_!WR:|;aR!aRR&Y!bS&U!b+`S+]&V&^R0Q+fR'P!yR'S!zT!tU$ZS!sU$ZU$xrs*mS&s!r!uQ,T&tQ,W&wQ.l)zS0k,S,UR4X0l`!dR!]!`$u%x&`)x+hh!qUrs!r!u$Z&t&w)z,S,U0lQ/d*mQ/w+YQ3p/oT:s&W)yT!gR$uS!fR$uS%y!]&`S&O!`)xS+S%x+hT+_&W)yT&]!b$vQ#i^R'{#nT'q#i'rR1Z,lT(a#v(cR(i#yQ-})]Q2U.RQ2|.{Q4{2TQ5l3QQ6t4}Q7U5kQ7y6zQ8S7WR8i8TlhOSj}!n$]%c%f%g%i*o*t/g/jQ%]yR*d%YV$yrs*mR.u*TR*c%WQ$qpR)u$rR)k$lT%az%dT%bz%dT/i*t/j",
     nodeNames: "⚠ extends ArithOp ArithOp InterpolationStart LineComment BlockComment Script ExportDeclaration export Star as VariableName String from ; default FunctionDeclaration async function VariableDefinition TypeParamList TypeDefinition ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Interpolation null super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression await yield delete LogicOp BitOp ParenthesizedExpression ClassExpression class extends ClassBody MethodDeclaration Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression PrivatePropertyName BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody MethodDeclaration AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement",
     maxTerm: 332,
     context: trackNewline,
     nodeProps: [
       ["closedBy", 4,"InterpolationEnd",40,"]",51,"}",66,")",132,"JSXSelfCloseEndTag JSXEndTag",146,"JSXEndTag"],
       ["group", -26,8,15,17,58,184,188,191,192,194,197,200,211,213,219,221,223,225,228,234,240,242,244,246,248,250,251,"Statement",-30,12,13,24,27,28,41,43,44,45,47,52,60,68,74,75,91,92,101,103,119,122,124,125,126,127,129,130,148,149,151,"Expression",-22,23,25,29,32,34,152,154,156,157,159,160,161,163,164,165,167,168,169,178,180,182,183,"Type",-3,79,85,90,"ClassItem"],
       ["openedBy", 30,"InterpolationStart",46,"[",50,"{",65,"(",131,"JSXStartTag",141,"JSXStartTag JSXStartCloseTag"]
     ],
     propSources: [jsHighlight],
     skippedNodes: [0,5,6],
     repeatNodeCount: 28,
     tokenData: "!C}~R!`OX%TXY%cYZ'RZ[%c[]%T]^'R^p%Tpq%cqr'crs(kst0htu2`uv4pvw5ewx6cxy<yyz=Zz{=k{|>k|}?O}!O>k!O!P?`!P!QCl!Q!R!0[!R![!1q![!]!7s!]!^!8V!^!_!8g!_!`!9d!`!a!:[!a!b!<R!b!c%T!c!}2`!}#O!=d#O#P%T#P#Q!=t#Q#R!>U#R#S2`#S#T!>i#T#o2`#o#p!>y#p#q!?O#q#r!?f#r#s!?x#s$f%T$f$g%c$g#BY2`#BY#BZ!@Y#BZ$IS2`$IS$I_!@Y$I_$I|2`$I|$I}!Bq$I}$JO!Bq$JO$JT2`$JT$JU!@Y$JU$KV2`$KV$KW!@Y$KW&FU2`&FU&FV!@Y&FV?HT2`?HT?HU!@Y?HU~2`W%YR$UWO!^%T!_#o%T#p~%T7Z%jg$UW'Y7ROX%TXY%cYZ%TZ[%c[p%Tpq%cq!^%T!_#o%T#p$f%T$f$g%c$g#BY%T#BY#BZ%c#BZ$IS%T$IS$I_%c$I_$JT%T$JT$JU%c$JU$KV%T$KV$KW%c$KW&FU%T&FU&FV%c&FV?HT%T?HT?HU%c?HU~%T7Z'YR$UW'Z7RO!^%T!_#o%T#p~%T$T'jS$UW!j#{O!^%T!_!`'v!`#o%T#p~%T$O'}S#e#v$UWO!^%T!_!`(Z!`#o%T#p~%T$O(bR#e#v$UWO!^%T!_#o%T#p~%T)X(rZ$UW]#eOY(kYZ)eZr(krs*rs!^(k!^!_+U!_#O(k#O#P-b#P#o(k#o#p+U#p~(k&r)jV$UWOr)ers*Ps!^)e!^!_*a!_#o)e#o#p*a#p~)e&r*WR$P&j$UWO!^%T!_#o%T#p~%T&j*dROr*ars*ms~*a&j*rO$P&j)X*{R$P&j$UW]#eO!^%T!_#o%T#p~%T)P+ZV]#eOY+UYZ*aZr+Urs+ps#O+U#O#P+w#P~+U)P+wO$P&j]#e)P+zROr+Urs,Ts~+U)P,[U$P&j]#eOY,nZr,nrs-Vs#O,n#O#P-[#P~,n#e,sU]#eOY,nZr,nrs-Vs#O,n#O#P-[#P~,n#e-[O]#e#e-_PO~,n)X-gV$UWOr(krs-|s!^(k!^!_+U!_#o(k#o#p+U#p~(k)X.VZ$P&j$UW]#eOY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x#m/PZ$UW]#eOY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x#m/yR$UW]#eO!^%T!_#o%T#p~%T#m0XT$UWO!^.x!^!_,n!_#o.x#o#p,n#p~.x3]0mZ$UWOt%Ttu1`u!^%T!_!c%T!c!}1`!}#R%T#R#S1`#S#T%T#T#o1`#p$g%T$g~1`3]1g]$UW'o3TOt%Ttu1`u!Q%T!Q![1`![!^%T!_!c%T!c!}1`!}#R%T#R#S1`#S#T%T#T#o1`#p$g%T$g~1`7Z2k_$UW#zS']$y'g3SOt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$g%T$g~2`[3q_$UW#zSOt%Ttu3ju}%T}!O3j!O!Q%T!Q![3j![!^%T!_!c%T!c!}3j!}#R%T#R#S3j#S#T%T#T#o3j#p$g%T$g~3j$O4wS#^#v$UWO!^%T!_!`5T!`#o%T#p~%T$O5[R$UW#o#vO!^%T!_#o%T#p~%T5b5lU'x5Y$UWOv%Tvw6Ow!^%T!_!`5T!`#o%T#p~%T$O6VS$UW#i#vO!^%T!_!`5T!`#o%T#p~%T)X6jZ$UW]#eOY6cYZ7]Zw6cwx*rx!^6c!^!_8T!_#O6c#O#P:T#P#o6c#o#p8T#p~6c&r7bV$UWOw7]wx*Px!^7]!^!_7w!_#o7]#o#p7w#p~7]&j7zROw7wwx*mx~7w)P8YV]#eOY8TYZ7wZw8Twx+px#O8T#O#P8o#P~8T)P8rROw8Twx8{x~8T)P9SU$P&j]#eOY9fZw9fwx-Vx#O9f#O#P9}#P~9f#e9kU]#eOY9fZw9fwx-Vx#O9f#O#P9}#P~9f#e:QPO~9f)X:YV$UWOw6cwx:ox!^6c!^!_8T!_#o6c#o#p8T#p~6c)X:xZ$P&j$UW]#eOY;kYZ%TZw;kwx/rx!^;k!^!_9f!_#O;k#O#P<e#P#o;k#o#p9f#p~;k#m;rZ$UW]#eOY;kYZ%TZw;kwx/rx!^;k!^!_9f!_#O;k#O#P<e#P#o;k#o#p9f#p~;k#m<jT$UWO!^;k!^!_9f!_#o;k#o#p9f#p~;k&i=QR!d&a$UWO!^%T!_#o%T#p~%Tk=bR!cc$UWO!^%T!_#o%T#p~%T7V=tU'^4V#_#v$UWOz%Tz{>W{!^%T!_!`5T!`#o%T#p~%T$O>_S#[#v$UWO!^%T!_!`5T!`#o%T#p~%T%w>rSj%o$UWO!^%T!_!`5T!`#o%T#p~%T&i?VR!R&a$UWO!^%T!_#o%T#p~%T7Z?gVu5^$UWO!O%T!O!P?|!P!Q%T!Q![@r![!^%T!_#o%T#p~%T!{@RT$UWO!O%T!O!P@b!P!^%T!_#o%T#p~%T!{@iR!Q!s$UWO!^%T!_#o%T#p~%T!{@yZ$UWk!sO!Q%T!Q![@r![!^%T!_!g%T!g!hAl!h#R%T#R#S@r#S#X%T#X#YAl#Y#o%T#p~%T!{AqZ$UWO{%T{|Bd|}%T}!OBd!O!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%T!{BiV$UWO!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%T!{CVV$UWk!sO!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%T7ZCs`$UW#]#vOYDuYZ%TZzDuz{Jl{!PDu!P!Q!-e!Q!^Du!^!_Fx!_!`!.^!`!a!/]!a!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~DuXD|[$UW}POYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~DuXEy_$UW}PO!^%T!_#Z%T#Z#[Er#[#]%T#]#^Er#^#a%T#a#bEr#b#g%T#g#hEr#h#i%T#i#jEr#j#m%T#m#nEr#n#o%T#p~%TPF}V}POYFxZ!PFx!P!QGd!Q!}Fx!}#OG{#O#PHh#P~FxPGiU}P#Z#[Gd#]#^Gd#a#bGd#g#hGd#i#jGd#m#nGdPHOTOYG{Z#OG{#O#PH_#P#QFx#Q~G{PHbQOYG{Z~G{PHkQOYFxZ~FxXHvY$UWOYHqYZ%TZ!^Hq!^!_G{!_#OHq#O#PIf#P#QDu#Q#oHq#o#pG{#p~HqXIkV$UWOYHqYZ%TZ!^Hq!^!_G{!_#oHq#o#pG{#p~HqXJVV$UWOYDuYZ%TZ!^Du!^!_Fx!_#oDu#o#pFx#p~Du7ZJs^$UW}POYJlYZKoZzJlz{NQ{!PJl!P!Q!,R!Q!^Jl!^!_!!]!_!}Jl!}#O!'|#O#P!+a#P#oJl#o#p!!]#p~Jl7ZKtV$UWOzKoz{LZ{!^Ko!^!_M]!_#oKo#o#pM]#p~Ko7ZL`X$UWOzKoz{LZ{!PKo!P!QL{!Q!^Ko!^!_M]!_#oKo#o#pM]#p~Ko7ZMSR$UWU7RO!^%T!_#o%T#p~%T7RM`ROzM]z{Mi{~M]7RMlTOzM]z{Mi{!PM]!P!QM{!Q~M]7RNQOU7R7ZNX^$UW}POYJlYZKoZzJlz{NQ{!PJl!P!Q! T!Q!^Jl!^!_!!]!_!}Jl!}#O!'|#O#P!+a#P#oJl#o#p!!]#p~Jl7Z! ^_$UWU7R}PO!^%T!_#Z%T#Z#[Er#[#]%T#]#^Er#^#a%T#a#bEr#b#g%T#g#hEr#h#i%T#i#jEr#j#m%T#m#nEr#n#o%T#p~%T7R!!bY}POY!!]YZM]Zz!!]z{!#Q{!P!!]!P!Q!&x!Q!}!!]!}#O!$`#O#P!&f#P~!!]7R!#VY}POY!!]YZM]Zz!!]z{!#Q{!P!!]!P!Q!#u!Q!}!!]!}#O!$`#O#P!&f#P~!!]7R!#|UU7R}P#Z#[Gd#]#^Gd#a#bGd#g#hGd#i#jGd#m#nGd7R!$cWOY!$`YZM]Zz!$`z{!${{#O!$`#O#P!&S#P#Q!!]#Q~!$`7R!%OYOY!$`YZM]Zz!$`z{!${{!P!$`!P!Q!%n!Q#O!$`#O#P!&S#P#Q!!]#Q~!$`7R!%sTU7ROYG{Z#OG{#O#PH_#P#QFx#Q~G{7R!&VTOY!$`YZM]Zz!$`z{!${{~!$`7R!&iTOY!!]YZM]Zz!!]z{!#Q{~!!]7R!&}_}POzM]z{Mi{#ZM]#Z#[!&x#[#]M]#]#^!&x#^#aM]#a#b!&x#b#gM]#g#h!&x#h#iM]#i#j!&x#j#mM]#m#n!&x#n~M]7Z!(R[$UWOY!'|YZKoZz!'|z{!(w{!^!'|!^!_!$`!_#O!'|#O#P!*o#P#QJl#Q#o!'|#o#p!$`#p~!'|7Z!(|^$UWOY!'|YZKoZz!'|z{!(w{!P!'|!P!Q!)x!Q!^!'|!^!_!$`!_#O!'|#O#P!*o#P#QJl#Q#o!'|#o#p!$`#p~!'|7Z!*PY$UWU7ROYHqYZ%TZ!^Hq!^!_G{!_#OHq#O#PIf#P#QDu#Q#oHq#o#pG{#p~Hq7Z!*tX$UWOY!'|YZKoZz!'|z{!(w{!^!'|!^!_!$`!_#o!'|#o#p!$`#p~!'|7Z!+fX$UWOYJlYZKoZzJlz{NQ{!^Jl!^!_!!]!_#oJl#o#p!!]#p~Jl7Z!,Yc$UW}POzKoz{LZ{!^Ko!^!_M]!_#ZKo#Z#[!,R#[#]Ko#]#^!,R#^#aKo#a#b!,R#b#gKo#g#h!,R#h#iKo#i#j!,R#j#mKo#m#n!,R#n#oKo#o#pM]#p~Ko7Z!-lV$UWT7ROY!-eYZ%TZ!^!-e!^!_!.R!_#o!-e#o#p!.R#p~!-e7R!.WQT7ROY!.RZ~!.R$P!.g[$UW#o#v}POYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~Du]!/f[#wS$UW}POYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~Du!{!0cd$UWk!sO!O%T!O!P@r!P!Q%T!Q![!1q![!^%T!_!g%T!g!hAl!h#R%T#R#S!1q#S#U%T#U#V!3X#V#X%T#X#YAl#Y#b%T#b#c!2w#c#d!4m#d#l%T#l#m!5{#m#o%T#p~%T!{!1x_$UWk!sO!O%T!O!P@r!P!Q%T!Q![!1q![!^%T!_!g%T!g!hAl!h#R%T#R#S!1q#S#X%T#X#YAl#Y#b%T#b#c!2w#c#o%T#p~%T!{!3OR$UWk!sO!^%T!_#o%T#p~%T!{!3^W$UWO!Q%T!Q!R!3v!R!S!3v!S!^%T!_#R%T#R#S!3v#S#o%T#p~%T!{!3}Y$UWk!sO!Q%T!Q!R!3v!R!S!3v!S!^%T!_#R%T#R#S!3v#S#b%T#b#c!2w#c#o%T#p~%T!{!4rV$UWO!Q%T!Q!Y!5X!Y!^%T!_#R%T#R#S!5X#S#o%T#p~%T!{!5`X$UWk!sO!Q%T!Q!Y!5X!Y!^%T!_#R%T#R#S!5X#S#b%T#b#c!2w#c#o%T#p~%T!{!6QZ$UWO!Q%T!Q![!6s![!^%T!_!c%T!c!i!6s!i#R%T#R#S!6s#S#T%T#T#Z!6s#Z#o%T#p~%T!{!6z]$UWk!sO!Q%T!Q![!6s![!^%T!_!c%T!c!i!6s!i#R%T#R#S!6s#S#T%T#T#Z!6s#Z#b%T#b#c!2w#c#o%T#p~%T$u!7|R!]V$UW#m$fO!^%T!_#o%T#p~%T!q!8^R_!i$UWO!^%T!_#o%T#p~%T5w!8rR'bd!a/n#x&s'|P!P!Q!8{!^!_!9Q!_!`!9_W!9QO$WW#v!9VP#`#v!_!`!9Y#v!9_O#o#v#v!9dO#a#v$u!9kT!{$m$UWO!^%T!_!`'v!`!a!9z!a#o%T#p~%T$P!:RR#W#w$UWO!^%T!_#o%T#p~%T%V!:gT'a!R#a#v$RS$UWO!^%T!_!`!:v!`!a!;W!a#o%T#p~%T$O!:}R#a#v$UWO!^%T!_#o%T#p~%T$O!;_T#`#v$UWO!^%T!_!`5T!`!a!;n!a#o%T#p~%T$O!;uS#`#v$UWO!^%T!_!`5T!`#o%T#p~%T*a!<YV'p#{$UWO!O%T!O!P!<o!P!^%T!_!a%T!a!b!=P!b#o%T#p~%T*[!<vRv*S$UWO!^%T!_#o%T#p~%T$O!=WS$UW#j#vO!^%T!_!`5T!`#o%T#p~%T7V!=kRx6}$UWO!^%T!_#o%T#p~%Tk!={R!Oc$UWO!^%T!_#o%T#p~%T$O!>]S#g#v$UWO!^%T!_!`5T!`#o%T#p~%T$a!>pR$UW'f$XO!^%T!_#o%T#p~%T~!?OO!T~5b!?VT'w5Y$UWO!^%T!_!`5T!`#o%T#p#q!=P#q~%T6X!?oR!S5}nQ$UWO!^%T!_#o%T#p~%TX!@PR!kP$UWO!^%T!_#o%T#p~%T7Z!@gr$UW'Y7R#zS']$y'g3SOX%TXY%cYZ%TZ[%c[p%Tpq%cqt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$f%T$f$g%c$g#BY2`#BY#BZ!@Y#BZ$IS2`$IS$I_!@Y$I_$JT2`$JT$JU!@Y$JU$KV2`$KV$KW!@Y$KW&FU2`&FU&FV!@Y&FV?HT2`?HT?HU!@Y?HU~2`7Z!CO_$UW'Z7R#zS']$y'g3SOt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$g%T$g~2`",
     tokenizers: [tsExtends, noSemicolon, incdecToken, template, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, insertSemicolon],
     topRules: {"Script":[0,7]},
     dialects: {jsx: 12107, ts: 12109},
     dynamicPrecedences: {"149":1,"176":1},
     specialized: [{term: 289, get: value => spec_identifier[value] || -1},{term: 299, get: value => spec_word[value] || -1},{term: 63, get: value => spec_LessThan[value] || -1}],
     tokenPrec: 12130
   });

   /**
   A collection of JavaScript-related
   [snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).
   */
   const snippets = [
       /*@__PURE__*/snippetCompletion("function ${name}(${params}) {\n\t${}\n}", {
           label: "function",
           detail: "definition",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
           label: "for",
           detail: "loop",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("for (let ${name} of ${collection}) {\n\t${}\n}", {
           label: "for",
           detail: "of loop",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("do {\n\t${}\n} while (${})", {
           label: "do",
           detail: "loop",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("while (${}) {\n\t${}\n}", {
           label: "while",
           detail: "loop",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
           label: "try",
           detail: "/ catch block",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("if (${}) {\n\t${}\n}", {
           label: "if",
           detail: "block",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("if (${}) {\n\t${}\n} else {\n\t${}\n}", {
           label: "if",
           detail: "/ else block",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
           label: "class",
           detail: "definition",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("import {${names}} from \"${module}\"\n${}", {
           label: "import",
           detail: "named",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("import ${name} from \"${module}\"\n${}", {
           label: "import",
           detail: "default",
           type: "keyword"
       })
   ];

   const cache = /*@__PURE__*/new NodeWeakMap();
   const ScopeNodes = /*@__PURE__*/new Set([
       "Script", "Block",
       "FunctionExpression", "FunctionDeclaration", "ArrowFunction", "MethodDeclaration",
       "ForStatement"
   ]);
   function defID(type) {
       return (node, def) => {
           let id = node.node.getChild("VariableDefinition");
           if (id)
               def(id, type);
           return true;
       };
   }
   const functionContext = ["FunctionDeclaration"];
   const gatherCompletions = {
       FunctionDeclaration: /*@__PURE__*/defID("function"),
       ClassDeclaration: /*@__PURE__*/defID("class"),
       ClassExpression: () => true,
       EnumDeclaration: /*@__PURE__*/defID("constant"),
       TypeAliasDeclaration: /*@__PURE__*/defID("type"),
       NamespaceDeclaration: /*@__PURE__*/defID("namespace"),
       VariableDefinition(node, def) { if (!node.matchContext(functionContext))
           def(node, "variable"); },
       TypeDefinition(node, def) { def(node, "type"); },
       __proto__: null
   };
   function getScope(doc, node) {
       let cached = cache.get(node);
       if (cached)
           return cached;
       let completions = [], top = true;
       function def(node, type) {
           let name = doc.sliceString(node.from, node.to);
           completions.push({ label: name, type });
       }
       node.cursor(IterMode.IncludeAnonymous).iterate(node => {
           if (top) {
               top = false;
           }
           else if (node.name) {
               let gather = gatherCompletions[node.name];
               if (gather && gather(node, def) || ScopeNodes.has(node.name))
                   return false;
           }
           else if (node.to - node.from > 8192) {
               // Allow caching for bigger internal nodes
               for (let c of getScope(doc, node.node))
                   completions.push(c);
               return false;
           }
       });
       cache.set(node, completions);
       return completions;
   }
   const Identifier = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
   const dontComplete = [
       "TemplateString", "String", "RegExp",
       "LineComment", "BlockComment",
       "VariableDefinition", "TypeDefinition", "Label",
       "PropertyDefinition", "PropertyName",
       "PrivatePropertyDefinition", "PrivatePropertyName"
   ];
   /**
   Completion source that looks up locally defined names in
   JavaScript code.
   */
   function localCompletionSource(context) {
       let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
       if (dontComplete.indexOf(inner.name) > -1)
           return null;
       let isWord = inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));
       if (!isWord && !context.explicit)
           return null;
       let options = [];
       for (let pos = inner; pos; pos = pos.parent) {
           if (ScopeNodes.has(pos.name))
               options = options.concat(getScope(context.state.doc, pos));
       }
       return {
           options,
           from: isWord ? inner.from : context.pos,
           validFor: Identifier
       };
   }

   /**
   A language provider based on the [Lezer JavaScript
   parser](https://github.com/lezer-parser/javascript), extended with
   highlighting and indentation information.
   */
   const javascriptLanguage = /*@__PURE__*/LRLanguage.define({
       parser: /*@__PURE__*/parser.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   IfStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b)/ }),
                   TryStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
                   LabeledStatement: flatIndent,
                   SwitchBody: context => {
                       let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                       return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
                   },
                   Block: /*@__PURE__*/delimitedIndent({ closing: "}" }),
                   ArrowFunction: cx => cx.baseIndent + cx.unit,
                   "TemplateString BlockComment": () => -1,
                   "Statement Property": /*@__PURE__*/continuedIndent({ except: /^{/ }),
                   JSXElement(context) {
                       let closed = /^\s*<\//.test(context.textAfter);
                       return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
                   },
                   JSXEscape(context) {
                       let closed = /\s*\}/.test(context.textAfter);
                       return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
                   },
                   "JSXOpenTag JSXSelfClosingTag"(context) {
                       return context.column(context.node.from) + context.unit;
                   }
               }),
               /*@__PURE__*/foldNodeProp.add({
                   "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression": foldInside,
                   BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
               })
           ]
       }),
       languageData: {
           closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
           commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
           indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
           wordChars: "$"
       }
   });
   /**
   A language provider for TypeScript.
   */
   const typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: "ts" });
   /**
   Language provider for JSX.
   */
   const jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: "jsx" });
   /**
   Language provider for JSX + TypeScript.
   */
   const tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: "jsx ts" });
   const keywords = /*@__PURE__*/"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(kw => ({ label: kw, type: "keyword" }));
   /**
   JavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)
   completion.
   */
   function javascript(config = {}) {
       let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage)
           : config.typescript ? typescriptLanguage : javascriptLanguage;
       return new LanguageSupport(lang, [
           javascriptLanguage.data.of({
               autocomplete: ifNotIn(dontComplete, completeFromList(snippets.concat(keywords)))
           }),
           javascriptLanguage.data.of({
               autocomplete: localCompletionSource
           }),
           config.jsx ? autoCloseTags$1 : [],
       ]);
   }
   function elementName$1(doc, tree, max = doc.length) {
       if (!tree)
           return "";
       let name = tree.getChild("JSXIdentifier");
       return name ? doc.sliceString(name.from, Math.min(name.to, max)) : "";
   }
   const android = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
   /**
   Extension that will automatically insert JSX close tags when a `>` or
   `/` is typed.
   */
   const autoCloseTags$1 = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text) => {
       if ((android ? view.composing : view.compositionStarted) || view.state.readOnly ||
           from != to || (text != ">" && text != "/") ||
           !javascriptLanguage.isActiveAt(view.state, from, -1))
           return false;
       let { state } = view;
       let changes = state.changeByRange(range => {
           var _a, _b, _c;
           let { head } = range, around = syntaxTree(state).resolveInner(head, -1), name;
           if (around.name == "JSXStartTag")
               around = around.parent;
           if (text == ">" && around.name == "JSXFragmentTag") {
               return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `><>` } };
           }
           else if (text == ">" && around.name == "JSXIdentifier") {
               if (((_b = (_a = around.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != "JSXEndTag" && (name = elementName$1(state.doc, around.parent, head)))
                   return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `></${name}>` } };
           }
           else if (text == "/" && around.name == "JSXFragmentTag") {
               let empty = around.parent, base = empty === null || empty === void 0 ? void 0 : empty.parent;
               if (empty.from == head - 1 && ((_c = base.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "JSXEndTag" && (name = elementName$1(state.doc, base === null || base === void 0 ? void 0 : base.firstChild, head))) {
                   let insert = `/${name}>`;
                   return { range: EditorSelection.cursor(head + insert.length), changes: { from: head, insert } };
               }
           }
           return { range };
       });
       if (changes.changes.empty)
           return false;
       view.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
       return true;
   });

   const Targets = ["_blank", "_self", "_top", "_parent"];
   const Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
   const Methods = ["get", "post", "put", "delete"];
   const Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
   const Bool = ["true", "false"];
   const S = {}; // Empty tag spec
   const Tags = {
       a: {
           attrs: {
               href: null, ping: null, type: null,
               media: null,
               target: Targets,
               hreflang: null
           }
       },
       abbr: S,
       acronym: S,
       address: S,
       applet: S,
       area: {
           attrs: {
               alt: null, coords: null, href: null, target: null, ping: null,
               media: null, hreflang: null, type: null,
               shape: ["default", "rect", "circle", "poly"]
           }
       },
       article: S,
       aside: S,
       audio: {
           attrs: {
               src: null, mediagroup: null,
               crossorigin: ["anonymous", "use-credentials"],
               preload: ["none", "metadata", "auto"],
               autoplay: ["autoplay"],
               loop: ["loop"],
               controls: ["controls"]
           }
       },
       b: S,
       base: { attrs: { href: null, target: Targets } },
       basefont: S,
       bdi: S,
       bdo: S,
       big: S,
       blockquote: { attrs: { cite: null } },
       body: S,
       br: S,
       button: {
           attrs: {
               form: null, formaction: null, name: null, value: null,
               autofocus: ["autofocus"],
               disabled: ["autofocus"],
               formenctype: Encs,
               formmethod: Methods,
               formnovalidate: ["novalidate"],
               formtarget: Targets,
               type: ["submit", "reset", "button"]
           }
       },
       canvas: { attrs: { width: null, height: null } },
       caption: S,
       center: S,
       cite: S,
       code: S,
       col: { attrs: { span: null } },
       colgroup: { attrs: { span: null } },
       command: {
           attrs: {
               type: ["command", "checkbox", "radio"],
               label: null, icon: null, radiogroup: null, command: null, title: null,
               disabled: ["disabled"],
               checked: ["checked"]
           }
       },
       data: { attrs: { value: null } },
       datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
       datalist: { attrs: { data: null } },
       dd: S,
       del: { attrs: { cite: null, datetime: null } },
       details: { attrs: { open: ["open"] } },
       dfn: S,
       dir: S,
       div: S,
       dl: S,
       dt: S,
       em: S,
       embed: { attrs: { src: null, type: null, width: null, height: null } },
       eventsource: { attrs: { src: null } },
       fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
       figcaption: S,
       figure: S,
       font: S,
       footer: S,
       form: {
           attrs: {
               action: null, name: null,
               "accept-charset": Charsets,
               autocomplete: ["on", "off"],
               enctype: Encs,
               method: Methods,
               novalidate: ["novalidate"],
               target: Targets
           }
       },
       frame: S,
       frameset: S,
       h1: S, h2: S, h3: S, h4: S, h5: S, h6: S,
       head: {
           children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
       },
       header: S,
       hgroup: S,
       hr: S,
       html: {
           attrs: { manifest: null }
       },
       i: S,
       iframe: {
           attrs: {
               src: null, srcdoc: null, name: null, width: null, height: null,
               sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
               seamless: ["seamless"]
           }
       },
       img: {
           attrs: {
               alt: null, src: null, ismap: null, usemap: null, width: null, height: null,
               crossorigin: ["anonymous", "use-credentials"]
           }
       },
       input: {
           attrs: {
               alt: null, dirname: null, form: null, formaction: null,
               height: null, list: null, max: null, maxlength: null, min: null,
               name: null, pattern: null, placeholder: null, size: null, src: null,
               step: null, value: null, width: null,
               accept: ["audio/*", "video/*", "image/*"],
               autocomplete: ["on", "off"],
               autofocus: ["autofocus"],
               checked: ["checked"],
               disabled: ["disabled"],
               formenctype: Encs,
               formmethod: Methods,
               formnovalidate: ["novalidate"],
               formtarget: Targets,
               multiple: ["multiple"],
               readonly: ["readonly"],
               required: ["required"],
               type: ["hidden", "text", "search", "tel", "url", "email", "password", "datetime", "date", "month",
                   "week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio",
                   "file", "submit", "image", "reset", "button"]
           }
       },
       ins: { attrs: { cite: null, datetime: null } },
       kbd: S,
       keygen: {
           attrs: {
               challenge: null, form: null, name: null,
               autofocus: ["autofocus"],
               disabled: ["disabled"],
               keytype: ["RSA"]
           }
       },
       label: { attrs: { for: null, form: null } },
       legend: S,
       li: { attrs: { value: null } },
       link: {
           attrs: {
               href: null, type: null,
               hreflang: null,
               media: null,
               sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
           }
       },
       map: { attrs: { name: null } },
       mark: S,
       menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
       meta: {
           attrs: {
               content: null,
               charset: Charsets,
               name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
               "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
           }
       },
       meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
       nav: S,
       noframes: S,
       noscript: S,
       object: {
           attrs: {
               data: null, type: null, name: null, usemap: null, form: null, width: null, height: null,
               typemustmatch: ["typemustmatch"]
           }
       },
       ol: { attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
           children: ["li", "script", "template", "ul", "ol"] },
       optgroup: { attrs: { disabled: ["disabled"], label: null } },
       option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
       output: { attrs: { for: null, form: null, name: null } },
       p: S,
       param: { attrs: { name: null, value: null } },
       pre: S,
       progress: { attrs: { value: null, max: null } },
       q: { attrs: { cite: null } },
       rp: S,
       rt: S,
       ruby: S,
       s: S,
       samp: S,
       script: {
           attrs: {
               type: ["text/javascript"],
               src: null,
               async: ["async"],
               defer: ["defer"],
               charset: Charsets
           }
       },
       section: S,
       select: {
           attrs: {
               form: null, name: null, size: null,
               autofocus: ["autofocus"],
               disabled: ["disabled"],
               multiple: ["multiple"]
           }
       },
       slot: { attrs: { name: null } },
       small: S,
       source: { attrs: { src: null, type: null, media: null } },
       span: S,
       strike: S,
       strong: S,
       style: {
           attrs: {
               type: ["text/css"],
               media: null,
               scoped: null
           }
       },
       sub: S,
       summary: S,
       sup: S,
       table: S,
       tbody: S,
       td: { attrs: { colspan: null, rowspan: null, headers: null } },
       template: S,
       textarea: {
           attrs: {
               dirname: null, form: null, maxlength: null, name: null, placeholder: null,
               rows: null, cols: null,
               autofocus: ["autofocus"],
               disabled: ["disabled"],
               readonly: ["readonly"],
               required: ["required"],
               wrap: ["soft", "hard"]
           }
       },
       tfoot: S,
       th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
       thead: S,
       time: { attrs: { datetime: null } },
       title: S,
       tr: S,
       track: {
           attrs: {
               src: null, label: null, default: null,
               kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
               srclang: null
           }
       },
       tt: S,
       u: S,
       ul: { children: ["li", "script", "template", "ul", "ol"] },
       var: S,
       video: {
           attrs: {
               src: null, poster: null, width: null, height: null,
               crossorigin: ["anonymous", "use-credentials"],
               preload: ["auto", "metadata", "none"],
               autoplay: ["autoplay"],
               mediagroup: ["movie"],
               muted: ["muted"],
               controls: ["controls"]
           }
       },
       wbr: S
   };
   const GlobalAttrs = {
       accesskey: null,
       class: null,
       contenteditable: Bool,
       contextmenu: null,
       dir: ["ltr", "rtl", "auto"],
       draggable: ["true", "false", "auto"],
       dropzone: ["copy", "move", "link", "string:", "file:"],
       hidden: ["hidden"],
       id: null,
       inert: ["inert"],
       itemid: null,
       itemprop: null,
       itemref: null,
       itemscope: ["itemscope"],
       itemtype: null,
       lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
       spellcheck: Bool,
       autocorrect: Bool,
       autocapitalize: Bool,
       style: null,
       tabindex: null,
       title: null,
       translate: ["yes", "no"],
       onclick: null,
       rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
       role: /*@__PURE__*/"alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
       "aria-activedescendant": null,
       "aria-atomic": Bool,
       "aria-autocomplete": ["inline", "list", "both", "none"],
       "aria-busy": Bool,
       "aria-checked": ["true", "false", "mixed", "undefined"],
       "aria-controls": null,
       "aria-describedby": null,
       "aria-disabled": Bool,
       "aria-dropeffect": null,
       "aria-expanded": ["true", "false", "undefined"],
       "aria-flowto": null,
       "aria-grabbed": ["true", "false", "undefined"],
       "aria-haspopup": Bool,
       "aria-hidden": Bool,
       "aria-invalid": ["true", "false", "grammar", "spelling"],
       "aria-label": null,
       "aria-labelledby": null,
       "aria-level": null,
       "aria-live": ["off", "polite", "assertive"],
       "aria-multiline": Bool,
       "aria-multiselectable": Bool,
       "aria-owns": null,
       "aria-posinset": null,
       "aria-pressed": ["true", "false", "mixed", "undefined"],
       "aria-readonly": Bool,
       "aria-relevant": null,
       "aria-required": Bool,
       "aria-selected": ["true", "false", "undefined"],
       "aria-setsize": null,
       "aria-sort": ["ascending", "descending", "none", "other"],
       "aria-valuemax": null,
       "aria-valuemin": null,
       "aria-valuenow": null,
       "aria-valuetext": null
   };
   class Schema$1 {
       constructor(extraTags, extraAttrs) {
           this.tags = Object.assign(Object.assign({}, Tags), extraTags);
           this.globalAttrs = Object.assign(Object.assign({}, GlobalAttrs), extraAttrs);
           this.allTags = Object.keys(this.tags);
           this.globalAttrNames = Object.keys(this.globalAttrs);
       }
   }
   Schema$1.default = /*@__PURE__*/new Schema$1;
   function elementName(doc, tree, max = doc.length) {
       if (!tree)
           return "";
       let tag = tree.firstChild;
       let name = tag && tag.getChild("TagName");
       return name ? doc.sliceString(name.from, Math.min(name.to, max)) : "";
   }
   function findParentElement(tree, skip = false) {
       for (let cur = tree.parent; cur; cur = cur.parent)
           if (cur.name == "Element") {
               if (skip)
                   skip = false;
               else
                   return cur;
           }
       return null;
   }
   function allowedChildren(doc, tree, schema) {
       let parentInfo = schema.tags[elementName(doc, findParentElement(tree, true))];
       return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || schema.allTags;
   }
   function openTags(doc, tree) {
       let open = [];
       for (let parent = tree; parent = findParentElement(parent);) {
           let tagName = elementName(doc, parent);
           if (tagName && parent.lastChild.name == "CloseTag")
               break;
           if (tagName && open.indexOf(tagName) < 0 && (tree.name == "EndTag" || tree.from >= parent.firstChild.to))
               open.push(tagName);
       }
       return open;
   }
   const identifier = /^[:\-\.\w\u00b7-\uffff]*$/;
   function completeTag(state, schema, tree, from, to) {
       let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
       return { from, to,
           options: allowedChildren(state.doc, tree, schema).map(tagName => ({ label: tagName, type: "type" })).concat(openTags(state.doc, tree).map((tag, i) => ({ label: "/" + tag, apply: "/" + tag + end,
               type: "type", boost: 99 - i }))),
           validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/ };
   }
   function completeCloseTag(state, tree, from, to) {
       let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
       return { from, to,
           options: openTags(state.doc, tree).map((tag, i) => ({ label: tag, apply: tag + end, type: "type", boost: 99 - i })),
           validFor: identifier };
   }
   function completeStartTag(state, schema, tree, pos) {
       let options = [], level = 0;
       for (let tagName of allowedChildren(state.doc, tree, schema))
           options.push({ label: "<" + tagName, type: "type" });
       for (let open of openTags(state.doc, tree))
           options.push({ label: "</" + open + ">", type: "type", boost: 99 - level++ });
       return { from: pos, to: pos, options, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
   }
   function completeAttrName(state, schema, tree, from, to) {
       let elt = findParentElement(tree), info = elt ? schema.tags[elementName(state.doc, elt)] : null;
       let names = (info && info.attrs ? Object.keys(info.attrs).concat(schema.globalAttrNames) : schema.globalAttrNames);
       return { from, to,
           options: names.map(attrName => ({ label: attrName, type: "property" })),
           validFor: identifier };
   }
   function completeAttrValue(state, schema, tree, from, to) {
       var _a;
       let nameNode = (_a = tree.parent) === null || _a === void 0 ? void 0 : _a.getChild("AttributeName");
       let options = [], token = undefined;
       if (nameNode) {
           let attrName = state.sliceDoc(nameNode.from, nameNode.to);
           let attrs = schema.globalAttrs[attrName];
           if (!attrs) {
               let elt = findParentElement(tree), info = elt ? schema.tags[elementName(state.doc, elt)] : null;
               attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName];
           }
           if (attrs) {
               let base = state.sliceDoc(from, to).toLowerCase(), quoteStart = '"', quoteEnd = '"';
               if (/^['"]/.test(base)) {
                   token = base[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
                   quoteStart = "";
                   quoteEnd = state.sliceDoc(to, to + 1) == base[0] ? "" : base[0];
                   base = base.slice(1);
                   from++;
               }
               else {
                   token = /^[^\s<>='"]*$/;
               }
               for (let value of attrs)
                   options.push({ label: value, apply: quoteStart + value + quoteEnd, type: "constant" });
           }
       }
       return { from, to, options, validFor: token };
   }
   function htmlCompletionFor(schema, context) {
       let { state, pos } = context, around = syntaxTree(state).resolveInner(pos), tree = around.resolve(pos, -1);
       for (let scan = pos, before; around == tree && (before = tree.childBefore(scan));) {
           let last = before.lastChild;
           if (!last || !last.type.isError || last.from < last.to)
               break;
           around = tree = before;
           scan = last.from;
       }
       if (tree.name == "TagName") {
           return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos)
               : completeTag(state, schema, tree, tree.from, pos);
       }
       else if (tree.name == "StartTag") {
           return completeTag(state, schema, tree, pos, pos);
       }
       else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
           return completeCloseTag(state, tree, pos, pos);
       }
       else if (context.explicit && (tree.name == "OpenTag" || tree.name == "SelfClosingTag") || tree.name == "AttributeName") {
           return completeAttrName(state, schema, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
       }
       else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
           return completeAttrValue(state, schema, tree, tree.name == "Is" ? pos : tree.from, pos);
       }
       else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
           return completeStartTag(state, schema, tree, pos);
       }
       else {
           return null;
       }
   }
   /**
   Create a completion source for HTML extended with additional tags
   or attributes.
   */
   function htmlCompletionSourceWith(config) {
       let { extraTags, extraGlobalAttributes: extraAttrs } = config;
       let schema = extraAttrs || extraTags ? new Schema$1(extraTags, extraAttrs) : Schema$1.default;
       return (context) => htmlCompletionFor(schema, context);
   }

   /**
   A language provider based on the [Lezer HTML
   parser](https://github.com/lezer-parser/html), extended with the
   JavaScript and CSS parsers to parse the content of `<script>` and
   `<style>` tags.
   */
   const htmlLanguage = /*@__PURE__*/LRLanguage.define({
       parser: /*@__PURE__*/parser$2.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   Element(context) {
                       let after = /^(\s*)(<\/)?/.exec(context.textAfter);
                       if (context.node.to <= context.pos + after[0].length)
                           return context.continue();
                       return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
                   },
                   "OpenTag CloseTag SelfClosingTag"(context) {
                       return context.column(context.node.from) + context.unit;
                   },
                   Document(context) {
                       if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to)
                           return context.continue();
                       let endElt = null, close;
                       for (let cur = context.node;;) {
                           let last = cur.lastChild;
                           if (!last || last.name != "Element" || last.to != cur.to)
                               break;
                           endElt = cur = last;
                       }
                       if (endElt && !((close = endElt.lastChild) && (close.name == "CloseTag" || close.name == "SelfClosingTag")))
                           return context.lineIndent(endElt.from) + context.unit;
                       return null;
                   }
               }),
               /*@__PURE__*/foldNodeProp.add({
                   Element(node) {
                       let first = node.firstChild, last = node.lastChild;
                       if (!first || first.name != "OpenTag")
                           return null;
                       return { from: first.to, to: last.name == "CloseTag" ? last.from : node.to };
                   }
               })
           ],
           wrap: /*@__PURE__*/configureNesting([
               { tag: "script",
                   attrs(attrs) {
                       return !attrs.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs.type);
                   },
                   parser: javascriptLanguage.parser },
               { tag: "style",
                   attrs(attrs) {
                       return (!attrs.lang || attrs.lang == "css") && (!attrs.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(attrs.type));
                   },
                   parser: cssLanguage.parser }
           ])
       }),
       languageData: {
           commentTokens: { block: { open: "<!--", close: "-->" } },
           indentOnInput: /^\s*<\/\w+\W$/,
           wordChars: "-._"
       }
   });
   /**
   Language support for HTML, including
   [`htmlCompletion`](https://codemirror.net/6/docs/ref/#lang-html.htmlCompletion) and JavaScript and
   CSS support extensions.
   */
   function html$3(config = {}) {
       let lang = htmlLanguage;
       if (config.matchClosingTags === false)
           lang = lang.configure({ dialect: "noMatch" });
       return new LanguageSupport(lang, [
           htmlLanguage.data.of({ autocomplete: htmlCompletionSourceWith(config) }),
           config.autoCloseTags !== false ? autoCloseTags : [],
           javascript().support,
           css$1().support
       ]);
   }
   /**
   Extension that will automatically insert close tags when a `>` or
   `/` is typed.
   */
   const autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text) => {
       if (view.composing || view.state.readOnly || from != to || (text != ">" && text != "/") ||
           !htmlLanguage.isActiveAt(view.state, from, -1))
           return false;
       let { state } = view;
       let changes = state.changeByRange(range => {
           var _a, _b, _c;
           let { head } = range, around = syntaxTree(state).resolveInner(head, -1), name;
           if (around.name == "TagName" || around.name == "StartTag")
               around = around.parent;
           if (text == ">" && around.name == "OpenTag") {
               if (((_b = (_a = around.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != "CloseTag" && (name = elementName(state.doc, around.parent, head)))
                   return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `></${name}>` } };
           }
           else if (text == "/" && around.name == "OpenTag") {
               let empty = around.parent, base = empty === null || empty === void 0 ? void 0 : empty.parent;
               if (empty.from == head - 1 && ((_c = base.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "CloseTag" && (name = elementName(state.doc, base, head))) {
                   let insert = `/${name}>`;
                   return { range: EditorSelection.cursor(head + insert.length), changes: { from: head, insert } };
               }
           }
           return { range };
       });
       if (changes.changes.empty)
           return false;
       view.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
       return true;
   });

   const data = /*@__PURE__*/defineLanguageFacet({ block: { open: "<!--", close: "-->" } });
   const commonmark = /*@__PURE__*/parser$3.configure({
       props: [
           /*@__PURE__*/foldNodeProp.add(type => {
               if (!type.is("Block") || type.is("Document"))
                   return undefined;
               return (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });
           }),
           /*@__PURE__*/indentNodeProp.add({
               Document: () => null
           }),
           /*@__PURE__*/languageDataProp.add({
               Document: data
           })
       ]
   });
   function mkLang(parser) {
       return new Language(data, parser);
   }
   /**
   Language support for strict CommonMark.
   */
   const commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);
   const extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji]);
   /**
   Language support for [GFM](https://github.github.com/gfm/) plus
   subscript, superscript, and emoji syntax.
   */
   const markdownLanguage = /*@__PURE__*/mkLang(extended);
   function getCodeParser(languages, defaultLanguage) {
       return (info) => {
           if (info && languages) {
               let found = null;
               if (typeof languages == "function")
                   found = languages(info);
               else
                   found = LanguageDescription.matchLanguageName(languages, info, true);
               if (found instanceof LanguageDescription)
                   return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());
               else if (found)
                   return found.parser;
           }
           return defaultLanguage ? defaultLanguage.parser : null;
       };
   }

   function nodeStart(node, doc) {
       return doc.sliceString(node.from, node.from + 50);
   }
   class Context {
       constructor(node, from, to, spaceBefore, spaceAfter, type, item) {
           this.node = node;
           this.from = from;
           this.to = to;
           this.spaceBefore = spaceBefore;
           this.spaceAfter = spaceAfter;
           this.type = type;
           this.item = item;
       }
       blank(trailing = true) {
           let result = this.spaceBefore;
           if (this.node.name == "Blockquote")
               result += ">";
           else
               for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)
                   result += " ";
           return result + (trailing ? this.spaceAfter : "");
       }
       marker(doc, add) {
           let number = this.node.name == "OrderedList" ? String((+itemNumber(this.item, doc)[2] + add)) : "";
           return this.spaceBefore + number + this.type + this.spaceAfter;
       }
   }
   function getContext(node, line, doc) {
       let nodes = [];
       for (let cur = node; cur && cur.name != "Document"; cur = cur.parent) {
           if (cur.name == "ListItem" || cur.name == "Blockquote")
               nodes.push(cur);
       }
       let context = [], pos = 0;
       for (let i = nodes.length - 1; i >= 0; i--) {
           let node = nodes[i], match, start = pos;
           if (node.name == "Blockquote" && (match = /^[ \t]*>( ?)/.exec(line.slice(pos)))) {
               pos += match[0].length;
               context.push(new Context(node, start, pos, "", match[1], ">", null));
           }
           else if (node.name == "ListItem" && node.parent.name == "OrderedList" &&
               (match = /^([ \t]*)\d+([.)])([ \t]*)/.exec(nodeStart(node, doc)))) {
               let after = match[3], len = match[0].length;
               if (after.length >= 4) {
                   after = after.slice(0, after.length - 4);
                   len -= 4;
               }
               pos += len;
               context.push(new Context(node.parent, start, pos, match[1], after, match[2], node));
           }
           else if (node.name == "ListItem" && node.parent.name == "BulletList" &&
               (match = /^([ \t]*)([-+*])([ \t]{1,4}\[[ xX]\])?([ \t]+)/.exec(nodeStart(node, doc)))) {
               let after = match[4], len = match[0].length;
               if (after.length > 4) {
                   after = after.slice(0, after.length - 4);
                   len -= 4;
               }
               let type = match[2];
               if (match[3])
                   type += match[3].replace(/[xX]/, ' ');
               pos += len;
               context.push(new Context(node.parent, start, pos, match[1], after, type, node));
           }
       }
       return context;
   }
   function itemNumber(item, doc) {
       return /^(\s*)(\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));
   }
   function renumberList(after, doc, changes, offset = 0) {
       for (let prev = -1, node = after;;) {
           if (node.name == "ListItem") {
               let m = itemNumber(node, doc);
               let number = +m[2];
               if (prev >= 0) {
                   if (number != prev + 1)
                       return;
                   changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });
               }
               prev = number;
           }
           let next = node.nextSibling;
           if (!next)
               break;
           node = next;
       }
   }
   /**
   This command, when invoked in Markdown context with cursor
   selection(s), will create a new line with the markup for
   blockquotes and lists that were active on the old line. If the
   cursor was directly after the end of the markup for the old line,
   trailing whitespace and list markers are removed from that line.

   The command does nothing in non-Markdown context, so it should
   not be used as the only binding for Enter (even in a Markdown
   document, HTML and code regions might use a different language).
   */
   const insertNewlineContinueMarkup = ({ state, dispatch }) => {
       let tree = syntaxTree(state), { doc } = state;
       let dont = null, changes = state.changeByRange(range => {
           if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))
               return dont = { range };
           let pos = range.from, line = doc.lineAt(pos);
           let context = getContext(tree.resolveInner(pos, -1), line.text, doc);
           while (context.length && context[context.length - 1].from > pos - line.from)
               context.pop();
           if (!context.length)
               return dont = { range };
           let inner = context[context.length - 1];
           if (inner.to - inner.spaceAfter.length > pos - line.from)
               return dont = { range };
           let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\S/.test(line.text.slice(inner.to));
           // Empty line in list
           if (inner.item && emptyLine) {
               // First list item or blank line before: delete a level of markup
               if (inner.node.firstChild.to >= pos ||
                   line.from > 0 && !/[^\s>]/.test(doc.lineAt(line.from - 1).text)) {
                   let next = context.length > 1 ? context[context.length - 2] : null;
                   let delTo, insert = "";
                   if (next && next.item) { // Re-add marker for the list at the next level
                       delTo = line.from + next.from;
                       insert = next.marker(doc, 1);
                   }
                   else {
                       delTo = line.from + (next ? next.to : 0);
                   }
                   let changes = [{ from: delTo, to: pos, insert }];
                   if (inner.node.name == "OrderedList")
                       renumberList(inner.item, doc, changes, -2);
                   if (next && next.node.name == "OrderedList")
                       renumberList(next.item, doc, changes);
                   return { range: EditorSelection.cursor(delTo + insert.length), changes };
               }
               else { // Move this line down
                   let insert = "";
                   for (let i = 0, e = context.length - 2; i <= e; i++)
                       insert += context[i].blank(i < e);
                   insert += state.lineBreak;
                   return { range: EditorSelection.cursor(pos + insert.length), changes: { from: line.from, insert } };
               }
           }
           if (inner.node.name == "Blockquote" && emptyLine && line.from) {
               let prevLine = doc.lineAt(line.from - 1), quoted = />\s*$/.exec(prevLine.text);
               // Two aligned empty quoted lines in a row
               if (quoted && quoted.index == inner.from) {
                   let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },
                       { from: line.from + inner.from, to: line.to }]);
                   return { range: range.map(changes), changes };
               }
           }
           let changes = [];
           if (inner.node.name == "OrderedList")
               renumberList(inner.item, doc, changes);
           let insert = state.lineBreak;
           let continued = inner.item && inner.item.from < line.from;
           // If not dedented
           if (!continued || /^[\s\d.)\-+*>]*/.exec(line.text)[0].length >= inner.to) {
               for (let i = 0, e = context.length - 1; i <= e; i++)
                   insert += i == e && !continued ? context[i].marker(doc, 1) : context[i].blank();
           }
           let from = pos;
           while (from > line.from && /\s/.test(line.text.charAt(from - line.from - 1)))
               from--;
           changes.push({ from, to: pos, insert });
           return { range: EditorSelection.cursor(from + insert.length), changes };
       });
       if (dont)
           return false;
       dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
       return true;
   };
   function isMark(node) {
       return node.name == "QuoteMark" || node.name == "ListMark";
   }
   function contextNodeForDelete(tree, pos) {
       let node = tree.resolveInner(pos, -1), scan = pos;
       if (isMark(node)) {
           scan = node.from;
           node = node.parent;
       }
       for (let prev; prev = node.childBefore(scan);) {
           if (isMark(prev)) {
               scan = prev.from;
           }
           else if (prev.name == "OrderedList" || prev.name == "BulletList") {
               node = prev.lastChild;
               scan = node.to;
           }
           else {
               break;
           }
       }
       return node;
   }
   /**
   This command will, when invoked in a Markdown context with the
   cursor directly after list or blockquote markup, delete one level
   of markup. When the markup is for a list, it will be replaced by
   spaces on the first invocation (a further invocation will delete
   the spaces), to make it easy to continue a list.

   When not after Markdown block markup, this command will return
   false, so it is intended to be bound alongside other deletion
   commands, with a higher precedence than the more generic commands.
   */
   const deleteMarkupBackward = ({ state, dispatch }) => {
       let tree = syntaxTree(state);
       let dont = null, changes = state.changeByRange(range => {
           let pos = range.from, { doc } = state;
           if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {
               let line = doc.lineAt(pos);
               let context = getContext(contextNodeForDelete(tree, pos), line.text, doc);
               if (context.length) {
                   let inner = context[context.length - 1];
                   let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);
                   // Delete extra trailing space after markup
                   if (pos - line.from > spaceEnd && !/\S/.test(line.text.slice(spaceEnd, pos - line.from)))
                       return { range: EditorSelection.cursor(line.from + spaceEnd),
                           changes: { from: line.from + spaceEnd, to: pos } };
                   if (pos - line.from == spaceEnd) {
                       let start = line.from + inner.from;
                       // Replace a list item marker with blank space
                       if (inner.item && inner.node.from < inner.item.from && /\S/.test(line.text.slice(inner.from, inner.to)))
                           return { range, changes: { from: start, to: line.from + inner.to, insert: inner.blank() } };
                       // Delete one level of indentation
                       if (start < pos)
                           return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };
                   }
               }
           }
           return dont = { range };
       });
       if (dont)
           return false;
       dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete" }));
       return true;
   };

   /**
   A small keymap with Markdown-specific bindings. Binds Enter to
   [`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)
   and Backspace to
   [`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).
   */
   const markdownKeymap = [
       { key: "Enter", run: insertNewlineContinueMarkup },
       { key: "Backspace", run: deleteMarkupBackward }
   ];
   const htmlNoMatch = /*@__PURE__*/html$3({ matchClosingTags: false });
   /**
   Markdown language support.
   */
   function markdown(config = {}) {
       let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage } = config;
       if (!(parser instanceof MarkdownParser))
           throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
       let extensions = config.extensions ? [config.extensions] : [];
       let support = [htmlNoMatch.support], defaultCode;
       if (defaultCodeLanguage instanceof LanguageSupport) {
           support.push(defaultCodeLanguage.support);
           defaultCode = defaultCodeLanguage.language;
       }
       else if (defaultCodeLanguage) {
           defaultCode = defaultCodeLanguage;
       }
       let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;
       extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));
       if (addKeymap)
           support.push(Prec.high(keymap.of(markdownKeymap)));
       return new LanguageSupport(mkLang(parser.configure(extensions)), support);
   }

   // Keep track of ordinal
   class Ordinal {
   }
   Ordinal.base = 0;
   // Wrap selection(s) in cloze tags
   const CLOZE_ORD_RE$1 = new RegExp(String.raw `{{c(\d+)::`, 'g');
   const clozeSelections = (inc) => (view) => {
       const selection = view.state.selection;
       let i = Ordinal.base;
       let itr = view.state.doc.iter();
       while (!itr.done) {
           if (!itr.lineBreak) {
               let match;
               while ((match = CLOZE_ORD_RE$1.exec(itr.value)) !== null) {
                   const n = parseInt(match[1]);
                   if (n > i)
                       i = n;
               }
           }
           itr.next();
       }
       let trs = [];
       for (const r of selection.ranges) {
           if (inc) {
               i++;
           }
           if (r.empty) {
               trs.push({ changes: { from: r.from, to: r.from, insert: `{{c${i || 1}::}}` } });
           }
           else {
               trs.push({ changes: { from: r.from, to: r.from, insert: `{{c${i || 1}::` } });
               trs.push({ changes: { from: r.to, to: r.to, insert: '}}' } });
           }
       }
       view.dispatch(...trs);
       return true;
   };
   // Public functions 
   const clozeNext = clozeSelections(true);
   const clozeCurrent = clozeSelections(false);
   // Keyboard shortcuts
   const ankiClozeKeymap = [
       { key: 'Ctrl-Shift-c', run: clozeNext },
       { key: 'Ctrl-Alt-c', run: clozeCurrent }
   ];
   // Create extension with current ordinal
   function ankiCloze(options = {}) {
       Ordinal.base = options.hasOwnProperty('ordinal') ? options['ordinal'] : 0;
       return [];
   }

   // Name to function lookup
   const cm_functions = { 'clozeCurrent': clozeCurrent, 'clozeNext': clozeNext, 'RegExpCursor': RegExpCursor, 'SearchCursor': SearchCursor, 'SearchQuery': SearchQuery, 'closeSearchPanel': closeSearchPanel, 'findNext': findNext, 'findPrevious': findPrevious, 'getSearchQuery': getSearchQuery, 'gotoLine': gotoLine, 'highlightSelectionMatches': highlightSelectionMatches, 'openSearchPanel': openSearchPanel, 'replaceAll': replaceAll, 'replaceNext': replaceNext, 'search': search$2, 'searchKeymap': searchKeymap, 'selectMatches': selectMatches, 'selectNextOccurrence': selectNextOccurrence, 'selectSelectionMatches': selectSelectionMatches, 'setSearchQuery': setSearchQuery, 'blockComment': blockComment, 'blockUncomment': blockUncomment, 'copyLineDown': copyLineDown, 'copyLineUp': copyLineUp, 'cursorCharBackward': cursorCharBackward, 'cursorCharForward': cursorCharForward, 'cursorCharLeft': cursorCharLeft, 'cursorCharRight': cursorCharRight, 'cursorDocEnd': cursorDocEnd, 'cursorDocStart': cursorDocStart, 'cursorGroupBackward': cursorGroupBackward, 'cursorGroupForward': cursorGroupForward, 'cursorGroupLeft': cursorGroupLeft, 'cursorGroupRight': cursorGroupRight, 'cursorLineBoundaryBackward': cursorLineBoundaryBackward, 'cursorLineBoundaryForward': cursorLineBoundaryForward, 'cursorLineDown': cursorLineDown, 'cursorLineEnd': cursorLineEnd, 'cursorLineStart': cursorLineStart, 'cursorLineUp': cursorLineUp, 'cursorMatchingBracket': cursorMatchingBracket, 'cursorPageDown': cursorPageDown, 'cursorPageUp': cursorPageUp, 'cursorSubwordBackward': cursorSubwordBackward, 'cursorSubwordForward': cursorSubwordForward, 'cursorSyntaxLeft': cursorSyntaxLeft, 'cursorSyntaxRight': cursorSyntaxRight, 'defaultKeymap': defaultKeymap, 'deleteCharBackward': deleteCharBackward, 'deleteCharForward': deleteCharForward, 'deleteGroupBackward': deleteGroupBackward, 'deleteGroupForward': deleteGroupForward, 'deleteLine': deleteLine, 'deleteToLineEnd': deleteToLineEnd, 'deleteToLineStart': deleteToLineStart, 'deleteTrailingWhitespace': deleteTrailingWhitespace, 'emacsStyleKeymap': emacsStyleKeymap, 'history': history, 'historyField': historyField, 'historyKeymap': historyKeymap, 'indentLess': indentLess, 'indentMore': indentMore, 'indentSelection': indentSelection, 'indentWithTab': indentWithTab, 'insertBlankLine': insertBlankLine, 'insertNewline': insertNewline, 'insertNewlineAndIndent': insertNewlineAndIndent, 'insertTab': insertTab, 'invertedEffects': invertedEffects, 'isolateHistory': isolateHistory, 'lineComment': lineComment, 'lineUncomment': lineUncomment, 'moveLineDown': moveLineDown, 'moveLineUp': moveLineUp, 'redo': redo, 'redoDepth': redoDepth, 'redoSelection': redoSelection, 'selectAll': selectAll, 'selectCharBackward': selectCharBackward, 'selectCharForward': selectCharForward, 'selectCharLeft': selectCharLeft, 'selectCharRight': selectCharRight, 'selectDocEnd': selectDocEnd, 'selectDocStart': selectDocStart, 'selectGroupBackward': selectGroupBackward, 'selectGroupForward': selectGroupForward, 'selectGroupLeft': selectGroupLeft, 'selectGroupRight': selectGroupRight, 'selectLine': selectLine, 'selectLineBoundaryBackward': selectLineBoundaryBackward, 'selectLineBoundaryForward': selectLineBoundaryForward, 'selectLineDown': selectLineDown, 'selectLineEnd': selectLineEnd, 'selectLineStart': selectLineStart, 'selectLineUp': selectLineUp, 'selectMatchingBracket': selectMatchingBracket, 'selectPageDown': selectPageDown, 'selectPageUp': selectPageUp, 'selectParentSyntax': selectParentSyntax, 'selectSubwordBackward': selectSubwordBackward, 'selectSubwordForward': selectSubwordForward, 'selectSyntaxLeft': selectSyntaxLeft, 'selectSyntaxRight': selectSyntaxRight, 'simplifySelection': simplifySelection, 'splitLine': splitLine, 'standardKeymap': standardKeymap, 'toggleBlockComment': toggleBlockComment, 'toggleBlockCommentByLine': toggleBlockCommentByLine, 'toggleComment': toggleComment, 'toggleLineComment': toggleLineComment, 'transposeChars': transposeChars, 'undo': undo, 'undoDepth': undoDepth, 'undoSelection': undoSelection };
   // Configuration for CM instances
   let config = {
       keymap: []
   };
   function create_state(doc, ord) {
       return EditorState.create({
           doc: doc,
           extensions: [
               highlightSpecialChars(),
               history(),
               drawSelection(),
               dropCursor(),
               EditorState.allowMultipleSelections.of(true),
               indentOnInput(),
               bracketMatching(),
               closeBrackets(),
               autocompletion(),
               rectangularSelection(),
               search$2(),
               crosshairCursor(),
               highlightActiveLine(),
               highlightSelectionMatches(),
               // @ts-ignore FIXME: what is correct TS for below?
               keymap.of([
                   ...config.keymap,
                   ...ankiClozeKeymap,
                   ...closeBracketsKeymap,
                   ...defaultKeymap,
                   indentWithTab,
                   ...historyKeymap,
                   ...completionKeymap
               ]),
               EditorView.lineWrapping,
               markdown(),
               ankiCloze({ ordinal: ord })
           ]
       });
   }
   function create$2(parent, doc, ord, on_change = undefined) {
       function _dispatch(tr) {
           const res = this.update([tr]);
           if (!tr.changes.empty) {
               on_change(this.state.doc.toString());
           }
           return res;
       }
       if (on_change) {
           return new EditorView({
               state: create_state(doc, ord),
               parent: parent,
               dispatch: _dispatch
           });
       }
       return new EditorView({
           state: create_state(doc, ord),
           parent: parent
       });
   }
   function configure$2(cfg) {
       var _a;
       config.keymap = [];
       (_a = cfg['keymap']) === null || _a === void 0 ? void 0 : _a.forEach((sc) => {
           const tmp = { key: sc['key'] };
           if ('shift' in sc)
               tmp['shift'] = cm_functions[sc.shift];
           if ('run' in sc)
               tmp['run'] = cm_functions[sc.run];
           if ('scope' in sc)
               tmp['scope'] = sc.scope;
           if ('preventDefault' in sc)
               tmp['preventDefault'] = sc.preventDefault;
           config.keymap.push(tmp);
       });
   }

   var has = Object.prototype.hasOwnProperty;

   function find$1(iter, tar, key) {
   	for (key of iter.keys()) {
   		if (dequal(key, tar)) return key;
   	}
   }

   function dequal(foo, bar) {
   	var ctor, len, tmp;
   	if (foo === bar) return true;

   	if (foo && bar && (ctor=foo.constructor) === bar.constructor) {
   		if (ctor === Date) return foo.getTime() === bar.getTime();
   		if (ctor === RegExp) return foo.toString() === bar.toString();

   		if (ctor === Array) {
   			if ((len=foo.length) === bar.length) {
   				while (len-- && dequal(foo[len], bar[len]));
   			}
   			return len === -1;
   		}

   		if (ctor === Set) {
   			if (foo.size !== bar.size) {
   				return false;
   			}
   			for (len of foo) {
   				tmp = len;
   				if (tmp && typeof tmp === 'object') {
   					tmp = find$1(bar, tmp);
   					if (!tmp) return false;
   				}
   				if (!bar.has(tmp)) return false;
   			}
   			return true;
   		}

   		if (ctor === Map) {
   			if (foo.size !== bar.size) {
   				return false;
   			}
   			for (len of foo) {
   				tmp = len[0];
   				if (tmp && typeof tmp === 'object') {
   					tmp = find$1(bar, tmp);
   					if (!tmp) return false;
   				}
   				if (!dequal(len[1], bar.get(tmp))) {
   					return false;
   				}
   			}
   			return true;
   		}

   		if (ctor === ArrayBuffer) {
   			foo = new Uint8Array(foo);
   			bar = new Uint8Array(bar);
   		} else if (ctor === DataView) {
   			if ((len=foo.byteLength) === bar.byteLength) {
   				while (len-- && foo.getInt8(len) === bar.getInt8(len));
   			}
   			return len === -1;
   		}

   		if (ArrayBuffer.isView(foo)) {
   			if ((len=foo.byteLength) === bar.byteLength) {
   				while (len-- && foo[len] === bar[len]);
   			}
   			return len === -1;
   		}

   		if (!ctor || typeof foo === 'object') {
   			len = 0;
   			for (ctor in foo) {
   				if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;
   				if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
   			}
   			return Object.keys(bar).length === len;
   		}
   	}

   	return foo !== foo && bar !== bar;
   }

   let FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM, isTTY=true;
   if (typeof process !== 'undefined') {
   	({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env || {});
   	isTTY = process.stdout && process.stdout.isTTY;
   }

   const $$1 = {
   	enabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== 'dumb' && (
   		FORCE_COLOR != null && FORCE_COLOR !== '0' || isTTY
   	),

   	// modifiers
   	reset: init(0, 0),
   	bold: init(1, 22),
   	dim: init(2, 22),
   	italic: init(3, 23),
   	underline: init(4, 24),
   	inverse: init(7, 27),
   	hidden: init(8, 28),
   	strikethrough: init(9, 29),

   	// colors
   	black: init(30, 39),
   	red: init(31, 39),
   	green: init(32, 39),
   	yellow: init(33, 39),
   	blue: init(34, 39),
   	magenta: init(35, 39),
   	cyan: init(36, 39),
   	white: init(37, 39),
   	gray: init(90, 39),
   	grey: init(90, 39),

   	// background colors
   	bgBlack: init(40, 49),
   	bgRed: init(41, 49),
   	bgGreen: init(42, 49),
   	bgYellow: init(43, 49),
   	bgBlue: init(44, 49),
   	bgMagenta: init(45, 49),
   	bgCyan: init(46, 49),
   	bgWhite: init(47, 49)
   };

   function run(arr, str) {
   	let i=0, tmp, beg='', end='';
   	for (; i < arr.length; i++) {
   		tmp = arr[i];
   		beg += tmp.open;
   		end += tmp.close;
   		if (!!~str.indexOf(tmp.close)) {
   			str = str.replace(tmp.rgx, tmp.close + tmp.open);
   		}
   	}
   	return beg + str + end;
   }

   function chain(has, keys) {
   	let ctx = { has, keys };

   	ctx.reset = $$1.reset.bind(ctx);
   	ctx.bold = $$1.bold.bind(ctx);
   	ctx.dim = $$1.dim.bind(ctx);
   	ctx.italic = $$1.italic.bind(ctx);
   	ctx.underline = $$1.underline.bind(ctx);
   	ctx.inverse = $$1.inverse.bind(ctx);
   	ctx.hidden = $$1.hidden.bind(ctx);
   	ctx.strikethrough = $$1.strikethrough.bind(ctx);

   	ctx.black = $$1.black.bind(ctx);
   	ctx.red = $$1.red.bind(ctx);
   	ctx.green = $$1.green.bind(ctx);
   	ctx.yellow = $$1.yellow.bind(ctx);
   	ctx.blue = $$1.blue.bind(ctx);
   	ctx.magenta = $$1.magenta.bind(ctx);
   	ctx.cyan = $$1.cyan.bind(ctx);
   	ctx.white = $$1.white.bind(ctx);
   	ctx.gray = $$1.gray.bind(ctx);
   	ctx.grey = $$1.grey.bind(ctx);

   	ctx.bgBlack = $$1.bgBlack.bind(ctx);
   	ctx.bgRed = $$1.bgRed.bind(ctx);
   	ctx.bgGreen = $$1.bgGreen.bind(ctx);
   	ctx.bgYellow = $$1.bgYellow.bind(ctx);
   	ctx.bgBlue = $$1.bgBlue.bind(ctx);
   	ctx.bgMagenta = $$1.bgMagenta.bind(ctx);
   	ctx.bgCyan = $$1.bgCyan.bind(ctx);
   	ctx.bgWhite = $$1.bgWhite.bind(ctx);

   	return ctx;
   }

   function init(open, close) {
   	let blk = {
   		open: `\x1b[${open}m`,
   		close: `\x1b[${close}m`,
   		rgx: new RegExp(`\\x1b\\[${close}m`, 'g')
   	};
   	return function (txt) {
   		if (this !== void 0 && this.has !== void 0) {
   			!!~this.has.indexOf(open) || (this.has.push(open),this.keys.push(blk));
   			return txt === void 0 ? this : $$1.enabled ? run(this.keys, txt+'') : txt+'';
   		}
   		return txt === void 0 ? chain([open], [blk]) : $$1.enabled ? run([blk], txt+'') : txt+'';
   	};
   }

   var lib = {};

   var base$2 = {};

   /*istanbul ignore start*/

   (function (exports) {

   	Object.defineProperty(exports, "__esModule", {
   	  value: true
   	});
   	exports["default"] = Diff;

   	/*istanbul ignore end*/
   	function Diff() {}

   	Diff.prototype = {
   	  /*istanbul ignore start*/

   	  /*istanbul ignore end*/
   	  diff: function diff(oldString, newString) {
   	    /*istanbul ignore start*/
   	    var
   	    /*istanbul ignore end*/
   	    options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
   	    var callback = options.callback;

   	    if (typeof options === 'function') {
   	      callback = options;
   	      options = {};
   	    }

   	    this.options = options;
   	    var self = this;

   	    function done(value) {
   	      if (callback) {
   	        setTimeout(function () {
   	          callback(undefined, value);
   	        }, 0);
   	        return true;
   	      } else {
   	        return value;
   	      }
   	    } // Allow subclasses to massage the input prior to running


   	    oldString = this.castInput(oldString);
   	    newString = this.castInput(newString);
   	    oldString = this.removeEmpty(this.tokenize(oldString));
   	    newString = this.removeEmpty(this.tokenize(newString));
   	    var newLen = newString.length,
   	        oldLen = oldString.length;
   	    var editLength = 1;
   	    var maxEditLength = newLen + oldLen;

   	    if (options.maxEditLength) {
   	      maxEditLength = Math.min(maxEditLength, options.maxEditLength);
   	    }

   	    var bestPath = [{
   	      newPos: -1,
   	      components: []
   	    }]; // Seed editLength = 0, i.e. the content starts with the same values

   	    var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);

   	    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
   	      // Identity per the equality and tokenizer
   	      return done([{
   	        value: this.join(newString),
   	        count: newString.length
   	      }]);
   	    } // Main worker method. checks all permutations of a given edit length for acceptance.


   	    function execEditLength() {
   	      for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
   	        var basePath =
   	        /*istanbul ignore start*/
   	        void 0
   	        /*istanbul ignore end*/
   	        ;

   	        var addPath = bestPath[diagonalPath - 1],
   	            removePath = bestPath[diagonalPath + 1],
   	            _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;

   	        if (addPath) {
   	          // No one else is going to attempt to use this value, clear it
   	          bestPath[diagonalPath - 1] = undefined;
   	        }

   	        var canAdd = addPath && addPath.newPos + 1 < newLen,
   	            canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;

   	        if (!canAdd && !canRemove) {
   	          // If this path is a terminal then prune
   	          bestPath[diagonalPath] = undefined;
   	          continue;
   	        } // Select the diagonal that we want to branch from. We select the prior
   	        // path whose position in the new string is the farthest from the origin
   	        // and does not pass the bounds of the diff graph


   	        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
   	          basePath = clonePath(removePath);
   	          self.pushComponent(basePath.components, undefined, true);
   	        } else {
   	          basePath = addPath; // No need to clone, we've pulled it from the list

   	          basePath.newPos++;
   	          self.pushComponent(basePath.components, true, undefined);
   	        }

   	        _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath); // If we have hit the end of both strings, then we are done

   	        if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {
   	          return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));
   	        } else {
   	          // Otherwise track this path as a potential candidate and continue.
   	          bestPath[diagonalPath] = basePath;
   	        }
   	      }

   	      editLength++;
   	    } // Performs the length of edit iteration. Is a bit fugly as this has to support the
   	    // sync and async mode which is never fun. Loops over execEditLength until a value
   	    // is produced, or until the edit length exceeds options.maxEditLength (if given),
   	    // in which case it will return undefined.


   	    if (callback) {
   	      (function exec() {
   	        setTimeout(function () {
   	          if (editLength > maxEditLength) {
   	            return callback();
   	          }

   	          if (!execEditLength()) {
   	            exec();
   	          }
   	        }, 0);
   	      })();
   	    } else {
   	      while (editLength <= maxEditLength) {
   	        var ret = execEditLength();

   	        if (ret) {
   	          return ret;
   	        }
   	      }
   	    }
   	  },

   	  /*istanbul ignore start*/

   	  /*istanbul ignore end*/
   	  pushComponent: function pushComponent(components, added, removed) {
   	    var last = components[components.length - 1];

   	    if (last && last.added === added && last.removed === removed) {
   	      // We need to clone here as the component clone operation is just
   	      // as shallow array clone
   	      components[components.length - 1] = {
   	        count: last.count + 1,
   	        added: added,
   	        removed: removed
   	      };
   	    } else {
   	      components.push({
   	        count: 1,
   	        added: added,
   	        removed: removed
   	      });
   	    }
   	  },

   	  /*istanbul ignore start*/

   	  /*istanbul ignore end*/
   	  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
   	    var newLen = newString.length,
   	        oldLen = oldString.length,
   	        newPos = basePath.newPos,
   	        oldPos = newPos - diagonalPath,
   	        commonCount = 0;

   	    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
   	      newPos++;
   	      oldPos++;
   	      commonCount++;
   	    }

   	    if (commonCount) {
   	      basePath.components.push({
   	        count: commonCount
   	      });
   	    }

   	    basePath.newPos = newPos;
   	    return oldPos;
   	  },

   	  /*istanbul ignore start*/

   	  /*istanbul ignore end*/
   	  equals: function equals(left, right) {
   	    if (this.options.comparator) {
   	      return this.options.comparator(left, right);
   	    } else {
   	      return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();
   	    }
   	  },

   	  /*istanbul ignore start*/

   	  /*istanbul ignore end*/
   	  removeEmpty: function removeEmpty(array) {
   	    var ret = [];

   	    for (var i = 0; i < array.length; i++) {
   	      if (array[i]) {
   	        ret.push(array[i]);
   	      }
   	    }

   	    return ret;
   	  },

   	  /*istanbul ignore start*/

   	  /*istanbul ignore end*/
   	  castInput: function castInput(value) {
   	    return value;
   	  },

   	  /*istanbul ignore start*/

   	  /*istanbul ignore end*/
   	  tokenize: function tokenize(value) {
   	    return value.split('');
   	  },

   	  /*istanbul ignore start*/

   	  /*istanbul ignore end*/
   	  join: function join(chars) {
   	    return chars.join('');
   	  }
   	};

   	function buildValues(diff, components, newString, oldString, useLongestToken) {
   	  var componentPos = 0,
   	      componentLen = components.length,
   	      newPos = 0,
   	      oldPos = 0;

   	  for (; componentPos < componentLen; componentPos++) {
   	    var component = components[componentPos];

   	    if (!component.removed) {
   	      if (!component.added && useLongestToken) {
   	        var value = newString.slice(newPos, newPos + component.count);
   	        value = value.map(function (value, i) {
   	          var oldValue = oldString[oldPos + i];
   	          return oldValue.length > value.length ? oldValue : value;
   	        });
   	        component.value = diff.join(value);
   	      } else {
   	        component.value = diff.join(newString.slice(newPos, newPos + component.count));
   	      }

   	      newPos += component.count; // Common case

   	      if (!component.added) {
   	        oldPos += component.count;
   	      }
   	    } else {
   	      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));
   	      oldPos += component.count; // Reverse add and remove so removes are output first to match common convention
   	      // The diffing algorithm is tied to add then remove output and this is the simplest
   	      // route to get the desired output with minimal overhead.

   	      if (componentPos && components[componentPos - 1].added) {
   	        var tmp = components[componentPos - 1];
   	        components[componentPos - 1] = components[componentPos];
   	        components[componentPos] = tmp;
   	      }
   	    }
   	  } // Special case handle for when one terminal is ignored (i.e. whitespace).
   	  // For this case we merge the terminal into the prior string and drop the change.
   	  // This is only available for string mode.


   	  var lastComponent = components[componentLen - 1];

   	  if (componentLen > 1 && typeof lastComponent.value === 'string' && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {
   	    components[componentLen - 2].value += lastComponent.value;
   	    components.pop();
   	  }

   	  return components;
   	}

   	function clonePath(path) {
   	  return {
   	    newPos: path.newPos,
   	    components: path.components.slice(0)
   	  };
   	}
   	
   } (base$2));

   var character = {};

   /*istanbul ignore start*/

   Object.defineProperty(character, "__esModule", {
     value: true
   });
   character.diffChars = diffChars;
   character.characterDiff = void 0;

   /*istanbul ignore end*/
   var
   /*istanbul ignore start*/
   _base$6 = _interopRequireDefault$7(base$2)
   /*istanbul ignore end*/
   ;

   /*istanbul ignore start*/ function _interopRequireDefault$7(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

   /*istanbul ignore end*/
   var characterDiff = new
   /*istanbul ignore start*/
   _base$6
   /*istanbul ignore end*/
   [
   /*istanbul ignore start*/
   "default"
   /*istanbul ignore end*/
   ]();

   /*istanbul ignore start*/
   character.characterDiff = characterDiff;

   /*istanbul ignore end*/
   function diffChars(oldStr, newStr, options) {
     return characterDiff.diff(oldStr, newStr, options);
   }

   var word = {};

   var params = {};

   /*istanbul ignore start*/

   Object.defineProperty(params, "__esModule", {
     value: true
   });
   params.generateOptions = generateOptions;

   /*istanbul ignore end*/
   function generateOptions(options, defaults) {
     if (typeof options === 'function') {
       defaults.callback = options;
     } else if (options) {
       for (var name in options) {
         /* istanbul ignore else */
         if (options.hasOwnProperty(name)) {
           defaults[name] = options[name];
         }
       }
     }

     return defaults;
   }

   /*istanbul ignore start*/

   Object.defineProperty(word, "__esModule", {
     value: true
   });
   word.diffWords = diffWords;
   word.diffWordsWithSpace = diffWordsWithSpace;
   word.wordDiff = void 0;

   /*istanbul ignore end*/
   var
   /*istanbul ignore start*/
   _base$5 = _interopRequireDefault$6(base$2)
   /*istanbul ignore end*/
   ;

   var
   /*istanbul ignore start*/
   _params$1 = params
   /*istanbul ignore end*/
   ;

   /*istanbul ignore start*/ function _interopRequireDefault$6(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

   /*istanbul ignore end*/
   // Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode
   //
   // Ranges and exceptions:
   // Latin-1 Supplement, 0080–00FF
   //  - U+00D7  × Multiplication sign
   //  - U+00F7  ÷ Division sign
   // Latin Extended-A, 0100–017F
   // Latin Extended-B, 0180–024F
   // IPA Extensions, 0250–02AF
   // Spacing Modifier Letters, 02B0–02FF
   //  - U+02C7  ˇ &#711;  Caron
   //  - U+02D8  ˘ &#728;  Breve
   //  - U+02D9  ˙ &#729;  Dot Above
   //  - U+02DA  ˚ &#730;  Ring Above
   //  - U+02DB  ˛ &#731;  Ogonek
   //  - U+02DC  ˜ &#732;  Small Tilde
   //  - U+02DD  ˝ &#733;  Double Acute Accent
   // Latin Extended Additional, 1E00–1EFF
   var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
   var reWhitespace = /\S/;
   var wordDiff = new
   /*istanbul ignore start*/
   _base$5
   /*istanbul ignore end*/
   [
   /*istanbul ignore start*/
   "default"
   /*istanbul ignore end*/
   ]();

   /*istanbul ignore start*/
   word.wordDiff = wordDiff;

   /*istanbul ignore end*/
   wordDiff.equals = function (left, right) {
     if (this.options.ignoreCase) {
       left = left.toLowerCase();
       right = right.toLowerCase();
     }

     return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);
   };

   wordDiff.tokenize = function (value) {
     // All whitespace symbols except newline group into one token, each newline - in separate token
     var tokens = value.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.

     for (var i = 0; i < tokens.length - 1; i++) {
       // If we have an empty string in the next field and we have only word chars before and after, merge
       if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
         tokens[i] += tokens[i + 2];
         tokens.splice(i + 1, 2);
         i--;
       }
     }

     return tokens;
   };

   function diffWords(oldStr, newStr, options) {
     options =
     /*istanbul ignore start*/
     (/*istanbul ignore end*/

     /*istanbul ignore start*/
     0, _params$1
     /*istanbul ignore end*/
     .
     /*istanbul ignore start*/
     generateOptions)
     /*istanbul ignore end*/
     (options, {
       ignoreWhitespace: true
     });
     return wordDiff.diff(oldStr, newStr, options);
   }

   function diffWordsWithSpace(oldStr, newStr, options) {
     return wordDiff.diff(oldStr, newStr, options);
   }

   var line = {};

   /*istanbul ignore start*/

   Object.defineProperty(line, "__esModule", {
     value: true
   });
   line.diffLines = diffLines;
   line.diffTrimmedLines = diffTrimmedLines;
   line.lineDiff = void 0;

   /*istanbul ignore end*/
   var
   /*istanbul ignore start*/
   _base$4 = _interopRequireDefault$5(base$2)
   /*istanbul ignore end*/
   ;

   var
   /*istanbul ignore start*/
   _params = params
   /*istanbul ignore end*/
   ;

   /*istanbul ignore start*/ function _interopRequireDefault$5(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

   /*istanbul ignore end*/
   var lineDiff = new
   /*istanbul ignore start*/
   _base$4
   /*istanbul ignore end*/
   [
   /*istanbul ignore start*/
   "default"
   /*istanbul ignore end*/
   ]();

   /*istanbul ignore start*/
   line.lineDiff = lineDiff;

   /*istanbul ignore end*/
   lineDiff.tokenize = function (value) {
     var retLines = [],
         linesAndNewlines = value.split(/(\n|\r\n)/); // Ignore the final empty token that occurs if the string ends with a new line

     if (!linesAndNewlines[linesAndNewlines.length - 1]) {
       linesAndNewlines.pop();
     } // Merge the content and line separators into single tokens


     for (var i = 0; i < linesAndNewlines.length; i++) {
       var line = linesAndNewlines[i];

       if (i % 2 && !this.options.newlineIsToken) {
         retLines[retLines.length - 1] += line;
       } else {
         if (this.options.ignoreWhitespace) {
           line = line.trim();
         }

         retLines.push(line);
       }
     }

     return retLines;
   };

   function diffLines(oldStr, newStr, callback) {
     return lineDiff.diff(oldStr, newStr, callback);
   }

   function diffTrimmedLines(oldStr, newStr, callback) {
     var options =
     /*istanbul ignore start*/
     (/*istanbul ignore end*/

     /*istanbul ignore start*/
     0, _params
     /*istanbul ignore end*/
     .
     /*istanbul ignore start*/
     generateOptions)
     /*istanbul ignore end*/
     (callback, {
       ignoreWhitespace: true
     });
     return lineDiff.diff(oldStr, newStr, options);
   }

   var sentence = {};

   /*istanbul ignore start*/

   Object.defineProperty(sentence, "__esModule", {
     value: true
   });
   sentence.diffSentences = diffSentences;
   sentence.sentenceDiff = void 0;

   /*istanbul ignore end*/
   var
   /*istanbul ignore start*/
   _base$3 = _interopRequireDefault$4(base$2)
   /*istanbul ignore end*/
   ;

   /*istanbul ignore start*/ function _interopRequireDefault$4(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

   /*istanbul ignore end*/
   var sentenceDiff = new
   /*istanbul ignore start*/
   _base$3
   /*istanbul ignore end*/
   [
   /*istanbul ignore start*/
   "default"
   /*istanbul ignore end*/
   ]();

   /*istanbul ignore start*/
   sentence.sentenceDiff = sentenceDiff;

   /*istanbul ignore end*/
   sentenceDiff.tokenize = function (value) {
     return value.split(/(\S.+?[.!?])(?=\s+|$)/);
   };

   function diffSentences(oldStr, newStr, callback) {
     return sentenceDiff.diff(oldStr, newStr, callback);
   }

   var css = {};

   /*istanbul ignore start*/

   Object.defineProperty(css, "__esModule", {
     value: true
   });
   css.diffCss = diffCss;
   css.cssDiff = void 0;

   /*istanbul ignore end*/
   var
   /*istanbul ignore start*/
   _base$2 = _interopRequireDefault$3(base$2)
   /*istanbul ignore end*/
   ;

   /*istanbul ignore start*/ function _interopRequireDefault$3(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

   /*istanbul ignore end*/
   var cssDiff = new
   /*istanbul ignore start*/
   _base$2
   /*istanbul ignore end*/
   [
   /*istanbul ignore start*/
   "default"
   /*istanbul ignore end*/
   ]();

   /*istanbul ignore start*/
   css.cssDiff = cssDiff;

   /*istanbul ignore end*/
   cssDiff.tokenize = function (value) {
     return value.split(/([{}:;,]|\s+)/);
   };

   function diffCss(oldStr, newStr, callback) {
     return cssDiff.diff(oldStr, newStr, callback);
   }

   var json = {};

   /*istanbul ignore start*/

   Object.defineProperty(json, "__esModule", {
     value: true
   });
   json.diffJson = diffJson;
   json.canonicalize = canonicalize;
   json.jsonDiff = void 0;

   /*istanbul ignore end*/
   var
   /*istanbul ignore start*/
   _base$1 = _interopRequireDefault$2(base$2)
   /*istanbul ignore end*/
   ;

   var
   /*istanbul ignore start*/
   _line$1 = line
   /*istanbul ignore end*/
   ;

   /*istanbul ignore start*/ function _interopRequireDefault$2(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

   function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

   /*istanbul ignore end*/
   var objectPrototypeToString = Object.prototype.toString;
   var jsonDiff = new
   /*istanbul ignore start*/
   _base$1
   /*istanbul ignore end*/
   [
   /*istanbul ignore start*/
   "default"
   /*istanbul ignore end*/
   ](); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a
   // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:

   /*istanbul ignore start*/
   json.jsonDiff = jsonDiff;

   /*istanbul ignore end*/
   jsonDiff.useLongestToken = true;
   jsonDiff.tokenize =
   /*istanbul ignore start*/
   _line$1
   /*istanbul ignore end*/
   .
   /*istanbul ignore start*/
   lineDiff
   /*istanbul ignore end*/
   .tokenize;

   jsonDiff.castInput = function (value) {
     /*istanbul ignore start*/
     var _this$options =
     /*istanbul ignore end*/
     this.options,
         undefinedReplacement = _this$options.undefinedReplacement,
         _this$options$stringi = _this$options.stringifyReplacer,
         stringifyReplacer = _this$options$stringi === void 0 ? function (k, v)
     /*istanbul ignore start*/
     {
       return (
         /*istanbul ignore end*/
         typeof v === 'undefined' ? undefinedReplacement : v
       );
     } : _this$options$stringi;
     return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');
   };

   jsonDiff.equals = function (left, right) {
     return (
       /*istanbul ignore start*/
       _base$1
       /*istanbul ignore end*/
       [
       /*istanbul ignore start*/
       "default"
       /*istanbul ignore end*/
       ].prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, '$1'), right.replace(/,([\r\n])/g, '$1'))
     );
   };

   function diffJson(oldObj, newObj, options) {
     return jsonDiff.diff(oldObj, newObj, options);
   } // This function handles the presence of circular references by bailing out when encountering an
   // object that is already on the "stack" of items being processed. Accepts an optional replacer


   function canonicalize(obj, stack, replacementStack, replacer, key) {
     stack = stack || [];
     replacementStack = replacementStack || [];

     if (replacer) {
       obj = replacer(key, obj);
     }

     var i;

     for (i = 0; i < stack.length; i += 1) {
       if (stack[i] === obj) {
         return replacementStack[i];
       }
     }

     var canonicalizedObj;

     if ('[object Array]' === objectPrototypeToString.call(obj)) {
       stack.push(obj);
       canonicalizedObj = new Array(obj.length);
       replacementStack.push(canonicalizedObj);

       for (i = 0; i < obj.length; i += 1) {
         canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
       }

       stack.pop();
       replacementStack.pop();
       return canonicalizedObj;
     }

     if (obj && obj.toJSON) {
       obj = obj.toJSON();
     }

     if (
     /*istanbul ignore start*/
     _typeof(
     /*istanbul ignore end*/
     obj) === 'object' && obj !== null) {
       stack.push(obj);
       canonicalizedObj = {};
       replacementStack.push(canonicalizedObj);

       var sortedKeys = [],
           _key;

       for (_key in obj) {
         /* istanbul ignore else */
         if (obj.hasOwnProperty(_key)) {
           sortedKeys.push(_key);
         }
       }

       sortedKeys.sort();

       for (i = 0; i < sortedKeys.length; i += 1) {
         _key = sortedKeys[i];
         canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
       }

       stack.pop();
       replacementStack.pop();
     } else {
       canonicalizedObj = obj;
     }

     return canonicalizedObj;
   }

   var array$1 = {};

   /*istanbul ignore start*/

   Object.defineProperty(array$1, "__esModule", {
     value: true
   });
   array$1.diffArrays = diffArrays;
   array$1.arrayDiff = void 0;

   /*istanbul ignore end*/
   var
   /*istanbul ignore start*/
   _base = _interopRequireDefault$1(base$2)
   /*istanbul ignore end*/
   ;

   /*istanbul ignore start*/ function _interopRequireDefault$1(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

   /*istanbul ignore end*/
   var arrayDiff = new
   /*istanbul ignore start*/
   _base
   /*istanbul ignore end*/
   [
   /*istanbul ignore start*/
   "default"
   /*istanbul ignore end*/
   ]();

   /*istanbul ignore start*/
   array$1.arrayDiff = arrayDiff;

   /*istanbul ignore end*/
   arrayDiff.tokenize = function (value) {
     return value.slice();
   };

   arrayDiff.join = arrayDiff.removeEmpty = function (value) {
     return value;
   };

   function diffArrays(oldArr, newArr, callback) {
     return arrayDiff.diff(oldArr, newArr, callback);
   }

   var apply = {};

   var parse$4 = {};

   /*istanbul ignore start*/

   Object.defineProperty(parse$4, "__esModule", {
     value: true
   });
   parse$4.parsePatch = parsePatch;

   /*istanbul ignore end*/
   function parsePatch(uniDiff) {
     /*istanbul ignore start*/
     var
     /*istanbul ignore end*/
     options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
     var diffstr = uniDiff.split(/\r\n|[\n\v\f\r\x85]/),
         delimiters = uniDiff.match(/\r\n|[\n\v\f\r\x85]/g) || [],
         list = [],
         i = 0;

     function parseIndex() {
       var index = {};
       list.push(index); // Parse diff metadata

       while (i < diffstr.length) {
         var line = diffstr[i]; // File header found, end parsing diff metadata

         if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) {
           break;
         } // Diff index


         var header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line);

         if (header) {
           index.index = header[1];
         }

         i++;
       } // Parse file headers if they are defined. Unified diff requires them, but
       // there's no technical issues to have an isolated hunk without file header


       parseFileHeader(index);
       parseFileHeader(index); // Parse hunks

       index.hunks = [];

       while (i < diffstr.length) {
         var _line = diffstr[i];

         if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(_line)) {
           break;
         } else if (/^@@/.test(_line)) {
           index.hunks.push(parseHunk());
         } else if (_line && options.strict) {
           // Ignore unexpected content unless in strict mode
           throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));
         } else {
           i++;
         }
       }
     } // Parses the --- and +++ headers, if none are found, no lines
     // are consumed.


     function parseFileHeader(index) {
       var fileHeader = /^(---|\+\+\+)\s+(.*)$/.exec(diffstr[i]);

       if (fileHeader) {
         var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';
         var data = fileHeader[2].split('\t', 2);
         var fileName = data[0].replace(/\\\\/g, '\\');

         if (/^".*"$/.test(fileName)) {
           fileName = fileName.substr(1, fileName.length - 2);
         }

         index[keyPrefix + 'FileName'] = fileName;
         index[keyPrefix + 'Header'] = (data[1] || '').trim();
         i++;
       }
     } // Parses a hunk
     // This assumes that we are at the start of a hunk.


     function parseHunk() {
       var chunkHeaderIndex = i,
           chunkHeaderLine = diffstr[i++],
           chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);
       var hunk = {
         oldStart: +chunkHeader[1],
         oldLines: typeof chunkHeader[2] === 'undefined' ? 1 : +chunkHeader[2],
         newStart: +chunkHeader[3],
         newLines: typeof chunkHeader[4] === 'undefined' ? 1 : +chunkHeader[4],
         lines: [],
         linedelimiters: []
       }; // Unified Diff Format quirk: If the chunk size is 0,
       // the first number is one lower than one would expect.
       // https://www.artima.com/weblogs/viewpost.jsp?thread=164293

       if (hunk.oldLines === 0) {
         hunk.oldStart += 1;
       }

       if (hunk.newLines === 0) {
         hunk.newStart += 1;
       }

       var addCount = 0,
           removeCount = 0;

       for (; i < diffstr.length; i++) {
         // Lines starting with '---' could be mistaken for the "remove line" operation
         // But they could be the header for the next file. Therefore prune such cases out.
         if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {
           break;
         }

         var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];

         if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\') {
           hunk.lines.push(diffstr[i]);
           hunk.linedelimiters.push(delimiters[i] || '\n');

           if (operation === '+') {
             addCount++;
           } else if (operation === '-') {
             removeCount++;
           } else if (operation === ' ') {
             addCount++;
             removeCount++;
           }
         } else {
           break;
         }
       } // Handle the empty block count case


       if (!addCount && hunk.newLines === 1) {
         hunk.newLines = 0;
       }

       if (!removeCount && hunk.oldLines === 1) {
         hunk.oldLines = 0;
       } // Perform optional sanity checking


       if (options.strict) {
         if (addCount !== hunk.newLines) {
           throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));
         }

         if (removeCount !== hunk.oldLines) {
           throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));
         }
       }

       return hunk;
     }

     while (i < diffstr.length) {
       parseIndex();
     }

     return list;
   }

   var distanceIterator = {};

   /*istanbul ignore start*/

   (function (exports) {

   	Object.defineProperty(exports, "__esModule", {
   	  value: true
   	});
   	exports["default"] = _default;

   	/*istanbul ignore end*/
   	// Iterator that traverses in the range of [min, max], stepping
   	// by distance from a given start position. I.e. for [0, 4], with
   	// start of 2, this will iterate 2, 3, 1, 4, 0.
   	function
   	/*istanbul ignore start*/
   	_default
   	/*istanbul ignore end*/
   	(start, minLine, maxLine) {
   	  var wantForward = true,
   	      backwardExhausted = false,
   	      forwardExhausted = false,
   	      localOffset = 1;
   	  return function iterator() {
   	    if (wantForward && !forwardExhausted) {
   	      if (backwardExhausted) {
   	        localOffset++;
   	      } else {
   	        wantForward = false;
   	      } // Check if trying to fit beyond text length, and if not, check it fits
   	      // after offset location (or desired location on first iteration)


   	      if (start + localOffset <= maxLine) {
   	        return localOffset;
   	      }

   	      forwardExhausted = true;
   	    }

   	    if (!backwardExhausted) {
   	      if (!forwardExhausted) {
   	        wantForward = true;
   	      } // Check if trying to fit before text beginning, and if not, check it fits
   	      // before offset location


   	      if (minLine <= start - localOffset) {
   	        return -localOffset++;
   	      }

   	      backwardExhausted = true;
   	      return iterator();
   	    } // We tried to fit hunk before text beginning and beyond text length, then
   	    // hunk can't fit on the text. Return undefined

   	  };
   	}
   	
   } (distanceIterator));

   /*istanbul ignore start*/

   Object.defineProperty(apply, "__esModule", {
     value: true
   });
   apply.applyPatch = applyPatch;
   apply.applyPatches = applyPatches;

   /*istanbul ignore end*/
   var
   /*istanbul ignore start*/
   _parse$1 = parse$4
   /*istanbul ignore end*/
   ;

   var
   /*istanbul ignore start*/
   _distanceIterator = _interopRequireDefault(distanceIterator)
   /*istanbul ignore end*/
   ;

   /*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

   /*istanbul ignore end*/
   function applyPatch(source, uniDiff) {
     /*istanbul ignore start*/
     var
     /*istanbul ignore end*/
     options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

     if (typeof uniDiff === 'string') {
       uniDiff =
       /*istanbul ignore start*/
       (/*istanbul ignore end*/

       /*istanbul ignore start*/
       0, _parse$1
       /*istanbul ignore end*/
       .
       /*istanbul ignore start*/
       parsePatch)
       /*istanbul ignore end*/
       (uniDiff);
     }

     if (Array.isArray(uniDiff)) {
       if (uniDiff.length > 1) {
         throw new Error('applyPatch only works with a single input.');
       }

       uniDiff = uniDiff[0];
     } // Apply the diff to the input


     var lines = source.split(/\r\n|[\n\v\f\r\x85]/),
         delimiters = source.match(/\r\n|[\n\v\f\r\x85]/g) || [],
         hunks = uniDiff.hunks,
         compareLine = options.compareLine || function (lineNumber, line, operation, patchContent)
     /*istanbul ignore start*/
     {
       return (
         /*istanbul ignore end*/
         line === patchContent
       );
     },
         errorCount = 0,
         fuzzFactor = options.fuzzFactor || 0,
         minLine = 0,
         offset = 0,
         removeEOFNL,
         addEOFNL;
     /**
      * Checks if the hunk exactly fits on the provided location
      */


     function hunkFits(hunk, toPos) {
       for (var j = 0; j < hunk.lines.length; j++) {
         var line = hunk.lines[j],
             operation = line.length > 0 ? line[0] : ' ',
             content = line.length > 0 ? line.substr(1) : line;

         if (operation === ' ' || operation === '-') {
           // Context sanity check
           if (!compareLine(toPos + 1, lines[toPos], operation, content)) {
             errorCount++;

             if (errorCount > fuzzFactor) {
               return false;
             }
           }

           toPos++;
         }
       }

       return true;
     } // Search best fit offsets for each hunk based on the previous ones


     for (var i = 0; i < hunks.length; i++) {
       var hunk = hunks[i],
           maxLine = lines.length - hunk.oldLines,
           localOffset = 0,
           toPos = offset + hunk.oldStart - 1;
       var iterator =
       /*istanbul ignore start*/
       (/*istanbul ignore end*/

       /*istanbul ignore start*/
       0, _distanceIterator
       /*istanbul ignore end*/
       [
       /*istanbul ignore start*/
       "default"
       /*istanbul ignore end*/
       ])(toPos, minLine, maxLine);

       for (; localOffset !== undefined; localOffset = iterator()) {
         if (hunkFits(hunk, toPos + localOffset)) {
           hunk.offset = offset += localOffset;
           break;
         }
       }

       if (localOffset === undefined) {
         return false;
       } // Set lower text limit to end of the current hunk, so next ones don't try
       // to fit over already patched text


       minLine = hunk.offset + hunk.oldStart + hunk.oldLines;
     } // Apply patch hunks


     var diffOffset = 0;

     for (var _i = 0; _i < hunks.length; _i++) {
       var _hunk = hunks[_i],
           _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;

       diffOffset += _hunk.newLines - _hunk.oldLines;

       for (var j = 0; j < _hunk.lines.length; j++) {
         var line = _hunk.lines[j],
             operation = line.length > 0 ? line[0] : ' ',
             content = line.length > 0 ? line.substr(1) : line,
             delimiter = _hunk.linedelimiters[j];

         if (operation === ' ') {
           _toPos++;
         } else if (operation === '-') {
           lines.splice(_toPos, 1);
           delimiters.splice(_toPos, 1);
           /* istanbul ignore else */
         } else if (operation === '+') {
           lines.splice(_toPos, 0, content);
           delimiters.splice(_toPos, 0, delimiter);
           _toPos++;
         } else if (operation === '\\') {
           var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;

           if (previousOperation === '+') {
             removeEOFNL = true;
           } else if (previousOperation === '-') {
             addEOFNL = true;
           }
         }
       }
     } // Handle EOFNL insertion/removal


     if (removeEOFNL) {
       while (!lines[lines.length - 1]) {
         lines.pop();
         delimiters.pop();
       }
     } else if (addEOFNL) {
       lines.push('');
       delimiters.push('\n');
     }

     for (var _k = 0; _k < lines.length - 1; _k++) {
       lines[_k] = lines[_k] + delimiters[_k];
     }

     return lines.join('');
   } // Wrapper that supports multiple file patches via callbacks.


   function applyPatches(uniDiff, options) {
     if (typeof uniDiff === 'string') {
       uniDiff =
       /*istanbul ignore start*/
       (/*istanbul ignore end*/

       /*istanbul ignore start*/
       0, _parse$1
       /*istanbul ignore end*/
       .
       /*istanbul ignore start*/
       parsePatch)
       /*istanbul ignore end*/
       (uniDiff);
     }

     var currentIndex = 0;

     function processIndex() {
       var index = uniDiff[currentIndex++];

       if (!index) {
         return options.complete();
       }

       options.loadFile(index, function (err, data) {
         if (err) {
           return options.complete(err);
         }

         var updatedContent = applyPatch(data, index, options);
         options.patched(index, updatedContent, function (err) {
           if (err) {
             return options.complete(err);
           }

           processIndex();
         });
       });
     }

     processIndex();
   }

   var merge$2 = {};

   var create$1 = {};

   /*istanbul ignore start*/

   Object.defineProperty(create$1, "__esModule", {
     value: true
   });
   create$1.structuredPatch = structuredPatch;
   create$1.formatPatch = formatPatch;
   create$1.createTwoFilesPatch = createTwoFilesPatch;
   create$1.createPatch = createPatch;

   /*istanbul ignore end*/
   var
   /*istanbul ignore start*/
   _line = line
   /*istanbul ignore end*/
   ;

   /*istanbul ignore start*/ function _toConsumableArray$1(arr) { return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1(); }

   function _nonIterableSpread$1() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

   function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

   function _iterableToArray$1(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

   function _arrayWithoutHoles$1(arr) { if (Array.isArray(arr)) return _arrayLikeToArray$1(arr); }

   function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

   /*istanbul ignore end*/
   function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
     if (!options) {
       options = {};
     }

     if (typeof options.context === 'undefined') {
       options.context = 4;
     }

     var diff =
     /*istanbul ignore start*/
     (/*istanbul ignore end*/

     /*istanbul ignore start*/
     0, _line
     /*istanbul ignore end*/
     .
     /*istanbul ignore start*/
     diffLines)
     /*istanbul ignore end*/
     (oldStr, newStr, options);

     if (!diff) {
       return;
     }

     diff.push({
       value: '',
       lines: []
     }); // Append an empty value to make cleanup easier

     function contextLines(lines) {
       return lines.map(function (entry) {
         return ' ' + entry;
       });
     }

     var hunks = [];
     var oldRangeStart = 0,
         newRangeStart = 0,
         curRange = [],
         oldLine = 1,
         newLine = 1;

     /*istanbul ignore start*/
     var _loop = function _loop(
     /*istanbul ignore end*/
     i) {
       var current = diff[i],
           lines = current.lines || current.value.replace(/\n$/, '').split('\n');
       current.lines = lines;

       if (current.added || current.removed) {
         /*istanbul ignore start*/
         var _curRange;

         /*istanbul ignore end*/
         // If we have previous context, start with that
         if (!oldRangeStart) {
           var prev = diff[i - 1];
           oldRangeStart = oldLine;
           newRangeStart = newLine;

           if (prev) {
             curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];
             oldRangeStart -= curRange.length;
             newRangeStart -= curRange.length;
           }
         } // Output our changes


         /*istanbul ignore start*/

         /*istanbul ignore end*/

         /*istanbul ignore start*/
         (_curRange =
         /*istanbul ignore end*/
         curRange).push.apply(
         /*istanbul ignore start*/
         _curRange
         /*istanbul ignore end*/
         ,
         /*istanbul ignore start*/
         _toConsumableArray$1(
         /*istanbul ignore end*/
         lines.map(function (entry) {
           return (current.added ? '+' : '-') + entry;
         }))); // Track the updated file position


         if (current.added) {
           newLine += lines.length;
         } else {
           oldLine += lines.length;
         }
       } else {
         // Identical context lines. Track line changes
         if (oldRangeStart) {
           // Close out any changes that have been output (or join overlapping)
           if (lines.length <= options.context * 2 && i < diff.length - 2) {
             /*istanbul ignore start*/
             var _curRange2;

             /*istanbul ignore end*/
             // Overlapping

             /*istanbul ignore start*/

             /*istanbul ignore end*/

             /*istanbul ignore start*/
             (_curRange2 =
             /*istanbul ignore end*/
             curRange).push.apply(
             /*istanbul ignore start*/
             _curRange2
             /*istanbul ignore end*/
             ,
             /*istanbul ignore start*/
             _toConsumableArray$1(
             /*istanbul ignore end*/
             contextLines(lines)));
           } else {
             /*istanbul ignore start*/
             var _curRange3;

             /*istanbul ignore end*/
             // end the range and output
             var contextSize = Math.min(lines.length, options.context);

             /*istanbul ignore start*/

             /*istanbul ignore end*/

             /*istanbul ignore start*/
             (_curRange3 =
             /*istanbul ignore end*/
             curRange).push.apply(
             /*istanbul ignore start*/
             _curRange3
             /*istanbul ignore end*/
             ,
             /*istanbul ignore start*/
             _toConsumableArray$1(
             /*istanbul ignore end*/
             contextLines(lines.slice(0, contextSize))));

             var hunk = {
               oldStart: oldRangeStart,
               oldLines: oldLine - oldRangeStart + contextSize,
               newStart: newRangeStart,
               newLines: newLine - newRangeStart + contextSize,
               lines: curRange
             };

             if (i >= diff.length - 2 && lines.length <= options.context) {
               // EOF is inside this hunk
               var oldEOFNewline = /\n$/.test(oldStr);
               var newEOFNewline = /\n$/.test(newStr);
               var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;

               if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) {
                 // special case: old has no eol and no trailing context; no-nl can end up before adds
                 // however, if the old file is empty, do not output the no-nl line
                 curRange.splice(hunk.oldLines, 0, '\\ No newline at end of file');
               }

               if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {
                 curRange.push('\\ No newline at end of file');
               }
             }

             hunks.push(hunk);
             oldRangeStart = 0;
             newRangeStart = 0;
             curRange = [];
           }
         }

         oldLine += lines.length;
         newLine += lines.length;
       }
     };

     for (var i = 0; i < diff.length; i++) {
       /*istanbul ignore start*/
       _loop(
       /*istanbul ignore end*/
       i);
     }

     return {
       oldFileName: oldFileName,
       newFileName: newFileName,
       oldHeader: oldHeader,
       newHeader: newHeader,
       hunks: hunks
     };
   }

   function formatPatch(diff) {
     var ret = [];

     if (diff.oldFileName == diff.newFileName) {
       ret.push('Index: ' + diff.oldFileName);
     }

     ret.push('===================================================================');
     ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\t' + diff.oldHeader));
     ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\t' + diff.newHeader));

     for (var i = 0; i < diff.hunks.length; i++) {
       var hunk = diff.hunks[i]; // Unified Diff Format quirk: If the chunk size is 0,
       // the first number is one lower than one would expect.
       // https://www.artima.com/weblogs/viewpost.jsp?thread=164293

       if (hunk.oldLines === 0) {
         hunk.oldStart -= 1;
       }

       if (hunk.newLines === 0) {
         hunk.newStart -= 1;
       }

       ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');
       ret.push.apply(ret, hunk.lines);
     }

     return ret.join('\n') + '\n';
   }

   function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
     return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));
   }

   function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {
     return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);
   }

   var array = {};

   /*istanbul ignore start*/

   Object.defineProperty(array, "__esModule", {
     value: true
   });
   array.arrayEqual = arrayEqual;
   array.arrayStartsWith = arrayStartsWith;

   /*istanbul ignore end*/
   function arrayEqual(a, b) {
     if (a.length !== b.length) {
       return false;
     }

     return arrayStartsWith(a, b);
   }

   function arrayStartsWith(array, start) {
     if (start.length > array.length) {
       return false;
     }

     for (var i = 0; i < start.length; i++) {
       if (start[i] !== array[i]) {
         return false;
       }
     }

     return true;
   }

   /*istanbul ignore start*/

   Object.defineProperty(merge$2, "__esModule", {
     value: true
   });
   merge$2.calcLineCount = calcLineCount;
   merge$2.merge = merge$1;

   /*istanbul ignore end*/
   var
   /*istanbul ignore start*/
   _create = create$1
   /*istanbul ignore end*/
   ;

   var
   /*istanbul ignore start*/
   _parse = parse$4
   /*istanbul ignore end*/
   ;

   var
   /*istanbul ignore start*/
   _array = array
   /*istanbul ignore end*/
   ;

   /*istanbul ignore start*/ function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

   function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

   function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

   function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

   function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

   function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

   /*istanbul ignore end*/
   function calcLineCount(hunk) {
     /*istanbul ignore start*/
     var _calcOldNewLineCount =
     /*istanbul ignore end*/
     calcOldNewLineCount(hunk.lines),
         oldLines = _calcOldNewLineCount.oldLines,
         newLines = _calcOldNewLineCount.newLines;

     if (oldLines !== undefined) {
       hunk.oldLines = oldLines;
     } else {
       delete hunk.oldLines;
     }

     if (newLines !== undefined) {
       hunk.newLines = newLines;
     } else {
       delete hunk.newLines;
     }
   }

   function merge$1(mine, theirs, base) {
     mine = loadPatch(mine, base);
     theirs = loadPatch(theirs, base);
     var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.
     // Leaving sanity checks on this to the API consumer that may know more about the
     // meaning in their own context.

     if (mine.index || theirs.index) {
       ret.index = mine.index || theirs.index;
     }

     if (mine.newFileName || theirs.newFileName) {
       if (!fileNameChanged(mine)) {
         // No header or no change in ours, use theirs (and ours if theirs does not exist)
         ret.oldFileName = theirs.oldFileName || mine.oldFileName;
         ret.newFileName = theirs.newFileName || mine.newFileName;
         ret.oldHeader = theirs.oldHeader || mine.oldHeader;
         ret.newHeader = theirs.newHeader || mine.newHeader;
       } else if (!fileNameChanged(theirs)) {
         // No header or no change in theirs, use ours
         ret.oldFileName = mine.oldFileName;
         ret.newFileName = mine.newFileName;
         ret.oldHeader = mine.oldHeader;
         ret.newHeader = mine.newHeader;
       } else {
         // Both changed... figure it out
         ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);
         ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);
         ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);
         ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);
       }
     }

     ret.hunks = [];
     var mineIndex = 0,
         theirsIndex = 0,
         mineOffset = 0,
         theirsOffset = 0;

     while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {
       var mineCurrent = mine.hunks[mineIndex] || {
         oldStart: Infinity
       },
           theirsCurrent = theirs.hunks[theirsIndex] || {
         oldStart: Infinity
       };

       if (hunkBefore(mineCurrent, theirsCurrent)) {
         // This patch does not overlap with any of the others, yay.
         ret.hunks.push(cloneHunk(mineCurrent, mineOffset));
         mineIndex++;
         theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;
       } else if (hunkBefore(theirsCurrent, mineCurrent)) {
         // This patch does not overlap with any of the others, yay.
         ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));
         theirsIndex++;
         mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;
       } else {
         // Overlap, merge as best we can
         var mergedHunk = {
           oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),
           oldLines: 0,
           newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),
           newLines: 0,
           lines: []
         };
         mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);
         theirsIndex++;
         mineIndex++;
         ret.hunks.push(mergedHunk);
       }
     }

     return ret;
   }

   function loadPatch(param, base) {
     if (typeof param === 'string') {
       if (/^@@/m.test(param) || /^Index:/m.test(param)) {
         return (
           /*istanbul ignore start*/
           (/*istanbul ignore end*/

           /*istanbul ignore start*/
           0, _parse
           /*istanbul ignore end*/
           .
           /*istanbul ignore start*/
           parsePatch)
           /*istanbul ignore end*/
           (param)[0]
         );
       }

       if (!base) {
         throw new Error('Must provide a base reference or pass in a patch');
       }

       return (
         /*istanbul ignore start*/
         (/*istanbul ignore end*/

         /*istanbul ignore start*/
         0, _create
         /*istanbul ignore end*/
         .
         /*istanbul ignore start*/
         structuredPatch)
         /*istanbul ignore end*/
         (undefined, undefined, base, param)
       );
     }

     return param;
   }

   function fileNameChanged(patch) {
     return patch.newFileName && patch.newFileName !== patch.oldFileName;
   }

   function selectField(index, mine, theirs) {
     if (mine === theirs) {
       return mine;
     } else {
       index.conflict = true;
       return {
         mine: mine,
         theirs: theirs
       };
     }
   }

   function hunkBefore(test, check) {
     return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;
   }

   function cloneHunk(hunk, offset) {
     return {
       oldStart: hunk.oldStart,
       oldLines: hunk.oldLines,
       newStart: hunk.newStart + offset,
       newLines: hunk.newLines,
       lines: hunk.lines
     };
   }

   function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {
     // This will generally result in a conflicted hunk, but there are cases where the context
     // is the only overlap where we can successfully merge the content here.
     var mine = {
       offset: mineOffset,
       lines: mineLines,
       index: 0
     },
         their = {
       offset: theirOffset,
       lines: theirLines,
       index: 0
     }; // Handle any leading content

     insertLeading(hunk, mine, their);
     insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.

     while (mine.index < mine.lines.length && their.index < their.lines.length) {
       var mineCurrent = mine.lines[mine.index],
           theirCurrent = their.lines[their.index];

       if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {
         // Both modified ...
         mutualChange(hunk, mine, their);
       } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {
         /*istanbul ignore start*/
         var _hunk$lines;

         /*istanbul ignore end*/
         // Mine inserted

         /*istanbul ignore start*/

         /*istanbul ignore end*/

         /*istanbul ignore start*/
         (_hunk$lines =
         /*istanbul ignore end*/
         hunk.lines).push.apply(
         /*istanbul ignore start*/
         _hunk$lines
         /*istanbul ignore end*/
         ,
         /*istanbul ignore start*/
         _toConsumableArray(
         /*istanbul ignore end*/
         collectChange(mine)));
       } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {
         /*istanbul ignore start*/
         var _hunk$lines2;

         /*istanbul ignore end*/
         // Theirs inserted

         /*istanbul ignore start*/

         /*istanbul ignore end*/

         /*istanbul ignore start*/
         (_hunk$lines2 =
         /*istanbul ignore end*/
         hunk.lines).push.apply(
         /*istanbul ignore start*/
         _hunk$lines2
         /*istanbul ignore end*/
         ,
         /*istanbul ignore start*/
         _toConsumableArray(
         /*istanbul ignore end*/
         collectChange(their)));
       } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {
         // Mine removed or edited
         removal(hunk, mine, their);
       } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {
         // Their removed or edited
         removal(hunk, their, mine, true);
       } else if (mineCurrent === theirCurrent) {
         // Context identity
         hunk.lines.push(mineCurrent);
         mine.index++;
         their.index++;
       } else {
         // Context mismatch
         conflict(hunk, collectChange(mine), collectChange(their));
       }
     } // Now push anything that may be remaining


     insertTrailing(hunk, mine);
     insertTrailing(hunk, their);
     calcLineCount(hunk);
   }

   function mutualChange(hunk, mine, their) {
     var myChanges = collectChange(mine),
         theirChanges = collectChange(their);

     if (allRemoves(myChanges) && allRemoves(theirChanges)) {
       // Special case for remove changes that are supersets of one another
       if (
       /*istanbul ignore start*/
       (/*istanbul ignore end*/

       /*istanbul ignore start*/
       0, _array
       /*istanbul ignore end*/
       .
       /*istanbul ignore start*/
       arrayStartsWith)
       /*istanbul ignore end*/
       (myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {
         /*istanbul ignore start*/
         var _hunk$lines3;

         /*istanbul ignore end*/

         /*istanbul ignore start*/

         /*istanbul ignore end*/

         /*istanbul ignore start*/
         (_hunk$lines3 =
         /*istanbul ignore end*/
         hunk.lines).push.apply(
         /*istanbul ignore start*/
         _hunk$lines3
         /*istanbul ignore end*/
         ,
         /*istanbul ignore start*/
         _toConsumableArray(
         /*istanbul ignore end*/
         myChanges));

         return;
       } else if (
       /*istanbul ignore start*/
       (/*istanbul ignore end*/

       /*istanbul ignore start*/
       0, _array
       /*istanbul ignore end*/
       .
       /*istanbul ignore start*/
       arrayStartsWith)
       /*istanbul ignore end*/
       (theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {
         /*istanbul ignore start*/
         var _hunk$lines4;

         /*istanbul ignore end*/

         /*istanbul ignore start*/

         /*istanbul ignore end*/

         /*istanbul ignore start*/
         (_hunk$lines4 =
         /*istanbul ignore end*/
         hunk.lines).push.apply(
         /*istanbul ignore start*/
         _hunk$lines4
         /*istanbul ignore end*/
         ,
         /*istanbul ignore start*/
         _toConsumableArray(
         /*istanbul ignore end*/
         theirChanges));

         return;
       }
     } else if (
     /*istanbul ignore start*/
     (/*istanbul ignore end*/

     /*istanbul ignore start*/
     0, _array
     /*istanbul ignore end*/
     .
     /*istanbul ignore start*/
     arrayEqual)
     /*istanbul ignore end*/
     (myChanges, theirChanges)) {
       /*istanbul ignore start*/
       var _hunk$lines5;

       /*istanbul ignore end*/

       /*istanbul ignore start*/

       /*istanbul ignore end*/

       /*istanbul ignore start*/
       (_hunk$lines5 =
       /*istanbul ignore end*/
       hunk.lines).push.apply(
       /*istanbul ignore start*/
       _hunk$lines5
       /*istanbul ignore end*/
       ,
       /*istanbul ignore start*/
       _toConsumableArray(
       /*istanbul ignore end*/
       myChanges));

       return;
     }

     conflict(hunk, myChanges, theirChanges);
   }

   function removal(hunk, mine, their, swap) {
     var myChanges = collectChange(mine),
         theirChanges = collectContext(their, myChanges);

     if (theirChanges.merged) {
       /*istanbul ignore start*/
       var _hunk$lines6;

       /*istanbul ignore end*/

       /*istanbul ignore start*/

       /*istanbul ignore end*/

       /*istanbul ignore start*/
       (_hunk$lines6 =
       /*istanbul ignore end*/
       hunk.lines).push.apply(
       /*istanbul ignore start*/
       _hunk$lines6
       /*istanbul ignore end*/
       ,
       /*istanbul ignore start*/
       _toConsumableArray(
       /*istanbul ignore end*/
       theirChanges.merged));
     } else {
       conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);
     }
   }

   function conflict(hunk, mine, their) {
     hunk.conflict = true;
     hunk.lines.push({
       conflict: true,
       mine: mine,
       theirs: their
     });
   }

   function insertLeading(hunk, insert, their) {
     while (insert.offset < their.offset && insert.index < insert.lines.length) {
       var line = insert.lines[insert.index++];
       hunk.lines.push(line);
       insert.offset++;
     }
   }

   function insertTrailing(hunk, insert) {
     while (insert.index < insert.lines.length) {
       var line = insert.lines[insert.index++];
       hunk.lines.push(line);
     }
   }

   function collectChange(state) {
     var ret = [],
         operation = state.lines[state.index][0];

     while (state.index < state.lines.length) {
       var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one "atomic" modify change.

       if (operation === '-' && line[0] === '+') {
         operation = '+';
       }

       if (operation === line[0]) {
         ret.push(line);
         state.index++;
       } else {
         break;
       }
     }

     return ret;
   }

   function collectContext(state, matchChanges) {
     var changes = [],
         merged = [],
         matchIndex = 0,
         contextChanges = false,
         conflicted = false;

     while (matchIndex < matchChanges.length && state.index < state.lines.length) {
       var change = state.lines[state.index],
           match = matchChanges[matchIndex]; // Once we've hit our add, then we are done

       if (match[0] === '+') {
         break;
       }

       contextChanges = contextChanges || change[0] !== ' ';
       merged.push(match);
       matchIndex++; // Consume any additions in the other block as a conflict to attempt
       // to pull in the remaining context after this

       if (change[0] === '+') {
         conflicted = true;

         while (change[0] === '+') {
           changes.push(change);
           change = state.lines[++state.index];
         }
       }

       if (match.substr(1) === change.substr(1)) {
         changes.push(change);
         state.index++;
       } else {
         conflicted = true;
       }
     }

     if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {
       conflicted = true;
     }

     if (conflicted) {
       return changes;
     }

     while (matchIndex < matchChanges.length) {
       merged.push(matchChanges[matchIndex++]);
     }

     return {
       merged: merged,
       changes: changes
     };
   }

   function allRemoves(changes) {
     return changes.reduce(function (prev, change) {
       return prev && change[0] === '-';
     }, true);
   }

   function skipRemoveSuperset(state, removeChanges, delta) {
     for (var i = 0; i < delta; i++) {
       var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);

       if (state.lines[state.index + i] !== ' ' + changeContent) {
         return false;
       }
     }

     state.index += delta;
     return true;
   }

   function calcOldNewLineCount(lines) {
     var oldLines = 0;
     var newLines = 0;
     lines.forEach(function (line) {
       if (typeof line !== 'string') {
         var myCount = calcOldNewLineCount(line.mine);
         var theirCount = calcOldNewLineCount(line.theirs);

         if (oldLines !== undefined) {
           if (myCount.oldLines === theirCount.oldLines) {
             oldLines += myCount.oldLines;
           } else {
             oldLines = undefined;
           }
         }

         if (newLines !== undefined) {
           if (myCount.newLines === theirCount.newLines) {
             newLines += myCount.newLines;
           } else {
             newLines = undefined;
           }
         }
       } else {
         if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {
           newLines++;
         }

         if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {
           oldLines++;
         }
       }
     });
     return {
       oldLines: oldLines,
       newLines: newLines
     };
   }

   var dmp = {};

   /*istanbul ignore start*/

   Object.defineProperty(dmp, "__esModule", {
     value: true
   });
   dmp.convertChangesToDMP = convertChangesToDMP;

   /*istanbul ignore end*/
   // See: http://code.google.com/p/google-diff-match-patch/wiki/API
   function convertChangesToDMP(changes) {
     var ret = [],
         change,
         operation;

     for (var i = 0; i < changes.length; i++) {
       change = changes[i];

       if (change.added) {
         operation = 1;
       } else if (change.removed) {
         operation = -1;
       } else {
         operation = 0;
       }

       ret.push([operation, change.value]);
     }

     return ret;
   }

   var xml$1 = {};

   /*istanbul ignore start*/

   Object.defineProperty(xml$1, "__esModule", {
     value: true
   });
   xml$1.convertChangesToXML = convertChangesToXML;

   /*istanbul ignore end*/
   function convertChangesToXML(changes) {
     var ret = [];

     for (var i = 0; i < changes.length; i++) {
       var change = changes[i];

       if (change.added) {
         ret.push('<ins>');
       } else if (change.removed) {
         ret.push('<del>');
       }

       ret.push(escapeHTML(change.value));

       if (change.added) {
         ret.push('</ins>');
       } else if (change.removed) {
         ret.push('</del>');
       }
     }

     return ret.join('');
   }

   function escapeHTML(s) {
     var n = s;
     n = n.replace(/&/g, '&amp;');
     n = n.replace(/</g, '&lt;');
     n = n.replace(/>/g, '&gt;');
     n = n.replace(/"/g, '&quot;');
     return n;
   }

   /*istanbul ignore start*/

   (function (exports) {

   	Object.defineProperty(exports, "__esModule", {
   	  value: true
   	});
   	Object.defineProperty(exports, "Diff", {
   	  enumerable: true,
   	  get: function get() {
   	    return _base["default"];
   	  }
   	});
   	Object.defineProperty(exports, "diffChars", {
   	  enumerable: true,
   	  get: function get() {
   	    return _character.diffChars;
   	  }
   	});
   	Object.defineProperty(exports, "diffWords", {
   	  enumerable: true,
   	  get: function get() {
   	    return _word.diffWords;
   	  }
   	});
   	Object.defineProperty(exports, "diffWordsWithSpace", {
   	  enumerable: true,
   	  get: function get() {
   	    return _word.diffWordsWithSpace;
   	  }
   	});
   	Object.defineProperty(exports, "diffLines", {
   	  enumerable: true,
   	  get: function get() {
   	    return _line.diffLines;
   	  }
   	});
   	Object.defineProperty(exports, "diffTrimmedLines", {
   	  enumerable: true,
   	  get: function get() {
   	    return _line.diffTrimmedLines;
   	  }
   	});
   	Object.defineProperty(exports, "diffSentences", {
   	  enumerable: true,
   	  get: function get() {
   	    return _sentence.diffSentences;
   	  }
   	});
   	Object.defineProperty(exports, "diffCss", {
   	  enumerable: true,
   	  get: function get() {
   	    return _css.diffCss;
   	  }
   	});
   	Object.defineProperty(exports, "diffJson", {
   	  enumerable: true,
   	  get: function get() {
   	    return _json.diffJson;
   	  }
   	});
   	Object.defineProperty(exports, "canonicalize", {
   	  enumerable: true,
   	  get: function get() {
   	    return _json.canonicalize;
   	  }
   	});
   	Object.defineProperty(exports, "diffArrays", {
   	  enumerable: true,
   	  get: function get() {
   	    return _array.diffArrays;
   	  }
   	});
   	Object.defineProperty(exports, "applyPatch", {
   	  enumerable: true,
   	  get: function get() {
   	    return _apply.applyPatch;
   	  }
   	});
   	Object.defineProperty(exports, "applyPatches", {
   	  enumerable: true,
   	  get: function get() {
   	    return _apply.applyPatches;
   	  }
   	});
   	Object.defineProperty(exports, "parsePatch", {
   	  enumerable: true,
   	  get: function get() {
   	    return _parse.parsePatch;
   	  }
   	});
   	Object.defineProperty(exports, "merge", {
   	  enumerable: true,
   	  get: function get() {
   	    return _merge.merge;
   	  }
   	});
   	Object.defineProperty(exports, "structuredPatch", {
   	  enumerable: true,
   	  get: function get() {
   	    return _create.structuredPatch;
   	  }
   	});
   	Object.defineProperty(exports, "createTwoFilesPatch", {
   	  enumerable: true,
   	  get: function get() {
   	    return _create.createTwoFilesPatch;
   	  }
   	});
   	Object.defineProperty(exports, "createPatch", {
   	  enumerable: true,
   	  get: function get() {
   	    return _create.createPatch;
   	  }
   	});
   	Object.defineProperty(exports, "convertChangesToDMP", {
   	  enumerable: true,
   	  get: function get() {
   	    return _dmp.convertChangesToDMP;
   	  }
   	});
   	Object.defineProperty(exports, "convertChangesToXML", {
   	  enumerable: true,
   	  get: function get() {
   	    return _xml.convertChangesToXML;
   	  }
   	});

   	/*istanbul ignore end*/
   	var
   	/*istanbul ignore start*/
   	_base = _interopRequireDefault(base$2)
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_character = character
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_word = word
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_line = line
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_sentence = sentence
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_css = css
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_json = json
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_array = array$1
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_apply = apply
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_parse = parse$4
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_merge = merge$2
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_create = create$1
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_dmp = dmp
   	/*istanbul ignore end*/
   	;

   	var
   	/*istanbul ignore start*/
   	_xml = xml$1
   	/*istanbul ignore end*/
   	;

   	/*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

   	/*istanbul ignore end*/
   	
   } (lib));

   ({
   	'--': $$1.red,
   	'··': $$1.grey,
   	'++': $$1.green,
   });

   $$1.dim().italic;
   $$1.dim('→'); $$1.dim('·'); $$1.dim('↵');

   function dedent(str) {
   	str = str.replace(/\r?\n/g, '\n');
     let arr = str.match(/^[ \t]*(?=\S)/gm);
     let i = 0, min = 1/0, len = (arr||[]).length;
     for (; i < len; i++) min = Math.min(min, arr[i].length);
     return len && min ? str.replace(new RegExp(`^[ \\t]{${min}}`, 'gm'), '') : str;
   }

   class Assertion extends Error {
   	constructor(opts={}) {
   		super(opts.message);
   		this.name = 'Assertion';
   		this.code = 'ERR_ASSERTION';
   		if (Error.captureStackTrace) {
   			Error.captureStackTrace(this, this.constructor);
   		}
   		this.details = opts.details || false;
   		this.generated = !!opts.generated;
   		this.operator = opts.operator;
   		this.expects = opts.expects;
   		this.actual = opts.actual;
   	}
   }

   function assert(bool, actual, expects, operator, detailer, backup, msg) {
   	if (bool) return;
   	let message = msg || backup;
   	if (msg instanceof Error) throw msg;
   	let details = detailer && detailer(actual, expects);
   	throw new Assertion({ actual, expects, operator, message, details, generated: !msg });
   }

   function ok$1(val, msg) {
   	assert(!!val, false, true, 'ok', false, 'Expected value to be truthy', msg);
   }

   // ---

   function not(val, msg) {
   	assert(!val, true, false, 'not', false, 'Expected value to be falsey', msg);
   }

   not.ok = not;

   not.equal = function (val, exp, msg) {
   	assert(!dequal(val, exp), val, exp, 'not.equal', false, 'Expected values not to be deeply equal', msg);
   };

   not.type = function (val, exp, msg) {
   	let tmp = typeof val;
   	assert(tmp !== exp, tmp, exp, 'not.type', false, `Expected "${tmp}" not to be "${exp}"`, msg);
   };

   not.instance = function (val, exp, msg) {
   	let name = '`' + (exp.name || exp.constructor.name) + '`';
   	assert(!(val instanceof exp), val, exp, 'not.instance', false, `Expected value not to be an instance of ${name}`, msg);
   };

   not.snapshot = function (val, exp, msg) {
   	val=dedent(val); exp=dedent(exp);
   	assert(val !== exp, val, exp, 'not.snapshot', false, 'Expected value not to match snapshot', msg);
   };

   not.fixture = function (val, exp, msg) {
   	val=dedent(val); exp=dedent(exp);
   	assert(val !== exp, val, exp, 'not.fixture', false, 'Expected value not to match fixture', msg);
   };

   not.match = function (val, exp, msg) {
   	if (typeof exp === 'string') {
   		assert(!val.includes(exp), val, exp, 'not.match', false, `Expected value not to include "${exp}" substring`, msg);
   	} else {
   		assert(!exp.test(val), val, exp, 'not.match', false, `Expected value not to match \`${String(exp)}\` pattern`, msg);
   	}
   };

   not.throws = function (blk, exp, msg) {
   	if (!msg && typeof exp === 'string') {
   		msg = exp; exp = null;
   	}

   	try {
   		blk();
   	} catch (err) {
   		if (typeof exp === 'function') {
   			assert(!exp(err), true, false, 'not.throws', false, 'Expected function not to throw matching exception', msg);
   		} else if (exp instanceof RegExp) {
   			assert(!exp.test(err.message), true, false, 'not.throws', false, `Expected function not to throw exception matching \`${String(exp)}\` pattern`, msg);
   		} else if (!exp) {
   			assert(false, true, false, 'not.throws', false, 'Expected function not to throw', msg);
   		}
   	}
   };

   /// <reference lib="dom" />

   /* eslint-env browser */

   const element$2 = document.createElement('i');

   /**
    * @param {string} value
    * @returns {string|false}
    */
   function decodeNamedCharacterReference(value) {
     const characterReference = '&' + value + ';';
     element$2.innerHTML = characterReference;
     const char = element$2.textContent;

     // Some named character references do not require the closing semicolon
     // (`&not`, for instance), which leads to situations where parsing the assumed
     // named reference of `&notit;` will result in the string `¬it;`.
     // When we encounter a trailing semicolon after parsing, and the character
     // reference to decode was not a semicolon (`&semi;`), we can assume that the
     // matching was not complete.
     // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
     // yield `null`.
     if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {
       return false
     }

     // If the decoded string is equal to the input, the character reference was
     // not valid.
     // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
     // yield `null`.
     return char === characterReference ? false : char
   }

   /**
    * Like `Array#splice`, but smarter for giant arrays.
    *
    * `Array#splice` takes all items to be inserted as individual argument which
    * causes a stack overflow in V8 when trying to insert 100k items for instance.
    *
    * Otherwise, this does not return the removed items, and takes `items` as an
    * array instead of rest parameters.
    *
    * @template {unknown} T
    * @param {T[]} list
    * @param {number} start
    * @param {number} remove
    * @param {T[]} items
    * @returns {void}
    */
   function splice(list, start, remove, items) {
     const end = list.length;
     let chunkStart = 0;
     /** @type {unknown[]} */

     let parameters; // Make start between zero and `end` (included).

     if (start < 0) {
       start = -start > end ? 0 : end + start;
     } else {
       start = start > end ? end : start;
     }

     remove = remove > 0 ? remove : 0; // No need to chunk the items if there’s only a couple (10k) items.

     if (items.length < 10000) {
       parameters = Array.from(items);
       parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.
       ;[].splice.apply(list, parameters);
     } else {
       // Delete `remove` items starting from `start`
       if (remove) [].splice.apply(list, [start, remove]); // Insert the items in chunks to not cause stack overflows.

       while (chunkStart < items.length) {
         parameters = items.slice(chunkStart, chunkStart + 10000);
         parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.
         ;[].splice.apply(list, parameters);
         chunkStart += 10000;
         start += 10000;
       }
     }
   }
   /**
    * Append `items` (an array) at the end of `list` (another array).
    * When `list` was empty, returns `items` instead.
    *
    * This prevents a potentially expensive operation when `list` is empty,
    * and adds items in batches to prevent V8 from hanging.
    *
    * @template {unknown} T
    * @param {T[]} list
    * @param {T[]} items
    * @returns {T[]}
    */

   function push(list, items) {
     if (list.length > 0) {
       splice(list, list.length, 0, items);
       return list
     }

     return items
   }

   /**
    * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension
    * @typedef {import('micromark-util-types').Extension} Extension
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
    */

   const hasOwnProperty$1 = {}.hasOwnProperty;

   /**
    * Combine several syntax extensions into one.
    *
    * @param {Extension[]} extensions List of syntax extensions.
    * @returns {NormalizedExtension} A single combined extension.
    */
   function combineExtensions(extensions) {
     /** @type {NormalizedExtension} */
     const all = {};
     let index = -1;

     while (++index < extensions.length) {
       syntaxExtension(all, extensions[index]);
     }

     return all
   }

   /**
    * Merge `extension` into `all`.
    *
    * @param {NormalizedExtension} all Extension to merge into.
    * @param {Extension} extension Extension to merge.
    * @returns {void}
    */
   function syntaxExtension(all, extension) {
     /** @type {string} */
     let hook;

     for (hook in extension) {
       const maybe = hasOwnProperty$1.call(all, hook) ? all[hook] : undefined;
       const left = maybe || (all[hook] = {});
       const right = extension[hook];
       /** @type {string} */
       let code;

       for (code in right) {
         if (!hasOwnProperty$1.call(left, code)) left[code] = [];
         const value = right[code];
         constructs(
           // @ts-expect-error Looks like a list.
           left[code],
           Array.isArray(value) ? value : value ? [value] : []
         );
       }
     }
   }

   /**
    * Merge `list` into `existing` (both lists of constructs).
    * Mutates `existing`.
    *
    * @param {unknown[]} existing
    * @param {unknown[]} list
    * @returns {void}
    */
   function constructs(existing, list) {
     let index = -1;
     /** @type {unknown[]} */
     const before = [];

     while (++index < list.length) {
   (list[index].add === 'after' ? existing : before).push(list[index]);
     }

     splice(existing, 0, 0, before);
   }

   /**
    * Combine several HTML extensions into one.
    *
    * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.
    * @returns {HtmlExtension} A single combined extension.
    */
   function combineHtmlExtensions(htmlExtensions) {
     /** @type {HtmlExtension} */
     const handlers = {};
     let index = -1;

     while (++index < htmlExtensions.length) {
       htmlExtension(handlers, htmlExtensions[index]);
     }

     return handlers
   }

   /**
    * Merge `extension` into `all`.
    *
    * @param {HtmlExtension} all Extension to merge into.
    * @param {HtmlExtension} extension Extension to merge.
    * @returns {void}
    */
   function htmlExtension(all, extension) {
     /** @type {string} */
     let hook;

     for (hook in extension) {
       const maybe = hasOwnProperty$1.call(all, hook) ? all[hook] : undefined;
       const left = maybe || (all[hook] = {});
       const right = extension[hook];
       /** @type {string} */
       let type;

       if (right) {
         for (type in right) {
           left[type] = right[type];
         }
       }
     }
   }

   /**
    * Turn the number (in string form as either hexa- or plain decimal) coming from
    * a numeric character reference into a character.
    *
    * @param {string} value
    *   Value to decode.
    * @param {number} base
    *   Numeric base.
    * @returns {string}
    */
   function decodeNumericCharacterReference(value, base) {
     const code = Number.parseInt(value, base);

     if (
       // C0 except for HT, LF, FF, CR, space
       code < 9 ||
       code === 11 ||
       (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.
       (code > 126 && code < 160) || // Lone high surrogates and low surrogates.
       (code > 55295 && code < 57344) || // Noncharacters.
       (code > 64975 && code < 65008) ||
       (code & 65535) === 65535 ||
       (code & 65535) === 65534 || // Out of range
       code > 1114111
     ) {
       return '\uFFFD'
     }

     return String.fromCharCode(code)
   }

   const characterReferences = {'"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'};

   /**
    * Encode only the dangerous HTML characters.
    *
    * This ensures that certain characters which have special meaning in HTML are
    * dealt with.
    * Technically, we can skip `>` and `"` in many cases, but CM includes them.
    *
    * @param {string} value
    * @returns {string}
    */
   function encode(value) {
     return value.replace(/["&<>]/g, replace)

     /**
      * @param {string} value
      * @returns {string}
      */
     function replace(value) {
       // @ts-expect-error Hush, it’s fine.
       return '&' + characterReferences[value] + ';'
     }
   }

   /**
    * Normalize an identifier (such as used in definitions).
    *
    * @param {string} value
    * @returns {string}
    */
   function normalizeIdentifier(value) {
     return (
       value // Collapse Markdown whitespace.
         .replace(/[\t\n\r ]+/g, ' ') // Trim.
         .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase
         // counterpart is uppercased will result in a different uppercase
         // character.
         // Hence, to get that form, we perform both lower- and uppercase.
         // Upper case makes sure keys will not interact with default prototypal
         // methods: no method is uppercase.
         .toLowerCase()
         .toUpperCase()
     )
   }

   // This module is generated by `script/`.
   //
   // CommonMark handles attention (emphasis, strong) markers based on what comes
   // before or after them.
   // One such difference is if those characters are Unicode punctuation.
   // This script is generated from the Unicode data.
   const unicodePunctuationRegex =
     /[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

   /**
    * @typedef {import('micromark-util-types').Code} Code
    */
   /**
    * Check whether the character code represents an ASCII alpha (`a` through `z`,
    * case insensitive).
    *
    * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.
    *
    * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)
    * to U+005A (`Z`).
    *
    * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)
    * to U+007A (`z`).
    */

   const asciiAlpha = regexCheck(/[A-Za-z]/);
   /**
    * Check whether the character code represents an ASCII digit (`0` through `9`).
    *
    * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to
    * U+0039 (`9`).
    */

   const asciiDigit = regexCheck(/\d/);
   /**
    * Check whether the character code represents an ASCII hex digit (`a` through
    * `f`, case insensitive, or `0` through `9`).
    *
    * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex
    * digit, or an ASCII lower hex digit.
    *
    * An **ASCII upper hex digit** is a character in the inclusive range U+0041
    * (`A`) to U+0046 (`F`).
    *
    * An **ASCII lower hex digit** is a character in the inclusive range U+0061
    * (`a`) to U+0066 (`f`).
    */

   const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
   /**
    * Check whether the character code represents an ASCII alphanumeric (`a`
    * through `z`, case insensitive, or `0` through `9`).
    *
    * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha
    * (see `asciiAlpha`).
    */

   const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
   /**
    * Check whether the character code represents ASCII punctuation.
    *
    * An **ASCII punctuation** is a character in the inclusive ranges U+0021
    * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT
    * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT
    * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).
    */

   const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
   /**
    * Check whether the character code represents an ASCII atext.
    *
    * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in
    * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),
    * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F
    * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E
    * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE
    * (`{`) to U+007E TILDE (`~`).
    *
    * See:
    * **\[RFC5322]**:
    * [Internet Message Format](https://tools.ietf.org/html/rfc5322).
    * P. Resnick.
    * IETF.
    */

   const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
   /**
    * Check whether a character code is an ASCII control character.
    *
    * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)
    * to U+001F (US), or U+007F (DEL).
    *
    * @param {Code} code
    * @returns {code is number}
    */

   function asciiControl(code) {
     return (
       // Special whitespace codes (which have negative values), C0 and Control
       // character DEL
       code !== null && (code < 32 || code === 127)
     )
   }
   /**
    * Check whether a character code is a markdown line ending (see
    * `markdownLineEnding`) or markdown space (see `markdownSpace`).
    *
    * @param {Code} code
    * @returns {code is number}
    */

   function markdownLineEndingOrSpace(code) {
     return code !== null && (code < 0 || code === 32)
   }
   /**
    * Check whether a character code is a markdown line ending.
    *
    * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN
    * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).
    *
    * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE
    * RETURN (CR) are replaced by these virtual characters depending on whether
    * they occurred together.
    *
    * @param {Code} code
    * @returns {code is number}
    */

   function markdownLineEnding(code) {
     return code !== null && code < -2
   }
   /**
    * Check whether a character code is a markdown space.
    *
    * A **markdown space** is the concrete character U+0020 SPACE (SP) and the
    * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).
    *
    * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is
    * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL
    * SPACE (VS) characters, depending on the column at which the tab occurred.
    *
    * @param {Code} code
    * @returns {code is number}
    */

   function markdownSpace(code) {
     return code === -2 || code === -1 || code === 32
   }
   /**
    * Check whether the character code represents Unicode whitespace.
    *
    * Note that this does handle micromark specific markdown whitespace characters.
    * See `markdownLineEndingOrSpace` to check that.
    *
    * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,
    * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),
    * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\[UNICODE]**).
    *
    * See:
    * **\[UNICODE]**:
    * [The Unicode Standard](https://www.unicode.org/versions/).
    * Unicode Consortium.
    */

   const unicodeWhitespace = regexCheck(/\s/);
   /**
    * Check whether the character code represents Unicode punctuation.
    *
    * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,
    * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`
    * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`
    * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII
    * punctuation (see `asciiPunctuation`).
    *
    * See:
    * **\[UNICODE]**:
    * [The Unicode Standard](https://www.unicode.org/versions/).
    * Unicode Consortium.
    */
   // Size note: removing ASCII from the regex and using `asciiPunctuation` here
   // In fact adds to the bundle size.

   const unicodePunctuation = regexCheck(unicodePunctuationRegex);
   /**
    * Create a code check from a regex.
    *
    * @param {RegExp} regex
    * @returns {(code: Code) => code is number}
    */

   function regexCheck(regex) {
     return check
     /**
      * Check whether a code matches the bound regex.
      *
      * @param {Code} code Character code
      * @returns {code is number} Whether the character code matches the bound regex
      */

     function check(code) {
       return code !== null && regex.test(String.fromCharCode(code))
     }
   }

   /**
    * Make a value safe for injection as a URL.
    *
    * This encodes unsafe characters with percent-encoding and skips already
    * encoded sequences (see `normalizeUri` below).
    * Further unsafe characters are encoded as character references (see
    * `micromark-util-encode`).
    *
    * Then, a regex of allowed protocols can be given, in which case the URL is
    * sanitized.
    * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,
    * or `/^https?$/i` for `img[src]`.
    * If the URL includes an unknown protocol (one not matched by `protocol`, such
    * as a dangerous example, `javascript:`), the value is ignored.
    *
    * @param {string|undefined} url
    * @param {RegExp} [protocol]
    * @returns {string}
    */
   function sanitizeUri(url, protocol) {
     const value = encode(normalizeUri(url || ''));

     if (!protocol) {
       return value
     }

     const colon = value.indexOf(':');
     const questionMark = value.indexOf('?');
     const numberSign = value.indexOf('#');
     const slash = value.indexOf('/');

     if (
       // If there is no protocol, it’s relative.
       colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
       (slash > -1 && colon > slash) ||
       (questionMark > -1 && colon > questionMark) ||
       (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.
       protocol.test(value.slice(0, colon))
     ) {
       return value
     }

     return ''
   }
   /**
    * Normalize a URL (such as used in definitions).
    *
    * Encode unsafe characters with percent-encoding, skipping already encoded
    * sequences.
    *
    * @param {string} value
    * @returns {string}
    */

   function normalizeUri(value) {
     /** @type {string[]} */
     const result = [];
     let index = -1;
     let start = 0;
     let skip = 0;

     while (++index < value.length) {
       const code = value.charCodeAt(index);
       /** @type {string} */

       let replace = ''; // A correct percent encoded value.

       if (
         code === 37 &&
         asciiAlphanumeric(value.charCodeAt(index + 1)) &&
         asciiAlphanumeric(value.charCodeAt(index + 2))
       ) {
         skip = 2;
       } // ASCII.
       else if (code < 128) {
         if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
           replace = String.fromCharCode(code);
         }
       } // Astral.
       else if (code > 55295 && code < 57344) {
         const next = value.charCodeAt(index + 1); // A correct surrogate pair.

         if (code < 56320 && next > 56319 && next < 57344) {
           replace = String.fromCharCode(code, next);
           skip = 1;
         } // Lone surrogate.
         else {
           replace = '\uFFFD';
         }
       } // Unicode.
       else {
         replace = String.fromCharCode(code);
       }

       if (replace) {
         result.push(value.slice(start, index), encodeURIComponent(replace));
         start = index + skip + 1;
         replace = '';
       }

       if (skip) {
         index += skip;
         skip = 0;
       }
     }

     return result.join('') + value.slice(start)
   }

   /**
    * Character codes.
    *
    * This module is compiled away!
    *
    * micromark works based on character codes.
    * This module contains constants for the ASCII block and the replacement
    * character.
    * A couple of them are handled in a special way, such as the line endings
    * (CR, LF, and CR+LF, commonly known as end-of-line: EOLs), the tab (horizontal
    * tab) and its expansion based on what column it’s at (virtual space),
    * and the end-of-file (eof) character.
    * As values are preprocessed before handling them, the actual characters LF,
    * CR, HT, and NUL (which is present as the replacement character), are
    * guaranteed to not exist.
    *
    * Unicode basic latin block.
    */
   const codes = {
     carriageReturn: -5,
     lineFeed: -4,
     carriageReturnLineFeed: -3,
     horizontalTab: -2,
     virtualSpace: -1,
     eof: null,
     nul: 0,
     soh: 1,
     stx: 2,
     etx: 3,
     eot: 4,
     enq: 5,
     ack: 6,
     bel: 7,
     bs: 8,
     ht: 9, // `\t`
     lf: 10, // `\n`
     vt: 11, // `\v`
     ff: 12, // `\f`
     cr: 13, // `\r`
     so: 14,
     si: 15,
     dle: 16,
     dc1: 17,
     dc2: 18,
     dc3: 19,
     dc4: 20,
     nak: 21,
     syn: 22,
     etb: 23,
     can: 24,
     em: 25,
     sub: 26,
     esc: 27,
     fs: 28,
     gs: 29,
     rs: 30,
     us: 31,
     space: 32,
     exclamationMark: 33, // `!`
     quotationMark: 34, // `"`
     numberSign: 35, // `#`
     dollarSign: 36, // `$`
     percentSign: 37, // `%`
     ampersand: 38, // `&`
     apostrophe: 39, // `'`
     leftParenthesis: 40, // `(`
     rightParenthesis: 41, // `)`
     asterisk: 42, // `*`
     plusSign: 43, // `+`
     comma: 44, // `,`
     dash: 45, // `-`
     dot: 46, // `.`
     slash: 47, // `/`
     digit0: 48, // `0`
     digit1: 49, // `1`
     digit2: 50, // `2`
     digit3: 51, // `3`
     digit4: 52, // `4`
     digit5: 53, // `5`
     digit6: 54, // `6`
     digit7: 55, // `7`
     digit8: 56, // `8`
     digit9: 57, // `9`
     colon: 58, // `:`
     semicolon: 59, // `;`
     lessThan: 60, // `<`
     equalsTo: 61, // `=`
     greaterThan: 62, // `>`
     questionMark: 63, // `?`
     atSign: 64, // `@`
     uppercaseA: 65, // `A`
     uppercaseB: 66, // `B`
     uppercaseC: 67, // `C`
     uppercaseD: 68, // `D`
     uppercaseE: 69, // `E`
     uppercaseF: 70, // `F`
     uppercaseG: 71, // `G`
     uppercaseH: 72, // `H`
     uppercaseI: 73, // `I`
     uppercaseJ: 74, // `J`
     uppercaseK: 75, // `K`
     uppercaseL: 76, // `L`
     uppercaseM: 77, // `M`
     uppercaseN: 78, // `N`
     uppercaseO: 79, // `O`
     uppercaseP: 80, // `P`
     uppercaseQ: 81, // `Q`
     uppercaseR: 82, // `R`
     uppercaseS: 83, // `S`
     uppercaseT: 84, // `T`
     uppercaseU: 85, // `U`
     uppercaseV: 86, // `V`
     uppercaseW: 87, // `W`
     uppercaseX: 88, // `X`
     uppercaseY: 89, // `Y`
     uppercaseZ: 90, // `Z`
     leftSquareBracket: 91, // `[`
     backslash: 92, // `\`
     rightSquareBracket: 93, // `]`
     caret: 94, // `^`
     underscore: 95, // `_`
     graveAccent: 96, // `` ` ``
     lowercaseA: 97, // `a`
     lowercaseB: 98, // `b`
     lowercaseC: 99, // `c`
     lowercaseD: 100, // `d`
     lowercaseE: 101, // `e`
     lowercaseF: 102, // `f`
     lowercaseG: 103, // `g`
     lowercaseH: 104, // `h`
     lowercaseI: 105, // `i`
     lowercaseJ: 106, // `j`
     lowercaseK: 107, // `k`
     lowercaseL: 108, // `l`
     lowercaseM: 109, // `m`
     lowercaseN: 110, // `n`
     lowercaseO: 111, // `o`
     lowercaseP: 112, // `p`
     lowercaseQ: 113, // `q`
     lowercaseR: 114, // `r`
     lowercaseS: 115, // `s`
     lowercaseT: 116, // `t`
     lowercaseU: 117, // `u`
     lowercaseV: 118, // `v`
     lowercaseW: 119, // `w`
     lowercaseX: 120, // `x`
     lowercaseY: 121, // `y`
     lowercaseZ: 122, // `z`
     leftCurlyBrace: 123, // `{`
     verticalBar: 124, // `|`
     rightCurlyBrace: 125, // `}`
     tilde: 126, // `~`
     del: 127,
     // Unicode Specials block.
     byteOrderMarker: 65279,
     // Unicode Specials block.
     replacementCharacter: 65533 // `�`
   };

   /**
    * This module is compiled away!
    *
    * Parsing markdown comes with a couple of constants, such as minimum or maximum
    * sizes of certain sequences.
    * Additionally, there are a couple symbols used inside micromark.
    * These are all defined here, but compiled away by scripts.
    */
   const constants = {
     attentionSideBefore: 1, // Symbol to mark an attention sequence as before content: `*a`
     attentionSideAfter: 2, // Symbol to mark an attention sequence as after content: `a*`
     atxHeadingOpeningFenceSizeMax: 6, // 6 number signs is fine, 7 isn’t.
     autolinkDomainSizeMax: 63, // 63 characters is fine, 64 is too many.
     autolinkSchemeSizeMax: 32, // 32 characters is fine, 33 is too many.
     cdataOpeningString: 'CDATA[', // And preceded by `<![`.
     characterGroupWhitespace: 1, // Symbol used to indicate a character is whitespace
     characterGroupPunctuation: 2, // Symbol used to indicate a character is punctuation
     characterReferenceDecimalSizeMax: 7, // `&#9999999;`.
     characterReferenceHexadecimalSizeMax: 6, // `&#xff9999;`.
     characterReferenceNamedSizeMax: 31, // `&CounterClockwiseContourIntegral;`.
     codeFencedSequenceSizeMin: 3, // At least 3 ticks or tildes are needed.
     contentTypeDocument: 'document',
     contentTypeFlow: 'flow',
     contentTypeContent: 'content',
     contentTypeString: 'string',
     contentTypeText: 'text',
     hardBreakPrefixSizeMin: 2, // At least 2 trailing spaces are needed.
     htmlRaw: 1, // Symbol for `<script>`
     htmlComment: 2, // Symbol for `<!---->`
     htmlInstruction: 3, // Symbol for `<?php?>`
     htmlDeclaration: 4, // Symbol for `<!doctype>`
     htmlCdata: 5, // Symbol for `<![CDATA[]]>`
     htmlBasic: 6, // Symbol for `<div`
     htmlComplete: 7, // Symbol for `<x>`
     htmlRawSizeMax: 8, // Length of `textarea`.
     linkResourceDestinationBalanceMax: 32, // See: <https://spec.commonmark.org/0.30/#link-destination>, <https://github.com/remarkjs/react-markdown/issues/658#issuecomment-984345577>
     linkReferenceSizeMax: 999, // See: <https://spec.commonmark.org/0.30/#link-label>
     listItemValueSizeMax: 10, // See: <https://spec.commonmark.org/0.30/#ordered-list-marker>
     numericBaseDecimal: 10,
     numericBaseHexadecimal: 0x10,
     tabSize: 4, // Tabs have a hard-coded size of 4, per CommonMark.
     thematicBreakMarkerCountMin: 3, // At least 3 asterisks, dashes, or underscores are needed.
     v8MaxSafeChunkSize: 10000 // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.
   };

   /**
    * This module is compiled away!
    *
    * Here is the list of all types of tokens exposed by micromark, with a short
    * explanation of what they include and where they are found.
    * In picking names, generally, the rule is to be as explicit as possible
    * instead of reusing names.
    * For example, there is a `definitionDestination` and a `resourceDestination`,
    * instead of one shared name.
    */

   const types$1 = {
     // Generic type for data, such as in a title, a destination, etc.
     data: 'data',

     // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).
     // Such as, between a fenced code fence and an info string.
     whitespace: 'whitespace',

     // Generic type for line endings (line feed, carriage return, carriage return +
     // line feed).
     lineEnding: 'lineEnding',

     // A line ending, but ending a blank line.
     lineEndingBlank: 'lineEndingBlank',

     // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a
     // line.
     linePrefix: 'linePrefix',

     // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a
     // line.
     lineSuffix: 'lineSuffix',

     // Whole ATX heading:
     //
     // ```markdown
     // #
     // ## Alpha
     // ### Bravo ###
     // ```
     //
     // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.
     atxHeading: 'atxHeading',

     // Sequence of number signs in an ATX heading (`###`).
     atxHeadingSequence: 'atxHeadingSequence',

     // Content in an ATX heading (`alpha`).
     // Includes text.
     atxHeadingText: 'atxHeadingText',

     // Whole autolink (`<https://example.com>` or `<admin@example.com>`)
     // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.
     autolink: 'autolink',

     // Email autolink w/o markers (`admin@example.com`)
     autolinkEmail: 'autolinkEmail',

     // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).
     autolinkMarker: 'autolinkMarker',

     // Protocol autolink w/o markers (`https://example.com`)
     autolinkProtocol: 'autolinkProtocol',

     // A whole character escape (`\-`).
     // Includes `escapeMarker` and `characterEscapeValue`.
     characterEscape: 'characterEscape',

     // The escaped character (`-`).
     characterEscapeValue: 'characterEscapeValue',

     // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).
     // Includes `characterReferenceMarker`, an optional
     // `characterReferenceMarkerNumeric`, in which case an optional
     // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.
     characterReference: 'characterReference',

     // The start or end marker (`&` or `;`).
     characterReferenceMarker: 'characterReferenceMarker',

     // Mark reference as numeric (`#`).
     characterReferenceMarkerNumeric: 'characterReferenceMarkerNumeric',

     // Mark reference as numeric (`x` or `X`).
     characterReferenceMarkerHexadecimal: 'characterReferenceMarkerHexadecimal',

     // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).
     characterReferenceValue: 'characterReferenceValue',

     // Whole fenced code:
     //
     // ````markdown
     // ```js
     // alert(1)
     // ```
     // ````
     codeFenced: 'codeFenced',

     // A fenced code fence, including whitespace, sequence, info, and meta
     // (` ```js `).
     codeFencedFence: 'codeFencedFence',

     // Sequence of grave accent or tilde characters (` ``` `) in a fence.
     codeFencedFenceSequence: 'codeFencedFenceSequence',

     // Info word (`js`) in a fence.
     // Includes string.
     codeFencedFenceInfo: 'codeFencedFenceInfo',

     // Meta words (`highlight="1"`) in a fence.
     // Includes string.
     codeFencedFenceMeta: 'codeFencedFenceMeta',

     // A line of code.
     codeFlowValue: 'codeFlowValue',

     // Whole indented code:
     //
     // ```markdown
     //     alert(1)
     // ```
     //
     // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.
     codeIndented: 'codeIndented',

     // A text code (``` `alpha` ```).
     // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include
     // `codeTextPadding`.
     codeText: 'codeText',

     codeTextData: 'codeTextData',

     // A space or line ending right after or before a tick.
     codeTextPadding: 'codeTextPadding',

     // A text code fence (` `` `).
     codeTextSequence: 'codeTextSequence',

     // Whole content:
     //
     // ```markdown
     // [a]: b
     // c
     // =
     // d
     // ```
     //
     // Includes `paragraph` and `definition`.
     content: 'content',
     // Whole definition:
     //
     // ```markdown
     // [micromark]: https://github.com/micromark/micromark
     // ```
     //
     // Includes `definitionLabel`, `definitionMarker`, `whitespace`,
     // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.
     definition: 'definition',

     // Destination of a definition (`https://github.com/micromark/micromark` or
     // `<https://github.com/micromark/micromark>`).
     // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.
     definitionDestination: 'definitionDestination',

     // Enclosed destination of a definition
     // (`<https://github.com/micromark/micromark>`).
     // Includes `definitionDestinationLiteralMarker` and optionally
     // `definitionDestinationString`.
     definitionDestinationLiteral: 'definitionDestinationLiteral',

     // Markers of an enclosed definition destination (`<` or `>`).
     definitionDestinationLiteralMarker: 'definitionDestinationLiteralMarker',

     // Unenclosed destination of a definition
     // (`https://github.com/micromark/micromark`).
     // Includes `definitionDestinationString`.
     definitionDestinationRaw: 'definitionDestinationRaw',

     // Text in an destination (`https://github.com/micromark/micromark`).
     // Includes string.
     definitionDestinationString: 'definitionDestinationString',

     // Label of a definition (`[micromark]`).
     // Includes `definitionLabelMarker` and `definitionLabelString`.
     definitionLabel: 'definitionLabel',

     // Markers of a definition label (`[` or `]`).
     definitionLabelMarker: 'definitionLabelMarker',

     // Value of a definition label (`micromark`).
     // Includes string.
     definitionLabelString: 'definitionLabelString',

     // Marker between a label and a destination (`:`).
     definitionMarker: 'definitionMarker',

     // Title of a definition (`"x"`, `'y'`, or `(z)`).
     // Includes `definitionTitleMarker` and optionally `definitionTitleString`.
     definitionTitle: 'definitionTitle',

     // Marker around a title of a definition (`"`, `'`, `(`, or `)`).
     definitionTitleMarker: 'definitionTitleMarker',

     // Data without markers in a title (`z`).
     // Includes string.
     definitionTitleString: 'definitionTitleString',

     // Emphasis (`*alpha*`).
     // Includes `emphasisSequence` and `emphasisText`.
     emphasis: 'emphasis',

     // Sequence of emphasis markers (`*` or `_`).
     emphasisSequence: 'emphasisSequence',

     // Emphasis text (`alpha`).
     // Includes text.
     emphasisText: 'emphasisText',

     // The character escape marker (`\`).
     escapeMarker: 'escapeMarker',

     // A hard break created with a backslash (`\\n`).
     // Includes `escapeMarker` (does not include the line ending)
     hardBreakEscape: 'hardBreakEscape',

     // A hard break created with trailing spaces (`  \n`).
     // Does not include the line ending.
     hardBreakTrailing: 'hardBreakTrailing',

     // Flow HTML:
     //
     // ```markdown
     // <div
     // ```
     //
     // Inlcudes `lineEnding`, `htmlFlowData`.
     htmlFlow: 'htmlFlow',

     htmlFlowData: 'htmlFlowData',

     // HTML in text (the tag in `a <i> b`).
     // Includes `lineEnding`, `htmlTextData`.
     htmlText: 'htmlText',

     htmlTextData: 'htmlTextData',

     // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or
     // `![alpha]`).
     // Includes `label` and an optional `resource` or `reference`.
     image: 'image',

     // Whole link label (`[*alpha*]`).
     // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.
     label: 'label',

     // Text in an label (`*alpha*`).
     // Includes text.
     labelText: 'labelText',

     // Start a link label (`[`).
     // Includes a `labelMarker`.
     labelLink: 'labelLink',

     // Start an image label (`![`).
     // Includes `labelImageMarker` and `labelMarker`.
     labelImage: 'labelImage',

     // Marker of a label (`[` or `]`).
     labelMarker: 'labelMarker',

     // Marker to start an image (`!`).
     labelImageMarker: 'labelImageMarker',

     // End a label (`]`).
     // Includes `labelMarker`.
     labelEnd: 'labelEnd',

     // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).
     // Includes `label` and an optional `resource` or `reference`.
     link: 'link',

     // Whole paragraph:
     //
     // ```markdown
     // alpha
     // bravo.
     // ```
     //
     // Includes text.
     paragraph: 'paragraph',

     // A reference (`[alpha]` or `[]`).
     // Includes `referenceMarker` and an optional `referenceString`.
     reference: 'reference',

     // A reference marker (`[` or `]`).
     referenceMarker: 'referenceMarker',

     // Reference text (`alpha`).
     // Includes string.
     referenceString: 'referenceString',

     // A resource (`(https://example.com "alpha")`).
     // Includes `resourceMarker`, an optional `resourceDestination` with an optional
     // `whitespace` and `resourceTitle`.
     resource: 'resource',

     // A resource destination (`https://example.com`).
     // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.
     resourceDestination: 'resourceDestination',

     // A literal resource destination (`<https://example.com>`).
     // Includes `resourceDestinationLiteralMarker` and optionally
     // `resourceDestinationString`.
     resourceDestinationLiteral: 'resourceDestinationLiteral',

     // A resource destination marker (`<` or `>`).
     resourceDestinationLiteralMarker: 'resourceDestinationLiteralMarker',

     // A raw resource destination (`https://example.com`).
     // Includes `resourceDestinationString`.
     resourceDestinationRaw: 'resourceDestinationRaw',

     // Resource destination text (`https://example.com`).
     // Includes string.
     resourceDestinationString: 'resourceDestinationString',

     // A resource marker (`(` or `)`).
     resourceMarker: 'resourceMarker',

     // A resource title (`"alpha"`, `'alpha'`, or `(alpha)`).
     // Includes `resourceTitleMarker` and optionally `resourceTitleString`.
     resourceTitle: 'resourceTitle',

     // A resource title marker (`"`, `'`, `(`, or `)`).
     resourceTitleMarker: 'resourceTitleMarker',

     // Resource destination title (`alpha`).
     // Includes string.
     resourceTitleString: 'resourceTitleString',

     // Whole setext heading:
     //
     // ```markdown
     // alpha
     // bravo
     // =====
     // ```
     //
     // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and
     // `setextHeadingLine`.
     setextHeading: 'setextHeading',

     // Content in a setext heading (`alpha\nbravo`).
     // Includes text.
     setextHeadingText: 'setextHeadingText',

     // Underline in a setext heading, including whitespace suffix (`==`).
     // Includes `setextHeadingLineSequence`.
     setextHeadingLine: 'setextHeadingLine',

     // Sequence of equals or dash characters in underline in a setext heading (`-`).
     setextHeadingLineSequence: 'setextHeadingLineSequence',

     // Strong (`**alpha**`).
     // Includes `strongSequence` and `strongText`.
     strong: 'strong',

     // Sequence of strong markers (`**` or `__`).
     strongSequence: 'strongSequence',

     // Strong text (`alpha`).
     // Includes text.
     strongText: 'strongText',

     // Whole thematic break:
     //
     // ```markdown
     // * * *
     // ```
     //
     // Includes `thematicBreakSequence` and `whitespace`.
     thematicBreak: 'thematicBreak',

     // A sequence of one or more thematic break markers (`***`).
     thematicBreakSequence: 'thematicBreakSequence',

     // Whole block quote:
     //
     // ```markdown
     // > a
     // >
     // > b
     // ```
     //
     // Includes `blockQuotePrefix` and flow.
     blockQuote: 'blockQuote',
     // The `>` or `> ` of a block quote.
     blockQuotePrefix: 'blockQuotePrefix',
     // The `>` of a block quote prefix.
     blockQuoteMarker: 'blockQuoteMarker',
     // The optional ` ` of a block quote prefix.
     blockQuotePrefixWhitespace: 'blockQuotePrefixWhitespace',

     // Whole unordered list:
     //
     // ```markdown
     // - a
     //   b
     // ```
     //
     // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
     // lines.
     listOrdered: 'listOrdered',

     // Whole ordered list:
     //
     // ```markdown
     // 1. a
     //    b
     // ```
     //
     // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
     // lines.
     listUnordered: 'listUnordered',

     // The indent of further list item lines.
     listItemIndent: 'listItemIndent',

     // A marker, as in, `*`, `+`, `-`, `.`, or `)`.
     listItemMarker: 'listItemMarker',

     // The thing that starts a list item, such as `1. `.
     // Includes `listItemValue` if ordered, `listItemMarker`, and
     // `listItemPrefixWhitespace` (unless followed by a line ending).
     listItemPrefix: 'listItemPrefix',

     // The whitespace after a marker.
     listItemPrefixWhitespace: 'listItemPrefixWhitespace',

     // The numerical value of an ordered item.
     listItemValue: 'listItemValue',

     // Internal types used for subtokenizers, compiled away
     chunkDocument: 'chunkDocument',
     chunkContent: 'chunkContent',
     chunkFlow: 'chunkFlow',
     chunkText: 'chunkText',
     chunkString: 'chunkString'
   };

   /**
    * While micromark is a lexer/tokenizer, the common case of going from markdown
    * to html is currently built in as this module, even though the parts can be
    * used separately to build ASTs, CSTs, or many other output formats.
    *
    * Having an HTML compiler built in is useful because it allows us to check for
    * compliancy to CommonMark, the de facto norm of markdown, specified in roughly
    * 600 input/output cases.
    *
    * This module has an interface that accepts lists of events instead of the
    * whole at once, however, because markdown can’t be truly streaming, we buffer
    * events before processing and outputting the final result.
    */

   const hasOwnProperty = {}.hasOwnProperty;

   /**
    * These two are allowlists of safe protocols for full URLs in respectively the
    * `href` (on `<a>`) and `src` (on `<img>`) attributes.
    * They are based on what is allowed on GitHub,
    * <https://github.com/syntax-tree/hast-util-sanitize/blob/9275b21/lib/github.json#L31>
    */
   const protocolHref = /^(https?|ircs?|mailto|xmpp)$/i;
   const protocolSrc = /^https?$/i;

   /**
    * @param {CompileOptions} [options]
    * @returns {Compile}
    */
   function compile(options = {}) {
     /**
      * Tags is needed because according to markdown, links and emphasis and
      * whatnot can exist in images, however, as HTML doesn’t allow content in
      * images, the tags are ignored in the `alt` attribute, but the content
      * remains.
      *
      * @type {boolean|undefined}
      */
     let tags = true;

     /**
      * An object to track identifiers to media (URLs and titles) defined with
      * definitions.
      *
      * @type {Record<string, Definition>}
      */
     const definitions = {};

     /**
      * A lot of the handlers need to capture some of the output data, modify it
      * somehow, and then deal with it.
      * We do that by tracking a stack of buffers, that can be opened (with
      * `buffer`) and closed (with `resume`) to access them.
      *
      * @type {Array<Array<string>>}
      */
     const buffers = [[]];

     /**
      * As we can have links in images and the other way around, where the deepest
      * ones are closed first, we need to track which one we’re in.
      *
      * @type {Array<Media>}
      */
     const mediaStack = [];

     /**
      * Same as `mediaStack` for tightness, which is specific to lists.
      * We need to track if we’re currently in a tight or loose container.
      *
      * @type {Array<boolean>}
      */
     const tightStack = [];

     /** @type {HtmlExtension} */
     const defaultHandlers = {
       enter: {
         blockQuote: onenterblockquote,
         codeFenced: onentercodefenced,
         codeFencedFenceInfo: buffer,
         codeFencedFenceMeta: buffer,
         codeIndented: onentercodeindented,
         codeText: onentercodetext,
         content: onentercontent,
         definition: onenterdefinition,
         definitionDestinationString: onenterdefinitiondestinationstring,
         definitionLabelString: buffer,
         definitionTitleString: buffer,
         emphasis: onenteremphasis,
         htmlFlow: onenterhtmlflow,
         htmlText: onenterhtml,
         image: onenterimage,
         label: buffer,
         link: onenterlink,
         listItemMarker: onenterlistitemmarker,
         listItemValue: onenterlistitemvalue,
         listOrdered: onenterlistordered,
         listUnordered: onenterlistunordered,
         paragraph: onenterparagraph,
         reference: buffer,
         resource: onenterresource,
         resourceDestinationString: onenterresourcedestinationstring,
         resourceTitleString: buffer,
         setextHeading: onentersetextheading,
         strong: onenterstrong
       },
       exit: {
         atxHeading: onexitatxheading,
         atxHeadingSequence: onexitatxheadingsequence,
         autolinkEmail: onexitautolinkemail,
         autolinkProtocol: onexitautolinkprotocol,
         blockQuote: onexitblockquote,
         characterEscapeValue: onexitdata,
         characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
         characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
         characterReferenceValue: onexitcharacterreferencevalue,
         codeFenced: onexitflowcode,
         codeFencedFence: onexitcodefencedfence,
         codeFencedFenceInfo: onexitcodefencedfenceinfo,
         codeFencedFenceMeta: resume,
         codeFlowValue: onexitcodeflowvalue,
         codeIndented: onexitflowcode,
         codeText: onexitcodetext,
         codeTextData: onexitdata,
         data: onexitdata,
         definition: onexitdefinition,
         definitionDestinationString: onexitdefinitiondestinationstring,
         definitionLabelString: onexitdefinitionlabelstring,
         definitionTitleString: onexitdefinitiontitlestring,
         emphasis: onexitemphasis,
         hardBreakEscape: onexithardbreak,
         hardBreakTrailing: onexithardbreak,
         htmlFlow: onexithtml,
         htmlFlowData: onexitdata,
         htmlText: onexithtml,
         htmlTextData: onexitdata,
         image: onexitmedia,
         label: onexitlabel,
         labelText: onexitlabeltext,
         lineEnding: onexitlineending,
         link: onexitmedia,
         listOrdered: onexitlistordered,
         listUnordered: onexitlistunordered,
         paragraph: onexitparagraph,
         reference: resume,
         referenceString: onexitreferencestring,
         resource: resume,
         resourceDestinationString: onexitresourcedestinationstring,
         resourceTitleString: onexitresourcetitlestring,
         setextHeading: onexitsetextheading,
         setextHeadingLineSequence: onexitsetextheadinglinesequence,
         setextHeadingText: onexitsetextheadingtext,
         strong: onexitstrong,
         thematicBreak: onexitthematicbreak
       }
     };

     /**
      * Combine the HTML extensions with the default handlers.
      * An HTML extension is an object whose fields are either `enter` or `exit`
      * (reflecting whether a token is entered or exited).
      * The values at such objects are names of tokens mapping to handlers.
      * Handlers are called, respectively when a token is opener or closed, with
      * that token, and a context as `this`.
      *
      * @type {NormalizedHtmlExtension}
      */
     // @ts-expect-error `defaultHandlers` is full, so the result will be too.
     const handlers = combineHtmlExtensions(
       [defaultHandlers].concat(options.htmlExtensions || [])
     );

     /**
      * Handlers do often need to keep track of some state.
      * That state is provided here as a key-value store (an object).
      *
      * @type {CompileData}
      */
     const data = {tightStack};

     /**
      * The context for handlers references a couple of useful functions.
      * In handlers from extensions, those can be accessed at `this`.
      * For the handlers here, they can be accessed directly.
      *
      * @type {Omit<CompileContext, 'sliceSerialize'>}
      */
     const context = {
       lineEndingIfNeeded,
       options,
       encode: encode$1,
       raw,
       tag,
       buffer,
       resume,
       setData,
       getData
     };

     /**
      * Generally, micromark copies line endings (`'\r'`, `'\n'`, `'\r\n'`) in the
      * markdown document over to the compiled HTML.
      * In some cases, such as `> a`, CommonMark requires that extra line endings
      * are added: `<blockquote>\n<p>a</p>\n</blockquote>`.
      * This variable hold the default line ending when given (or `undefined`),
      * and in the latter case will be updated to the first found line ending if
      * there is one.
      */
     let lineEndingStyle = options.defaultLineEnding;

     // Return the function that handles a slice of events.
     return compile

     /**
      * Deal w/ a slice of events.
      * Return either the empty string if there’s nothing of note to return, or the
      * result when done.
      *
      * @param {Array<Event>} events
      * @returns {string}
      */
     function compile(events) {
       let index = -1;
       let start = 0;
       /** @type {Array<number>} */
       const listStack = [];
       // As definitions can come after references, we need to figure out the media
       // (urls and titles) defined by them before handling the references.
       // So, we do sort of what HTML does: put metadata at the start (in head), and
       // then put content after (`body`).
       /** @type {Array<Event>} */
       let head = [];
       /** @type {Array<Event>} */
       let body = [];

       while (++index < events.length) {
         // Figure out the line ending style used in the document.
         if (
           !lineEndingStyle &&
           (events[index][1].type === types$1.lineEnding ||
             events[index][1].type === types$1.lineEndingBlank)
         ) {
           // @ts-expect-error Hush, it’s a line ending.
           lineEndingStyle = events[index][2].sliceSerialize(events[index][1]);
         }

         // Preprocess lists to infer whether the list is loose or not.
         if (
           events[index][1].type === types$1.listOrdered ||
           events[index][1].type === types$1.listUnordered
         ) {
           if (events[index][0] === 'enter') {
             listStack.push(index);
           } else {
             prepareList(events.slice(listStack.pop(), index));
           }
         }

         // Move definitions to the front.
         if (events[index][1].type === types$1.definition) {
           if (events[index][0] === 'enter') {
             body = push(body, events.slice(start, index));
             start = index;
           } else {
             head = push(head, events.slice(start, index + 1));
             start = index + 1;
           }
         }
       }

       head = push(head, body);
       head = push(head, events.slice(start));
       index = -1;
       const result = head;

       // Handle the start of the document, if defined.
       if (handlers.enter.null) {
         handlers.enter.null.call(context);
       }

       // Handle all events.
       while (++index < events.length) {
         const handler = handlers[result[index][0]];

         if (hasOwnProperty.call(handler, result[index][1].type)) {
           handler[result[index][1].type].call(
             Object.assign(
               {sliceSerialize: result[index][2].sliceSerialize},
               context
             ),
             result[index][1]
           );
         }
       }

       // Handle the end of the document, if defined.
       if (handlers.exit.null) {
         handlers.exit.null.call(context);
       }

       return buffers[0].join('')
     }

     /**
      * Figure out whether lists are loose or not.
      *
      * @param {Array<Event>} slice
      * @returns {void}
      */
     function prepareList(slice) {
       const length = slice.length;
       let index = 0; // Skip open.
       let containerBalance = 0;
       let loose = false;
       /** @type {boolean|undefined} */
       let atMarker;

       while (++index < length) {
         const event = slice[index];

         if (event[1]._container) {
           atMarker = undefined;

           if (event[0] === 'enter') {
             containerBalance++;
           } else {
             containerBalance--;
           }
         } else
           switch (event[1].type) {
             case types$1.listItemPrefix: {
               if (event[0] === 'exit') {
                 atMarker = true;
               }

               break
             }

             case types$1.linePrefix: {
               // Ignore

               break
             }

             case types$1.lineEndingBlank: {
               if (event[0] === 'enter' && !containerBalance) {
                 if (atMarker) {
                   atMarker = undefined;
                 } else {
                   loose = true;
                 }
               }

               break
             }

             default: {
               atMarker = undefined;
             }
           }
       }

       slice[0][1]._loose = loose;
     }

     /**
      * @type {CompileContext['setData']}
      * @param [value]
      */
     function setData(key, value) {
       data[key] = value;
     }

     /**
      * @type {CompileContext['getData']}
      * @template {string} K
      * @param {K} key
      * @returns {CompileData[K]}
      */
     function getData(key) {
       return data[key]
     }

     /** @type {CompileContext['buffer']} */
     function buffer() {
       buffers.push([]);
     }

     /** @type {CompileContext['resume']} */
     function resume() {
       const buf = buffers.pop();
       ok$1(buf !== undefined, 'Cannot resume w/o buffer');
       return buf.join('')
     }

     /** @type {CompileContext['tag']} */
     function tag(value) {
       if (!tags) return
       setData('lastWasTag', true);
       buffers[buffers.length - 1].push(value);
     }

     /** @type {CompileContext['raw']} */
     function raw(value) {
       setData('lastWasTag');
       buffers[buffers.length - 1].push(value);
     }

     /**
      * Output an extra line ending.
      *
      * @returns {void}
      */
     function lineEnding() {
       if (!options.noNonRenderedNewline || getData('inPre'))
         raw(lineEndingStyle || '\n');
     }

     /** @type {CompileContext['lineEndingIfNeeded']} */
     function lineEndingIfNeeded() {
       const buffer = buffers[buffers.length - 1];
       const slice = buffer[buffer.length - 1];
       const previous = slice ? slice.charCodeAt(slice.length - 1) : codes.eof;

       if (
         previous === codes.lf ||
         previous === codes.cr ||
         previous === codes.eof
       ) {
         return
       }

       lineEnding();
     }

     /** @type {CompileContext['encode']} */
     function encode$1(value) {
       return getData('ignoreEncode') ? value : encode(value)
     }

     //
     // Handlers.
     //

     /** @type {Handle} */
     function onenterlistordered(token) {
       tightStack.push(!token._loose);
       lineEndingIfNeeded();
       tag('<ol');
       setData('expectFirstItem', true);
     }

     /** @type {Handle} */
     function onenterlistunordered(token) {
       tightStack.push(!token._loose);
       lineEndingIfNeeded();
       tag('<ul');
       setData('expectFirstItem', true);
     }

     /** @type {Handle} */
     function onenterlistitemvalue(token) {
       if (getData('expectFirstItem')) {
         const value = Number.parseInt(
           this.sliceSerialize(token),
           constants.numericBaseDecimal
         );

         if (value !== 1) {
           tag(' start="' + encode$1(String(value)) + '"');
         }
       }
     }

     /** @type {Handle} */
     function onenterlistitemmarker() {
       if (getData('expectFirstItem')) {
         tag('>');
       } else {
         onexitlistitem();
       }

       lineEndingIfNeeded();
       tag('<li>');
       setData('expectFirstItem');
       // “Hack” to prevent a line ending from showing up if the item is empty.
       setData('lastWasTag');
     }

     /** @type {Handle} */
     function onexitlistordered() {
       onexitlistitem();
       tightStack.pop();
       lineEnding();
       tag('</ol>');
     }

     /** @type {Handle} */
     function onexitlistunordered() {
       onexitlistitem();
       tightStack.pop();
       lineEnding();
       tag('</ul>');
     }

     /** @type {Handle} */
     function onexitlistitem() {
       if (getData('lastWasTag') && !getData('slurpAllLineEndings')) {
         lineEndingIfNeeded();
       }

       tag('</li>');
       setData('slurpAllLineEndings');
     }

     /** @type {Handle} */
     function onenterblockquote() {
       tightStack.push(false);
       lineEndingIfNeeded();
       tag('<blockquote>');
     }

     /** @type {Handle} */
     function onexitblockquote() {
       tightStack.pop();
       lineEndingIfNeeded();
       tag('</blockquote>');
       setData('slurpAllLineEndings');
     }

     /** @type {Handle} */
     function onenterparagraph() {
       if (!tightStack[tightStack.length - 1]) {
         lineEndingIfNeeded();
         tag('<p>');
       }

       setData('slurpAllLineEndings');
     }

     /** @type {Handle} */
     function onexitparagraph() {
       if (tightStack[tightStack.length - 1]) {
         setData('slurpAllLineEndings', true);
       } else {
         tag('</p>');
       }
     }

     /** @type {Handle} */
     function onentercodefenced() {
       lineEndingIfNeeded();
       tag('<pre><code');
       setData('inPre', true);
       setData('fencesCount', 0);
     }

     /** @type {Handle} */
     function onexitcodefencedfenceinfo() {
       const value = resume();
       tag(' class="language-' + value + '"');
     }

     /** @type {Handle} */
     function onexitcodefencedfence() {
       const count = getData('fencesCount') || 0;

       if (!count) {
         tag('>');
         setData('slurpOneLineEnding', true);
       }

       setData('fencesCount', count + 1);
     }

     /** @type {Handle} */
     function onentercodeindented() {
       lineEndingIfNeeded();
       tag('<pre><code>');
       setData('inPre', true);
     }

     /** @type {Handle} */
     function onexitflowcode() {
       const count = getData('fencesCount');

       // One special case is if we are inside a container, and the fenced code was
       // not closed (meaning it runs to the end).
       // In that case, the following line ending, is considered *outside* the
       // fenced code and block quote by micromark, but CM wants to treat that
       // ending as part of the code.
       if (
         count !== undefined &&
         count < 2 &&
         // @ts-expect-error `tightStack` is always set.
         data.tightStack.length > 0 &&
         !getData('lastWasTag')
       ) {
         lineEnding();
       }

       // But in most cases, it’s simpler: when we’ve seen some data, emit an extra
       // line ending when needed.
       if (getData('flowCodeSeenData')) {
         lineEndingIfNeeded();
       }

       tag('</code></pre>');
       setData('inPre');
       if (count !== undefined && count < 2) lineEndingIfNeeded();
       setData('flowCodeSeenData');
       setData('fencesCount');
       setData('slurpOneLineEnding');
     }

     /** @type {Handle} */
     function onenterimage() {
       mediaStack.push({image: true});
       tags = undefined; // Disallow tags.
     }

     /** @type {Handle} */
     function onenterlink() {
       mediaStack.push({});
     }

     /** @type {Handle} */
     function onexitlabeltext(token) {
       mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token);
     }

     /** @type {Handle} */
     function onexitlabel() {
       mediaStack[mediaStack.length - 1].label = resume();
     }

     /** @type {Handle} */
     function onexitreferencestring(token) {
       mediaStack[mediaStack.length - 1].referenceId = this.sliceSerialize(token);
     }

     /** @type {Handle} */
     function onenterresource() {
       buffer(); // We can have line endings in the resource, ignore them.
       mediaStack[mediaStack.length - 1].destination = '';
     }

     /** @type {Handle} */
     function onenterresourcedestinationstring() {
       buffer();
       // Ignore encoding the result, as we’ll first percent encode the url and
       // encode manually after.
       setData('ignoreEncode', true);
     }

     /** @type {Handle} */
     function onexitresourcedestinationstring() {
       mediaStack[mediaStack.length - 1].destination = resume();
       setData('ignoreEncode');
     }

     /** @type {Handle} */
     function onexitresourcetitlestring() {
       mediaStack[mediaStack.length - 1].title = resume();
     }

     /** @type {Handle} */
     function onexitmedia() {
       let index = mediaStack.length - 1; // Skip current.
       const media = mediaStack[index];
       const id = media.referenceId || media.labelId;
       ok$1(id !== undefined, 'media should have `referenceId` or `labelId`');
       ok$1(media.label !== undefined, 'media should have `label`');
       const context =
         media.destination === undefined
           ? definitions[normalizeIdentifier(id)]
           : media;

       tags = true;

       while (index--) {
         if (mediaStack[index].image) {
           tags = undefined;
           break
         }
       }

       if (media.image) {
         tag(
           '<img src="' +
             sanitizeUri(
               context.destination,
               options.allowDangerousProtocol ? undefined : protocolSrc
             ) +
             '" alt="'
         );
         raw(media.label);
         tag('"');
       } else {
         tag(
           '<a href="' +
             sanitizeUri(
               context.destination,
               options.allowDangerousProtocol ? undefined : protocolHref
             ) +
             '"'
         );
       }

       tag(context.title ? ' title="' + context.title + '"' : '');

       if (media.image) {
         tag(' />');
       } else {
         tag('>');
         raw(media.label);
         tag('</a>');
       }

       mediaStack.pop();
     }

     /** @type {Handle} */
     function onenterdefinition() {
       buffer();
       mediaStack.push({});
     }

     /** @type {Handle} */
     function onexitdefinitionlabelstring(token) {
       // Discard label, use the source content instead.
       resume();
       mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token);
     }

     /** @type {Handle} */
     function onenterdefinitiondestinationstring() {
       buffer();
       setData('ignoreEncode', true);
     }

     /** @type {Handle} */
     function onexitdefinitiondestinationstring() {
       mediaStack[mediaStack.length - 1].destination = resume();
       setData('ignoreEncode');
     }

     /** @type {Handle} */
     function onexitdefinitiontitlestring() {
       mediaStack[mediaStack.length - 1].title = resume();
     }

     /** @type {Handle} */
     function onexitdefinition() {
       const media = mediaStack[mediaStack.length - 1];
       ok$1(media.labelId !== undefined, 'media should have `labelId`');
       const id = normalizeIdentifier(media.labelId);

       resume();

       if (!hasOwnProperty.call(definitions, id)) {
         definitions[id] = mediaStack[mediaStack.length - 1];
       }

       mediaStack.pop();
     }

     /** @type {Handle} */
     function onentercontent() {
       setData('slurpAllLineEndings', true);
     }

     /** @type {Handle} */
     function onexitatxheadingsequence(token) {
       // Exit for further sequences.
       if (getData('headingRank')) return
       setData('headingRank', this.sliceSerialize(token).length);
       lineEndingIfNeeded();
       tag('<h' + getData('headingRank') + '>');
     }

     /** @type {Handle} */
     function onentersetextheading() {
       buffer();
       setData('slurpAllLineEndings');
     }

     /** @type {Handle} */
     function onexitsetextheadingtext() {
       setData('slurpAllLineEndings', true);
     }

     /** @type {Handle} */
     function onexitatxheading() {
       tag('</h' + getData('headingRank') + '>');
       setData('headingRank');
     }

     /** @type {Handle} */
     function onexitsetextheadinglinesequence(token) {
       setData(
         'headingRank',
         this.sliceSerialize(token).charCodeAt(0) === codes.equalsTo ? 1 : 2
       );
     }

     /** @type {Handle} */
     function onexitsetextheading() {
       const value = resume();
       lineEndingIfNeeded();
       tag('<h' + getData('headingRank') + '>');
       raw(value);
       tag('</h' + getData('headingRank') + '>');
       setData('slurpAllLineEndings');
       setData('headingRank');
     }

     /** @type {Handle} */
     function onexitdata(token) {
       raw(encode$1(this.sliceSerialize(token)));
     }

     /** @type {Handle} */
     function onexitlineending(token) {
       if (getData('slurpAllLineEndings')) {
         return
       }

       if (getData('slurpOneLineEnding')) {
         setData('slurpOneLineEnding');
         return
       }

       if (getData('inCodeText')) {
         raw(' ');
         return
       }

       if(!options.noNonRenderedNewline || getData('inPre')) {
         raw(encode$1(this.sliceSerialize(token)));
         return
       }
     }

     /** @type {Handle} */
     function onexitcodeflowvalue(token) {
       raw(encode$1(this.sliceSerialize(token)));
       setData('flowCodeSeenData', true);
     }

     /** @type {Handle} */
     function onexithardbreak() {
       tag('<br />');
     }

     /** @type {Handle} */
     function onenterhtmlflow() {
       lineEndingIfNeeded();
       onenterhtml();
     }

     /** @type {Handle} */
     function onexithtml() {
       setData('ignoreEncode');
     }

     /** @type {Handle} */
     function onenterhtml() {
       if (options.allowDangerousHtml) {
         setData('ignoreEncode', true);
       }
     }

     /** @type {Handle} */
     function onenteremphasis() {
       tag('<em>');
     }

     /** @type {Handle} */
     function onenterstrong() {
       tag('<strong>');
     }

     /** @type {Handle} */
     function onentercodetext() {
       setData('inCodeText', true);
       tag('<code>');
     }

     /** @type {Handle} */
     function onexitcodetext() {
       setData('inCodeText');
       tag('</code>');
     }

     /** @type {Handle} */
     function onexitemphasis() {
       tag('</em>');
     }

     /** @type {Handle} */
     function onexitstrong() {
       tag('</strong>');
     }

     /** @type {Handle} */
     function onexitthematicbreak() {
       lineEndingIfNeeded();
       tag('<hr />');
     }

     /** @type {Handle} */
     function onexitcharacterreferencemarker(token) {
       setData('characterReferenceType', token.type);
     }

     /** @type {Handle} */
     function onexitcharacterreferencevalue(token) {
       let value = this.sliceSerialize(token);

       // @ts-expect-error `decodeNamedCharacterReference` can return false for
       // invalid named character references, but everything we’ve tokenized is
       // valid.
       value = getData('characterReferenceType')
         ? decodeNumericCharacterReference(
             value,
             getData('characterReferenceType') ===
               types$1.characterReferenceMarkerNumeric
               ? constants.numericBaseDecimal
               : constants.numericBaseHexadecimal
           )
         : decodeNamedCharacterReference(value);

       raw(encode$1(value));
       setData('characterReferenceType');
     }

     /** @type {Handle} */
     function onexitautolinkprotocol(token) {
       const uri = this.sliceSerialize(token);
       tag(
         '<a href="' +
           sanitizeUri(
             uri,
             options.allowDangerousProtocol ? undefined : protocolHref
           ) +
           '">'
       );
       raw(encode$1(uri));
       tag('</a>');
     }

     /** @type {Handle} */
     function onexitautolinkemail(token) {
       const uri = this.sliceSerialize(token);
       tag('<a href="' + sanitizeUri('mailto:' + uri) + '">');
       raw(encode$1(uri));
       tag('</a>');
     }
   }

   /**
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    */
   /**
    * @param {Effects} effects
    * @param {State} ok
    * @param {string} type
    * @param {number} [max=Infinity]
    * @returns {State}
    */

   function factorySpace(effects, ok, type, max) {
     const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
     let size = 0;
     return start
     /** @type {State} */

     function start(code) {
       if (markdownSpace(code)) {
         effects.enter(type);
         return prefix(code)
       }

       return ok(code)
     }
     /** @type {State} */

     function prefix(code) {
       if (markdownSpace(code) && size++ < limit) {
         effects.consume(code);
         return prefix
       }

       effects.exit(type);
       return ok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
    * @typedef {import('micromark-util-types').Initializer} Initializer
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').State} State
    */

   /** @type {InitialConstruct} */
   const content$3 = {tokenize: initializeContent};

   /** @type {Initializer} */
   function initializeContent(effects) {
     const contentStart = effects.attempt(
       this.parser.constructs.contentInitial,
       afterContentStartConstruct,
       paragraphInitial
     );
     /** @type {Token} */
     let previous;

     return contentStart

     /** @type {State} */
     function afterContentStartConstruct(code) {
       ok$1(
         code === codes.eof || markdownLineEnding(code),
         'expected eol or eof'
       );

       if (code === codes.eof) {
         effects.consume(code);
         return
       }

       effects.enter(types$1.lineEnding);
       effects.consume(code);
       effects.exit(types$1.lineEnding);
       return factorySpace(effects, contentStart, types$1.linePrefix)
     }

     /** @type {State} */
     function paragraphInitial(code) {
       ok$1(
         code !== codes.eof && !markdownLineEnding(code),
         'expected anything other than a line ending or EOF'
       );
       effects.enter(types$1.paragraph);
       return lineStart(code)
     }

     /** @type {State} */
     function lineStart(code) {
       const token = effects.enter(types$1.chunkText, {
         contentType: constants.contentTypeText,
         previous
       });

       if (previous) {
         previous.next = token;
       }

       previous = token;

       return data(code)
     }

     /** @type {State} */
     function data(code) {
       if (code === codes.eof) {
         effects.exit(types$1.chunkText);
         effects.exit(types$1.paragraph);
         effects.consume(code);
         return
       }

       if (markdownLineEnding(code)) {
         effects.consume(code);
         effects.exit(types$1.chunkText);
         return lineStart
       }

       // Data.
       effects.consume(code);
       return data
     }
   }

   /**
    * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
    * @typedef {import('micromark-util-types').Initializer} Initializer
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Point} Point
    */

   /** @type {InitialConstruct} */
   const document$2 = {tokenize: initializeDocument};

   /** @type {Construct} */
   const containerConstruct = {tokenize: tokenizeContainer};

   /** @type {Initializer} */
   function initializeDocument(effects) {
     const self = this;
     /** @type {Array<StackItem>} */
     const stack = [];
     let continued = 0;
     /** @type {TokenizeContext|undefined} */
     let childFlow;
     /** @type {Token|undefined} */
     let childToken;
     /** @type {number} */
     let lineStartOffset;

     return start

     /** @type {State} */
     function start(code) {
       // First we iterate through the open blocks, starting with the root
       // document, and descending through last children down to the last open
       // block.
       // Each block imposes a condition that the line must satisfy if the block is
       // to remain open.
       // For example, a block quote requires a `>` character.
       // A paragraph requires a non-blank line.
       // In this phase we may match all or just some of the open blocks.
       // But we cannot close unmatched blocks yet, because we may have a lazy
       // continuation line.
       if (continued < stack.length) {
         const item = stack[continued];
         self.containerState = item[1];
         ok$1(
           item[0].continuation,
           'expected `continuation` to be defined on container construct'
         );
         return effects.attempt(
           item[0].continuation,
           documentContinue,
           checkNewContainers
         )(code)
       }

       // Done.
       return checkNewContainers(code)
     }

     /** @type {State} */
     function documentContinue(code) {
       ok$1(
         self.containerState,
         'expected `containerState` to be defined after continuation'
       );

       continued++;

       // Note: this field is called `_closeFlow` but it also closes containers.
       // Perhaps a good idea to rename it but it’s already used in the wild by
       // extensions.
       if (self.containerState._closeFlow) {
         self.containerState._closeFlow = undefined;

         if (childFlow) {
           closeFlow();
         }

         // Note: this algorithm for moving events around is similar to the
         // algorithm when dealing with lazy lines in `writeToChild`.
         const indexBeforeExits = self.events.length;
         let indexBeforeFlow = indexBeforeExits;
         /** @type {Point|undefined} */
         let point;

         // Find the flow chunk.
         while (indexBeforeFlow--) {
           if (
             self.events[indexBeforeFlow][0] === 'exit' &&
             self.events[indexBeforeFlow][1].type === types$1.chunkFlow
           ) {
             point = self.events[indexBeforeFlow][1].end;
             break
           }
         }

         ok$1(point, 'could not find previous flow chunk');

         exitContainers(continued);

         // Fix positions.
         let index = indexBeforeExits;

         while (index < self.events.length) {
           self.events[index][1].end = Object.assign({}, point);
           index++;
         }

         // Inject the exits earlier (they’re still also at the end).
         splice(
           self.events,
           indexBeforeFlow + 1,
           0,
           self.events.slice(indexBeforeExits)
         );

         // Discard the duplicate exits.
         self.events.length = index;

         return checkNewContainers(code)
       }

       return start(code)
     }

     /** @type {State} */
     function checkNewContainers(code) {
       // Next, after consuming the continuation markers for existing blocks, we
       // look for new block starts (e.g. `>` for a block quote).
       // If we encounter a new block start, we close any blocks unmatched in
       // step 1 before creating the new block as a child of the last matched
       // block.
       if (continued === stack.length) {
         // No need to `check` whether there’s a container, of `exitContainers`
         // would be moot.
         // We can instead immediately `attempt` to parse one.
         if (!childFlow) {
           return documentContinued(code)
         }

         // If we have concrete content, such as block HTML or fenced code,
         // we can’t have containers “pierce” into them, so we can immediately
         // start.
         if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
           return flowStart(code)
         }

         // If we do have flow, it could still be a blank line,
         // but we’d be interrupting it w/ a new container if there’s a current
         // construct.
         self.interrupt = Boolean(
           childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
         );
       }

       // Check if there is a new container.
       self.containerState = {};
       return effects.check(
         containerConstruct,
         thereIsANewContainer,
         thereIsNoNewContainer
       )(code)
     }

     /** @type {State} */
     function thereIsANewContainer(code) {
       if (childFlow) closeFlow();
       exitContainers(continued);
       return documentContinued(code)
     }

     /** @type {State} */
     function thereIsNoNewContainer(code) {
       self.parser.lazy[self.now().line] = continued !== stack.length;
       lineStartOffset = self.now().offset;
       return flowStart(code)
     }

     /** @type {State} */
     function documentContinued(code) {
       // Try new containers.
       self.containerState = {};
       return effects.attempt(
         containerConstruct,
         containerContinue,
         flowStart
       )(code)
     }

     /** @type {State} */
     function containerContinue(code) {
       ok$1(
         self.currentConstruct,
         'expected `currentConstruct` to be defined on tokenizer'
       );
       ok$1(
         self.containerState,
         'expected `containerState` to be defined on tokenizer'
       );
       continued++;
       stack.push([self.currentConstruct, self.containerState]);
       // Try another.
       return documentContinued(code)
     }

     /** @type {State} */
     function flowStart(code) {
       if (code === codes.eof) {
         if (childFlow) closeFlow();
         exitContainers(0);
         effects.consume(code);
         return
       }

       childFlow = childFlow || self.parser.flow(self.now());
       effects.enter(types$1.chunkFlow, {
         contentType: constants.contentTypeFlow,
         previous: childToken,
         _tokenizer: childFlow
       });

       return flowContinue(code)
     }

     /** @type {State} */
     function flowContinue(code) {
       if (code === codes.eof) {
         writeToChild(effects.exit(types$1.chunkFlow), true);
         exitContainers(0);
         effects.consume(code);
         return
       }

       if (markdownLineEnding(code)) {
         effects.consume(code);
         writeToChild(effects.exit(types$1.chunkFlow));
         // Get ready for the next line.
         continued = 0;
         self.interrupt = undefined;
         return start
       }

       effects.consume(code);
       return flowContinue
     }

     /**
      * @param {Token} token
      * @param {boolean} [eof]
      * @returns {void}
      */
     function writeToChild(token, eof) {
       ok$1(childFlow, 'expected `childFlow` to be defined when continuing');
       const stream = self.sliceStream(token);
       if (eof) stream.push(null);
       token.previous = childToken;
       if (childToken) childToken.next = token;
       childToken = token;
       childFlow.defineSkip(token.start);
       childFlow.write(stream);

       // Alright, so we just added a lazy line:
       //
       // ```markdown
       // > a
       // b.
       //
       // Or:
       //
       // > ~~~c
       // d
       //
       // Or:
       //
       // > | e |
       // f
       // ```
       //
       // The construct in the second example (fenced code) does not accept lazy
       // lines, so it marked itself as done at the end of its first line, and
       // then the content construct parses `d`.
       // Most constructs in markdown match on the first line: if the first line
       // forms a construct, a non-lazy line can’t “unmake” it.
       //
       // The construct in the third example is potentially a GFM table, and
       // those are *weird*.
       // It *could* be a table, from the first line, if the following line
       // matches a condition.
       // In this case, that second line is lazy, which “unmakes” the first line
       // and turns the whole into one content block.
       //
       // We’ve now parsed the non-lazy and the lazy line, and can figure out
       // whether the lazy line started a new flow block.
       // If it did, we exit the current containers between the two flow blocks.
       if (self.parser.lazy[token.start.line]) {
         let index = childFlow.events.length;

         while (index--) {
           if (
             // The token starts before the line ending…
             childFlow.events[index][1].start.offset < lineStartOffset &&
             // …and either is not ended yet…
             (!childFlow.events[index][1].end ||
               // …or ends after it.
               childFlow.events[index][1].end.offset > lineStartOffset)
           ) {
             // Exit: there’s still something open, which means it’s a lazy line
             // part of something.
             return
           }
         }

         // Note: this algorithm for moving events around is similar to the
         // algorithm when closing flow in `documentContinue`.
         const indexBeforeExits = self.events.length;
         let indexBeforeFlow = indexBeforeExits;
         /** @type {boolean|undefined} */
         let seen;
         /** @type {Point|undefined} */
         let point;

         // Find the previous chunk (the one before the lazy line).
         while (indexBeforeFlow--) {
           if (
             self.events[indexBeforeFlow][0] === 'exit' &&
             self.events[indexBeforeFlow][1].type === types$1.chunkFlow
           ) {
             if (seen) {
               point = self.events[indexBeforeFlow][1].end;
               break
             }

             seen = true;
           }
         }

         ok$1(point, 'could not find previous flow chunk');

         exitContainers(continued);

         // Fix positions.
         index = indexBeforeExits;

         while (index < self.events.length) {
           self.events[index][1].end = Object.assign({}, point);
           index++;
         }

         // Inject the exits earlier (they’re still also at the end).
         splice(
           self.events,
           indexBeforeFlow + 1,
           0,
           self.events.slice(indexBeforeExits)
         );

         // Discard the duplicate exits.
         self.events.length = index;
       }
     }

     /**
      * @param {number} size
      * @returns {void}
      */
     function exitContainers(size) {
       let index = stack.length;

       // Exit open containers.
       while (index-- > size) {
         const entry = stack[index];
         self.containerState = entry[1];
         ok$1(
           entry[0].exit,
           'expected `exit` to be defined on container construct'
         );
         entry[0].exit.call(self, effects);
       }

       stack.length = size;
     }

     function closeFlow() {
       ok$1(
         self.containerState,
         'expected `containerState` to be defined when closing flow'
       );
       ok$1(childFlow, 'expected `childFlow` to be defined when closing it');
       childFlow.write([codes.eof]);
       childToken = undefined;
       childFlow = undefined;
       self.containerState._closeFlow = undefined;
     }
   }

   /** @type {Tokenizer} */
   function tokenizeContainer(effects, ok, nok) {
     return factorySpace(
       effects,
       effects.attempt(this.parser.constructs.document, ok, nok),
       types$1.linePrefix,
       this.parser.constructs.disable.null.includes('codeIndented')
         ? undefined
         : constants.tabSize
     )
   }

   /**
    * @typedef {import('micromark-util-types').Code} Code
    */

   /**
    * Classify whether a character code represents whitespace, punctuation, or
    * something else.
    *
    * Used for attention (emphasis, strong), whose sequences can open or close
    * based on the class of surrounding characters.
    *
    * Note that eof (`null`) is seen as whitespace.
    *
    * @param {Code} code
    * @returns {number|undefined}
    */
   function classifyCharacter(code) {
     if (
       code === null ||
       markdownLineEndingOrSpace(code) ||
       unicodeWhitespace(code)
     ) {
       return 1
     }

     if (unicodePunctuation(code)) {
       return 2
     }
   }

   /**
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Event} Event
    * @typedef {import('micromark-util-types').Resolver} Resolver
    */

   /**
    * Call all `resolveAll`s.
    *
    * @param {{resolveAll?: Resolver}[]} constructs
    * @param {Event[]} events
    * @param {TokenizeContext} context
    * @returns {Event[]}
    */
   function resolveAll(constructs, events, context) {
     /** @type {Resolver[]} */
     const called = [];
     let index = -1;

     while (++index < constructs.length) {
       const resolve = constructs[index].resolveAll;

       if (resolve && !called.includes(resolve)) {
         events = resolve(events, context);
         called.push(resolve);
       }
     }

     return events
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').Event} Event
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Point} Point
    */

   /** @type {Construct} */
   const attention = {
     name: 'attention',
     tokenize: tokenizeAttention,
     resolveAll: resolveAllAttention
   };
   /**
    * Take all events and resolve attention to emphasis or strong.
    *
    * @type {Resolver}
    */

   function resolveAllAttention(events, context) {
     let index = -1;
     /** @type {number} */

     let open;
     /** @type {Token} */

     let group;
     /** @type {Token} */

     let text;
     /** @type {Token} */

     let openingSequence;
     /** @type {Token} */

     let closingSequence;
     /** @type {number} */

     let use;
     /** @type {Event[]} */

     let nextEvents;
     /** @type {number} */

     let offset; // Walk through all events.
     //
     // Note: performance of this is fine on an mb of normal markdown, but it’s
     // a bottleneck for malicious stuff.

     while (++index < events.length) {
       // Find a token that can close.
       if (
         events[index][0] === 'enter' &&
         events[index][1].type === 'attentionSequence' &&
         events[index][1]._close
       ) {
         open = index; // Now walk back to find an opener.

         while (open--) {
           // Find a token that can open the closer.
           if (
             events[open][0] === 'exit' &&
             events[open][1].type === 'attentionSequence' &&
             events[open][1]._open && // If the markers are the same:
             context.sliceSerialize(events[open][1]).charCodeAt(0) ===
               context.sliceSerialize(events[index][1]).charCodeAt(0)
           ) {
             // If the opening can close or the closing can open,
             // and the close size *is not* a multiple of three,
             // but the sum of the opening and closing size *is* multiple of three,
             // then don’t match.
             if (
               (events[open][1]._close || events[index][1]._open) &&
               (events[index][1].end.offset - events[index][1].start.offset) % 3 &&
               !(
                 (events[open][1].end.offset -
                   events[open][1].start.offset +
                   events[index][1].end.offset -
                   events[index][1].start.offset) %
                 3
               )
             ) {
               continue
             } // Number of markers to use from the sequence.

             use =
               events[open][1].end.offset - events[open][1].start.offset > 1 &&
               events[index][1].end.offset - events[index][1].start.offset > 1
                 ? 2
                 : 1;
             const start = Object.assign({}, events[open][1].end);
             const end = Object.assign({}, events[index][1].start);
             movePoint(start, -use);
             movePoint(end, use);
             openingSequence = {
               type: use > 1 ? 'strongSequence' : 'emphasisSequence',
               start,
               end: Object.assign({}, events[open][1].end)
             };
             closingSequence = {
               type: use > 1 ? 'strongSequence' : 'emphasisSequence',
               start: Object.assign({}, events[index][1].start),
               end
             };
             text = {
               type: use > 1 ? 'strongText' : 'emphasisText',
               start: Object.assign({}, events[open][1].end),
               end: Object.assign({}, events[index][1].start)
             };
             group = {
               type: use > 1 ? 'strong' : 'emphasis',
               start: Object.assign({}, openingSequence.start),
               end: Object.assign({}, closingSequence.end)
             };
             events[open][1].end = Object.assign({}, openingSequence.start);
             events[index][1].start = Object.assign({}, closingSequence.end);
             nextEvents = []; // If there are more markers in the opening, add them before.

             if (events[open][1].end.offset - events[open][1].start.offset) {
               nextEvents = push(nextEvents, [
                 ['enter', events[open][1], context],
                 ['exit', events[open][1], context]
               ]);
             } // Opening.

             nextEvents = push(nextEvents, [
               ['enter', group, context],
               ['enter', openingSequence, context],
               ['exit', openingSequence, context],
               ['enter', text, context]
             ]); // Between.

             nextEvents = push(
               nextEvents,
               resolveAll(
                 context.parser.constructs.insideSpan.null,
                 events.slice(open + 1, index),
                 context
               )
             ); // Closing.

             nextEvents = push(nextEvents, [
               ['exit', text, context],
               ['enter', closingSequence, context],
               ['exit', closingSequence, context],
               ['exit', group, context]
             ]); // If there are more markers in the closing, add them after.

             if (events[index][1].end.offset - events[index][1].start.offset) {
               offset = 2;
               nextEvents = push(nextEvents, [
                 ['enter', events[index][1], context],
                 ['exit', events[index][1], context]
               ]);
             } else {
               offset = 0;
             }

             splice(events, open - 1, index - open + 3, nextEvents);
             index = open + nextEvents.length - offset - 2;
             break
           }
         }
       }
     } // Remove remaining sequences.

     index = -1;

     while (++index < events.length) {
       if (events[index][1].type === 'attentionSequence') {
         events[index][1].type = 'data';
       }
     }

     return events
   }
   /** @type {Tokenizer} */

   function tokenizeAttention(effects, ok) {
     const attentionMarkers = this.parser.constructs.attentionMarkers.null;
     const previous = this.previous;
     const before = classifyCharacter(previous);
     /** @type {NonNullable<Code>} */

     let marker;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('attentionSequence');
       marker = code;
       return sequence(code)
     }
     /** @type {State} */

     function sequence(code) {
       if (code === marker) {
         effects.consume(code);
         return sequence
       }

       const token = effects.exit('attentionSequence');
       const after = classifyCharacter(code);
       const open =
         !after || (after === 2 && before) || attentionMarkers.includes(code);
       const close =
         !before || (before === 2 && after) || attentionMarkers.includes(previous);
       token._open = Boolean(marker === 42 ? open : open && (before || !close));
       token._close = Boolean(marker === 42 ? close : close && (after || !open));
       return ok(code)
     }
   }
   /**
    * Move a point a bit.
    *
    * Note: `move` only works inside lines! It’s not possible to move past other
    * chunks (replacement characters, tabs, or line endings).
    *
    * @param {Point} point
    * @param {number} offset
    * @returns {void}
    */

   function movePoint(point, offset) {
     point.column += offset;
     point.offset += offset;
     point._bufferIndex += offset;
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    */

   /** @type {Construct} */
   const autolink = {
     name: 'autolink',
     tokenize: tokenizeAutolink
   };
   /** @type {Tokenizer} */

   function tokenizeAutolink(effects, ok, nok) {
     let size = 1;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('autolink');
       effects.enter('autolinkMarker');
       effects.consume(code);
       effects.exit('autolinkMarker');
       effects.enter('autolinkProtocol');
       return open
     }
     /** @type {State} */

     function open(code) {
       if (asciiAlpha(code)) {
         effects.consume(code);
         return schemeOrEmailAtext
       }

       return asciiAtext(code) ? emailAtext(code) : nok(code)
     }
     /** @type {State} */

     function schemeOrEmailAtext(code) {
       return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)
         ? schemeInsideOrEmailAtext(code)
         : emailAtext(code)
     }
     /** @type {State} */

     function schemeInsideOrEmailAtext(code) {
       if (code === 58) {
         effects.consume(code);
         return urlInside
       }

       if (
         (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&
         size++ < 32
       ) {
         effects.consume(code);
         return schemeInsideOrEmailAtext
       }

       return emailAtext(code)
     }
     /** @type {State} */

     function urlInside(code) {
       if (code === 62) {
         effects.exit('autolinkProtocol');
         return end(code)
       }

       if (code === null || code === 32 || code === 60 || asciiControl(code)) {
         return nok(code)
       }

       effects.consume(code);
       return urlInside
     }
     /** @type {State} */

     function emailAtext(code) {
       if (code === 64) {
         effects.consume(code);
         size = 0;
         return emailAtSignOrDot
       }

       if (asciiAtext(code)) {
         effects.consume(code);
         return emailAtext
       }

       return nok(code)
     }
     /** @type {State} */

     function emailAtSignOrDot(code) {
       return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)
     }
     /** @type {State} */

     function emailLabel(code) {
       if (code === 46) {
         effects.consume(code);
         size = 0;
         return emailAtSignOrDot
       }

       if (code === 62) {
         // Exit, then change the type.
         effects.exit('autolinkProtocol').type = 'autolinkEmail';
         return end(code)
       }

       return emailValue(code)
     }
     /** @type {State} */

     function emailValue(code) {
       if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {
         effects.consume(code);
         return code === 45 ? emailValue : emailLabel
       }

       return nok(code)
     }
     /** @type {State} */

     function end(code) {
       effects.enter('autolinkMarker');
       effects.consume(code);
       effects.exit('autolinkMarker');
       effects.exit('autolink');
       return ok
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    */

   /** @type {Construct} */
   const blankLine = {
     tokenize: tokenizeBlankLine,
     partial: true
   };
   /** @type {Tokenizer} */

   function tokenizeBlankLine(effects, ok, nok) {
     return factorySpace(effects, afterWhitespace, 'linePrefix')
     /** @type {State} */

     function afterWhitespace(code) {
       return code === null || markdownLineEnding(code) ? ok(code) : nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').Exiter} Exiter
    * @typedef {import('micromark-util-types').State} State
    */

   /** @type {Construct} */
   const blockQuote = {
     name: 'blockQuote',
     tokenize: tokenizeBlockQuoteStart,
     continuation: {
       tokenize: tokenizeBlockQuoteContinuation
     },
     exit
   };
   /** @type {Tokenizer} */

   function tokenizeBlockQuoteStart(effects, ok, nok) {
     const self = this;
     return start
     /** @type {State} */

     function start(code) {
       if (code === 62) {
         const state = self.containerState;

         if (!state.open) {
           effects.enter('blockQuote', {
             _container: true
           });
           state.open = true;
         }

         effects.enter('blockQuotePrefix');
         effects.enter('blockQuoteMarker');
         effects.consume(code);
         effects.exit('blockQuoteMarker');
         return after
       }

       return nok(code)
     }
     /** @type {State} */

     function after(code) {
       if (markdownSpace(code)) {
         effects.enter('blockQuotePrefixWhitespace');
         effects.consume(code);
         effects.exit('blockQuotePrefixWhitespace');
         effects.exit('blockQuotePrefix');
         return ok
       }

       effects.exit('blockQuotePrefix');
       return ok(code)
     }
   }
   /** @type {Tokenizer} */

   function tokenizeBlockQuoteContinuation(effects, ok, nok) {
     return factorySpace(
       effects,
       effects.attempt(blockQuote, ok, nok),
       'linePrefix',
       this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4
     )
   }
   /** @type {Exiter} */

   function exit(effects) {
     effects.exit('blockQuote');
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    */

   /** @type {Construct} */
   const characterEscape = {
     name: 'characterEscape',
     tokenize: tokenizeCharacterEscape
   };
   /** @type {Tokenizer} */

   function tokenizeCharacterEscape(effects, ok, nok) {
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('characterEscape');
       effects.enter('escapeMarker');
       effects.consume(code);
       effects.exit('escapeMarker');
       return open
     }
     /** @type {State} */

     function open(code) {
       if (asciiPunctuation(code)) {
         effects.enter('characterEscapeValue');
         effects.consume(code);
         effects.exit('characterEscapeValue');
         effects.exit('characterEscape');
         return ok
       }

       return nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Code} Code
    */

   /** @type {Construct} */
   const characterReference = {
     name: 'characterReference',
     tokenize: tokenizeCharacterReference
   };
   /** @type {Tokenizer} */

   function tokenizeCharacterReference(effects, ok, nok) {
     const self = this;
     let size = 0;
     /** @type {number} */

     let max;
     /** @type {(code: Code) => code is number} */

     let test;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('characterReference');
       effects.enter('characterReferenceMarker');
       effects.consume(code);
       effects.exit('characterReferenceMarker');
       return open
     }
     /** @type {State} */

     function open(code) {
       if (code === 35) {
         effects.enter('characterReferenceMarkerNumeric');
         effects.consume(code);
         effects.exit('characterReferenceMarkerNumeric');
         return numeric
       }

       effects.enter('characterReferenceValue');
       max = 31;
       test = asciiAlphanumeric;
       return value(code)
     }
     /** @type {State} */

     function numeric(code) {
       if (code === 88 || code === 120) {
         effects.enter('characterReferenceMarkerHexadecimal');
         effects.consume(code);
         effects.exit('characterReferenceMarkerHexadecimal');
         effects.enter('characterReferenceValue');
         max = 6;
         test = asciiHexDigit;
         return value
       }

       effects.enter('characterReferenceValue');
       max = 7;
       test = asciiDigit;
       return value(code)
     }
     /** @type {State} */

     function value(code) {
       /** @type {Token} */
       let token;

       if (code === 59 && size) {
         token = effects.exit('characterReferenceValue');

         if (
           test === asciiAlphanumeric &&
           !decodeNamedCharacterReference(self.sliceSerialize(token))
         ) {
           return nok(code)
         }

         effects.enter('characterReferenceMarker');
         effects.consume(code);
         effects.exit('characterReferenceMarker');
         effects.exit('characterReference');
         return ok
       }

       if (test(code) && size++ < max) {
         effects.consume(code);
         return value
       }

       return nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Code} Code
    */

   /** @type {Construct} */
   const codeFenced = {
     name: 'codeFenced',
     tokenize: tokenizeCodeFenced,
     concrete: true
   };
   /** @type {Tokenizer} */

   function tokenizeCodeFenced(effects, ok, nok) {
     const self = this;
     /** @type {Construct} */

     const closingFenceConstruct = {
       tokenize: tokenizeClosingFence,
       partial: true
     };
     /** @type {Construct} */

     const nonLazyLine = {
       tokenize: tokenizeNonLazyLine,
       partial: true
     };
     const tail = this.events[this.events.length - 1];
     const initialPrefix =
       tail && tail[1].type === 'linePrefix'
         ? tail[2].sliceSerialize(tail[1], true).length
         : 0;
     let sizeOpen = 0;
     /** @type {NonNullable<Code>} */

     let marker;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('codeFenced');
       effects.enter('codeFencedFence');
       effects.enter('codeFencedFenceSequence');
       marker = code;
       return sequenceOpen(code)
     }
     /** @type {State} */

     function sequenceOpen(code) {
       if (code === marker) {
         effects.consume(code);
         sizeOpen++;
         return sequenceOpen
       }

       effects.exit('codeFencedFenceSequence');
       return sizeOpen < 3
         ? nok(code)
         : factorySpace(effects, infoOpen, 'whitespace')(code)
     }
     /** @type {State} */

     function infoOpen(code) {
       if (code === null || markdownLineEnding(code)) {
         return openAfter(code)
       }

       effects.enter('codeFencedFenceInfo');
       effects.enter('chunkString', {
         contentType: 'string'
       });
       return info(code)
     }
     /** @type {State} */

     function info(code) {
       if (code === null || markdownLineEndingOrSpace(code)) {
         effects.exit('chunkString');
         effects.exit('codeFencedFenceInfo');
         return factorySpace(effects, infoAfter, 'whitespace')(code)
       }

       if (code === 96 && code === marker) return nok(code)
       effects.consume(code);
       return info
     }
     /** @type {State} */

     function infoAfter(code) {
       if (code === null || markdownLineEnding(code)) {
         return openAfter(code)
       }

       effects.enter('codeFencedFenceMeta');
       effects.enter('chunkString', {
         contentType: 'string'
       });
       return meta(code)
     }
     /** @type {State} */

     function meta(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('chunkString');
         effects.exit('codeFencedFenceMeta');
         return openAfter(code)
       }

       if (code === 96 && code === marker) return nok(code)
       effects.consume(code);
       return meta
     }
     /** @type {State} */

     function openAfter(code) {
       effects.exit('codeFencedFence');
       return self.interrupt ? ok(code) : contentStart(code)
     }
     /** @type {State} */

     function contentStart(code) {
       if (code === null) {
         return after(code)
       }

       if (markdownLineEnding(code)) {
         return effects.attempt(
           nonLazyLine,
           effects.attempt(
             closingFenceConstruct,
             after,
             initialPrefix
               ? factorySpace(
                   effects,
                   contentStart,
                   'linePrefix',
                   initialPrefix + 1
                 )
               : contentStart
           ),
           after
         )(code)
       }

       effects.enter('codeFlowValue');
       return contentContinue(code)
     }
     /** @type {State} */

     function contentContinue(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('codeFlowValue');
         return contentStart(code)
       }

       effects.consume(code);
       return contentContinue
     }
     /** @type {State} */

     function after(code) {
       effects.exit('codeFenced');
       return ok(code)
     }
     /** @type {Tokenizer} */

     function tokenizeNonLazyLine(effects, ok, nok) {
       const self = this;
       return start
       /** @type {State} */

       function start(code) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         return lineStart
       }
       /** @type {State} */

       function lineStart(code) {
         return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
       }
     }
     /** @type {Tokenizer} */

     function tokenizeClosingFence(effects, ok, nok) {
       let size = 0;
       return factorySpace(
         effects,
         closingSequenceStart,
         'linePrefix',
         this.parser.constructs.disable.null.includes('codeIndented')
           ? undefined
           : 4
       )
       /** @type {State} */

       function closingSequenceStart(code) {
         effects.enter('codeFencedFence');
         effects.enter('codeFencedFenceSequence');
         return closingSequence(code)
       }
       /** @type {State} */

       function closingSequence(code) {
         if (code === marker) {
           effects.consume(code);
           size++;
           return closingSequence
         }

         if (size < sizeOpen) return nok(code)
         effects.exit('codeFencedFenceSequence');
         return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)
       }
       /** @type {State} */

       function closingSequenceEnd(code) {
         if (code === null || markdownLineEnding(code)) {
           effects.exit('codeFencedFence');
           return ok(code)
         }

         return nok(code)
       }
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').State} State
    */

   /** @type {Construct} */
   const codeIndented = {
     name: 'codeIndented',
     tokenize: tokenizeCodeIndented
   };
   /** @type {Construct} */

   const indentedContent = {
     tokenize: tokenizeIndentedContent,
     partial: true
   };
   /** @type {Tokenizer} */

   function tokenizeCodeIndented(effects, ok, nok) {
     const self = this;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('codeIndented');
       return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)
     }
     /** @type {State} */

     function afterStartPrefix(code) {
       const tail = self.events[self.events.length - 1];
       return tail &&
         tail[1].type === 'linePrefix' &&
         tail[2].sliceSerialize(tail[1], true).length >= 4
         ? afterPrefix(code)
         : nok(code)
     }
     /** @type {State} */

     function afterPrefix(code) {
       if (code === null) {
         return after(code)
       }

       if (markdownLineEnding(code)) {
         return effects.attempt(indentedContent, afterPrefix, after)(code)
       }

       effects.enter('codeFlowValue');
       return content(code)
     }
     /** @type {State} */

     function content(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('codeFlowValue');
         return afterPrefix(code)
       }

       effects.consume(code);
       return content
     }
     /** @type {State} */

     function after(code) {
       effects.exit('codeIndented');
       return ok(code)
     }
   }
   /** @type {Tokenizer} */

   function tokenizeIndentedContent(effects, ok, nok) {
     const self = this;
     return start
     /** @type {State} */

     function start(code) {
       // If this is a lazy line, it can’t be code.
       if (self.parser.lazy[self.now().line]) {
         return nok(code)
       }

       if (markdownLineEnding(code)) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         return start
       }

       return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)
     }
     /** @type {State} */

     function afterPrefix(code) {
       const tail = self.events[self.events.length - 1];
       return tail &&
         tail[1].type === 'linePrefix' &&
         tail[2].sliceSerialize(tail[1], true).length >= 4
         ? ok(code)
         : markdownLineEnding(code)
         ? start(code)
         : nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').Previous} Previous
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').State} State
    */

   /** @type {Construct} */
   const codeText = {
     name: 'codeText',
     tokenize: tokenizeCodeText,
     resolve: resolveCodeText,
     previous
   };
   /** @type {Resolver} */

   function resolveCodeText(events) {
     let tailExitIndex = events.length - 4;
     let headEnterIndex = 3;
     /** @type {number} */

     let index;
     /** @type {number|undefined} */

     let enter; // If we start and end with an EOL or a space.

     if (
       (events[headEnterIndex][1].type === 'lineEnding' ||
         events[headEnterIndex][1].type === 'space') &&
       (events[tailExitIndex][1].type === 'lineEnding' ||
         events[tailExitIndex][1].type === 'space')
     ) {
       index = headEnterIndex; // And we have data.

       while (++index < tailExitIndex) {
         if (events[index][1].type === 'codeTextData') {
           // Then we have padding.
           events[headEnterIndex][1].type = 'codeTextPadding';
           events[tailExitIndex][1].type = 'codeTextPadding';
           headEnterIndex += 2;
           tailExitIndex -= 2;
           break
         }
       }
     } // Merge adjacent spaces and data.

     index = headEnterIndex - 1;
     tailExitIndex++;

     while (++index <= tailExitIndex) {
       if (enter === undefined) {
         if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {
           enter = index;
         }
       } else if (
         index === tailExitIndex ||
         events[index][1].type === 'lineEnding'
       ) {
         events[enter][1].type = 'codeTextData';

         if (index !== enter + 2) {
           events[enter][1].end = events[index - 1][1].end;
           events.splice(enter + 2, index - enter - 2);
           tailExitIndex -= index - enter - 2;
           index = enter + 2;
         }

         enter = undefined;
       }
     }

     return events
   }
   /** @type {Previous} */

   function previous(code) {
     // If there is a previous code, there will always be a tail.
     return (
       code !== 96 ||
       this.events[this.events.length - 1][1].type === 'characterEscape'
     )
   }
   /** @type {Tokenizer} */

   function tokenizeCodeText(effects, ok, nok) {
     let sizeOpen = 0;
     /** @type {number} */

     let size;
     /** @type {Token} */

     let token;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('codeText');
       effects.enter('codeTextSequence');
       return openingSequence(code)
     }
     /** @type {State} */

     function openingSequence(code) {
       if (code === 96) {
         effects.consume(code);
         sizeOpen++;
         return openingSequence
       }

       effects.exit('codeTextSequence');
       return gap(code)
     }
     /** @type {State} */

     function gap(code) {
       // EOF.
       if (code === null) {
         return nok(code)
       } // Closing fence?
       // Could also be data.

       if (code === 96) {
         token = effects.enter('codeTextSequence');
         size = 0;
         return closingSequence(code)
       } // Tabs don’t work, and virtual spaces don’t make sense.

       if (code === 32) {
         effects.enter('space');
         effects.consume(code);
         effects.exit('space');
         return gap
       }

       if (markdownLineEnding(code)) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         return gap
       } // Data.

       effects.enter('codeTextData');
       return data(code)
     } // In code.

     /** @type {State} */

     function data(code) {
       if (
         code === null ||
         code === 32 ||
         code === 96 ||
         markdownLineEnding(code)
       ) {
         effects.exit('codeTextData');
         return gap(code)
       }

       effects.consume(code);
       return data
     } // Closing fence.

     /** @type {State} */

     function closingSequence(code) {
       // More.
       if (code === 96) {
         effects.consume(code);
         size++;
         return closingSequence
       } // Done!

       if (size === sizeOpen) {
         effects.exit('codeTextSequence');
         effects.exit('codeText');
         return ok(code)
       } // More or less accents: mark as data.

       token.type = 'codeTextData';
       return data(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').Chunk} Chunk
    * @typedef {import('micromark-util-types').Event} Event
    */

   /**
    * Tokenize subcontent.
    *
    * @param {Event[]} events
    * @returns {boolean}
    */
   function subtokenize(events) {
     /** @type {Record<string, number>} */
     const jumps = {};
     let index = -1;
     /** @type {Event} */

     let event;
     /** @type {number|undefined} */

     let lineIndex;
     /** @type {number} */

     let otherIndex;
     /** @type {Event} */

     let otherEvent;
     /** @type {Event[]} */

     let parameters;
     /** @type {Event[]} */

     let subevents;
     /** @type {boolean|undefined} */

     let more;

     while (++index < events.length) {
       while (index in jumps) {
         index = jumps[index];
       }

       event = events[index]; // Add a hook for the GFM tasklist extension, which needs to know if text
       // is in the first content of a list item.

       if (
         index &&
         event[1].type === 'chunkFlow' &&
         events[index - 1][1].type === 'listItemPrefix'
       ) {
         subevents = event[1]._tokenizer.events;
         otherIndex = 0;

         if (
           otherIndex < subevents.length &&
           subevents[otherIndex][1].type === 'lineEndingBlank'
         ) {
           otherIndex += 2;
         }

         if (
           otherIndex < subevents.length &&
           subevents[otherIndex][1].type === 'content'
         ) {
           while (++otherIndex < subevents.length) {
             if (subevents[otherIndex][1].type === 'content') {
               break
             }

             if (subevents[otherIndex][1].type === 'chunkText') {
               subevents[otherIndex][1]._isInFirstContentOfListItem = true;
               otherIndex++;
             }
           }
         }
       } // Enter.

       if (event[0] === 'enter') {
         if (event[1].contentType) {
           Object.assign(jumps, subcontent(events, index));
           index = jumps[index];
           more = true;
         }
       } // Exit.
       else if (event[1]._container) {
         otherIndex = index;
         lineIndex = undefined;

         while (otherIndex--) {
           otherEvent = events[otherIndex];

           if (
             otherEvent[1].type === 'lineEnding' ||
             otherEvent[1].type === 'lineEndingBlank'
           ) {
             if (otherEvent[0] === 'enter') {
               if (lineIndex) {
                 events[lineIndex][1].type = 'lineEndingBlank';
               }

               otherEvent[1].type = 'lineEnding';
               lineIndex = otherIndex;
             }
           } else {
             break
           }
         }

         if (lineIndex) {
           // Fix position.
           event[1].end = Object.assign({}, events[lineIndex][1].start); // Switch container exit w/ line endings.

           parameters = events.slice(lineIndex, index);
           parameters.unshift(event);
           splice(events, lineIndex, index - lineIndex + 1, parameters);
         }
       }
     }

     return !more
   }
   /**
    * Tokenize embedded tokens.
    *
    * @param {Event[]} events
    * @param {number} eventIndex
    * @returns {Record<string, number>}
    */

   function subcontent(events, eventIndex) {
     const token = events[eventIndex][1];
     const context = events[eventIndex][2];
     let startPosition = eventIndex - 1;
     /** @type {number[]} */

     const startPositions = [];
     const tokenizer =
       token._tokenizer || context.parser[token.contentType](token.start);
     const childEvents = tokenizer.events;
     /** @type {[number, number][]} */

     const jumps = [];
     /** @type {Record<string, number>} */

     const gaps = {};
     /** @type {Chunk[]} */

     let stream;
     /** @type {Token|undefined} */

     let previous;
     let index = -1;
     /** @type {Token|undefined} */

     let current = token;
     let adjust = 0;
     let start = 0;
     const breaks = [start]; // Loop forward through the linked tokens to pass them in order to the
     // subtokenizer.

     while (current) {
       // Find the position of the event for this token.
       while (events[++startPosition][1] !== current) {
         // Empty.
       }

       startPositions.push(startPosition);

       if (!current._tokenizer) {
         stream = context.sliceStream(current);

         if (!current.next) {
           stream.push(null);
         }

         if (previous) {
           tokenizer.defineSkip(current.start);
         }

         if (current._isInFirstContentOfListItem) {
           tokenizer._gfmTasklistFirstContentOfListItem = true;
         }

         tokenizer.write(stream);

         if (current._isInFirstContentOfListItem) {
           tokenizer._gfmTasklistFirstContentOfListItem = undefined;
         }
       } // Unravel the next token.

       previous = current;
       current = current.next;
     } // Now, loop back through all events (and linked tokens), to figure out which
     // parts belong where.

     current = token;

     while (++index < childEvents.length) {
       if (
         // Find a void token that includes a break.
         childEvents[index][0] === 'exit' &&
         childEvents[index - 1][0] === 'enter' &&
         childEvents[index][1].type === childEvents[index - 1][1].type &&
         childEvents[index][1].start.line !== childEvents[index][1].end.line
       ) {
         start = index + 1;
         breaks.push(start); // Help GC.

         current._tokenizer = undefined;
         current.previous = undefined;
         current = current.next;
       }
     } // Help GC.

     tokenizer.events = []; // If there’s one more token (which is the cases for lines that end in an
     // EOF), that’s perfect: the last point we found starts it.
     // If there isn’t then make sure any remaining content is added to it.

     if (current) {
       // Help GC.
       current._tokenizer = undefined;
       current.previous = undefined;
     } else {
       breaks.pop();
     } // Now splice the events from the subtokenizer into the current events,
     // moving back to front so that splice indices aren’t affected.

     index = breaks.length;

     while (index--) {
       const slice = childEvents.slice(breaks[index], breaks[index + 1]);
       const start = startPositions.pop();
       jumps.unshift([start, start + slice.length - 1]);
       splice(events, start, 2, slice);
     }

     index = -1;

     while (++index < jumps.length) {
       gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
       adjust += jumps[index][1] - jumps[index][0] - 1;
     }

     return gaps
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').State} State
    */

   /**
    * No name because it must not be turned off.
    * @type {Construct}
    */
   const content$2 = {
     tokenize: tokenizeContent,
     resolve: resolveContent
   };
   /** @type {Construct} */

   const continuationConstruct = {
     tokenize: tokenizeContinuation,
     partial: true
   };
   /**
    * Content is transparent: it’s parsed right now. That way, definitions are also
    * parsed right now: before text in paragraphs (specifically, media) are parsed.
    *
    * @type {Resolver}
    */

   function resolveContent(events) {
     subtokenize(events);
     return events
   }
   /** @type {Tokenizer} */

   function tokenizeContent(effects, ok) {
     /** @type {Token} */
     let previous;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('content');
       previous = effects.enter('chunkContent', {
         contentType: 'content'
       });
       return data(code)
     }
     /** @type {State} */

     function data(code) {
       if (code === null) {
         return contentEnd(code)
       }

       if (markdownLineEnding(code)) {
         return effects.check(
           continuationConstruct,
           contentContinue,
           contentEnd
         )(code)
       } // Data.

       effects.consume(code);
       return data
     }
     /** @type {State} */

     function contentEnd(code) {
       effects.exit('chunkContent');
       effects.exit('content');
       return ok(code)
     }
     /** @type {State} */

     function contentContinue(code) {
       effects.consume(code);
       effects.exit('chunkContent');
       previous.next = effects.enter('chunkContent', {
         contentType: 'content',
         previous
       });
       previous = previous.next;
       return data
     }
   }
   /** @type {Tokenizer} */

   function tokenizeContinuation(effects, ok, nok) {
     const self = this;
     return startLookahead
     /** @type {State} */

     function startLookahead(code) {
       effects.exit('chunkContent');
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       return factorySpace(effects, prefixed, 'linePrefix')
     }
     /** @type {State} */

     function prefixed(code) {
       if (code === null || markdownLineEnding(code)) {
         return nok(code)
       }

       const tail = self.events[self.events.length - 1];

       if (
         !self.parser.constructs.disable.null.includes('codeIndented') &&
         tail &&
         tail[1].type === 'linePrefix' &&
         tail[2].sliceSerialize(tail[1], true).length >= 4
       ) {
         return ok(code)
       }

       return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    */

   /**
    * @param {Effects} effects
    * @param {State} ok
    * @param {State} nok
    * @param {string} type
    * @param {string} literalType
    * @param {string} literalMarkerType
    * @param {string} rawType
    * @param {string} stringType
    * @param {number} [max=Infinity]
    * @returns {State}
    */
   // eslint-disable-next-line max-params
   function factoryDestination(
     effects,
     ok,
     nok,
     type,
     literalType,
     literalMarkerType,
     rawType,
     stringType,
     max
   ) {
     const limit = max || Number.POSITIVE_INFINITY;
     let balance = 0;
     return start
     /** @type {State} */

     function start(code) {
       if (code === 60) {
         effects.enter(type);
         effects.enter(literalType);
         effects.enter(literalMarkerType);
         effects.consume(code);
         effects.exit(literalMarkerType);
         return destinationEnclosedBefore
       }

       if (code === null || code === 41 || asciiControl(code)) {
         return nok(code)
       }

       effects.enter(type);
       effects.enter(rawType);
       effects.enter(stringType);
       effects.enter('chunkString', {
         contentType: 'string'
       });
       return destinationRaw(code)
     }
     /** @type {State} */

     function destinationEnclosedBefore(code) {
       if (code === 62) {
         effects.enter(literalMarkerType);
         effects.consume(code);
         effects.exit(literalMarkerType);
         effects.exit(literalType);
         effects.exit(type);
         return ok
       }

       effects.enter(stringType);
       effects.enter('chunkString', {
         contentType: 'string'
       });
       return destinationEnclosed(code)
     }
     /** @type {State} */

     function destinationEnclosed(code) {
       if (code === 62) {
         effects.exit('chunkString');
         effects.exit(stringType);
         return destinationEnclosedBefore(code)
       }

       if (code === null || code === 60 || markdownLineEnding(code)) {
         return nok(code)
       }

       effects.consume(code);
       return code === 92 ? destinationEnclosedEscape : destinationEnclosed
     }
     /** @type {State} */

     function destinationEnclosedEscape(code) {
       if (code === 60 || code === 62 || code === 92) {
         effects.consume(code);
         return destinationEnclosed
       }

       return destinationEnclosed(code)
     }
     /** @type {State} */

     function destinationRaw(code) {
       if (code === 40) {
         if (++balance > limit) return nok(code)
         effects.consume(code);
         return destinationRaw
       }

       if (code === 41) {
         if (!balance--) {
           effects.exit('chunkString');
           effects.exit(stringType);
           effects.exit(rawType);
           effects.exit(type);
           return ok(code)
         }

         effects.consume(code);
         return destinationRaw
       }

       if (code === null || markdownLineEndingOrSpace(code)) {
         if (balance) return nok(code)
         effects.exit('chunkString');
         effects.exit(stringType);
         effects.exit(rawType);
         effects.exit(type);
         return ok(code)
       }

       if (asciiControl(code)) return nok(code)
       effects.consume(code);
       return code === 92 ? destinationRawEscape : destinationRaw
     }
     /** @type {State} */

     function destinationRawEscape(code) {
       if (code === 40 || code === 41 || code === 92) {
         effects.consume(code);
         return destinationRaw
       }

       return destinationRaw(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').State} State
    */

   /**
    * @this {TokenizeContext}
    * @param {Effects} effects
    * @param {State} ok
    * @param {State} nok
    * @param {string} type
    * @param {string} markerType
    * @param {string} stringType
    * @returns {State}
    */
   // eslint-disable-next-line max-params
   function factoryLabel(effects, ok, nok, type, markerType, stringType) {
     const self = this;
     let size = 0;
     /** @type {boolean} */

     let data;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter(type);
       effects.enter(markerType);
       effects.consume(code);
       effects.exit(markerType);
       effects.enter(stringType);
       return atBreak
     }
     /** @type {State} */

     function atBreak(code) {
       if (
         code === null ||
         code === 91 ||
         (code === 93 && !data) ||
         /* To do: remove in the future once we’ve switched from
          * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
          * which doesn’t need this */

         /* Hidden footnotes hook */

         /* c8 ignore next 3 */
         (code === 94 &&
           !size &&
           '_hiddenFootnoteSupport' in self.parser.constructs) ||
         size > 999
       ) {
         return nok(code)
       }

       if (code === 93) {
         effects.exit(stringType);
         effects.enter(markerType);
         effects.consume(code);
         effects.exit(markerType);
         effects.exit(type);
         return ok
       }

       if (markdownLineEnding(code)) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         return atBreak
       }

       effects.enter('chunkString', {
         contentType: 'string'
       });
       return label(code)
     }
     /** @type {State} */

     function label(code) {
       if (
         code === null ||
         code === 91 ||
         code === 93 ||
         markdownLineEnding(code) ||
         size++ > 999
       ) {
         effects.exit('chunkString');
         return atBreak(code)
       }

       effects.consume(code);
       data = data || !markdownSpace(code);
       return code === 92 ? labelEscape : label
     }
     /** @type {State} */

     function labelEscape(code) {
       if (code === 91 || code === 92 || code === 93) {
         effects.consume(code);
         size++;
         return label
       }

       return label(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Code} Code
    */

   /**
    * @param {Effects} effects
    * @param {State} ok
    * @param {State} nok
    * @param {string} type
    * @param {string} markerType
    * @param {string} stringType
    * @returns {State}
    */
   // eslint-disable-next-line max-params
   function factoryTitle(effects, ok, nok, type, markerType, stringType) {
     /** @type {NonNullable<Code>} */
     let marker;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter(type);
       effects.enter(markerType);
       effects.consume(code);
       effects.exit(markerType);
       marker = code === 40 ? 41 : code;
       return atFirstTitleBreak
     }
     /** @type {State} */

     function atFirstTitleBreak(code) {
       if (code === marker) {
         effects.enter(markerType);
         effects.consume(code);
         effects.exit(markerType);
         effects.exit(type);
         return ok
       }

       effects.enter(stringType);
       return atTitleBreak(code)
     }
     /** @type {State} */

     function atTitleBreak(code) {
       if (code === marker) {
         effects.exit(stringType);
         return atFirstTitleBreak(marker)
       }

       if (code === null) {
         return nok(code)
       } // Note: blank lines can’t exist in content.

       if (markdownLineEnding(code)) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         return factorySpace(effects, atTitleBreak, 'linePrefix')
       }

       effects.enter('chunkString', {
         contentType: 'string'
       });
       return title(code)
     }
     /** @type {State} */

     function title(code) {
       if (code === marker || code === null || markdownLineEnding(code)) {
         effects.exit('chunkString');
         return atTitleBreak(code)
       }

       effects.consume(code);
       return code === 92 ? titleEscape : title
     }
     /** @type {State} */

     function titleEscape(code) {
       if (code === marker || code === 92) {
         effects.consume(code);
         return title
       }

       return title(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    */

   /**
    * @param {Effects} effects
    * @param {State} ok
    */
   function factoryWhitespace(effects, ok) {
     /** @type {boolean} */
     let seen;
     return start
     /** @type {State} */

     function start(code) {
       if (markdownLineEnding(code)) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         seen = true;
         return start
       }

       if (markdownSpace(code)) {
         return factorySpace(
           effects,
           start,
           seen ? 'linePrefix' : 'lineSuffix'
         )(code)
       }

       return ok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    */

   /** @type {Construct} */
   const definition$1 = {
     name: 'definition',
     tokenize: tokenizeDefinition
   };
   /** @type {Construct} */

   const titleConstruct = {
     tokenize: tokenizeTitle,
     partial: true
   };
   /** @type {Tokenizer} */

   function tokenizeDefinition(effects, ok, nok) {
     const self = this;
     /** @type {string} */

     let identifier;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('definition');
       return factoryLabel.call(
         self,
         effects,
         labelAfter,
         nok,
         'definitionLabel',
         'definitionLabelMarker',
         'definitionLabelString'
       )(code)
     }
     /** @type {State} */

     function labelAfter(code) {
       identifier = normalizeIdentifier(
         self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
       );

       if (code === 58) {
         effects.enter('definitionMarker');
         effects.consume(code);
         effects.exit('definitionMarker'); // Note: blank lines can’t exist in content.

         return factoryWhitespace(
           effects,
           factoryDestination(
             effects,
             effects.attempt(
               titleConstruct,
               factorySpace(effects, after, 'whitespace'),
               factorySpace(effects, after, 'whitespace')
             ),
             nok,
             'definitionDestination',
             'definitionDestinationLiteral',
             'definitionDestinationLiteralMarker',
             'definitionDestinationRaw',
             'definitionDestinationString'
           )
         )
       }

       return nok(code)
     }
     /** @type {State} */

     function after(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('definition');

         if (!self.parser.defined.includes(identifier)) {
           self.parser.defined.push(identifier);
         }

         return ok(code)
       }

       return nok(code)
     }
   }
   /** @type {Tokenizer} */

   function tokenizeTitle(effects, ok, nok) {
     return start
     /** @type {State} */

     function start(code) {
       return markdownLineEndingOrSpace(code)
         ? factoryWhitespace(effects, before)(code)
         : nok(code)
     }
     /** @type {State} */

     function before(code) {
       if (code === 34 || code === 39 || code === 40) {
         return factoryTitle(
           effects,
           factorySpace(effects, after, 'whitespace'),
           nok,
           'definitionTitle',
           'definitionTitleMarker',
           'definitionTitleString'
         )(code)
       }

       return nok(code)
     }
     /** @type {State} */

     function after(code) {
       return code === null || markdownLineEnding(code) ? ok(code) : nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    */

   /** @type {Construct} */
   const hardBreakEscape = {
     name: 'hardBreakEscape',
     tokenize: tokenizeHardBreakEscape
   };
   /** @type {Tokenizer} */

   function tokenizeHardBreakEscape(effects, ok, nok) {
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('hardBreakEscape');
       effects.enter('escapeMarker');
       effects.consume(code);
       return open
     }
     /** @type {State} */

     function open(code) {
       if (markdownLineEnding(code)) {
         effects.exit('escapeMarker');
         effects.exit('hardBreakEscape');
         return ok(code)
       }

       return nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').State} State
    */

   /** @type {Construct} */
   const headingAtx = {
     name: 'headingAtx',
     tokenize: tokenizeHeadingAtx,
     resolve: resolveHeadingAtx
   };
   /** @type {Resolver} */

   function resolveHeadingAtx(events, context) {
     let contentEnd = events.length - 2;
     let contentStart = 3;
     /** @type {Token} */

     let content;
     /** @type {Token} */

     let text; // Prefix whitespace, part of the opening.

     if (events[contentStart][1].type === 'whitespace') {
       contentStart += 2;
     } // Suffix whitespace, part of the closing.

     if (
       contentEnd - 2 > contentStart &&
       events[contentEnd][1].type === 'whitespace'
     ) {
       contentEnd -= 2;
     }

     if (
       events[contentEnd][1].type === 'atxHeadingSequence' &&
       (contentStart === contentEnd - 1 ||
         (contentEnd - 4 > contentStart &&
           events[contentEnd - 2][1].type === 'whitespace'))
     ) {
       contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
     }

     if (contentEnd > contentStart) {
       content = {
         type: 'atxHeadingText',
         start: events[contentStart][1].start,
         end: events[contentEnd][1].end
       };
       text = {
         type: 'chunkText',
         start: events[contentStart][1].start,
         end: events[contentEnd][1].end,
         // @ts-expect-error Constants are fine to assign.
         contentType: 'text'
       };
       splice(events, contentStart, contentEnd - contentStart + 1, [
         ['enter', content, context],
         ['enter', text, context],
         ['exit', text, context],
         ['exit', content, context]
       ]);
     }

     return events
   }
   /** @type {Tokenizer} */

   function tokenizeHeadingAtx(effects, ok, nok) {
     const self = this;
     let size = 0;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('atxHeading');
       effects.enter('atxHeadingSequence');
       return fenceOpenInside(code)
     }
     /** @type {State} */

     function fenceOpenInside(code) {
       if (code === 35 && size++ < 6) {
         effects.consume(code);
         return fenceOpenInside
       }

       if (code === null || markdownLineEndingOrSpace(code)) {
         effects.exit('atxHeadingSequence');
         return self.interrupt ? ok(code) : headingBreak(code)
       }

       return nok(code)
     }
     /** @type {State} */

     function headingBreak(code) {
       if (code === 35) {
         effects.enter('atxHeadingSequence');
         return sequence(code)
       }

       if (code === null || markdownLineEnding(code)) {
         effects.exit('atxHeading');
         return ok(code)
       }

       if (markdownSpace(code)) {
         return factorySpace(effects, headingBreak, 'whitespace')(code)
       }

       effects.enter('atxHeadingText');
       return data(code)
     }
     /** @type {State} */

     function sequence(code) {
       if (code === 35) {
         effects.consume(code);
         return sequence
       }

       effects.exit('atxHeadingSequence');
       return headingBreak(code)
     }
     /** @type {State} */

     function data(code) {
       if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {
         effects.exit('atxHeadingText');
         return headingBreak(code)
       }

       effects.consume(code);
       return data
     }
   }

   /**
    * List of lowercase HTML tag names which when parsing HTML (flow), result
    * in more relaxed rules (condition 6): because they are known blocks, the
    * HTML-like syntax doesn’t have to be strictly parsed.
    * For tag names not in this list, a more strict algorithm (condition 7) is used
    * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
    *
    * This is copied from:
    * <https://spec.commonmark.org/0.30/#html-blocks>.
    */
   const htmlBlockNames = [
     'address',
     'article',
     'aside',
     'base',
     'basefont',
     'blockquote',
     'body',
     'caption',
     'center',
     'col',
     'colgroup',
     'dd',
     'details',
     'dialog',
     'dir',
     'div',
     'dl',
     'dt',
     'fieldset',
     'figcaption',
     'figure',
     'footer',
     'form',
     'frame',
     'frameset',
     'h1',
     'h2',
     'h3',
     'h4',
     'h5',
     'h6',
     'head',
     'header',
     'hr',
     'html',
     'iframe',
     'legend',
     'li',
     'link',
     'main',
     'menu',
     'menuitem',
     'nav',
     'noframes',
     'ol',
     'optgroup',
     'option',
     'p',
     'param',
     'section',
     'summary',
     'table',
     'tbody',
     'td',
     'tfoot',
     'th',
     'thead',
     'title',
     'tr',
     'track',
     'ul'
   ];

   /**
    * List of lowercase HTML tag names which when parsing HTML (flow), result in
    * HTML that can include lines w/o exiting, until a closing tag also in this
    * list is found (condition 1).
    *
    * This module is copied from:
    * <https://spec.commonmark.org/0.30/#html-blocks>.
    *
    * Note that `textarea` was added in `CommonMark@0.30`.
    */
   const htmlRawNames = ['pre', 'script', 'style', 'textarea'];

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Code} Code
    */
   /** @type {Construct} */

   const htmlFlow = {
     name: 'htmlFlow',
     tokenize: tokenizeHtmlFlow,
     resolveTo: resolveToHtmlFlow,
     concrete: true
   };
   /** @type {Construct} */

   const nextBlankConstruct = {
     tokenize: tokenizeNextBlank,
     partial: true
   };
   /** @type {Resolver} */

   function resolveToHtmlFlow(events) {
     let index = events.length;

     while (index--) {
       if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {
         break
       }
     }

     if (index > 1 && events[index - 2][1].type === 'linePrefix') {
       // Add the prefix start to the HTML token.
       events[index][1].start = events[index - 2][1].start; // Add the prefix start to the HTML line token.

       events[index + 1][1].start = events[index - 2][1].start; // Remove the line prefix.

       events.splice(index - 2, 2);
     }

     return events
   }
   /** @type {Tokenizer} */

   function tokenizeHtmlFlow(effects, ok, nok) {
     const self = this;
     /** @type {number} */

     let kind;
     /** @type {boolean} */

     let startTag;
     /** @type {string} */

     let buffer;
     /** @type {number} */

     let index;
     /** @type {Code} */

     let marker;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('htmlFlow');
       effects.enter('htmlFlowData');
       effects.consume(code);
       return open
     }
     /** @type {State} */

     function open(code) {
       if (code === 33) {
         effects.consume(code);
         return declarationStart
       }

       if (code === 47) {
         effects.consume(code);
         return tagCloseStart
       }

       if (code === 63) {
         effects.consume(code);
         kind = 3; // While we’re in an instruction instead of a declaration, we’re on a `?`
         // right now, so we do need to search for `>`, similar to declarations.

         return self.interrupt ? ok : continuationDeclarationInside
       }

       if (asciiAlpha(code)) {
         effects.consume(code);
         buffer = String.fromCharCode(code);
         startTag = true;
         return tagName
       }

       return nok(code)
     }
     /** @type {State} */

     function declarationStart(code) {
       if (code === 45) {
         effects.consume(code);
         kind = 2;
         return commentOpenInside
       }

       if (code === 91) {
         effects.consume(code);
         kind = 5;
         buffer = 'CDATA[';
         index = 0;
         return cdataOpenInside
       }

       if (asciiAlpha(code)) {
         effects.consume(code);
         kind = 4;
         return self.interrupt ? ok : continuationDeclarationInside
       }

       return nok(code)
     }
     /** @type {State} */

     function commentOpenInside(code) {
       if (code === 45) {
         effects.consume(code);
         return self.interrupt ? ok : continuationDeclarationInside
       }

       return nok(code)
     }
     /** @type {State} */

     function cdataOpenInside(code) {
       if (code === buffer.charCodeAt(index++)) {
         effects.consume(code);
         return index === buffer.length
           ? self.interrupt
             ? ok
             : continuation
           : cdataOpenInside
       }

       return nok(code)
     }
     /** @type {State} */

     function tagCloseStart(code) {
       if (asciiAlpha(code)) {
         effects.consume(code);
         buffer = String.fromCharCode(code);
         return tagName
       }

       return nok(code)
     }
     /** @type {State} */

     function tagName(code) {
       if (
         code === null ||
         code === 47 ||
         code === 62 ||
         markdownLineEndingOrSpace(code)
       ) {
         if (
           code !== 47 &&
           startTag &&
           htmlRawNames.includes(buffer.toLowerCase())
         ) {
           kind = 1;
           return self.interrupt ? ok(code) : continuation(code)
         }

         if (htmlBlockNames.includes(buffer.toLowerCase())) {
           kind = 6;

           if (code === 47) {
             effects.consume(code);
             return basicSelfClosing
           }

           return self.interrupt ? ok(code) : continuation(code)
         }

         kind = 7; // Do not support complete HTML when interrupting

         return self.interrupt && !self.parser.lazy[self.now().line]
           ? nok(code)
           : startTag
           ? completeAttributeNameBefore(code)
           : completeClosingTagAfter(code)
       }

       if (code === 45 || asciiAlphanumeric(code)) {
         effects.consume(code);
         buffer += String.fromCharCode(code);
         return tagName
       }

       return nok(code)
     }
     /** @type {State} */

     function basicSelfClosing(code) {
       if (code === 62) {
         effects.consume(code);
         return self.interrupt ? ok : continuation
       }

       return nok(code)
     }
     /** @type {State} */

     function completeClosingTagAfter(code) {
       if (markdownSpace(code)) {
         effects.consume(code);
         return completeClosingTagAfter
       }

       return completeEnd(code)
     }
     /** @type {State} */

     function completeAttributeNameBefore(code) {
       if (code === 47) {
         effects.consume(code);
         return completeEnd
       }

       if (code === 58 || code === 95 || asciiAlpha(code)) {
         effects.consume(code);
         return completeAttributeName
       }

       if (markdownSpace(code)) {
         effects.consume(code);
         return completeAttributeNameBefore
       }

       return completeEnd(code)
     }
     /** @type {State} */

     function completeAttributeName(code) {
       if (
         code === 45 ||
         code === 46 ||
         code === 58 ||
         code === 95 ||
         asciiAlphanumeric(code)
       ) {
         effects.consume(code);
         return completeAttributeName
       }

       return completeAttributeNameAfter(code)
     }
     /** @type {State} */

     function completeAttributeNameAfter(code) {
       if (code === 61) {
         effects.consume(code);
         return completeAttributeValueBefore
       }

       if (markdownSpace(code)) {
         effects.consume(code);
         return completeAttributeNameAfter
       }

       return completeAttributeNameBefore(code)
     }
     /** @type {State} */

     function completeAttributeValueBefore(code) {
       if (
         code === null ||
         code === 60 ||
         code === 61 ||
         code === 62 ||
         code === 96
       ) {
         return nok(code)
       }

       if (code === 34 || code === 39) {
         effects.consume(code);
         marker = code;
         return completeAttributeValueQuoted
       }

       if (markdownSpace(code)) {
         effects.consume(code);
         return completeAttributeValueBefore
       }

       marker = null;
       return completeAttributeValueUnquoted(code)
     }
     /** @type {State} */

     function completeAttributeValueQuoted(code) {
       if (code === null || markdownLineEnding(code)) {
         return nok(code)
       }

       if (code === marker) {
         effects.consume(code);
         return completeAttributeValueQuotedAfter
       }

       effects.consume(code);
       return completeAttributeValueQuoted
     }
     /** @type {State} */

     function completeAttributeValueUnquoted(code) {
       if (
         code === null ||
         code === 34 ||
         code === 39 ||
         code === 60 ||
         code === 61 ||
         code === 62 ||
         code === 96 ||
         markdownLineEndingOrSpace(code)
       ) {
         return completeAttributeNameAfter(code)
       }

       effects.consume(code);
       return completeAttributeValueUnquoted
     }
     /** @type {State} */

     function completeAttributeValueQuotedAfter(code) {
       if (code === 47 || code === 62 || markdownSpace(code)) {
         return completeAttributeNameBefore(code)
       }

       return nok(code)
     }
     /** @type {State} */

     function completeEnd(code) {
       if (code === 62) {
         effects.consume(code);
         return completeAfter
       }

       return nok(code)
     }
     /** @type {State} */

     function completeAfter(code) {
       if (markdownSpace(code)) {
         effects.consume(code);
         return completeAfter
       }

       return code === null || markdownLineEnding(code)
         ? continuation(code)
         : nok(code)
     }
     /** @type {State} */

     function continuation(code) {
       if (code === 45 && kind === 2) {
         effects.consume(code);
         return continuationCommentInside
       }

       if (code === 60 && kind === 1) {
         effects.consume(code);
         return continuationRawTagOpen
       }

       if (code === 62 && kind === 4) {
         effects.consume(code);
         return continuationClose
       }

       if (code === 63 && kind === 3) {
         effects.consume(code);
         return continuationDeclarationInside
       }

       if (code === 93 && kind === 5) {
         effects.consume(code);
         return continuationCharacterDataInside
       }

       if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {
         return effects.check(
           nextBlankConstruct,
           continuationClose,
           continuationAtLineEnding
         )(code)
       }

       if (code === null || markdownLineEnding(code)) {
         return continuationAtLineEnding(code)
       }

       effects.consume(code);
       return continuation
     }
     /** @type {State} */

     function continuationAtLineEnding(code) {
       effects.exit('htmlFlowData');
       return htmlContinueStart(code)
     }
     /** @type {State} */

     function htmlContinueStart(code) {
       if (code === null) {
         return done(code)
       }

       if (markdownLineEnding(code)) {
         return effects.attempt(
           {
             tokenize: htmlLineEnd,
             partial: true
           },
           htmlContinueStart,
           done
         )(code)
       }

       effects.enter('htmlFlowData');
       return continuation(code)
     }
     /** @type {Tokenizer} */

     function htmlLineEnd(effects, ok, nok) {
       return start
       /** @type {State} */

       function start(code) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         return lineStart
       }
       /** @type {State} */

       function lineStart(code) {
         return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
       }
     }
     /** @type {State} */

     function continuationCommentInside(code) {
       if (code === 45) {
         effects.consume(code);
         return continuationDeclarationInside
       }

       return continuation(code)
     }
     /** @type {State} */

     function continuationRawTagOpen(code) {
       if (code === 47) {
         effects.consume(code);
         buffer = '';
         return continuationRawEndTag
       }

       return continuation(code)
     }
     /** @type {State} */

     function continuationRawEndTag(code) {
       if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {
         effects.consume(code);
         return continuationClose
       }

       if (asciiAlpha(code) && buffer.length < 8) {
         effects.consume(code);
         buffer += String.fromCharCode(code);
         return continuationRawEndTag
       }

       return continuation(code)
     }
     /** @type {State} */

     function continuationCharacterDataInside(code) {
       if (code === 93) {
         effects.consume(code);
         return continuationDeclarationInside
       }

       return continuation(code)
     }
     /** @type {State} */

     function continuationDeclarationInside(code) {
       if (code === 62) {
         effects.consume(code);
         return continuationClose
       } // More dashes.

       if (code === 45 && kind === 2) {
         effects.consume(code);
         return continuationDeclarationInside
       }

       return continuation(code)
     }
     /** @type {State} */

     function continuationClose(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('htmlFlowData');
         return done(code)
       }

       effects.consume(code);
       return continuationClose
     }
     /** @type {State} */

     function done(code) {
       effects.exit('htmlFlow');
       return ok(code)
     }
   }
   /** @type {Tokenizer} */

   function tokenizeNextBlank(effects, ok, nok) {
     return start
     /** @type {State} */

     function start(code) {
       effects.exit('htmlFlowData');
       effects.enter('lineEndingBlank');
       effects.consume(code);
       effects.exit('lineEndingBlank');
       return effects.attempt(blankLine, ok, nok)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Code} Code
    */

   /** @type {Construct} */
   const htmlText = {
     name: 'htmlText',
     tokenize: tokenizeHtmlText
   };
   /** @type {Tokenizer} */

   function tokenizeHtmlText(effects, ok, nok) {
     const self = this;
     /** @type {NonNullable<Code>|undefined} */

     let marker;
     /** @type {string} */

     let buffer;
     /** @type {number} */

     let index;
     /** @type {State} */

     let returnState;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('htmlText');
       effects.enter('htmlTextData');
       effects.consume(code);
       return open
     }
     /** @type {State} */

     function open(code) {
       if (code === 33) {
         effects.consume(code);
         return declarationOpen
       }

       if (code === 47) {
         effects.consume(code);
         return tagCloseStart
       }

       if (code === 63) {
         effects.consume(code);
         return instruction
       }

       if (asciiAlpha(code)) {
         effects.consume(code);
         return tagOpen
       }

       return nok(code)
     }
     /** @type {State} */

     function declarationOpen(code) {
       if (code === 45) {
         effects.consume(code);
         return commentOpen
       }

       if (code === 91) {
         effects.consume(code);
         buffer = 'CDATA[';
         index = 0;
         return cdataOpen
       }

       if (asciiAlpha(code)) {
         effects.consume(code);
         return declaration
       }

       return nok(code)
     }
     /** @type {State} */

     function commentOpen(code) {
       if (code === 45) {
         effects.consume(code);
         return commentStart
       }

       return nok(code)
     }
     /** @type {State} */

     function commentStart(code) {
       if (code === null || code === 62) {
         return nok(code)
       }

       if (code === 45) {
         effects.consume(code);
         return commentStartDash
       }

       return comment(code)
     }
     /** @type {State} */

     function commentStartDash(code) {
       if (code === null || code === 62) {
         return nok(code)
       }

       return comment(code)
     }
     /** @type {State} */

     function comment(code) {
       if (code === null) {
         return nok(code)
       }

       if (code === 45) {
         effects.consume(code);
         return commentClose
       }

       if (markdownLineEnding(code)) {
         returnState = comment;
         return atLineEnding(code)
       }

       effects.consume(code);
       return comment
     }
     /** @type {State} */

     function commentClose(code) {
       if (code === 45) {
         effects.consume(code);
         return end
       }

       return comment(code)
     }
     /** @type {State} */

     function cdataOpen(code) {
       if (code === buffer.charCodeAt(index++)) {
         effects.consume(code);
         return index === buffer.length ? cdata : cdataOpen
       }

       return nok(code)
     }
     /** @type {State} */

     function cdata(code) {
       if (code === null) {
         return nok(code)
       }

       if (code === 93) {
         effects.consume(code);
         return cdataClose
       }

       if (markdownLineEnding(code)) {
         returnState = cdata;
         return atLineEnding(code)
       }

       effects.consume(code);
       return cdata
     }
     /** @type {State} */

     function cdataClose(code) {
       if (code === 93) {
         effects.consume(code);
         return cdataEnd
       }

       return cdata(code)
     }
     /** @type {State} */

     function cdataEnd(code) {
       if (code === 62) {
         return end(code)
       }

       if (code === 93) {
         effects.consume(code);
         return cdataEnd
       }

       return cdata(code)
     }
     /** @type {State} */

     function declaration(code) {
       if (code === null || code === 62) {
         return end(code)
       }

       if (markdownLineEnding(code)) {
         returnState = declaration;
         return atLineEnding(code)
       }

       effects.consume(code);
       return declaration
     }
     /** @type {State} */

     function instruction(code) {
       if (code === null) {
         return nok(code)
       }

       if (code === 63) {
         effects.consume(code);
         return instructionClose
       }

       if (markdownLineEnding(code)) {
         returnState = instruction;
         return atLineEnding(code)
       }

       effects.consume(code);
       return instruction
     }
     /** @type {State} */

     function instructionClose(code) {
       return code === 62 ? end(code) : instruction(code)
     }
     /** @type {State} */

     function tagCloseStart(code) {
       if (asciiAlpha(code)) {
         effects.consume(code);
         return tagClose
       }

       return nok(code)
     }
     /** @type {State} */

     function tagClose(code) {
       if (code === 45 || asciiAlphanumeric(code)) {
         effects.consume(code);
         return tagClose
       }

       return tagCloseBetween(code)
     }
     /** @type {State} */

     function tagCloseBetween(code) {
       if (markdownLineEnding(code)) {
         returnState = tagCloseBetween;
         return atLineEnding(code)
       }

       if (markdownSpace(code)) {
         effects.consume(code);
         return tagCloseBetween
       }

       return end(code)
     }
     /** @type {State} */

     function tagOpen(code) {
       if (code === 45 || asciiAlphanumeric(code)) {
         effects.consume(code);
         return tagOpen
       }

       if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
         return tagOpenBetween(code)
       }

       return nok(code)
     }
     /** @type {State} */

     function tagOpenBetween(code) {
       if (code === 47) {
         effects.consume(code);
         return end
       }

       if (code === 58 || code === 95 || asciiAlpha(code)) {
         effects.consume(code);
         return tagOpenAttributeName
       }

       if (markdownLineEnding(code)) {
         returnState = tagOpenBetween;
         return atLineEnding(code)
       }

       if (markdownSpace(code)) {
         effects.consume(code);
         return tagOpenBetween
       }

       return end(code)
     }
     /** @type {State} */

     function tagOpenAttributeName(code) {
       if (
         code === 45 ||
         code === 46 ||
         code === 58 ||
         code === 95 ||
         asciiAlphanumeric(code)
       ) {
         effects.consume(code);
         return tagOpenAttributeName
       }

       return tagOpenAttributeNameAfter(code)
     }
     /** @type {State} */

     function tagOpenAttributeNameAfter(code) {
       if (code === 61) {
         effects.consume(code);
         return tagOpenAttributeValueBefore
       }

       if (markdownLineEnding(code)) {
         returnState = tagOpenAttributeNameAfter;
         return atLineEnding(code)
       }

       if (markdownSpace(code)) {
         effects.consume(code);
         return tagOpenAttributeNameAfter
       }

       return tagOpenBetween(code)
     }
     /** @type {State} */

     function tagOpenAttributeValueBefore(code) {
       if (
         code === null ||
         code === 60 ||
         code === 61 ||
         code === 62 ||
         code === 96
       ) {
         return nok(code)
       }

       if (code === 34 || code === 39) {
         effects.consume(code);
         marker = code;
         return tagOpenAttributeValueQuoted
       }

       if (markdownLineEnding(code)) {
         returnState = tagOpenAttributeValueBefore;
         return atLineEnding(code)
       }

       if (markdownSpace(code)) {
         effects.consume(code);
         return tagOpenAttributeValueBefore
       }

       effects.consume(code);
       marker = undefined;
       return tagOpenAttributeValueUnquoted
     }
     /** @type {State} */

     function tagOpenAttributeValueQuoted(code) {
       if (code === marker) {
         effects.consume(code);
         return tagOpenAttributeValueQuotedAfter
       }

       if (code === null) {
         return nok(code)
       }

       if (markdownLineEnding(code)) {
         returnState = tagOpenAttributeValueQuoted;
         return atLineEnding(code)
       }

       effects.consume(code);
       return tagOpenAttributeValueQuoted
     }
     /** @type {State} */

     function tagOpenAttributeValueQuotedAfter(code) {
       if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {
         return tagOpenBetween(code)
       }

       return nok(code)
     }
     /** @type {State} */

     function tagOpenAttributeValueUnquoted(code) {
       if (
         code === null ||
         code === 34 ||
         code === 39 ||
         code === 60 ||
         code === 61 ||
         code === 96
       ) {
         return nok(code)
       }

       if (code === 62 || markdownLineEndingOrSpace(code)) {
         return tagOpenBetween(code)
       }

       effects.consume(code);
       return tagOpenAttributeValueUnquoted
     } // We can’t have blank lines in content, so no need to worry about empty
     // tokens.

     /** @type {State} */

     function atLineEnding(code) {
       effects.exit('htmlTextData');
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       return factorySpace(
         effects,
         afterPrefix,
         'linePrefix',
         self.parser.constructs.disable.null.includes('codeIndented')
           ? undefined
           : 4
       )
     }
     /** @type {State} */

     function afterPrefix(code) {
       effects.enter('htmlTextData');
       return returnState(code)
     }
     /** @type {State} */

     function end(code) {
       if (code === 62) {
         effects.consume(code);
         effects.exit('htmlTextData');
         effects.exit('htmlText');
         return ok
       }

       return nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').Event} Event
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Code} Code
    */

   /** @type {Construct} */
   const labelEnd = {
     name: 'labelEnd',
     tokenize: tokenizeLabelEnd,
     resolveTo: resolveToLabelEnd,
     resolveAll: resolveAllLabelEnd
   };
   /** @type {Construct} */

   const resourceConstruct = {
     tokenize: tokenizeResource
   };
   /** @type {Construct} */

   const fullReferenceConstruct = {
     tokenize: tokenizeFullReference
   };
   /** @type {Construct} */

   const collapsedReferenceConstruct = {
     tokenize: tokenizeCollapsedReference
   };
   /** @type {Resolver} */

   function resolveAllLabelEnd(events) {
     let index = -1;
     /** @type {Token} */

     let token;

     while (++index < events.length) {
       token = events[index][1];

       if (
         token.type === 'labelImage' ||
         token.type === 'labelLink' ||
         token.type === 'labelEnd'
       ) {
         // Remove the marker.
         events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);
         token.type = 'data';
         index++;
       }
     }

     return events
   }
   /** @type {Resolver} */

   function resolveToLabelEnd(events, context) {
     let index = events.length;
     let offset = 0;
     /** @type {Token} */

     let token;
     /** @type {number|undefined} */

     let open;
     /** @type {number|undefined} */

     let close;
     /** @type {Event[]} */

     let media; // Find an opening.

     while (index--) {
       token = events[index][1];

       if (open) {
         // If we see another link, or inactive link label, we’ve been here before.
         if (
           token.type === 'link' ||
           (token.type === 'labelLink' && token._inactive)
         ) {
           break
         } // Mark other link openings as inactive, as we can’t have links in
         // links.

         if (events[index][0] === 'enter' && token.type === 'labelLink') {
           token._inactive = true;
         }
       } else if (close) {
         if (
           events[index][0] === 'enter' &&
           (token.type === 'labelImage' || token.type === 'labelLink') &&
           !token._balanced
         ) {
           open = index;

           if (token.type !== 'labelLink') {
             offset = 2;
             break
           }
         }
       } else if (token.type === 'labelEnd') {
         close = index;
       }
     }

     const group = {
       type: events[open][1].type === 'labelLink' ? 'link' : 'image',
       start: Object.assign({}, events[open][1].start),
       end: Object.assign({}, events[events.length - 1][1].end)
     };
     const label = {
       type: 'label',
       start: Object.assign({}, events[open][1].start),
       end: Object.assign({}, events[close][1].end)
     };
     const text = {
       type: 'labelText',
       start: Object.assign({}, events[open + offset + 2][1].end),
       end: Object.assign({}, events[close - 2][1].start)
     };
     media = [
       ['enter', group, context],
       ['enter', label, context]
     ]; // Opening marker.

     media = push(media, events.slice(open + 1, open + offset + 3)); // Text open.

     media = push(media, [['enter', text, context]]); // Between.

     media = push(
       media,
       resolveAll(
         context.parser.constructs.insideSpan.null,
         events.slice(open + offset + 4, close - 3),
         context
       )
     ); // Text close, marker close, label close.

     media = push(media, [
       ['exit', text, context],
       events[close - 2],
       events[close - 1],
       ['exit', label, context]
     ]); // Reference, resource, or so.

     media = push(media, events.slice(close + 1)); // Media close.

     media = push(media, [['exit', group, context]]);
     splice(events, open, events.length, media);
     return events
   }
   /** @type {Tokenizer} */

   function tokenizeLabelEnd(effects, ok, nok) {
     const self = this;
     let index = self.events.length;
     /** @type {Token} */

     let labelStart;
     /** @type {boolean} */

     let defined; // Find an opening.

     while (index--) {
       if (
         (self.events[index][1].type === 'labelImage' ||
           self.events[index][1].type === 'labelLink') &&
         !self.events[index][1]._balanced
       ) {
         labelStart = self.events[index][1];
         break
       }
     }

     return start
     /** @type {State} */

     function start(code) {
       if (!labelStart) {
         return nok(code)
       } // It’s a balanced bracket, but contains a link.

       if (labelStart._inactive) return balanced(code)
       defined = self.parser.defined.includes(
         normalizeIdentifier(
           self.sliceSerialize({
             start: labelStart.end,
             end: self.now()
           })
         )
       );
       effects.enter('labelEnd');
       effects.enter('labelMarker');
       effects.consume(code);
       effects.exit('labelMarker');
       effects.exit('labelEnd');
       return afterLabelEnd
     }
     /** @type {State} */

     function afterLabelEnd(code) {
       // Resource: `[asd](fgh)`.
       if (code === 40) {
         return effects.attempt(
           resourceConstruct,
           ok,
           defined ? ok : balanced
         )(code)
       } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?

       if (code === 91) {
         return effects.attempt(
           fullReferenceConstruct,
           ok,
           defined
             ? effects.attempt(collapsedReferenceConstruct, ok, balanced)
             : balanced
         )(code)
       } // Shortcut reference: `[asd]`?

       return defined ? ok(code) : balanced(code)
     }
     /** @type {State} */

     function balanced(code) {
       labelStart._balanced = true;
       return nok(code)
     }
   }
   /** @type {Tokenizer} */

   function tokenizeResource(effects, ok, nok) {
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('resource');
       effects.enter('resourceMarker');
       effects.consume(code);
       effects.exit('resourceMarker');
       return factoryWhitespace(effects, open)
     }
     /** @type {State} */

     function open(code) {
       if (code === 41) {
         return end(code)
       }

       return factoryDestination(
         effects,
         destinationAfter,
         nok,
         'resourceDestination',
         'resourceDestinationLiteral',
         'resourceDestinationLiteralMarker',
         'resourceDestinationRaw',
         'resourceDestinationString',
         32
       )(code)
     }
     /** @type {State} */

     function destinationAfter(code) {
       return markdownLineEndingOrSpace(code)
         ? factoryWhitespace(effects, between)(code)
         : end(code)
     }
     /** @type {State} */

     function between(code) {
       if (code === 34 || code === 39 || code === 40) {
         return factoryTitle(
           effects,
           factoryWhitespace(effects, end),
           nok,
           'resourceTitle',
           'resourceTitleMarker',
           'resourceTitleString'
         )(code)
       }

       return end(code)
     }
     /** @type {State} */

     function end(code) {
       if (code === 41) {
         effects.enter('resourceMarker');
         effects.consume(code);
         effects.exit('resourceMarker');
         effects.exit('resource');
         return ok
       }

       return nok(code)
     }
   }
   /** @type {Tokenizer} */

   function tokenizeFullReference(effects, ok, nok) {
     const self = this;
     return start
     /** @type {State} */

     function start(code) {
       return factoryLabel.call(
         self,
         effects,
         afterLabel,
         nok,
         'reference',
         'referenceMarker',
         'referenceString'
       )(code)
     }
     /** @type {State} */

     function afterLabel(code) {
       return self.parser.defined.includes(
         normalizeIdentifier(
           self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
         )
       )
         ? ok(code)
         : nok(code)
     }
   }
   /** @type {Tokenizer} */

   function tokenizeCollapsedReference(effects, ok, nok) {
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('reference');
       effects.enter('referenceMarker');
       effects.consume(code);
       effects.exit('referenceMarker');
       return open
     }
     /** @type {State} */

     function open(code) {
       if (code === 93) {
         effects.enter('referenceMarker');
         effects.consume(code);
         effects.exit('referenceMarker');
         effects.exit('reference');
         return ok
       }

       return nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    */
   /** @type {Construct} */

   const labelStartImage = {
     name: 'labelStartImage',
     tokenize: tokenizeLabelStartImage,
     resolveAll: labelEnd.resolveAll
   };
   /** @type {Tokenizer} */

   function tokenizeLabelStartImage(effects, ok, nok) {
     const self = this;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('labelImage');
       effects.enter('labelImageMarker');
       effects.consume(code);
       effects.exit('labelImageMarker');
       return open
     }
     /** @type {State} */

     function open(code) {
       if (code === 91) {
         effects.enter('labelMarker');
         effects.consume(code);
         effects.exit('labelMarker');
         effects.exit('labelImage');
         return after
       }

       return nok(code)
     }
     /** @type {State} */

     function after(code) {
       /* To do: remove in the future once we’ve switched from
        * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
        * which doesn’t need this */

       /* Hidden footnotes hook */

       /* c8 ignore next 3 */
       return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
         ? nok(code)
         : ok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    */
   /** @type {Construct} */

   const labelStartLink = {
     name: 'labelStartLink',
     tokenize: tokenizeLabelStartLink,
     resolveAll: labelEnd.resolveAll
   };
   /** @type {Tokenizer} */

   function tokenizeLabelStartLink(effects, ok, nok) {
     const self = this;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('labelLink');
       effects.enter('labelMarker');
       effects.consume(code);
       effects.exit('labelMarker');
       effects.exit('labelLink');
       return after
     }
     /** @type {State} */

     function after(code) {
       /* To do: remove in the future once we’ve switched from
        * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
        * which doesn’t need this */

       /* Hidden footnotes hook. */

       /* c8 ignore next 3 */
       return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
         ? nok(code)
         : ok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    */

   /** @type {Construct} */
   const lineEnding = {
     name: 'lineEnding',
     tokenize: tokenizeLineEnding
   };
   /** @type {Tokenizer} */

   function tokenizeLineEnding(effects, ok) {
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       return factorySpace(effects, ok, 'linePrefix')
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Code} Code
    */

   /** @type {Construct} */
   const thematicBreak$1 = {
     name: 'thematicBreak',
     tokenize: tokenizeThematicBreak
   };
   /** @type {Tokenizer} */

   function tokenizeThematicBreak(effects, ok, nok) {
     let size = 0;
     /** @type {NonNullable<Code>} */

     let marker;
     return start
     /** @type {State} */

     function start(code) {
       effects.enter('thematicBreak');
       marker = code;
       return atBreak(code)
     }
     /** @type {State} */

     function atBreak(code) {
       if (code === marker) {
         effects.enter('thematicBreakSequence');
         return sequence(code)
       }

       if (markdownSpace(code)) {
         return factorySpace(effects, atBreak, 'whitespace')(code)
       }

       if (size < 3 || (code !== null && !markdownLineEnding(code))) {
         return nok(code)
       }

       effects.exit('thematicBreak');
       return ok(code)
     }
     /** @type {State} */

     function sequence(code) {
       if (code === marker) {
         effects.consume(code);
         size++;
         return sequence
       }

       effects.exit('thematicBreakSequence');
       return atBreak(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Exiter} Exiter
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Code} Code
    */
   /** @type {Construct} */

   const list$2 = {
     name: 'list',
     tokenize: tokenizeListStart,
     continuation: {
       tokenize: tokenizeListContinuation
     },
     exit: tokenizeListEnd
   };
   /** @type {Construct} */

   const listItemPrefixWhitespaceConstruct = {
     tokenize: tokenizeListItemPrefixWhitespace,
     partial: true
   };
   /** @type {Construct} */

   const indentConstruct = {
     tokenize: tokenizeIndent,
     partial: true
   };
   /**
    * @type {Tokenizer}
    * @this {TokenizeContextWithState}
    */

   function tokenizeListStart(effects, ok, nok) {
     const self = this;
     const tail = self.events[self.events.length - 1];
     let initialSize =
       tail && tail[1].type === 'linePrefix'
         ? tail[2].sliceSerialize(tail[1], true).length
         : 0;
     let size = 0;
     return start
     /** @type {State} */

     function start(code) {
       const kind =
         self.containerState.type ||
         (code === 42 || code === 43 || code === 45
           ? 'listUnordered'
           : 'listOrdered');

       if (
         kind === 'listUnordered'
           ? !self.containerState.marker || code === self.containerState.marker
           : asciiDigit(code)
       ) {
         if (!self.containerState.type) {
           self.containerState.type = kind;
           effects.enter(kind, {
             _container: true
           });
         }

         if (kind === 'listUnordered') {
           effects.enter('listItemPrefix');
           return code === 42 || code === 45
             ? effects.check(thematicBreak$1, nok, atMarker)(code)
             : atMarker(code)
         }

         if (!self.interrupt || code === 49) {
           effects.enter('listItemPrefix');
           effects.enter('listItemValue');
           return inside(code)
         }
       }

       return nok(code)
     }
     /** @type {State} */

     function inside(code) {
       if (asciiDigit(code) && ++size < 10) {
         effects.consume(code);
         return inside
       }

       if (
         (!self.interrupt || size < 2) &&
         (self.containerState.marker
           ? code === self.containerState.marker
           : code === 41 || code === 46)
       ) {
         effects.exit('listItemValue');
         return atMarker(code)
       }

       return nok(code)
     }
     /**
      * @type {State}
      **/

     function atMarker(code) {
       effects.enter('listItemMarker');
       effects.consume(code);
       effects.exit('listItemMarker');
       self.containerState.marker = self.containerState.marker || code;
       return effects.check(
         blankLine, // Can’t be empty when interrupting.
         self.interrupt ? nok : onBlank,
         effects.attempt(
           listItemPrefixWhitespaceConstruct,
           endOfPrefix,
           otherPrefix
         )
       )
     }
     /** @type {State} */

     function onBlank(code) {
       self.containerState.initialBlankLine = true;
       initialSize++;
       return endOfPrefix(code)
     }
     /** @type {State} */

     function otherPrefix(code) {
       if (markdownSpace(code)) {
         effects.enter('listItemPrefixWhitespace');
         effects.consume(code);
         effects.exit('listItemPrefixWhitespace');
         return endOfPrefix
       }

       return nok(code)
     }
     /** @type {State} */

     function endOfPrefix(code) {
       self.containerState.size =
         initialSize +
         self.sliceSerialize(effects.exit('listItemPrefix'), true).length;
       return ok(code)
     }
   }
   /**
    * @type {Tokenizer}
    * @this {TokenizeContextWithState}
    */

   function tokenizeListContinuation(effects, ok, nok) {
     const self = this;
     self.containerState._closeFlow = undefined;
     return effects.check(blankLine, onBlank, notBlank)
     /** @type {State} */

     function onBlank(code) {
       self.containerState.furtherBlankLines =
         self.containerState.furtherBlankLines ||
         self.containerState.initialBlankLine; // We have a blank line.
       // Still, try to consume at most the items size.

       return factorySpace(
         effects,
         ok,
         'listItemIndent',
         self.containerState.size + 1
       )(code)
     }
     /** @type {State} */

     function notBlank(code) {
       if (self.containerState.furtherBlankLines || !markdownSpace(code)) {
         self.containerState.furtherBlankLines = undefined;
         self.containerState.initialBlankLine = undefined;
         return notInCurrentItem(code)
       }

       self.containerState.furtherBlankLines = undefined;
       self.containerState.initialBlankLine = undefined;
       return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)
     }
     /** @type {State} */

     function notInCurrentItem(code) {
       // While we do continue, we signal that the flow should be closed.
       self.containerState._closeFlow = true; // As we’re closing flow, we’re no longer interrupting.

       self.interrupt = undefined;
       return factorySpace(
         effects,
         effects.attempt(list$2, ok, nok),
         'linePrefix',
         self.parser.constructs.disable.null.includes('codeIndented')
           ? undefined
           : 4
       )(code)
     }
   }
   /**
    * @type {Tokenizer}
    * @this {TokenizeContextWithState}
    */

   function tokenizeIndent(effects, ok, nok) {
     const self = this;
     return factorySpace(
       effects,
       afterPrefix,
       'listItemIndent',
       self.containerState.size + 1
     )
     /** @type {State} */

     function afterPrefix(code) {
       const tail = self.events[self.events.length - 1];
       return tail &&
         tail[1].type === 'listItemIndent' &&
         tail[2].sliceSerialize(tail[1], true).length === self.containerState.size
         ? ok(code)
         : nok(code)
     }
   }
   /**
    * @type {Exiter}
    * @this {TokenizeContextWithState}
    */

   function tokenizeListEnd(effects) {
     effects.exit(this.containerState.type);
   }
   /**
    * @type {Tokenizer}
    * @this {TokenizeContextWithState}
    */

   function tokenizeListItemPrefixWhitespace(effects, ok, nok) {
     const self = this;
     return factorySpace(
       effects,
       afterPrefix,
       'listItemPrefixWhitespace',
       self.parser.constructs.disable.null.includes('codeIndented')
         ? undefined
         : 4 + 1
     )
     /** @type {State} */

     function afterPrefix(code) {
       const tail = self.events[self.events.length - 1];
       return !markdownSpace(code) &&
         tail &&
         tail[1].type === 'listItemPrefixWhitespace'
         ? ok(code)
         : nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Code} Code
    */

   /** @type {Construct} */
   const setextUnderline = {
     name: 'setextUnderline',
     tokenize: tokenizeSetextUnderline,
     resolveTo: resolveToSetextUnderline
   };
   /** @type {Resolver} */

   function resolveToSetextUnderline(events, context) {
     let index = events.length;
     /** @type {number|undefined} */

     let content;
     /** @type {number|undefined} */

     let text;
     /** @type {number|undefined} */

     let definition; // Find the opening of the content.
     // It’ll always exist: we don’t tokenize if it isn’t there.

     while (index--) {
       if (events[index][0] === 'enter') {
         if (events[index][1].type === 'content') {
           content = index;
           break
         }

         if (events[index][1].type === 'paragraph') {
           text = index;
         }
       } // Exit
       else {
         if (events[index][1].type === 'content') {
           // Remove the content end (if needed we’ll add it later)
           events.splice(index, 1);
         }

         if (!definition && events[index][1].type === 'definition') {
           definition = index;
         }
       }
     }

     const heading = {
       type: 'setextHeading',
       start: Object.assign({}, events[text][1].start),
       end: Object.assign({}, events[events.length - 1][1].end)
     }; // Change the paragraph to setext heading text.

     events[text][1].type = 'setextHeadingText'; // If we have definitions in the content, we’ll keep on having content,
     // but we need move it.

     if (definition) {
       events.splice(text, 0, ['enter', heading, context]);
       events.splice(definition + 1, 0, ['exit', events[content][1], context]);
       events[content][1].end = Object.assign({}, events[definition][1].end);
     } else {
       events[content][1] = heading;
     } // Add the heading exit at the end.

     events.push(['exit', heading, context]);
     return events
   }
   /** @type {Tokenizer} */

   function tokenizeSetextUnderline(effects, ok, nok) {
     const self = this;
     let index = self.events.length;
     /** @type {NonNullable<Code>} */

     let marker;
     /** @type {boolean} */

     let paragraph; // Find an opening.

     while (index--) {
       // Skip enter/exit of line ending, line prefix, and content.
       // We can now either have a definition or a paragraph.
       if (
         self.events[index][1].type !== 'lineEnding' &&
         self.events[index][1].type !== 'linePrefix' &&
         self.events[index][1].type !== 'content'
       ) {
         paragraph = self.events[index][1].type === 'paragraph';
         break
       }
     }

     return start
     /** @type {State} */

     function start(code) {
       if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {
         effects.enter('setextHeadingLine');
         effects.enter('setextHeadingLineSequence');
         marker = code;
         return closingSequence(code)
       }

       return nok(code)
     }
     /** @type {State} */

     function closingSequence(code) {
       if (code === marker) {
         effects.consume(code);
         return closingSequence
       }

       effects.exit('setextHeadingLineSequence');
       return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)
     }
     /** @type {State} */

     function closingSequenceEnd(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('setextHeadingLine');
         return ok(code)
       }

       return nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
    * @typedef {import('micromark-util-types').Initializer} Initializer
    * @typedef {import('micromark-util-types').State} State
    */

   /** @type {InitialConstruct} */
   const flow$1 = {tokenize: initializeFlow};

   /** @type {Initializer} */
   function initializeFlow(effects) {
     const self = this;
     const initial = effects.attempt(
       // Try to parse a blank line.
       blankLine,
       atBlankEnding,
       // Try to parse initial flow (essentially, only code).
       effects.attempt(
         this.parser.constructs.flowInitial,
         afterConstruct,
         factorySpace(
           effects,
           effects.attempt(
             this.parser.constructs.flow,
             afterConstruct,
             effects.attempt(content$2, afterConstruct)
           ),
           types$1.linePrefix
         )
       )
     );

     return initial

     /** @type {State} */
     function atBlankEnding(code) {
       ok$1(
         code === codes.eof || markdownLineEnding(code),
         'expected eol or eof'
       );

       if (code === codes.eof) {
         effects.consume(code);
         return
       }

       effects.enter(types$1.lineEndingBlank);
       effects.consume(code);
       effects.exit(types$1.lineEndingBlank);
       self.currentConstruct = undefined;
       return initial
     }

     /** @type {State} */
     function afterConstruct(code) {
       ok$1(
         code === codes.eof || markdownLineEnding(code),
         'expected eol or eof'
       );

       if (code === codes.eof) {
         effects.consume(code);
         return
       }

       effects.enter(types$1.lineEnding);
       effects.consume(code);
       effects.exit(types$1.lineEnding);
       self.currentConstruct = undefined;
       return initial
     }
   }

   /**
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').Initializer} Initializer
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Code} Code
    */

   const resolver = {resolveAll: createResolver()};
   const string$1 = initializeFactory('string');
   const text$4 = initializeFactory('text');

   /**
    * @param {'string'|'text'} field
    * @returns {InitialConstruct}
    */
   function initializeFactory(field) {
     return {
       tokenize: initializeText,
       resolveAll: createResolver(
         field === 'text' ? resolveAllLineSuffixes : undefined
       )
     }

     /** @type {Initializer} */
     function initializeText(effects) {
       const self = this;
       const constructs = this.parser.constructs[field];
       const text = effects.attempt(constructs, start, notText);

       return start

       /** @type {State} */
       function start(code) {
         return atBreak(code) ? text(code) : notText(code)
       }

       /** @type {State} */
       function notText(code) {
         if (code === codes.eof) {
           effects.consume(code);
           return
         }

         effects.enter(types$1.data);
         effects.consume(code);
         return data
       }

       /** @type {State} */
       function data(code) {
         if (atBreak(code)) {
           effects.exit(types$1.data);
           return text(code)
         }

         // Data.
         effects.consume(code);
         return data
       }

       /**
        * @param {Code} code
        * @returns {boolean}
        */
       function atBreak(code) {
         if (code === codes.eof) {
           return true
         }

         const list = constructs[code];
         let index = -1;

         if (list) {
           while (++index < list.length) {
             const item = list[index];
             if (!item.previous || item.previous.call(self, self.previous)) {
               return true
             }
           }
         }

         return false
       }
     }
   }

   /**
    * @param {Resolver} [extraResolver]
    * @returns {Resolver}
    */
   function createResolver(extraResolver) {
     return resolveAllText

     /** @type {Resolver} */
     function resolveAllText(events, context) {
       let index = -1;
       /** @type {number|undefined} */
       let enter;

       // A rather boring computation (to merge adjacent `data` events) which
       // improves mm performance by 29%.
       while (++index <= events.length) {
         if (enter === undefined) {
           if (events[index] && events[index][1].type === types$1.data) {
             enter = index;
             index++;
           }
         } else if (!events[index] || events[index][1].type !== types$1.data) {
           // Don’t do anything if there is one data token.
           if (index !== enter + 2) {
             events[enter][1].end = events[index - 1][1].end;
             events.splice(enter + 2, index - enter - 2);
             index = enter + 2;
           }

           enter = undefined;
         }
       }

       return extraResolver ? extraResolver(events, context) : events
     }
   }

   /**
    * A rather ugly set of instructions which again looks at chunks in the input
    * stream.
    * The reason to do this here is that it is *much* faster to parse in reverse.
    * And that we can’t hook into `null` to split the line suffix before an EOF.
    * To do: figure out if we can make this into a clean utility, or even in core.
    * As it will be useful for GFMs literal autolink extension (and maybe even
    * tables?)
    *
    * @type {Resolver}
    */
   function resolveAllLineSuffixes(events, context) {
     let eventIndex = 0; // Skip first.

     while (++eventIndex <= events.length) {
       if (
         (eventIndex === events.length ||
           events[eventIndex][1].type === types$1.lineEnding) &&
         events[eventIndex - 1][1].type === types$1.data
       ) {
         const data = events[eventIndex - 1][1];
         const chunks = context.sliceStream(data);
         let index = chunks.length;
         let bufferIndex = -1;
         let size = 0;
         /** @type {boolean|undefined} */
         let tabs;

         while (index--) {
           const chunk = chunks[index];

           if (typeof chunk === 'string') {
             bufferIndex = chunk.length;

             while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {
               size++;
               bufferIndex--;
             }

             if (bufferIndex) break
             bufferIndex = -1;
           }
           // Number
           else if (chunk === codes.horizontalTab) {
             tabs = true;
             size++;
           } else if (chunk === codes.virtualSpace) ; else {
             // Replacement character, exit.
             index++;
             break
           }
         }

         if (size) {
           const token = {
             type:
               eventIndex === events.length ||
               tabs ||
               size < constants.hardBreakPrefixSizeMin
                 ? types$1.lineSuffix
                 : types$1.hardBreakTrailing,
             start: {
               line: data.end.line,
               column: data.end.column - size,
               offset: data.end.offset - size,
               _index: data.start._index + index,
               _bufferIndex: index
                 ? bufferIndex
                 : data.start._bufferIndex + bufferIndex
             },
             end: Object.assign({}, data.end)
           };

           data.end = Object.assign({}, token.start);

           if (data.start.offset === data.end.offset) {
             Object.assign(data, token);
           } else {
             events.splice(
               eventIndex,
               0,
               ['enter', token, context],
               ['exit', token, context]
             );
             eventIndex += 2;
           }
         }

         eventIndex++;
       }
     }

     return events
   }

   var browser = {exports: {}};

   /**
    * Helpers.
    */

   var ms;
   var hasRequiredMs;

   function requireMs () {
   	if (hasRequiredMs) return ms;
   	hasRequiredMs = 1;
   	var s = 1000;
   	var m = s * 60;
   	var h = m * 60;
   	var d = h * 24;
   	var w = d * 7;
   	var y = d * 365.25;

   	/**
   	 * Parse or format the given `val`.
   	 *
   	 * Options:
   	 *
   	 *  - `long` verbose formatting [false]
   	 *
   	 * @param {String|Number} val
   	 * @param {Object} [options]
   	 * @throws {Error} throw an error if val is not a non-empty string or a number
   	 * @return {String|Number}
   	 * @api public
   	 */

   	ms = function(val, options) {
   	  options = options || {};
   	  var type = typeof val;
   	  if (type === 'string' && val.length > 0) {
   	    return parse(val);
   	  } else if (type === 'number' && isFinite(val)) {
   	    return options.long ? fmtLong(val) : fmtShort(val);
   	  }
   	  throw new Error(
   	    'val is not a non-empty string or a valid number. val=' +
   	      JSON.stringify(val)
   	  );
   	};

   	/**
   	 * Parse the given `str` and return milliseconds.
   	 *
   	 * @param {String} str
   	 * @return {Number}
   	 * @api private
   	 */

   	function parse(str) {
   	  str = String(str);
   	  if (str.length > 100) {
   	    return;
   	  }
   	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
   	    str
   	  );
   	  if (!match) {
   	    return;
   	  }
   	  var n = parseFloat(match[1]);
   	  var type = (match[2] || 'ms').toLowerCase();
   	  switch (type) {
   	    case 'years':
   	    case 'year':
   	    case 'yrs':
   	    case 'yr':
   	    case 'y':
   	      return n * y;
   	    case 'weeks':
   	    case 'week':
   	    case 'w':
   	      return n * w;
   	    case 'days':
   	    case 'day':
   	    case 'd':
   	      return n * d;
   	    case 'hours':
   	    case 'hour':
   	    case 'hrs':
   	    case 'hr':
   	    case 'h':
   	      return n * h;
   	    case 'minutes':
   	    case 'minute':
   	    case 'mins':
   	    case 'min':
   	    case 'm':
   	      return n * m;
   	    case 'seconds':
   	    case 'second':
   	    case 'secs':
   	    case 'sec':
   	    case 's':
   	      return n * s;
   	    case 'milliseconds':
   	    case 'millisecond':
   	    case 'msecs':
   	    case 'msec':
   	    case 'ms':
   	      return n;
   	    default:
   	      return undefined;
   	  }
   	}

   	/**
   	 * Short format for `ms`.
   	 *
   	 * @param {Number} ms
   	 * @return {String}
   	 * @api private
   	 */

   	function fmtShort(ms) {
   	  var msAbs = Math.abs(ms);
   	  if (msAbs >= d) {
   	    return Math.round(ms / d) + 'd';
   	  }
   	  if (msAbs >= h) {
   	    return Math.round(ms / h) + 'h';
   	  }
   	  if (msAbs >= m) {
   	    return Math.round(ms / m) + 'm';
   	  }
   	  if (msAbs >= s) {
   	    return Math.round(ms / s) + 's';
   	  }
   	  return ms + 'ms';
   	}

   	/**
   	 * Long format for `ms`.
   	 *
   	 * @param {Number} ms
   	 * @return {String}
   	 * @api private
   	 */

   	function fmtLong(ms) {
   	  var msAbs = Math.abs(ms);
   	  if (msAbs >= d) {
   	    return plural(ms, msAbs, d, 'day');
   	  }
   	  if (msAbs >= h) {
   	    return plural(ms, msAbs, h, 'hour');
   	  }
   	  if (msAbs >= m) {
   	    return plural(ms, msAbs, m, 'minute');
   	  }
   	  if (msAbs >= s) {
   	    return plural(ms, msAbs, s, 'second');
   	  }
   	  return ms + ' ms';
   	}

   	/**
   	 * Pluralization helper.
   	 */

   	function plural(ms, msAbs, n, name) {
   	  var isPlural = msAbs >= n * 1.5;
   	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
   	}
   	return ms;
   }

   /**
    * This is the common logic for both the Node.js and web browser
    * implementations of `debug()`.
    */

   function setup(env) {
   	createDebug.debug = createDebug;
   	createDebug.default = createDebug;
   	createDebug.coerce = coerce;
   	createDebug.disable = disable;
   	createDebug.enable = enable;
   	createDebug.enabled = enabled;
   	createDebug.humanize = requireMs();
   	createDebug.destroy = destroy;

   	Object.keys(env).forEach(key => {
   		createDebug[key] = env[key];
   	});

   	/**
   	* The currently active debug mode names, and names to skip.
   	*/

   	createDebug.names = [];
   	createDebug.skips = [];

   	/**
   	* Map of special "%n" handling functions, for the debug "format" argument.
   	*
   	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
   	*/
   	createDebug.formatters = {};

   	/**
   	* Selects a color for a debug namespace
   	* @param {String} namespace The namespace string for the debug instance to be colored
   	* @return {Number|String} An ANSI color code for the given namespace
   	* @api private
   	*/
   	function selectColor(namespace) {
   		let hash = 0;

   		for (let i = 0; i < namespace.length; i++) {
   			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
   			hash |= 0; // Convert to 32bit integer
   		}

   		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
   	}
   	createDebug.selectColor = selectColor;

   	/**
   	* Create a debugger with the given `namespace`.
   	*
   	* @param {String} namespace
   	* @return {Function}
   	* @api public
   	*/
   	function createDebug(namespace) {
   		let prevTime;
   		let enableOverride = null;
   		let namespacesCache;
   		let enabledCache;

   		function debug(...args) {
   			// Disabled?
   			if (!debug.enabled) {
   				return;
   			}

   			const self = debug;

   			// Set `diff` timestamp
   			const curr = Number(new Date());
   			const ms = curr - (prevTime || curr);
   			self.diff = ms;
   			self.prev = prevTime;
   			self.curr = curr;
   			prevTime = curr;

   			args[0] = createDebug.coerce(args[0]);

   			if (typeof args[0] !== 'string') {
   				// Anything else let's inspect with %O
   				args.unshift('%O');
   			}

   			// Apply any `formatters` transformations
   			let index = 0;
   			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
   				// If we encounter an escaped % then don't increase the array index
   				if (match === '%%') {
   					return '%';
   				}
   				index++;
   				const formatter = createDebug.formatters[format];
   				if (typeof formatter === 'function') {
   					const val = args[index];
   					match = formatter.call(self, val);

   					// Now we need to remove `args[index]` since it's inlined in the `format`
   					args.splice(index, 1);
   					index--;
   				}
   				return match;
   			});

   			// Apply env-specific formatting (colors, etc.)
   			createDebug.formatArgs.call(self, args);

   			const logFn = self.log || createDebug.log;
   			logFn.apply(self, args);
   		}

   		debug.namespace = namespace;
   		debug.useColors = createDebug.useColors();
   		debug.color = createDebug.selectColor(namespace);
   		debug.extend = extend;
   		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

   		Object.defineProperty(debug, 'enabled', {
   			enumerable: true,
   			configurable: false,
   			get: () => {
   				if (enableOverride !== null) {
   					return enableOverride;
   				}
   				if (namespacesCache !== createDebug.namespaces) {
   					namespacesCache = createDebug.namespaces;
   					enabledCache = createDebug.enabled(namespace);
   				}

   				return enabledCache;
   			},
   			set: v => {
   				enableOverride = v;
   			}
   		});

   		// Env-specific initialization logic for debug instances
   		if (typeof createDebug.init === 'function') {
   			createDebug.init(debug);
   		}

   		return debug;
   	}

   	function extend(namespace, delimiter) {
   		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
   		newDebug.log = this.log;
   		return newDebug;
   	}

   	/**
   	* Enables a debug mode by namespaces. This can include modes
   	* separated by a colon and wildcards.
   	*
   	* @param {String} namespaces
   	* @api public
   	*/
   	function enable(namespaces) {
   		createDebug.save(namespaces);
   		createDebug.namespaces = namespaces;

   		createDebug.names = [];
   		createDebug.skips = [];

   		let i;
   		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
   		const len = split.length;

   		for (i = 0; i < len; i++) {
   			if (!split[i]) {
   				// ignore empty strings
   				continue;
   			}

   			namespaces = split[i].replace(/\*/g, '.*?');

   			if (namespaces[0] === '-') {
   				createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
   			} else {
   				createDebug.names.push(new RegExp('^' + namespaces + '$'));
   			}
   		}
   	}

   	/**
   	* Disable debug output.
   	*
   	* @return {String} namespaces
   	* @api public
   	*/
   	function disable() {
   		const namespaces = [
   			...createDebug.names.map(toNamespace),
   			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
   		].join(',');
   		createDebug.enable('');
   		return namespaces;
   	}

   	/**
   	* Returns true if the given mode name is enabled, false otherwise.
   	*
   	* @param {String} name
   	* @return {Boolean}
   	* @api public
   	*/
   	function enabled(name) {
   		if (name[name.length - 1] === '*') {
   			return true;
   		}

   		let i;
   		let len;

   		for (i = 0, len = createDebug.skips.length; i < len; i++) {
   			if (createDebug.skips[i].test(name)) {
   				return false;
   			}
   		}

   		for (i = 0, len = createDebug.names.length; i < len; i++) {
   			if (createDebug.names[i].test(name)) {
   				return true;
   			}
   		}

   		return false;
   	}

   	/**
   	* Convert regexp to namespace
   	*
   	* @param {RegExp} regxep
   	* @return {String} namespace
   	* @api private
   	*/
   	function toNamespace(regexp) {
   		return regexp.toString()
   			.substring(2, regexp.toString().length - 2)
   			.replace(/\.\*\?$/, '*');
   	}

   	/**
   	* Coerce `val`.
   	*
   	* @param {Mixed} val
   	* @return {Mixed}
   	* @api private
   	*/
   	function coerce(val) {
   		if (val instanceof Error) {
   			return val.stack || val.message;
   		}
   		return val;
   	}

   	/**
   	* XXX DO NOT USE. This is a temporary stub function.
   	* XXX It WILL be removed in the next major release.
   	*/
   	function destroy() {
   		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
   	}

   	createDebug.enable(createDebug.load());

   	return createDebug;
   }

   var common = setup;

   /* eslint-env browser */

   (function (module, exports) {
   	/**
   	 * This is the web browser implementation of `debug()`.
   	 */

   	exports.formatArgs = formatArgs;
   	exports.save = save;
   	exports.load = load;
   	exports.useColors = useColors;
   	exports.storage = localstorage();
   	exports.destroy = (() => {
   		let warned = false;

   		return () => {
   			if (!warned) {
   				warned = true;
   				console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
   			}
   		};
   	})();

   	/**
   	 * Colors.
   	 */

   	exports.colors = [
   		'#0000CC',
   		'#0000FF',
   		'#0033CC',
   		'#0033FF',
   		'#0066CC',
   		'#0066FF',
   		'#0099CC',
   		'#0099FF',
   		'#00CC00',
   		'#00CC33',
   		'#00CC66',
   		'#00CC99',
   		'#00CCCC',
   		'#00CCFF',
   		'#3300CC',
   		'#3300FF',
   		'#3333CC',
   		'#3333FF',
   		'#3366CC',
   		'#3366FF',
   		'#3399CC',
   		'#3399FF',
   		'#33CC00',
   		'#33CC33',
   		'#33CC66',
   		'#33CC99',
   		'#33CCCC',
   		'#33CCFF',
   		'#6600CC',
   		'#6600FF',
   		'#6633CC',
   		'#6633FF',
   		'#66CC00',
   		'#66CC33',
   		'#9900CC',
   		'#9900FF',
   		'#9933CC',
   		'#9933FF',
   		'#99CC00',
   		'#99CC33',
   		'#CC0000',
   		'#CC0033',
   		'#CC0066',
   		'#CC0099',
   		'#CC00CC',
   		'#CC00FF',
   		'#CC3300',
   		'#CC3333',
   		'#CC3366',
   		'#CC3399',
   		'#CC33CC',
   		'#CC33FF',
   		'#CC6600',
   		'#CC6633',
   		'#CC9900',
   		'#CC9933',
   		'#CCCC00',
   		'#CCCC33',
   		'#FF0000',
   		'#FF0033',
   		'#FF0066',
   		'#FF0099',
   		'#FF00CC',
   		'#FF00FF',
   		'#FF3300',
   		'#FF3333',
   		'#FF3366',
   		'#FF3399',
   		'#FF33CC',
   		'#FF33FF',
   		'#FF6600',
   		'#FF6633',
   		'#FF9900',
   		'#FF9933',
   		'#FFCC00',
   		'#FFCC33'
   	];

   	/**
   	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   	 * and the Firebug extension (any Firefox version) are known
   	 * to support "%c" CSS customizations.
   	 *
   	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
   	 */

   	// eslint-disable-next-line complexity
   	function useColors() {
   		// NB: In an Electron preload script, document will be defined but not fully
   		// initialized. Since we know we're in Chrome, we'll just detect this case
   		// explicitly
   		if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
   			return true;
   		}

   		// Internet Explorer and Edge do not support colors.
   		if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
   			return false;
   		}

   		// Is webkit? http://stackoverflow.com/a/16459606/376773
   		// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
   		return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
   			// Is firebug? http://stackoverflow.com/a/398120/376773
   			(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
   			// Is firefox >= v31?
   			// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
   			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
   			// Double check webkit in userAgent just in case we are in a worker
   			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
   	}

   	/**
   	 * Colorize log arguments if enabled.
   	 *
   	 * @api public
   	 */

   	function formatArgs(args) {
   		args[0] = (this.useColors ? '%c' : '') +
   			this.namespace +
   			(this.useColors ? ' %c' : ' ') +
   			args[0] +
   			(this.useColors ? '%c ' : ' ') +
   			'+' + module.exports.humanize(this.diff);

   		if (!this.useColors) {
   			return;
   		}

   		const c = 'color: ' + this.color;
   		args.splice(1, 0, c, 'color: inherit');

   		// The final "%c" is somewhat tricky, because there could be other
   		// arguments passed either before or after the %c, so we need to
   		// figure out the correct index to insert the CSS into
   		let index = 0;
   		let lastC = 0;
   		args[0].replace(/%[a-zA-Z%]/g, match => {
   			if (match === '%%') {
   				return;
   			}
   			index++;
   			if (match === '%c') {
   				// We only are interested in the *last* %c
   				// (the user may have provided their own)
   				lastC = index;
   			}
   		});

   		args.splice(lastC, 0, c);
   	}

   	/**
   	 * Invokes `console.debug()` when available.
   	 * No-op when `console.debug` is not a "function".
   	 * If `console.debug` is not available, falls back
   	 * to `console.log`.
   	 *
   	 * @api public
   	 */
   	exports.log = console.debug || console.log || (() => {});

   	/**
   	 * Save `namespaces`.
   	 *
   	 * @param {String} namespaces
   	 * @api private
   	 */
   	function save(namespaces) {
   		try {
   			if (namespaces) {
   				exports.storage.setItem('debug', namespaces);
   			} else {
   				exports.storage.removeItem('debug');
   			}
   		} catch (error) {
   			// Swallow
   			// XXX (@Qix-) should we be logging these?
   		}
   	}

   	/**
   	 * Load `namespaces`.
   	 *
   	 * @return {String} returns the previously persisted debug modes
   	 * @api private
   	 */
   	function load() {
   		let r;
   		try {
   			r = exports.storage.getItem('debug');
   		} catch (error) {
   			// Swallow
   			// XXX (@Qix-) should we be logging these?
   		}

   		// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
   		if (!r && typeof process !== 'undefined' && 'env' in process) {
   			r = process.env.DEBUG;
   		}

   		return r;
   	}

   	/**
   	 * Localstorage attempts to return the localstorage.
   	 *
   	 * This is necessary because safari throws
   	 * when a user disables cookies/localstorage
   	 * and you attempt to access it.
   	 *
   	 * @return {LocalStorage}
   	 * @api private
   	 */

   	function localstorage() {
   		try {
   			// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
   			// The Browser also has localStorage in the global context.
   			return localStorage;
   		} catch (error) {
   			// Swallow
   			// XXX (@Qix-) should we be logging these?
   		}
   	}

   	module.exports = common(exports);

   	const {formatters} = module.exports;

   	/**
   	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   	 */

   	formatters.j = function (v) {
   		try {
   			return JSON.stringify(v);
   		} catch (error) {
   			return '[UnexpectedJSONParseError]: ' + error.message;
   		}
   	};
   } (browser, browser.exports));

   var createDebug = browser.exports;

   // This module is compiled away!
   //
   // While micromark works based on character codes, this module includes the
   // string versions of ’em.
   // The C0 block, except for LF, CR, HT, and w/ the replacement character added,
   // are available here.
   const values = {
     ht: '\t',
     lf: '\n',
     cr: '\r',
     space: ' ',
     exclamationMark: '!',
     quotationMark: '"',
     numberSign: '#',
     dollarSign: '$',
     percentSign: '%',
     ampersand: '&',
     apostrophe: "'",
     leftParenthesis: '(',
     rightParenthesis: ')',
     asterisk: '*',
     plusSign: '+',
     comma: ',',
     dash: '-',
     dot: '.',
     slash: '/',
     digit0: '0',
     digit1: '1',
     digit2: '2',
     digit3: '3',
     digit4: '4',
     digit5: '5',
     digit6: '6',
     digit7: '7',
     digit8: '8',
     digit9: '9',
     colon: ':',
     semicolon: ';',
     lessThan: '<',
     equalsTo: '=',
     greaterThan: '>',
     questionMark: '?',
     atSign: '@',
     uppercaseA: 'A',
     uppercaseB: 'B',
     uppercaseC: 'C',
     uppercaseD: 'D',
     uppercaseE: 'E',
     uppercaseF: 'F',
     uppercaseG: 'G',
     uppercaseH: 'H',
     uppercaseI: 'I',
     uppercaseJ: 'J',
     uppercaseK: 'K',
     uppercaseL: 'L',
     uppercaseM: 'M',
     uppercaseN: 'N',
     uppercaseO: 'O',
     uppercaseP: 'P',
     uppercaseQ: 'Q',
     uppercaseR: 'R',
     uppercaseS: 'S',
     uppercaseT: 'T',
     uppercaseU: 'U',
     uppercaseV: 'V',
     uppercaseW: 'W',
     uppercaseX: 'X',
     uppercaseY: 'Y',
     uppercaseZ: 'Z',
     leftSquareBracket: '[',
     backslash: '\\',
     rightSquareBracket: ']',
     caret: '^',
     underscore: '_',
     graveAccent: '`',
     lowercaseA: 'a',
     lowercaseB: 'b',
     lowercaseC: 'c',
     lowercaseD: 'd',
     lowercaseE: 'e',
     lowercaseF: 'f',
     lowercaseG: 'g',
     lowercaseH: 'h',
     lowercaseI: 'i',
     lowercaseJ: 'j',
     lowercaseK: 'k',
     lowercaseL: 'l',
     lowercaseM: 'm',
     lowercaseN: 'n',
     lowercaseO: 'o',
     lowercaseP: 'p',
     lowercaseQ: 'q',
     lowercaseR: 'r',
     lowercaseS: 's',
     lowercaseT: 't',
     lowercaseU: 'u',
     lowercaseV: 'v',
     lowercaseW: 'w',
     lowercaseX: 'x',
     lowercaseY: 'y',
     lowercaseZ: 'z',
     leftCurlyBrace: '{',
     verticalBar: '|',
     rightCurlyBrace: '}',
     tilde: '~',
     replacementCharacter: '�'
   };

   /**
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Chunk} Chunk
    * @typedef {import('micromark-util-types').Point} Point
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
    * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').ParseContext} ParseContext
    */

   const debug = createDebug('micromark');

   /**
    * Create a tokenizer.
    * Tokenizers deal with one type of data (e.g., containers, flow, text).
    * The parser is the object dealing with it all.
    * `initialize` works like other constructs, except that only its `tokenize`
    * function is used, in which case it doesn’t receive an `ok` or `nok`.
    * `from` can be given to set the point before the first character, although
    * when further lines are indented, they must be set with `defineSkip`.
    *
    * @param {ParseContext} parser
    * @param {InitialConstruct} initialize
    * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]
    * @returns {TokenizeContext}
    */
   function createTokenizer(parser, initialize, from) {
     /** @type {Point} */
     let point = Object.assign(
       from ? Object.assign({}, from) : {line: 1, column: 1, offset: 0},
       {_index: 0, _bufferIndex: -1}
     );
     /** @type {Record<string, number>} */
     const columnStart = {};
     /** @type {Array<Construct>} */
     const resolveAllConstructs = [];
     /** @type {Array<Chunk>} */
     let chunks = [];
     /** @type {Array<Token>} */
     let stack = [];
     /** @type {boolean|undefined} */
     let consumed = true;

     /**
      * Tools used for tokenizing.
      *
      * @type {Effects}
      */
     const effects = {
       consume,
       enter,
       exit,
       attempt: constructFactory(onsuccessfulconstruct),
       check: constructFactory(onsuccessfulcheck),
       interrupt: constructFactory(onsuccessfulcheck, {interrupt: true})
     };

     /**
      * State and tools for resolving and serializing.
      *
      * @type {TokenizeContext}
      */
     const context = {
       previous: codes.eof,
       code: codes.eof,
       containerState: {},
       events: [],
       parser,
       sliceStream,
       sliceSerialize,
       now,
       defineSkip,
       write
     };

     /**
      * The state function.
      *
      * @type {State|void}
      */
     let state = initialize.tokenize.call(context, effects);

     /**
      * Track which character we expect to be consumed, to catch bugs.
      *
      * @type {Code}
      */
     let expectedCode;

     if (initialize.resolveAll) {
       resolveAllConstructs.push(initialize);
     }

     return context

     /** @type {TokenizeContext['write']} */
     function write(slice) {
       chunks = push(chunks, slice);

       main();

       // Exit if we’re not done, resolve might change stuff.
       if (chunks[chunks.length - 1] !== codes.eof) {
         return []
       }

       addResult(initialize, 0);

       // Otherwise, resolve, and exit.
       context.events = resolveAll(resolveAllConstructs, context.events, context);

       return context.events
     }

     //
     // Tools.
     //

     /** @type {TokenizeContext['sliceSerialize']} */
     function sliceSerialize(token, expandTabs) {
       return serializeChunks(sliceStream(token), expandTabs)
     }

     /** @type {TokenizeContext['sliceStream']} */
     function sliceStream(token) {
       return sliceChunks(chunks, token)
     }

     /** @type {TokenizeContext['now']} */
     function now() {
       return Object.assign({}, point)
     }

     /** @type {TokenizeContext['defineSkip']} */
     function defineSkip(value) {
       columnStart[value.line] = value.column;
       accountForPotentialSkip();
       debug('position: define skip: `%j`', point);
     }

     //
     // State management.
     //

     /**
      * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
      * `consume`).
      * Here is where we walk through the chunks, which either include strings of
      * several characters, or numerical character codes.
      * The reason to do this in a loop instead of a call is so the stack can
      * drain.
      *
      * @returns {void}
      */
     function main() {
       /** @type {number} */
       let chunkIndex;

       while (point._index < chunks.length) {
         const chunk = chunks[point._index];

         // If we’re in a buffer chunk, loop through it.
         if (typeof chunk === 'string') {
           chunkIndex = point._index;

           if (point._bufferIndex < 0) {
             point._bufferIndex = 0;
           }

           while (
             point._index === chunkIndex &&
             point._bufferIndex < chunk.length
           ) {
             go(chunk.charCodeAt(point._bufferIndex));
           }
         } else {
           go(chunk);
         }
       }
     }

     /**
      * Deal with one code.
      *
      * @param {Code} code
      * @returns {void}
      */
     function go(code) {
       ok$1(consumed === true, 'expected character to be consumed');
       consumed = undefined;
       debug('main: passing `%s` to %s', code, state && state.name);
       expectedCode = code;
       ok$1(typeof state === 'function', 'expected state');
       state = state(code);
     }

     /** @type {Effects['consume']} */
     function consume(code) {
       ok$1(code === expectedCode, 'expected given code to equal expected code');

       debug('consume: `%s`', code);

       ok$1(
         consumed === undefined,
         'expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used'
       );
       ok$1(
         code === null
           ? context.events.length === 0 ||
               context.events[context.events.length - 1][0] === 'exit'
           : context.events[context.events.length - 1][0] === 'enter',
         'expected last token to be open'
       );

       if (markdownLineEnding(code)) {
         point.line++;
         point.column = 1;
         point.offset += code === codes.carriageReturnLineFeed ? 2 : 1;
         accountForPotentialSkip();
         debug('position: after eol: `%j`', point);
       } else if (code !== codes.virtualSpace) {
         point.column++;
         point.offset++;
       }

       // Not in a string chunk.
       if (point._bufferIndex < 0) {
         point._index++;
       } else {
         point._bufferIndex++;

         // At end of string chunk.
         // @ts-expect-error Points w/ non-negative `_bufferIndex` reference
         // strings.
         if (point._bufferIndex === chunks[point._index].length) {
           point._bufferIndex = -1;
           point._index++;
         }
       }

       // Expose the previous character.
       context.previous = code;

       // Mark as consumed.
       consumed = true;
     }

     /** @type {Effects['enter']} */
     function enter(type, fields) {
       /** @type {Token} */
       // @ts-expect-error Patch instead of assign required fields to help GC.
       const token = fields || {};
       token.type = type;
       token.start = now();

       ok$1(typeof type === 'string', 'expected string type');
       ok$1(type.length > 0, 'expected non-empty string');
       debug('enter: `%s`', type);

       context.events.push(['enter', token, context]);

       stack.push(token);

       return token
     }

     /** @type {Effects['exit']} */
     function exit(type) {
       ok$1(typeof type === 'string', 'expected string type');
       ok$1(type.length > 0, 'expected non-empty string');

       const token = stack.pop();
       ok$1(token, 'cannot close w/o open tokens');
       token.end = now();

       ok$1(type === token.type, 'expected exit token to match current token');

       ok$1(
         !(
           token.start._index === token.end._index &&
           token.start._bufferIndex === token.end._bufferIndex
         ),
         'expected non-empty token (`' + type + '`)'
       );

       debug('exit: `%s`', token.type);
       context.events.push(['exit', token, context]);

       return token
     }

     /**
      * Use results.
      *
      * @type {ReturnHandle}
      */
     function onsuccessfulconstruct(construct, info) {
       addResult(construct, info.from);
     }

     /**
      * Discard results.
      *
      * @type {ReturnHandle}
      */
     function onsuccessfulcheck(_, info) {
       info.restore();
     }

     /**
      * Factory to attempt/check/interrupt.
      *
      * @param {ReturnHandle} onreturn
      * @param {Record<string, unknown>} [fields]
      */
     function constructFactory(onreturn, fields) {
       return hook

       /**
        * Handle either an object mapping codes to constructs, a list of
        * constructs, or a single construct.
        *
        * @param {Construct|Array<Construct>|ConstructRecord} constructs
        * @param {State} returnState
        * @param {State} [bogusState]
        * @returns {State}
        */
       function hook(constructs, returnState, bogusState) {
         /** @type {Array<Construct>} */
         let listOfConstructs;
         /** @type {number} */
         let constructIndex;
         /** @type {Construct} */
         let currentConstruct;
         /** @type {Info} */
         let info;

         return Array.isArray(constructs)
           ? /* c8 ignore next 1 */
             handleListOfConstructs(constructs)
           : 'tokenize' in constructs
           ? // @ts-expect-error Looks like a construct.
             handleListOfConstructs([constructs])
           : handleMapOfConstructs(constructs)

         /**
          * Handle a list of construct.
          *
          * @param {ConstructRecord} map
          * @returns {State}
          */
         function handleMapOfConstructs(map) {
           return start

           /** @type {State} */
           function start(code) {
             const def = code !== null && map[code];
             const all = code !== null && map.null;
             const list = [
               // To do: add more extension tests.
               /* c8 ignore next 2 */
               ...(Array.isArray(def) ? def : def ? [def] : []),
               ...(Array.isArray(all) ? all : all ? [all] : [])
             ];

             return handleListOfConstructs(list)(code)
           }
         }

         /**
          * Handle a list of construct.
          *
          * @param {Array<Construct>} list
          * @returns {State}
          */
         function handleListOfConstructs(list) {
           listOfConstructs = list;
           constructIndex = 0;

           if (list.length === 0) {
             ok$1(bogusState, 'expected `bogusState` to be given');
             return bogusState
           }

           return handleConstruct(list[constructIndex])
         }

         /**
          * Handle a single construct.
          *
          * @param {Construct} construct
          * @returns {State}
          */
         function handleConstruct(construct) {
           return start

           /** @type {State} */
           function start(code) {
             // To do: not needed to store if there is no bogus state, probably?
             // Currently doesn’t work because `inspect` in document does a check
             // w/o a bogus, which doesn’t make sense. But it does seem to help perf
             // by not storing.
             info = store();
             currentConstruct = construct;

             if (!construct.partial) {
               context.currentConstruct = construct;
             }

             if (
               construct.name &&
               context.parser.constructs.disable.null.includes(construct.name)
             ) {
               return nok(code)
             }

             return construct.tokenize.call(
               // If we do have fields, create an object w/ `context` as its
               // prototype.
               // This allows a “live binding”, which is needed for `interrupt`.
               fields ? Object.assign(Object.create(context), fields) : context,
               effects,
               ok,
               nok
             )(code)
           }
         }

         /** @type {State} */
         function ok(code) {
           ok$1(code === expectedCode, 'expected code');
           consumed = true;
           onreturn(currentConstruct, info);
           return returnState
         }

         /** @type {State} */
         function nok(code) {
           ok$1(code === expectedCode, 'expected code');
           consumed = true;
           info.restore();

           if (++constructIndex < listOfConstructs.length) {
             return handleConstruct(listOfConstructs[constructIndex])
           }

           return bogusState
         }
       }
     }

     /**
      * @param {Construct} construct
      * @param {number} from
      * @returns {void}
      */
     function addResult(construct, from) {
       if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
         resolveAllConstructs.push(construct);
       }

       if (construct.resolve) {
         splice(
           context.events,
           from,
           context.events.length - from,
           construct.resolve(context.events.slice(from), context)
         );
       }

       if (construct.resolveTo) {
         context.events = construct.resolveTo(context.events, context);
       }

       ok$1(
         construct.partial ||
           context.events.length === 0 ||
           context.events[context.events.length - 1][0] === 'exit',
         'expected last token to end'
       );
     }

     /**
      * Store state.
      *
      * @returns {Info}
      */
     function store() {
       const startPoint = now();
       const startPrevious = context.previous;
       const startCurrentConstruct = context.currentConstruct;
       const startEventsIndex = context.events.length;
       const startStack = Array.from(stack);

       return {restore, from: startEventsIndex}

       /**
        * Restore state.
        *
        * @returns {void}
        */
       function restore() {
         point = startPoint;
         context.previous = startPrevious;
         context.currentConstruct = startCurrentConstruct;
         context.events.length = startEventsIndex;
         stack = startStack;
         accountForPotentialSkip();
         debug('position: restore: `%j`', point);
       }
     }

     /**
      * Move the current point a bit forward in the line when it’s on a column
      * skip.
      *
      * @returns {void}
      */
     function accountForPotentialSkip() {
       if (point.line in columnStart && point.column < 2) {
         point.column = columnStart[point.line];
         point.offset += columnStart[point.line] - 1;
       }
     }
   }

   /**
    * Get the chunks from a slice of chunks in the range of a token.
    *
    * @param {Array<Chunk>} chunks
    * @param {Pick<Token, 'start'|'end'>} token
    * @returns {Array<Chunk>}
    */
   function sliceChunks(chunks, token) {
     const startIndex = token.start._index;
     const startBufferIndex = token.start._bufferIndex;
     const endIndex = token.end._index;
     const endBufferIndex = token.end._bufferIndex;
     /** @type {Array<Chunk>} */
     let view;

     if (startIndex === endIndex) {
       ok$1(endBufferIndex > -1, 'expected non-negative end buffer index');
       ok$1(startBufferIndex > -1, 'expected non-negative start buffer index');
       // @ts-expect-error `_bufferIndex` is used on string chunks.
       view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
     } else {
       view = chunks.slice(startIndex, endIndex);

       if (startBufferIndex > -1) {
         // @ts-expect-error `_bufferIndex` is used on string chunks.
         view[0] = view[0].slice(startBufferIndex);
       }

       if (endBufferIndex > 0) {
         // @ts-expect-error `_bufferIndex` is used on string chunks.
         view.push(chunks[endIndex].slice(0, endBufferIndex));
       }
     }

     return view
   }

   /**
    * Get the string value of a slice of chunks.
    *
    * @param {Array<Chunk>} chunks
    * @param {boolean} [expandTabs=false]
    * @returns {string}
    */
   function serializeChunks(chunks, expandTabs) {
     let index = -1;
     /** @type {Array<string>} */
     const result = [];
     /** @type {boolean|undefined} */
     let atTab;

     while (++index < chunks.length) {
       const chunk = chunks[index];
       /** @type {string} */
       let value;

       if (typeof chunk === 'string') {
         value = chunk;
       } else
         switch (chunk) {
           case codes.carriageReturn: {
             value = values.cr;

             break
           }

           case codes.lineFeed: {
             value = values.lf;

             break
           }

           case codes.carriageReturnLineFeed: {
             value = values.cr + values.lf;

             break
           }

           case codes.horizontalTab: {
             value = expandTabs ? values.space : values.ht;

             break
           }

           case codes.virtualSpace: {
             if (!expandTabs && atTab) continue
             value = values.space;

             break
           }

           default: {
             ok$1(typeof chunk === 'number', 'expected number');
             // Currently only replacement character.
             value = String.fromCharCode(chunk);
           }
         }

       atTab = chunk === codes.horizontalTab;
       result.push(value);
     }

     return result.join('')
   }

   /**
    * @typedef {import('micromark-util-types').Extension} Extension
    */

   /** @type {Extension['document']} */
   const document$1 = {
     [codes.asterisk]: list$2,
     [codes.plusSign]: list$2,
     [codes.dash]: list$2,
     [codes.digit0]: list$2,
     [codes.digit1]: list$2,
     [codes.digit2]: list$2,
     [codes.digit3]: list$2,
     [codes.digit4]: list$2,
     [codes.digit5]: list$2,
     [codes.digit6]: list$2,
     [codes.digit7]: list$2,
     [codes.digit8]: list$2,
     [codes.digit9]: list$2,
     [codes.greaterThan]: blockQuote
   };

   /** @type {Extension['contentInitial']} */
   const contentInitial = {
     [codes.leftSquareBracket]: definition$1
   };

   /** @type {Extension['flowInitial']} */
   const flowInitial = {
     [codes.horizontalTab]: codeIndented,
     [codes.virtualSpace]: codeIndented,
     [codes.space]: codeIndented
   };

   /** @type {Extension['flow']} */
   const flow = {
     [codes.numberSign]: headingAtx,
     [codes.asterisk]: thematicBreak$1,
     [codes.dash]: [setextUnderline, thematicBreak$1],
     [codes.lessThan]: htmlFlow,
     [codes.equalsTo]: setextUnderline,
     [codes.underscore]: thematicBreak$1,
     [codes.graveAccent]: codeFenced,
     [codes.tilde]: codeFenced
   };

   /** @type {Extension['string']} */
   const string = {
     [codes.ampersand]: characterReference,
     [codes.backslash]: characterEscape
   };

   /** @type {Extension['text']} */
   const text$3 = {
     [codes.carriageReturn]: lineEnding,
     [codes.lineFeed]: lineEnding,
     [codes.carriageReturnLineFeed]: lineEnding,
     [codes.exclamationMark]: labelStartImage,
     [codes.ampersand]: characterReference,
     [codes.asterisk]: attention,
     [codes.lessThan]: [autolink, htmlText],
     [codes.leftSquareBracket]: labelStartLink,
     [codes.backslash]: [hardBreakEscape, characterEscape],
     [codes.rightSquareBracket]: labelEnd,
     [codes.underscore]: attention,
     [codes.graveAccent]: codeText
   };

   /** @type {Extension['insideSpan']} */
   const insideSpan = {null: [attention, resolver]};

   /** @type {Extension['attentionMarkers']} */
   const attentionMarkers = {null: [codes.asterisk, codes.underscore]};

   /** @type {Extension['disable']} */
   const disable = {null: []};

   var defaultConstructs = /*#__PURE__*/Object.freeze({
      __proto__: null,
      document: document$1,
      contentInitial: contentInitial,
      flowInitial: flowInitial,
      flow: flow,
      string: string,
      text: text$3,
      insideSpan: insideSpan,
      attentionMarkers: attentionMarkers,
      disable: disable
   });

   /**
    * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
    * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension
    * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
    * @typedef {import('micromark-util-types').ParseContext} ParseContext
    * @typedef {import('micromark-util-types').Create} Create
    */

   /**
    * @param {ParseOptions} [options]
    * @returns {ParseContext}
    */
   function parse$3(options = {}) {
     /** @type {FullNormalizedExtension} */
     // @ts-expect-error `defaultConstructs` is full, so the result will be too.
     const constructs = combineExtensions(
       // @ts-expect-error Same as above.
       [defaultConstructs].concat(options.extensions || [])
     );
     /** @type {ParseContext} */
     const parser = {
       defined: [],
       lazy: {},
       constructs,
       content: create(content$3),
       document: create(document$2),
       flow: create(flow$1),
       string: create(string$1),
       text: create(text$4)
     };

     return parser

     /**
      * @param {InitialConstruct} initial
      */
     function create(initial) {
       return creator
       /** @type {Create} */
       function creator(from) {
         return createTokenizer(parser, initial, from)
       }
     }
   }

   /**
    * @typedef {import('micromark-util-types').Event} Event
    */

   /**
    * @param {Array<Event>} events
    * @returns {Array<Event>}
    */
   function postprocess(events) {
     while (!subtokenize(events)) {
       // Empty
     }

     return events
   }

   /**
    * @typedef {import('micromark-util-types').Encoding} Encoding
    * @typedef {import('micromark-util-types').Value} Value
    * @typedef {import('micromark-util-types').Chunk} Chunk
    * @typedef {import('micromark-util-types').Code} Code
    */

   const search$1 = /[\0\t\n\r]/g;

   /**
    * @returns {Preprocessor}
    */
   function preprocess() {
     let column = 1;
     let buffer = '';
     /** @type {boolean|undefined} */
     let start = true;
     /** @type {boolean|undefined} */
     let atCarriageReturn;

     return preprocessor

     /** @type {Preprocessor} */
     function preprocessor(value, encoding, end) {
       /** @type {Array<Chunk>} */
       const chunks = [];
       /** @type {RegExpMatchArray|null} */
       let match;
       /** @type {number} */
       let next;
       /** @type {number} */
       let startPosition;
       /** @type {number} */
       let endPosition;
       /** @type {Code} */
       let code;

       // @ts-expect-error `Buffer` does allow an encoding.
       value = buffer + value.toString(encoding);
       startPosition = 0;
       buffer = '';

       if (start) {
         if (value.charCodeAt(0) === codes.byteOrderMarker) {
           startPosition++;
         }

         start = undefined;
       }

       while (startPosition < value.length) {
         search$1.lastIndex = startPosition;
         match = search$1.exec(value);
         endPosition =
           match && match.index !== undefined ? match.index : value.length;
         code = value.charCodeAt(endPosition);

         if (!match) {
           buffer = value.slice(startPosition);
           break
         }

         if (
           code === codes.lf &&
           startPosition === endPosition &&
           atCarriageReturn
         ) {
           chunks.push(codes.carriageReturnLineFeed);
           atCarriageReturn = undefined;
         } else {
           if (atCarriageReturn) {
             chunks.push(codes.carriageReturn);
             atCarriageReturn = undefined;
           }

           if (startPosition < endPosition) {
             chunks.push(value.slice(startPosition, endPosition));
             column += endPosition - startPosition;
           }

           switch (code) {
             case codes.nul: {
               chunks.push(codes.replacementCharacter);
               column++;

               break
             }

             case codes.ht: {
               next = Math.ceil(column / constants.tabSize) * constants.tabSize;
               chunks.push(codes.horizontalTab);
               while (column++ < next) chunks.push(codes.virtualSpace);

               break
             }

             case codes.lf: {
               chunks.push(codes.lineFeed);
               column = 1;

               break
             }

             default: {
               atCarriageReturn = true;
               column = 1;
             }
           }
         }

         startPosition = endPosition + 1;
       }

       if (end) {
         if (atCarriageReturn) chunks.push(codes.carriageReturn);
         if (buffer) chunks.push(buffer);
         chunks.push(codes.eof);
       }

       return chunks
     }
   }

   /**
    * @typedef {import('micromark-util-types').Options} Options
    * @typedef {import('micromark-util-types').Value} Value
    * @typedef {import('micromark-util-types').Encoding} Encoding
    */

   /**
    * @param value Markdown to parse (`string` or `Buffer`).
    * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).
    * @param [options] Configuration
    */
   const micromark =
     /**
      * @type {(
      *   ((value: Value, encoding: Encoding, options?: Options) => string) &
      *   ((value: Value, options?: Options) => string)
      * )}
      */
     (
       /**
        * @param {Value} value
        * @param {Encoding} [encoding]
        * @param {Options} [options]
        */
       function (value, encoding, options) {
         if (typeof encoding !== 'string') {
           options = encoding;
           encoding = undefined;
         }

         return compile(options)(
           postprocess(
             parse$3(options).document().write(preprocess()(value, encoding, true))
           )
         )
       }
     );

   const UNDEFINED_CODE_POINTS = new Set([
       65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214,
       393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894,
       720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574,
       1048575, 1114110, 1114111,
   ]);
   const REPLACEMENT_CHARACTER = '\uFFFD';
   var CODE_POINTS;
   (function (CODE_POINTS) {
       CODE_POINTS[CODE_POINTS["EOF"] = -1] = "EOF";
       CODE_POINTS[CODE_POINTS["NULL"] = 0] = "NULL";
       CODE_POINTS[CODE_POINTS["TABULATION"] = 9] = "TABULATION";
       CODE_POINTS[CODE_POINTS["CARRIAGE_RETURN"] = 13] = "CARRIAGE_RETURN";
       CODE_POINTS[CODE_POINTS["LINE_FEED"] = 10] = "LINE_FEED";
       CODE_POINTS[CODE_POINTS["FORM_FEED"] = 12] = "FORM_FEED";
       CODE_POINTS[CODE_POINTS["SPACE"] = 32] = "SPACE";
       CODE_POINTS[CODE_POINTS["EXCLAMATION_MARK"] = 33] = "EXCLAMATION_MARK";
       CODE_POINTS[CODE_POINTS["QUOTATION_MARK"] = 34] = "QUOTATION_MARK";
       CODE_POINTS[CODE_POINTS["NUMBER_SIGN"] = 35] = "NUMBER_SIGN";
       CODE_POINTS[CODE_POINTS["AMPERSAND"] = 38] = "AMPERSAND";
       CODE_POINTS[CODE_POINTS["APOSTROPHE"] = 39] = "APOSTROPHE";
       CODE_POINTS[CODE_POINTS["HYPHEN_MINUS"] = 45] = "HYPHEN_MINUS";
       CODE_POINTS[CODE_POINTS["SOLIDUS"] = 47] = "SOLIDUS";
       CODE_POINTS[CODE_POINTS["DIGIT_0"] = 48] = "DIGIT_0";
       CODE_POINTS[CODE_POINTS["DIGIT_9"] = 57] = "DIGIT_9";
       CODE_POINTS[CODE_POINTS["SEMICOLON"] = 59] = "SEMICOLON";
       CODE_POINTS[CODE_POINTS["LESS_THAN_SIGN"] = 60] = "LESS_THAN_SIGN";
       CODE_POINTS[CODE_POINTS["EQUALS_SIGN"] = 61] = "EQUALS_SIGN";
       CODE_POINTS[CODE_POINTS["GREATER_THAN_SIGN"] = 62] = "GREATER_THAN_SIGN";
       CODE_POINTS[CODE_POINTS["QUESTION_MARK"] = 63] = "QUESTION_MARK";
       CODE_POINTS[CODE_POINTS["LATIN_CAPITAL_A"] = 65] = "LATIN_CAPITAL_A";
       CODE_POINTS[CODE_POINTS["LATIN_CAPITAL_F"] = 70] = "LATIN_CAPITAL_F";
       CODE_POINTS[CODE_POINTS["LATIN_CAPITAL_X"] = 88] = "LATIN_CAPITAL_X";
       CODE_POINTS[CODE_POINTS["LATIN_CAPITAL_Z"] = 90] = "LATIN_CAPITAL_Z";
       CODE_POINTS[CODE_POINTS["RIGHT_SQUARE_BRACKET"] = 93] = "RIGHT_SQUARE_BRACKET";
       CODE_POINTS[CODE_POINTS["GRAVE_ACCENT"] = 96] = "GRAVE_ACCENT";
       CODE_POINTS[CODE_POINTS["LATIN_SMALL_A"] = 97] = "LATIN_SMALL_A";
       CODE_POINTS[CODE_POINTS["LATIN_SMALL_F"] = 102] = "LATIN_SMALL_F";
       CODE_POINTS[CODE_POINTS["LATIN_SMALL_X"] = 120] = "LATIN_SMALL_X";
       CODE_POINTS[CODE_POINTS["LATIN_SMALL_Z"] = 122] = "LATIN_SMALL_Z";
       CODE_POINTS[CODE_POINTS["REPLACEMENT_CHARACTER"] = 65533] = "REPLACEMENT_CHARACTER";
   })(CODE_POINTS || (CODE_POINTS = {}));
   const SEQUENCES = {
       DASH_DASH: '--',
       CDATA_START: '[CDATA[',
       DOCTYPE: 'doctype',
       SCRIPT: 'script',
       PUBLIC: 'public',
       SYSTEM: 'system',
   };
   //Surrogates
   function isSurrogate(cp) {
       return cp >= 55296 && cp <= 57343;
   }
   function isSurrogatePair(cp) {
       return cp >= 56320 && cp <= 57343;
   }
   function getSurrogatePairCodePoint(cp1, cp2) {
       return (cp1 - 55296) * 1024 + 9216 + cp2;
   }
   //NOTE: excluding NULL and ASCII whitespace
   function isControlCodePoint(cp) {
       return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||
           (cp >= 0x7f && cp <= 0x9f));
   }
   function isUndefinedCodePoint(cp) {
       return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);
   }

   var ERR;
   (function (ERR) {
       ERR["controlCharacterInInputStream"] = "control-character-in-input-stream";
       ERR["noncharacterInInputStream"] = "noncharacter-in-input-stream";
       ERR["surrogateInInputStream"] = "surrogate-in-input-stream";
       ERR["nonVoidHtmlElementStartTagWithTrailingSolidus"] = "non-void-html-element-start-tag-with-trailing-solidus";
       ERR["endTagWithAttributes"] = "end-tag-with-attributes";
       ERR["endTagWithTrailingSolidus"] = "end-tag-with-trailing-solidus";
       ERR["unexpectedSolidusInTag"] = "unexpected-solidus-in-tag";
       ERR["unexpectedNullCharacter"] = "unexpected-null-character";
       ERR["unexpectedQuestionMarkInsteadOfTagName"] = "unexpected-question-mark-instead-of-tag-name";
       ERR["invalidFirstCharacterOfTagName"] = "invalid-first-character-of-tag-name";
       ERR["unexpectedEqualsSignBeforeAttributeName"] = "unexpected-equals-sign-before-attribute-name";
       ERR["missingEndTagName"] = "missing-end-tag-name";
       ERR["unexpectedCharacterInAttributeName"] = "unexpected-character-in-attribute-name";
       ERR["unknownNamedCharacterReference"] = "unknown-named-character-reference";
       ERR["missingSemicolonAfterCharacterReference"] = "missing-semicolon-after-character-reference";
       ERR["unexpectedCharacterAfterDoctypeSystemIdentifier"] = "unexpected-character-after-doctype-system-identifier";
       ERR["unexpectedCharacterInUnquotedAttributeValue"] = "unexpected-character-in-unquoted-attribute-value";
       ERR["eofBeforeTagName"] = "eof-before-tag-name";
       ERR["eofInTag"] = "eof-in-tag";
       ERR["missingAttributeValue"] = "missing-attribute-value";
       ERR["missingWhitespaceBetweenAttributes"] = "missing-whitespace-between-attributes";
       ERR["missingWhitespaceAfterDoctypePublicKeyword"] = "missing-whitespace-after-doctype-public-keyword";
       ERR["missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers"] = "missing-whitespace-between-doctype-public-and-system-identifiers";
       ERR["missingWhitespaceAfterDoctypeSystemKeyword"] = "missing-whitespace-after-doctype-system-keyword";
       ERR["missingQuoteBeforeDoctypePublicIdentifier"] = "missing-quote-before-doctype-public-identifier";
       ERR["missingQuoteBeforeDoctypeSystemIdentifier"] = "missing-quote-before-doctype-system-identifier";
       ERR["missingDoctypePublicIdentifier"] = "missing-doctype-public-identifier";
       ERR["missingDoctypeSystemIdentifier"] = "missing-doctype-system-identifier";
       ERR["abruptDoctypePublicIdentifier"] = "abrupt-doctype-public-identifier";
       ERR["abruptDoctypeSystemIdentifier"] = "abrupt-doctype-system-identifier";
       ERR["cdataInHtmlContent"] = "cdata-in-html-content";
       ERR["incorrectlyOpenedComment"] = "incorrectly-opened-comment";
       ERR["eofInScriptHtmlCommentLikeText"] = "eof-in-script-html-comment-like-text";
       ERR["eofInDoctype"] = "eof-in-doctype";
       ERR["nestedComment"] = "nested-comment";
       ERR["abruptClosingOfEmptyComment"] = "abrupt-closing-of-empty-comment";
       ERR["eofInComment"] = "eof-in-comment";
       ERR["incorrectlyClosedComment"] = "incorrectly-closed-comment";
       ERR["eofInCdata"] = "eof-in-cdata";
       ERR["absenceOfDigitsInNumericCharacterReference"] = "absence-of-digits-in-numeric-character-reference";
       ERR["nullCharacterReference"] = "null-character-reference";
       ERR["surrogateCharacterReference"] = "surrogate-character-reference";
       ERR["characterReferenceOutsideUnicodeRange"] = "character-reference-outside-unicode-range";
       ERR["controlCharacterReference"] = "control-character-reference";
       ERR["noncharacterCharacterReference"] = "noncharacter-character-reference";
       ERR["missingWhitespaceBeforeDoctypeName"] = "missing-whitespace-before-doctype-name";
       ERR["missingDoctypeName"] = "missing-doctype-name";
       ERR["invalidCharacterSequenceAfterDoctypeName"] = "invalid-character-sequence-after-doctype-name";
       ERR["duplicateAttribute"] = "duplicate-attribute";
       ERR["nonConformingDoctype"] = "non-conforming-doctype";
       ERR["missingDoctype"] = "missing-doctype";
       ERR["misplacedDoctype"] = "misplaced-doctype";
       ERR["endTagWithoutMatchingOpenElement"] = "end-tag-without-matching-open-element";
       ERR["closingOfElementWithOpenChildElements"] = "closing-of-element-with-open-child-elements";
       ERR["disallowedContentInNoscriptInHead"] = "disallowed-content-in-noscript-in-head";
       ERR["openElementsLeftAfterEof"] = "open-elements-left-after-eof";
       ERR["abandonedHeadElementChild"] = "abandoned-head-element-child";
       ERR["misplacedStartTagForHeadElement"] = "misplaced-start-tag-for-head-element";
       ERR["nestedNoscriptInHead"] = "nested-noscript-in-head";
       ERR["eofInElementThatCanContainOnlyText"] = "eof-in-element-that-can-contain-only-text";
   })(ERR || (ERR = {}));

   //Const
   const DEFAULT_BUFFER_WATERLINE = 1 << 16;
   //Preprocessor
   //NOTE: HTML input preprocessing
   //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)
   class Preprocessor {
       constructor(handler) {
           this.handler = handler;
           this.html = '';
           this.pos = -1;
           // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0
           this.lastGapPos = -2;
           this.gapStack = [];
           this.skipNextNewLine = false;
           this.lastChunkWritten = false;
           this.endOfChunkHit = false;
           this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
           this.isEol = false;
           this.lineStartPos = 0;
           this.droppedBufferSize = 0;
           this.line = 1;
           //NOTE: avoid reporting errors twice on advance/retreat
           this.lastErrOffset = -1;
       }
       /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */
       get col() {
           return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);
       }
       get offset() {
           return this.droppedBufferSize + this.pos;
       }
       getError(code) {
           const { line, col, offset } = this;
           return {
               code,
               startLine: line,
               endLine: line,
               startCol: col,
               endCol: col,
               startOffset: offset,
               endOffset: offset,
           };
       }
       _err(code) {
           if (this.handler.onParseError && this.lastErrOffset !== this.offset) {
               this.lastErrOffset = this.offset;
               this.handler.onParseError(this.getError(code));
           }
       }
       _addGap() {
           this.gapStack.push(this.lastGapPos);
           this.lastGapPos = this.pos;
       }
       _processSurrogate(cp) {
           //NOTE: try to peek a surrogate pair
           if (this.pos !== this.html.length - 1) {
               const nextCp = this.html.charCodeAt(this.pos + 1);
               if (isSurrogatePair(nextCp)) {
                   //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.
                   this.pos++;
                   //NOTE: add a gap that should be avoided during retreat
                   this._addGap();
                   return getSurrogatePairCodePoint(cp, nextCp);
               }
           }
           //NOTE: we are at the end of a chunk, therefore we can't infer the surrogate pair yet.
           else if (!this.lastChunkWritten) {
               this.endOfChunkHit = true;
               return CODE_POINTS.EOF;
           }
           //NOTE: isolated surrogate
           this._err(ERR.surrogateInInputStream);
           return cp;
       }
       willDropParsedChunk() {
           return this.pos > this.bufferWaterline;
       }
       dropParsedChunk() {
           if (this.willDropParsedChunk()) {
               this.html = this.html.substring(this.pos);
               this.lineStartPos -= this.pos;
               this.droppedBufferSize += this.pos;
               this.pos = 0;
               this.lastGapPos = -2;
               this.gapStack.length = 0;
           }
       }
       write(chunk, isLastChunk) {
           if (this.html.length > 0) {
               this.html += chunk;
           }
           else {
               this.html = chunk;
           }
           this.endOfChunkHit = false;
           this.lastChunkWritten = isLastChunk;
       }
       insertHtmlAtCurrentPos(chunk) {
           this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);
           this.endOfChunkHit = false;
       }
       startsWith(pattern, caseSensitive) {
           // Check if our buffer has enough characters
           if (this.pos + pattern.length > this.html.length) {
               this.endOfChunkHit = !this.lastChunkWritten;
               return false;
           }
           if (caseSensitive) {
               return this.html.startsWith(pattern, this.pos);
           }
           for (let i = 0; i < pattern.length; i++) {
               const cp = this.html.charCodeAt(this.pos + i) | 0x20;
               if (cp !== pattern.charCodeAt(i)) {
                   return false;
               }
           }
           return true;
       }
       peek(offset) {
           const pos = this.pos + offset;
           if (pos >= this.html.length) {
               this.endOfChunkHit = !this.lastChunkWritten;
               return CODE_POINTS.EOF;
           }
           return this.html.charCodeAt(pos);
       }
       advance() {
           this.pos++;
           //NOTE: LF should be in the last column of the line
           if (this.isEol) {
               this.isEol = false;
               this.line++;
               this.lineStartPos = this.pos;
           }
           if (this.pos >= this.html.length) {
               this.endOfChunkHit = !this.lastChunkWritten;
               return CODE_POINTS.EOF;
           }
           let cp = this.html.charCodeAt(this.pos);
           //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters
           if (cp === CODE_POINTS.CARRIAGE_RETURN) {
               this.isEol = true;
               this.skipNextNewLine = true;
               return CODE_POINTS.LINE_FEED;
           }
           //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character
           //must be ignored.
           if (cp === CODE_POINTS.LINE_FEED) {
               this.isEol = true;
               if (this.skipNextNewLine) {
                   // `line` will be bumped again in the recursive call.
                   this.line--;
                   this.skipNextNewLine = false;
                   this._addGap();
                   return this.advance();
               }
           }
           this.skipNextNewLine = false;
           if (isSurrogate(cp)) {
               cp = this._processSurrogate(cp);
           }
           //OPTIMIZATION: first check if code point is in the common allowed
           //range (ASCII alphanumeric, whitespaces, big chunk of BMP)
           //before going into detailed performance cost validation.
           const isCommonValidRange = this.handler.onParseError === null ||
               (cp > 0x1f && cp < 0x7f) ||
               cp === CODE_POINTS.LINE_FEED ||
               cp === CODE_POINTS.CARRIAGE_RETURN ||
               (cp > 0x9f && cp < 64976);
           if (!isCommonValidRange) {
               this._checkForProblematicCharacters(cp);
           }
           return cp;
       }
       _checkForProblematicCharacters(cp) {
           if (isControlCodePoint(cp)) {
               this._err(ERR.controlCharacterInInputStream);
           }
           else if (isUndefinedCodePoint(cp)) {
               this._err(ERR.noncharacterInInputStream);
           }
       }
       retreat(count) {
           this.pos -= count;
           while (this.pos < this.lastGapPos) {
               this.lastGapPos = this.gapStack.pop();
               this.pos--;
           }
           this.isEol = false;
       }
   }

   var TokenType;
   (function (TokenType) {
       TokenType[TokenType["CHARACTER"] = 0] = "CHARACTER";
       TokenType[TokenType["NULL_CHARACTER"] = 1] = "NULL_CHARACTER";
       TokenType[TokenType["WHITESPACE_CHARACTER"] = 2] = "WHITESPACE_CHARACTER";
       TokenType[TokenType["START_TAG"] = 3] = "START_TAG";
       TokenType[TokenType["END_TAG"] = 4] = "END_TAG";
       TokenType[TokenType["COMMENT"] = 5] = "COMMENT";
       TokenType[TokenType["DOCTYPE"] = 6] = "DOCTYPE";
       TokenType[TokenType["EOF"] = 7] = "EOF";
       TokenType[TokenType["HIBERNATION"] = 8] = "HIBERNATION";
   })(TokenType || (TokenType = {}));
   function getTokenAttr(token, attrName) {
       for (let i = token.attrs.length - 1; i >= 0; i--) {
           if (token.attrs[i].name === attrName) {
               return token.attrs[i].value;
           }
       }
       return null;
   }

   // Generated using scripts/write-decode-map.ts
   // prettier-ignore
   var htmlDecodeTree = new Uint16Array([7489, 60, 213, 305, 650, 1181, 1403, 1488, 1653, 1758, 1954, 2006, 2063, 2634, 2705, 3489, 3693, 3849, 3878, 4298, 4648, 4833, 5141, 5277, 5315, 5343, 5413, 0, 0, 0, 0, 0, 0, 5483, 5837, 6541, 7186, 7645, 8062, 8288, 8624, 8845, 9152, 9211, 9282, 10276, 10514, 11528, 11848, 12238, 12310, 12986, 13881, 14252, 14590, 14888, 14961, 15072, 15150, 2048, 69, 77, 97, 98, 99, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 92, 98, 102, 109, 115, 127, 132, 139, 144, 149, 152, 166, 179, 185, 200, 207, 108, 105, 103, 32827, 198, 16582, 80, 32827, 38, 16422, 99, 117, 116, 101, 32827, 193, 16577, 114, 101, 118, 101, 59, 16642, 256, 105, 121, 120, 125, 114, 99, 32827, 194, 16578, 59, 17424, 114, 59, 49152, 55349, 56580, 114, 97, 118, 101, 32827, 192, 16576, 112, 104, 97, 59, 17297, 97, 99, 114, 59, 16640, 100, 59, 27219, 256, 103, 112, 157, 161, 111, 110, 59, 16644, 102, 59, 49152, 55349, 56632, 112, 108, 121, 70, 117, 110, 99, 116, 105, 111, 110, 59, 24673, 105, 110, 103, 32827, 197, 16581, 256, 99, 115, 190, 195, 114, 59, 49152, 55349, 56476, 105, 103, 110, 59, 25172, 105, 108, 100, 101, 32827, 195, 16579, 109, 108, 32827, 196, 16580, 1024, 97, 99, 101, 102, 111, 114, 115, 117, 229, 251, 254, 279, 284, 290, 295, 298, 256, 99, 114, 234, 242, 107, 115, 108, 97, 115, 104, 59, 25110, 374, 246, 248, 59, 27367, 101, 100, 59, 25350, 121, 59, 17425, 384, 99, 114, 116, 261, 267, 276, 97, 117, 115, 101, 59, 25141, 110, 111, 117, 108, 108, 105, 115, 59, 24876, 97, 59, 17298, 114, 59, 49152, 55349, 56581, 112, 102, 59, 49152, 55349, 56633, 101, 118, 101, 59, 17112, 99, 242, 275, 109, 112, 101, 113, 59, 25166, 1792, 72, 79, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 117, 333, 337, 342, 384, 414, 418, 437, 439, 442, 476, 533, 627, 632, 638, 99, 121, 59, 17447, 80, 89, 32827, 169, 16553, 384, 99, 112, 121, 349, 354, 378, 117, 116, 101, 59, 16646, 256, 59, 105, 359, 360, 25298, 116, 97, 108, 68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 24901, 108, 101, 121, 115, 59, 24877, 512, 97, 101, 105, 111, 393, 398, 404, 408, 114, 111, 110, 59, 16652, 100, 105, 108, 32827, 199, 16583, 114, 99, 59, 16648, 110, 105, 110, 116, 59, 25136, 111, 116, 59, 16650, 256, 100, 110, 423, 429, 105, 108, 108, 97, 59, 16568, 116, 101, 114, 68, 111, 116, 59, 16567, 242, 383, 105, 59, 17319, 114, 99, 108, 101, 512, 68, 77, 80, 84, 455, 459, 465, 470, 111, 116, 59, 25241, 105, 110, 117, 115, 59, 25238, 108, 117, 115, 59, 25237, 105, 109, 101, 115, 59, 25239, 111, 256, 99, 115, 482, 504, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 25138, 101, 67, 117, 114, 108, 121, 256, 68, 81, 515, 527, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 24605, 117, 111, 116, 101, 59, 24601, 512, 108, 110, 112, 117, 542, 552, 583, 597, 111, 110, 256, 59, 101, 549, 550, 25143, 59, 27252, 384, 103, 105, 116, 559, 566, 570, 114, 117, 101, 110, 116, 59, 25185, 110, 116, 59, 25135, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 25134, 256, 102, 114, 588, 590, 59, 24834, 111, 100, 117, 99, 116, 59, 25104, 110, 116, 101, 114, 67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 25139, 111, 115, 115, 59, 27183, 99, 114, 59, 49152, 55349, 56478, 112, 256, 59, 67, 644, 645, 25299, 97, 112, 59, 25165, 1408, 68, 74, 83, 90, 97, 99, 101, 102, 105, 111, 115, 672, 684, 688, 692, 696, 715, 727, 737, 742, 819, 1165, 256, 59, 111, 377, 677, 116, 114, 97, 104, 100, 59, 26897, 99, 121, 59, 17410, 99, 121, 59, 17413, 99, 121, 59, 17423, 384, 103, 114, 115, 703, 708, 711, 103, 101, 114, 59, 24609, 114, 59, 24993, 104, 118, 59, 27364, 256, 97, 121, 720, 725, 114, 111, 110, 59, 16654, 59, 17428, 108, 256, 59, 116, 733, 734, 25095, 97, 59, 17300, 114, 59, 49152, 55349, 56583, 256, 97, 102, 747, 807, 256, 99, 109, 752, 802, 114, 105, 116, 105, 99, 97, 108, 512, 65, 68, 71, 84, 768, 774, 790, 796, 99, 117, 116, 101, 59, 16564, 111, 372, 779, 781, 59, 17113, 98, 108, 101, 65, 99, 117, 116, 101, 59, 17117, 114, 97, 118, 101, 59, 16480, 105, 108, 100, 101, 59, 17116, 111, 110, 100, 59, 25284, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 24902, 1136, 829, 0, 0, 0, 834, 852, 0, 1029, 102, 59, 49152, 55349, 56635, 384, 59, 68, 69, 840, 841, 845, 16552, 111, 116, 59, 24796, 113, 117, 97, 108, 59, 25168, 98, 108, 101, 768, 67, 68, 76, 82, 85, 86, 867, 882, 898, 975, 994, 1016, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 236, 569, 111, 628, 889, 0, 0, 891, 187, 841, 110, 65, 114, 114, 111, 119, 59, 25043, 256, 101, 111, 903, 932, 102, 116, 384, 65, 82, 84, 912, 918, 929, 114, 114, 111, 119, 59, 25040, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 25044, 101, 229, 714, 110, 103, 256, 76, 82, 939, 964, 101, 102, 116, 256, 65, 82, 947, 953, 114, 114, 111, 119, 59, 26616, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 26618, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 26617, 105, 103, 104, 116, 256, 65, 84, 984, 990, 114, 114, 111, 119, 59, 25042, 101, 101, 59, 25256, 112, 577, 1001, 0, 0, 1007, 114, 114, 111, 119, 59, 25041, 111, 119, 110, 65, 114, 114, 111, 119, 59, 25045, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 25125, 110, 768, 65, 66, 76, 82, 84, 97, 1042, 1066, 1072, 1118, 1151, 892, 114, 114, 111, 119, 384, 59, 66, 85, 1053, 1054, 1058, 24979, 97, 114, 59, 26899, 112, 65, 114, 114, 111, 119, 59, 25077, 114, 101, 118, 101, 59, 17169, 101, 102, 116, 722, 1082, 0, 1094, 0, 1104, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59, 26960, 101, 101, 86, 101, 99, 116, 111, 114, 59, 26974, 101, 99, 116, 111, 114, 256, 59, 66, 1113, 1114, 25021, 97, 114, 59, 26966, 105, 103, 104, 116, 468, 1127, 0, 1137, 101, 101, 86, 101, 99, 116, 111, 114, 59, 26975, 101, 99, 116, 111, 114, 256, 59, 66, 1146, 1147, 25025, 97, 114, 59, 26967, 101, 101, 256, 59, 65, 1158, 1159, 25252, 114, 114, 111, 119, 59, 24999, 256, 99, 116, 1170, 1175, 114, 59, 49152, 55349, 56479, 114, 111, 107, 59, 16656, 2048, 78, 84, 97, 99, 100, 102, 103, 108, 109, 111, 112, 113, 115, 116, 117, 120, 1213, 1216, 1220, 1227, 1246, 1250, 1255, 1262, 1269, 1313, 1327, 1334, 1362, 1373, 1376, 1381, 71, 59, 16714, 72, 32827, 208, 16592, 99, 117, 116, 101, 32827, 201, 16585, 384, 97, 105, 121, 1234, 1239, 1244, 114, 111, 110, 59, 16666, 114, 99, 32827, 202, 16586, 59, 17453, 111, 116, 59, 16662, 114, 59, 49152, 55349, 56584, 114, 97, 118, 101, 32827, 200, 16584, 101, 109, 101, 110, 116, 59, 25096, 256, 97, 112, 1274, 1278, 99, 114, 59, 16658, 116, 121, 595, 1286, 0, 0, 1298, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 26107, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 26027, 256, 103, 112, 1318, 1322, 111, 110, 59, 16664, 102, 59, 49152, 55349, 56636, 115, 105, 108, 111, 110, 59, 17301, 117, 256, 97, 105, 1340, 1353, 108, 256, 59, 84, 1346, 1347, 27253, 105, 108, 100, 101, 59, 25154, 108, 105, 98, 114, 105, 117, 109, 59, 25036, 256, 99, 105, 1367, 1370, 114, 59, 24880, 109, 59, 27251, 97, 59, 17303, 109, 108, 32827, 203, 16587, 256, 105, 112, 1386, 1391, 115, 116, 115, 59, 25091, 111, 110, 101, 110, 116, 105, 97, 108, 69, 59, 24903, 640, 99, 102, 105, 111, 115, 1413, 1416, 1421, 1458, 1484, 121, 59, 17444, 114, 59, 49152, 55349, 56585, 108, 108, 101, 100, 595, 1431, 0, 0, 1443, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 26108, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 26026, 880, 1466, 0, 1471, 0, 0, 1476, 102, 59, 49152, 55349, 56637, 65, 108, 108, 59, 25088, 114, 105, 101, 114, 116, 114, 102, 59, 24881, 99, 242, 1483, 1536, 74, 84, 97, 98, 99, 100, 102, 103, 111, 114, 115, 116, 1512, 1516, 1519, 1530, 1536, 1554, 1558, 1563, 1565, 1571, 1644, 1650, 99, 121, 59, 17411, 32827, 62, 16446, 109, 109, 97, 256, 59, 100, 1527, 1528, 17299, 59, 17372, 114, 101, 118, 101, 59, 16670, 384, 101, 105, 121, 1543, 1548, 1552, 100, 105, 108, 59, 16674, 114, 99, 59, 16668, 59, 17427, 111, 116, 59, 16672, 114, 59, 49152, 55349, 56586, 59, 25305, 112, 102, 59, 49152, 55349, 56638, 101, 97, 116, 101, 114, 768, 69, 70, 71, 76, 83, 84, 1589, 1604, 1614, 1622, 1627, 1638, 113, 117, 97, 108, 256, 59, 76, 1598, 1599, 25189, 101, 115, 115, 59, 25307, 117, 108, 108, 69, 113, 117, 97, 108, 59, 25191, 114, 101, 97, 116, 101, 114, 59, 27298, 101, 115, 115, 59, 25207, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 27262, 105, 108, 100, 101, 59, 25203, 99, 114, 59, 49152, 55349, 56482, 59, 25195, 1024, 65, 97, 99, 102, 105, 111, 115, 117, 1669, 1675, 1686, 1691, 1694, 1706, 1726, 1738, 82, 68, 99, 121, 59, 17450, 256, 99, 116, 1680, 1684, 101, 107, 59, 17095, 59, 16478, 105, 114, 99, 59, 16676, 114, 59, 24844, 108, 98, 101, 114, 116, 83, 112, 97, 99, 101, 59, 24843, 496, 1711, 0, 1714, 102, 59, 24845, 105, 122, 111, 110, 116, 97, 108, 76, 105, 110, 101, 59, 25856, 256, 99, 116, 1731, 1733, 242, 1705, 114, 111, 107, 59, 16678, 109, 112, 324, 1744, 1752, 111, 119, 110, 72, 117, 109, 240, 303, 113, 117, 97, 108, 59, 25167, 1792, 69, 74, 79, 97, 99, 100, 102, 103, 109, 110, 111, 115, 116, 117, 1786, 1790, 1795, 1799, 1806, 1818, 1822, 1825, 1832, 1860, 1912, 1931, 1935, 1941, 99, 121, 59, 17429, 108, 105, 103, 59, 16690, 99, 121, 59, 17409, 99, 117, 116, 101, 32827, 205, 16589, 256, 105, 121, 1811, 1816, 114, 99, 32827, 206, 16590, 59, 17432, 111, 116, 59, 16688, 114, 59, 24849, 114, 97, 118, 101, 32827, 204, 16588, 384, 59, 97, 112, 1824, 1839, 1855, 256, 99, 103, 1844, 1847, 114, 59, 16682, 105, 110, 97, 114, 121, 73, 59, 24904, 108, 105, 101, 243, 989, 500, 1865, 0, 1890, 256, 59, 101, 1869, 1870, 25132, 256, 103, 114, 1875, 1880, 114, 97, 108, 59, 25131, 115, 101, 99, 116, 105, 111, 110, 59, 25282, 105, 115, 105, 98, 108, 101, 256, 67, 84, 1900, 1906, 111, 109, 109, 97, 59, 24675, 105, 109, 101, 115, 59, 24674, 384, 103, 112, 116, 1919, 1923, 1928, 111, 110, 59, 16686, 102, 59, 49152, 55349, 56640, 97, 59, 17305, 99, 114, 59, 24848, 105, 108, 100, 101, 59, 16680, 491, 1946, 0, 1950, 99, 121, 59, 17414, 108, 32827, 207, 16591, 640, 99, 102, 111, 115, 117, 1964, 1975, 1980, 1986, 2000, 256, 105, 121, 1969, 1973, 114, 99, 59, 16692, 59, 17433, 114, 59, 49152, 55349, 56589, 112, 102, 59, 49152, 55349, 56641, 483, 1991, 0, 1996, 114, 59, 49152, 55349, 56485, 114, 99, 121, 59, 17416, 107, 99, 121, 59, 17412, 896, 72, 74, 97, 99, 102, 111, 115, 2020, 2024, 2028, 2033, 2045, 2050, 2056, 99, 121, 59, 17445, 99, 121, 59, 17420, 112, 112, 97, 59, 17306, 256, 101, 121, 2038, 2043, 100, 105, 108, 59, 16694, 59, 17434, 114, 59, 49152, 55349, 56590, 112, 102, 59, 49152, 55349, 56642, 99, 114, 59, 49152, 55349, 56486, 1408, 74, 84, 97, 99, 101, 102, 108, 109, 111, 115, 116, 2085, 2089, 2092, 2128, 2147, 2483, 2488, 2503, 2509, 2615, 2631, 99, 121, 59, 17417, 32827, 60, 16444, 640, 99, 109, 110, 112, 114, 2103, 2108, 2113, 2116, 2125, 117, 116, 101, 59, 16697, 98, 100, 97, 59, 17307, 103, 59, 26602, 108, 97, 99, 101, 116, 114, 102, 59, 24850, 114, 59, 24990, 384, 97, 101, 121, 2135, 2140, 2145, 114, 111, 110, 59, 16701, 100, 105, 108, 59, 16699, 59, 17435, 256, 102, 115, 2152, 2416, 116, 1280, 65, 67, 68, 70, 82, 84, 85, 86, 97, 114, 2174, 2217, 2225, 2272, 2278, 2300, 2351, 2395, 912, 2410, 256, 110, 114, 2179, 2191, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 26600, 114, 111, 119, 384, 59, 66, 82, 2201, 2202, 2206, 24976, 97, 114, 59, 25060, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 25030, 101, 105, 108, 105, 110, 103, 59, 25352, 111, 501, 2231, 0, 2243, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 26598, 110, 468, 2248, 0, 2258, 101, 101, 86, 101, 99, 116, 111, 114, 59, 26977, 101, 99, 116, 111, 114, 256, 59, 66, 2267, 2268, 25027, 97, 114, 59, 26969, 108, 111, 111, 114, 59, 25354, 105, 103, 104, 116, 256, 65, 86, 2287, 2293, 114, 114, 111, 119, 59, 24980, 101, 99, 116, 111, 114, 59, 26958, 256, 101, 114, 2305, 2327, 101, 384, 59, 65, 86, 2313, 2314, 2320, 25251, 114, 114, 111, 119, 59, 24996, 101, 99, 116, 111, 114, 59, 26970, 105, 97, 110, 103, 108, 101, 384, 59, 66, 69, 2340, 2341, 2345, 25266, 97, 114, 59, 27087, 113, 117, 97, 108, 59, 25268, 112, 384, 68, 84, 86, 2359, 2370, 2380, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 26961, 101, 101, 86, 101, 99, 116, 111, 114, 59, 26976, 101, 99, 116, 111, 114, 256, 59, 66, 2390, 2391, 25023, 97, 114, 59, 26968, 101, 99, 116, 111, 114, 256, 59, 66, 2405, 2406, 25020, 97, 114, 59, 26962, 105, 103, 104, 116, 225, 924, 115, 768, 69, 70, 71, 76, 83, 84, 2430, 2443, 2453, 2461, 2466, 2477, 113, 117, 97, 108, 71, 114, 101, 97, 116, 101, 114, 59, 25306, 117, 108, 108, 69, 113, 117, 97, 108, 59, 25190, 114, 101, 97, 116, 101, 114, 59, 25206, 101, 115, 115, 59, 27297, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 27261, 105, 108, 100, 101, 59, 25202, 114, 59, 49152, 55349, 56591, 256, 59, 101, 2493, 2494, 25304, 102, 116, 97, 114, 114, 111, 119, 59, 25050, 105, 100, 111, 116, 59, 16703, 384, 110, 112, 119, 2516, 2582, 2587, 103, 512, 76, 82, 108, 114, 2526, 2551, 2562, 2576, 101, 102, 116, 256, 65, 82, 2534, 2540, 114, 114, 111, 119, 59, 26613, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 26615, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 26614, 101, 102, 116, 256, 97, 114, 947, 2570, 105, 103, 104, 116, 225, 959, 105, 103, 104, 116, 225, 970, 102, 59, 49152, 55349, 56643, 101, 114, 256, 76, 82, 2594, 2604, 101, 102, 116, 65, 114, 114, 111, 119, 59, 24985, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 24984, 384, 99, 104, 116, 2622, 2624, 2626, 242, 2124, 59, 25008, 114, 111, 107, 59, 16705, 59, 25194, 1024, 97, 99, 101, 102, 105, 111, 115, 117, 2650, 2653, 2656, 2679, 2684, 2693, 2699, 2702, 112, 59, 26885, 121, 59, 17436, 256, 100, 108, 2661, 2671, 105, 117, 109, 83, 112, 97, 99, 101, 59, 24671, 108, 105, 110, 116, 114, 102, 59, 24883, 114, 59, 49152, 55349, 56592, 110, 117, 115, 80, 108, 117, 115, 59, 25107, 112, 102, 59, 49152, 55349, 56644, 99, 242, 2678, 59, 17308, 1152, 74, 97, 99, 101, 102, 111, 115, 116, 117, 2723, 2727, 2733, 2752, 2836, 2841, 3473, 3479, 3486, 99, 121, 59, 17418, 99, 117, 116, 101, 59, 16707, 384, 97, 101, 121, 2740, 2745, 2750, 114, 111, 110, 59, 16711, 100, 105, 108, 59, 16709, 59, 17437, 384, 103, 115, 119, 2759, 2800, 2830, 97, 116, 105, 118, 101, 384, 77, 84, 86, 2771, 2783, 2792, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59, 24587, 104, 105, 256, 99, 110, 2790, 2776, 235, 2777, 101, 114, 121, 84, 104, 105, 238, 2777, 116, 101, 100, 256, 71, 76, 2808, 2822, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 242, 1651, 101, 115, 115, 76, 101, 115, 243, 2632, 76, 105, 110, 101, 59, 16394, 114, 59, 49152, 55349, 56593, 512, 66, 110, 112, 116, 2850, 2856, 2871, 2874, 114, 101, 97, 107, 59, 24672, 66, 114, 101, 97, 107, 105, 110, 103, 83, 112, 97, 99, 101, 59, 16544, 102, 59, 24853, 1664, 59, 67, 68, 69, 71, 72, 76, 78, 80, 82, 83, 84, 86, 2901, 2902, 2922, 2940, 2977, 3051, 3076, 3166, 3204, 3238, 3288, 3425, 3461, 27372, 256, 111, 117, 2907, 2916, 110, 103, 114, 117, 101, 110, 116, 59, 25186, 112, 67, 97, 112, 59, 25197, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 25126, 384, 108, 113, 120, 2947, 2954, 2971, 101, 109, 101, 110, 116, 59, 25097, 117, 97, 108, 256, 59, 84, 2962, 2963, 25184, 105, 108, 100, 101, 59, 49152, 8770, 824, 105, 115, 116, 115, 59, 25092, 114, 101, 97, 116, 101, 114, 896, 59, 69, 70, 71, 76, 83, 84, 2998, 2999, 3005, 3017, 3027, 3032, 3045, 25199, 113, 117, 97, 108, 59, 25201, 117, 108, 108, 69, 113, 117, 97, 108, 59, 49152, 8807, 824, 114, 101, 97, 116, 101, 114, 59, 49152, 8811, 824, 101, 115, 115, 59, 25209, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 49152, 10878, 824, 105, 108, 100, 101, 59, 25205, 117, 109, 112, 324, 3058, 3069, 111, 119, 110, 72, 117, 109, 112, 59, 49152, 8782, 824, 113, 117, 97, 108, 59, 49152, 8783, 824, 101, 256, 102, 115, 3082, 3111, 116, 84, 114, 105, 97, 110, 103, 108, 101, 384, 59, 66, 69, 3098, 3099, 3105, 25322, 97, 114, 59, 49152, 10703, 824, 113, 117, 97, 108, 59, 25324, 115, 768, 59, 69, 71, 76, 83, 84, 3125, 3126, 3132, 3140, 3147, 3160, 25198, 113, 117, 97, 108, 59, 25200, 114, 101, 97, 116, 101, 114, 59, 25208, 101, 115, 115, 59, 49152, 8810, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 49152, 10877, 824, 105, 108, 100, 101, 59, 25204, 101, 115, 116, 101, 100, 256, 71, 76, 3176, 3193, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 49152, 10914, 824, 101, 115, 115, 76, 101, 115, 115, 59, 49152, 10913, 824, 114, 101, 99, 101, 100, 101, 115, 384, 59, 69, 83, 3218, 3219, 3227, 25216, 113, 117, 97, 108, 59, 49152, 10927, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 25312, 256, 101, 105, 3243, 3257, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59, 25100, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 384, 59, 66, 69, 3275, 3276, 3282, 25323, 97, 114, 59, 49152, 10704, 824, 113, 117, 97, 108, 59, 25325, 256, 113, 117, 3293, 3340, 117, 97, 114, 101, 83, 117, 256, 98, 112, 3304, 3321, 115, 101, 116, 256, 59, 69, 3312, 3315, 49152, 8847, 824, 113, 117, 97, 108, 59, 25314, 101, 114, 115, 101, 116, 256, 59, 69, 3331, 3334, 49152, 8848, 824, 113, 117, 97, 108, 59, 25315, 384, 98, 99, 112, 3347, 3364, 3406, 115, 101, 116, 256, 59, 69, 3355, 3358, 49152, 8834, 8402, 113, 117, 97, 108, 59, 25224, 99, 101, 101, 100, 115, 512, 59, 69, 83, 84, 3378, 3379, 3387, 3398, 25217, 113, 117, 97, 108, 59, 49152, 10928, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 25313, 105, 108, 100, 101, 59, 49152, 8831, 824, 101, 114, 115, 101, 116, 256, 59, 69, 3416, 3419, 49152, 8835, 8402, 113, 117, 97, 108, 59, 25225, 105, 108, 100, 101, 512, 59, 69, 70, 84, 3438, 3439, 3445, 3455, 25153, 113, 117, 97, 108, 59, 25156, 117, 108, 108, 69, 113, 117, 97, 108, 59, 25159, 105, 108, 100, 101, 59, 25161, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 25124, 99, 114, 59, 49152, 55349, 56489, 105, 108, 100, 101, 32827, 209, 16593, 59, 17309, 1792, 69, 97, 99, 100, 102, 103, 109, 111, 112, 114, 115, 116, 117, 118, 3517, 3522, 3529, 3541, 3547, 3552, 3559, 3580, 3586, 3616, 3618, 3634, 3647, 3652, 108, 105, 103, 59, 16722, 99, 117, 116, 101, 32827, 211, 16595, 256, 105, 121, 3534, 3539, 114, 99, 32827, 212, 16596, 59, 17438, 98, 108, 97, 99, 59, 16720, 114, 59, 49152, 55349, 56594, 114, 97, 118, 101, 32827, 210, 16594, 384, 97, 101, 105, 3566, 3570, 3574, 99, 114, 59, 16716, 103, 97, 59, 17321, 99, 114, 111, 110, 59, 17311, 112, 102, 59, 49152, 55349, 56646, 101, 110, 67, 117, 114, 108, 121, 256, 68, 81, 3598, 3610, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 24604, 117, 111, 116, 101, 59, 24600, 59, 27220, 256, 99, 108, 3623, 3628, 114, 59, 49152, 55349, 56490, 97, 115, 104, 32827, 216, 16600, 105, 364, 3639, 3644, 100, 101, 32827, 213, 16597, 101, 115, 59, 27191, 109, 108, 32827, 214, 16598, 101, 114, 256, 66, 80, 3659, 3680, 256, 97, 114, 3664, 3667, 114, 59, 24638, 97, 99, 256, 101, 107, 3674, 3676, 59, 25566, 101, 116, 59, 25524, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 25564, 1152, 97, 99, 102, 104, 105, 108, 111, 114, 115, 3711, 3719, 3722, 3727, 3730, 3732, 3741, 3760, 3836, 114, 116, 105, 97, 108, 68, 59, 25090, 121, 59, 17439, 114, 59, 49152, 55349, 56595, 105, 59, 17318, 59, 17312, 117, 115, 77, 105, 110, 117, 115, 59, 16561, 256, 105, 112, 3746, 3757, 110, 99, 97, 114, 101, 112, 108, 97, 110, 229, 1693, 102, 59, 24857, 512, 59, 101, 105, 111, 3769, 3770, 3808, 3812, 27323, 99, 101, 100, 101, 115, 512, 59, 69, 83, 84, 3784, 3785, 3791, 3802, 25210, 113, 117, 97, 108, 59, 27311, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 25212, 105, 108, 100, 101, 59, 25214, 109, 101, 59, 24627, 256, 100, 112, 3817, 3822, 117, 99, 116, 59, 25103, 111, 114, 116, 105, 111, 110, 256, 59, 97, 549, 3833, 108, 59, 25117, 256, 99, 105, 3841, 3846, 114, 59, 49152, 55349, 56491, 59, 17320, 512, 85, 102, 111, 115, 3857, 3862, 3867, 3871, 79, 84, 32827, 34, 16418, 114, 59, 49152, 55349, 56596, 112, 102, 59, 24858, 99, 114, 59, 49152, 55349, 56492, 1536, 66, 69, 97, 99, 101, 102, 104, 105, 111, 114, 115, 117, 3902, 3907, 3911, 3936, 3955, 4007, 4010, 4013, 4246, 4265, 4276, 4286, 97, 114, 114, 59, 26896, 71, 32827, 174, 16558, 384, 99, 110, 114, 3918, 3923, 3926, 117, 116, 101, 59, 16724, 103, 59, 26603, 114, 256, 59, 116, 3932, 3933, 24992, 108, 59, 26902, 384, 97, 101, 121, 3943, 3948, 3953, 114, 111, 110, 59, 16728, 100, 105, 108, 59, 16726, 59, 17440, 256, 59, 118, 3960, 3961, 24860, 101, 114, 115, 101, 256, 69, 85, 3970, 3993, 256, 108, 113, 3975, 3982, 101, 109, 101, 110, 116, 59, 25099, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 25035, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 26991, 114, 187, 3961, 111, 59, 17313, 103, 104, 116, 1024, 65, 67, 68, 70, 84, 85, 86, 97, 4033, 4075, 4083, 4130, 4136, 4187, 4231, 984, 256, 110, 114, 4038, 4050, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 26601, 114, 111, 119, 384, 59, 66, 76, 4060, 4061, 4065, 24978, 97, 114, 59, 25061, 101, 102, 116, 65, 114, 114, 111, 119, 59, 25028, 101, 105, 108, 105, 110, 103, 59, 25353, 111, 501, 4089, 0, 4101, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 26599, 110, 468, 4106, 0, 4116, 101, 101, 86, 101, 99, 116, 111, 114, 59, 26973, 101, 99, 116, 111, 114, 256, 59, 66, 4125, 4126, 25026, 97, 114, 59, 26965, 108, 111, 111, 114, 59, 25355, 256, 101, 114, 4141, 4163, 101, 384, 59, 65, 86, 4149, 4150, 4156, 25250, 114, 114, 111, 119, 59, 24998, 101, 99, 116, 111, 114, 59, 26971, 105, 97, 110, 103, 108, 101, 384, 59, 66, 69, 4176, 4177, 4181, 25267, 97, 114, 59, 27088, 113, 117, 97, 108, 59, 25269, 112, 384, 68, 84, 86, 4195, 4206, 4216, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 26959, 101, 101, 86, 101, 99, 116, 111, 114, 59, 26972, 101, 99, 116, 111, 114, 256, 59, 66, 4226, 4227, 25022, 97, 114, 59, 26964, 101, 99, 116, 111, 114, 256, 59, 66, 4241, 4242, 25024, 97, 114, 59, 26963, 256, 112, 117, 4251, 4254, 102, 59, 24861, 110, 100, 73, 109, 112, 108, 105, 101, 115, 59, 26992, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 25051, 256, 99, 104, 4281, 4284, 114, 59, 24859, 59, 25009, 108, 101, 68, 101, 108, 97, 121, 101, 100, 59, 27124, 1664, 72, 79, 97, 99, 102, 104, 105, 109, 111, 113, 115, 116, 117, 4324, 4337, 4343, 4349, 4377, 4382, 4433, 4438, 4449, 4455, 4533, 4539, 4543, 256, 67, 99, 4329, 4334, 72, 99, 121, 59, 17449, 121, 59, 17448, 70, 84, 99, 121, 59, 17452, 99, 117, 116, 101, 59, 16730, 640, 59, 97, 101, 105, 121, 4360, 4361, 4366, 4371, 4375, 27324, 114, 111, 110, 59, 16736, 100, 105, 108, 59, 16734, 114, 99, 59, 16732, 59, 17441, 114, 59, 49152, 55349, 56598, 111, 114, 116, 512, 68, 76, 82, 85, 4394, 4404, 4414, 4425, 111, 119, 110, 65, 114, 114, 111, 119, 187, 1054, 101, 102, 116, 65, 114, 114, 111, 119, 187, 2202, 105, 103, 104, 116, 65, 114, 114, 111, 119, 187, 4061, 112, 65, 114, 114, 111, 119, 59, 24977, 103, 109, 97, 59, 17315, 97, 108, 108, 67, 105, 114, 99, 108, 101, 59, 25112, 112, 102, 59, 49152, 55349, 56650, 626, 4461, 0, 0, 4464, 116, 59, 25114, 97, 114, 101, 512, 59, 73, 83, 85, 4475, 4476, 4489, 4527, 26017, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59, 25235, 117, 256, 98, 112, 4495, 4510, 115, 101, 116, 256, 59, 69, 4503, 4504, 25231, 113, 117, 97, 108, 59, 25233, 101, 114, 115, 101, 116, 256, 59, 69, 4520, 4521, 25232, 113, 117, 97, 108, 59, 25234, 110, 105, 111, 110, 59, 25236, 99, 114, 59, 49152, 55349, 56494, 97, 114, 59, 25286, 512, 98, 99, 109, 112, 4552, 4571, 4617, 4619, 256, 59, 115, 4557, 4558, 25296, 101, 116, 256, 59, 69, 4557, 4565, 113, 117, 97, 108, 59, 25222, 256, 99, 104, 4576, 4613, 101, 101, 100, 115, 512, 59, 69, 83, 84, 4589, 4590, 4596, 4607, 25211, 113, 117, 97, 108, 59, 27312, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 25213, 105, 108, 100, 101, 59, 25215, 84, 104, 225, 3980, 59, 25105, 384, 59, 101, 115, 4626, 4627, 4643, 25297, 114, 115, 101, 116, 256, 59, 69, 4636, 4637, 25219, 113, 117, 97, 108, 59, 25223, 101, 116, 187, 4627, 1408, 72, 82, 83, 97, 99, 102, 104, 105, 111, 114, 115, 4670, 4676, 4681, 4693, 4702, 4721, 4726, 4767, 4802, 4808, 4817, 79, 82, 78, 32827, 222, 16606, 65, 68, 69, 59, 24866, 256, 72, 99, 4686, 4690, 99, 121, 59, 17419, 121, 59, 17446, 256, 98, 117, 4698, 4700, 59, 16393, 59, 17316, 384, 97, 101, 121, 4709, 4714, 4719, 114, 111, 110, 59, 16740, 100, 105, 108, 59, 16738, 59, 17442, 114, 59, 49152, 55349, 56599, 256, 101, 105, 4731, 4745, 498, 4736, 0, 4743, 101, 102, 111, 114, 101, 59, 25140, 97, 59, 17304, 256, 99, 110, 4750, 4760, 107, 83, 112, 97, 99, 101, 59, 49152, 8287, 8202, 83, 112, 97, 99, 101, 59, 24585, 108, 100, 101, 512, 59, 69, 70, 84, 4779, 4780, 4786, 4796, 25148, 113, 117, 97, 108, 59, 25155, 117, 108, 108, 69, 113, 117, 97, 108, 59, 25157, 105, 108, 100, 101, 59, 25160, 112, 102, 59, 49152, 55349, 56651, 105, 112, 108, 101, 68, 111, 116, 59, 24795, 256, 99, 116, 4822, 4827, 114, 59, 49152, 55349, 56495, 114, 111, 107, 59, 16742, 2785, 4855, 4878, 4890, 4902, 0, 4908, 4913, 0, 0, 0, 0, 0, 4920, 4925, 4983, 4997, 0, 5119, 5124, 5130, 5136, 256, 99, 114, 4859, 4865, 117, 116, 101, 32827, 218, 16602, 114, 256, 59, 111, 4871, 4872, 24991, 99, 105, 114, 59, 26953, 114, 483, 4883, 0, 4886, 121, 59, 17422, 118, 101, 59, 16748, 256, 105, 121, 4894, 4899, 114, 99, 32827, 219, 16603, 59, 17443, 98, 108, 97, 99, 59, 16752, 114, 59, 49152, 55349, 56600, 114, 97, 118, 101, 32827, 217, 16601, 97, 99, 114, 59, 16746, 256, 100, 105, 4929, 4969, 101, 114, 256, 66, 80, 4936, 4957, 256, 97, 114, 4941, 4944, 114, 59, 16479, 97, 99, 256, 101, 107, 4951, 4953, 59, 25567, 101, 116, 59, 25525, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 25565, 111, 110, 256, 59, 80, 4976, 4977, 25283, 108, 117, 115, 59, 25230, 256, 103, 112, 4987, 4991, 111, 110, 59, 16754, 102, 59, 49152, 55349, 56652, 1024, 65, 68, 69, 84, 97, 100, 112, 115, 5013, 5038, 5048, 5060, 1000, 5074, 5079, 5107, 114, 114, 111, 119, 384, 59, 66, 68, 4432, 5024, 5028, 97, 114, 59, 26898, 111, 119, 110, 65, 114, 114, 111, 119, 59, 25029, 111, 119, 110, 65, 114, 114, 111, 119, 59, 24981, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 26990, 101, 101, 256, 59, 65, 5067, 5068, 25253, 114, 114, 111, 119, 59, 24997, 111, 119, 110, 225, 1011, 101, 114, 256, 76, 82, 5086, 5096, 101, 102, 116, 65, 114, 114, 111, 119, 59, 24982, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 24983, 105, 256, 59, 108, 5113, 5114, 17362, 111, 110, 59, 17317, 105, 110, 103, 59, 16750, 99, 114, 59, 49152, 55349, 56496, 105, 108, 100, 101, 59, 16744, 109, 108, 32827, 220, 16604, 1152, 68, 98, 99, 100, 101, 102, 111, 115, 118, 5159, 5164, 5168, 5171, 5182, 5253, 5258, 5264, 5270, 97, 115, 104, 59, 25259, 97, 114, 59, 27371, 121, 59, 17426, 97, 115, 104, 256, 59, 108, 5179, 5180, 25257, 59, 27366, 256, 101, 114, 5187, 5189, 59, 25281, 384, 98, 116, 121, 5196, 5200, 5242, 97, 114, 59, 24598, 256, 59, 105, 5199, 5205, 99, 97, 108, 512, 66, 76, 83, 84, 5217, 5221, 5226, 5236, 97, 114, 59, 25123, 105, 110, 101, 59, 16508, 101, 112, 97, 114, 97, 116, 111, 114, 59, 26456, 105, 108, 100, 101, 59, 25152, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 24586, 114, 59, 49152, 55349, 56601, 112, 102, 59, 49152, 55349, 56653, 99, 114, 59, 49152, 55349, 56497, 100, 97, 115, 104, 59, 25258, 640, 99, 101, 102, 111, 115, 5287, 5292, 5297, 5302, 5308, 105, 114, 99, 59, 16756, 100, 103, 101, 59, 25280, 114, 59, 49152, 55349, 56602, 112, 102, 59, 49152, 55349, 56654, 99, 114, 59, 49152, 55349, 56498, 512, 102, 105, 111, 115, 5323, 5328, 5330, 5336, 114, 59, 49152, 55349, 56603, 59, 17310, 112, 102, 59, 49152, 55349, 56655, 99, 114, 59, 49152, 55349, 56499, 1152, 65, 73, 85, 97, 99, 102, 111, 115, 117, 5361, 5365, 5369, 5373, 5380, 5391, 5396, 5402, 5408, 99, 121, 59, 17455, 99, 121, 59, 17415, 99, 121, 59, 17454, 99, 117, 116, 101, 32827, 221, 16605, 256, 105, 121, 5385, 5389, 114, 99, 59, 16758, 59, 17451, 114, 59, 49152, 55349, 56604, 112, 102, 59, 49152, 55349, 56656, 99, 114, 59, 49152, 55349, 56500, 109, 108, 59, 16760, 1024, 72, 97, 99, 100, 101, 102, 111, 115, 5429, 5433, 5439, 5451, 5455, 5469, 5472, 5476, 99, 121, 59, 17430, 99, 117, 116, 101, 59, 16761, 256, 97, 121, 5444, 5449, 114, 111, 110, 59, 16765, 59, 17431, 111, 116, 59, 16763, 498, 5460, 0, 5467, 111, 87, 105, 100, 116, 232, 2777, 97, 59, 17302, 114, 59, 24872, 112, 102, 59, 24868, 99, 114, 59, 49152, 55349, 56501, 3041, 5507, 5514, 5520, 0, 5552, 5558, 5567, 0, 0, 0, 0, 5574, 5595, 5611, 5727, 5741, 0, 5781, 5787, 5810, 5817, 0, 5822, 99, 117, 116, 101, 32827, 225, 16609, 114, 101, 118, 101, 59, 16643, 768, 59, 69, 100, 105, 117, 121, 5532, 5533, 5537, 5539, 5544, 5549, 25150, 59, 49152, 8766, 819, 59, 25151, 114, 99, 32827, 226, 16610, 116, 101, 32955, 180, 774, 59, 17456, 108, 105, 103, 32827, 230, 16614, 256, 59, 114, 178, 5562, 59, 49152, 55349, 56606, 114, 97, 118, 101, 32827, 224, 16608, 256, 101, 112, 5578, 5590, 256, 102, 112, 5583, 5588, 115, 121, 109, 59, 24885, 232, 5587, 104, 97, 59, 17329, 256, 97, 112, 5599, 99, 256, 99, 108, 5604, 5607, 114, 59, 16641, 103, 59, 27199, 612, 5616, 0, 0, 5642, 640, 59, 97, 100, 115, 118, 5626, 5627, 5631, 5633, 5639, 25127, 110, 100, 59, 27221, 59, 27228, 108, 111, 112, 101, 59, 27224, 59, 27226, 896, 59, 101, 108, 109, 114, 115, 122, 5656, 5657, 5659, 5662, 5695, 5711, 5721, 25120, 59, 27044, 101, 187, 5657, 115, 100, 256, 59, 97, 5669, 5670, 25121, 1121, 5680, 5682, 5684, 5686, 5688, 5690, 5692, 5694, 59, 27048, 59, 27049, 59, 27050, 59, 27051, 59, 27052, 59, 27053, 59, 27054, 59, 27055, 116, 256, 59, 118, 5701, 5702, 25119, 98, 256, 59, 100, 5708, 5709, 25278, 59, 27037, 256, 112, 116, 5716, 5719, 104, 59, 25122, 187, 185, 97, 114, 114, 59, 25468, 256, 103, 112, 5731, 5735, 111, 110, 59, 16645, 102, 59, 49152, 55349, 56658, 896, 59, 69, 97, 101, 105, 111, 112, 4801, 5755, 5757, 5762, 5764, 5767, 5770, 59, 27248, 99, 105, 114, 59, 27247, 59, 25162, 100, 59, 25163, 115, 59, 16423, 114, 111, 120, 256, 59, 101, 4801, 5778, 241, 5763, 105, 110, 103, 32827, 229, 16613, 384, 99, 116, 121, 5793, 5798, 5800, 114, 59, 49152, 55349, 56502, 59, 16426, 109, 112, 256, 59, 101, 4801, 5807, 241, 648, 105, 108, 100, 101, 32827, 227, 16611, 109, 108, 32827, 228, 16612, 256, 99, 105, 5826, 5832, 111, 110, 105, 110, 244, 626, 110, 116, 59, 27153, 2048, 78, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 114, 115, 117, 5869, 5873, 5936, 5948, 5955, 5960, 6008, 6013, 6112, 6118, 6201, 6224, 5901, 6461, 6472, 6512, 111, 116, 59, 27373, 256, 99, 114, 5878, 5918, 107, 512, 99, 101, 112, 115, 5888, 5893, 5901, 5907, 111, 110, 103, 59, 25164, 112, 115, 105, 108, 111, 110, 59, 17398, 114, 105, 109, 101, 59, 24629, 105, 109, 256, 59, 101, 5914, 5915, 25149, 113, 59, 25293, 374, 5922, 5926, 101, 101, 59, 25277, 101, 100, 256, 59, 103, 5932, 5933, 25349, 101, 187, 5933, 114, 107, 256, 59, 116, 4956, 5943, 98, 114, 107, 59, 25526, 256, 111, 121, 5889, 5953, 59, 17457, 113, 117, 111, 59, 24606, 640, 99, 109, 112, 114, 116, 5971, 5979, 5985, 5988, 5992, 97, 117, 115, 256, 59, 101, 266, 265, 112, 116, 121, 118, 59, 27056, 115, 233, 5900, 110, 111, 245, 275, 384, 97, 104, 119, 5999, 6001, 6003, 59, 17330, 59, 24886, 101, 101, 110, 59, 25196, 114, 59, 49152, 55349, 56607, 103, 896, 99, 111, 115, 116, 117, 118, 119, 6029, 6045, 6067, 6081, 6101, 6107, 6110, 384, 97, 105, 117, 6036, 6038, 6042, 240, 1888, 114, 99, 59, 26095, 112, 187, 4977, 384, 100, 112, 116, 6052, 6056, 6061, 111, 116, 59, 27136, 108, 117, 115, 59, 27137, 105, 109, 101, 115, 59, 27138, 625, 6073, 0, 0, 6078, 99, 117, 112, 59, 27142, 97, 114, 59, 26117, 114, 105, 97, 110, 103, 108, 101, 256, 100, 117, 6093, 6098, 111, 119, 110, 59, 26045, 112, 59, 26035, 112, 108, 117, 115, 59, 27140, 101, 229, 5188, 229, 5293, 97, 114, 111, 119, 59, 26893, 384, 97, 107, 111, 6125, 6182, 6197, 256, 99, 110, 6130, 6179, 107, 384, 108, 115, 116, 6138, 1451, 6146, 111, 122, 101, 110, 103, 101, 59, 27115, 114, 105, 97, 110, 103, 108, 101, 512, 59, 100, 108, 114, 6162, 6163, 6168, 6173, 26036, 111, 119, 110, 59, 26046, 101, 102, 116, 59, 26050, 105, 103, 104, 116, 59, 26040, 107, 59, 25635, 433, 6187, 0, 6195, 434, 6191, 0, 6193, 59, 26002, 59, 26001, 52, 59, 26003, 99, 107, 59, 25992, 256, 101, 111, 6206, 6221, 256, 59, 113, 6211, 6214, 49152, 61, 8421, 117, 105, 118, 59, 49152, 8801, 8421, 116, 59, 25360, 512, 112, 116, 119, 120, 6233, 6238, 6247, 6252, 102, 59, 49152, 55349, 56659, 256, 59, 116, 5067, 6243, 111, 109, 187, 5068, 116, 105, 101, 59, 25288, 1536, 68, 72, 85, 86, 98, 100, 104, 109, 112, 116, 117, 118, 6277, 6294, 6314, 6331, 6359, 6363, 6380, 6399, 6405, 6410, 6416, 6433, 512, 76, 82, 108, 114, 6286, 6288, 6290, 6292, 59, 25943, 59, 25940, 59, 25942, 59, 25939, 640, 59, 68, 85, 100, 117, 6305, 6306, 6308, 6310, 6312, 25936, 59, 25958, 59, 25961, 59, 25956, 59, 25959, 512, 76, 82, 108, 114, 6323, 6325, 6327, 6329, 59, 25949, 59, 25946, 59, 25948, 59, 25945, 896, 59, 72, 76, 82, 104, 108, 114, 6346, 6347, 6349, 6351, 6353, 6355, 6357, 25937, 59, 25964, 59, 25955, 59, 25952, 59, 25963, 59, 25954, 59, 25951, 111, 120, 59, 27081, 512, 76, 82, 108, 114, 6372, 6374, 6376, 6378, 59, 25941, 59, 25938, 59, 25872, 59, 25868, 640, 59, 68, 85, 100, 117, 1725, 6391, 6393, 6395, 6397, 59, 25957, 59, 25960, 59, 25900, 59, 25908, 105, 110, 117, 115, 59, 25247, 108, 117, 115, 59, 25246, 105, 109, 101, 115, 59, 25248, 512, 76, 82, 108, 114, 6425, 6427, 6429, 6431, 59, 25947, 59, 25944, 59, 25880, 59, 25876, 896, 59, 72, 76, 82, 104, 108, 114, 6448, 6449, 6451, 6453, 6455, 6457, 6459, 25858, 59, 25962, 59, 25953, 59, 25950, 59, 25916, 59, 25892, 59, 25884, 256, 101, 118, 291, 6466, 98, 97, 114, 32827, 166, 16550, 512, 99, 101, 105, 111, 6481, 6486, 6490, 6496, 114, 59, 49152, 55349, 56503, 109, 105, 59, 24655, 109, 256, 59, 101, 5914, 5916, 108, 384, 59, 98, 104, 6504, 6505, 6507, 16476, 59, 27077, 115, 117, 98, 59, 26568, 364, 6516, 6526, 108, 256, 59, 101, 6521, 6522, 24610, 116, 187, 6522, 112, 384, 59, 69, 101, 303, 6533, 6535, 59, 27310, 256, 59, 113, 1756, 1755, 3297, 6567, 0, 6632, 6673, 6677, 6706, 0, 6711, 6736, 0, 0, 6836, 0, 0, 6849, 0, 0, 6945, 6958, 6989, 6994, 0, 7165, 0, 7180, 384, 99, 112, 114, 6573, 6578, 6621, 117, 116, 101, 59, 16647, 768, 59, 97, 98, 99, 100, 115, 6591, 6592, 6596, 6602, 6613, 6617, 25129, 110, 100, 59, 27204, 114, 99, 117, 112, 59, 27209, 256, 97, 117, 6607, 6610, 112, 59, 27211, 112, 59, 27207, 111, 116, 59, 27200, 59, 49152, 8745, 65024, 256, 101, 111, 6626, 6629, 116, 59, 24641, 238, 1683, 512, 97, 101, 105, 117, 6640, 6651, 6657, 6661, 496, 6645, 0, 6648, 115, 59, 27213, 111, 110, 59, 16653, 100, 105, 108, 32827, 231, 16615, 114, 99, 59, 16649, 112, 115, 256, 59, 115, 6668, 6669, 27212, 109, 59, 27216, 111, 116, 59, 16651, 384, 100, 109, 110, 6683, 6688, 6694, 105, 108, 32955, 184, 429, 112, 116, 121, 118, 59, 27058, 116, 33024, 162, 59, 101, 6701, 6702, 16546, 114, 228, 434, 114, 59, 49152, 55349, 56608, 384, 99, 101, 105, 6717, 6720, 6733, 121, 59, 17479, 99, 107, 256, 59, 109, 6727, 6728, 26387, 97, 114, 107, 187, 6728, 59, 17351, 114, 896, 59, 69, 99, 101, 102, 109, 115, 6751, 6752, 6754, 6763, 6820, 6826, 6830, 26059, 59, 27075, 384, 59, 101, 108, 6761, 6762, 6765, 17094, 113, 59, 25175, 101, 609, 6772, 0, 0, 6792, 114, 114, 111, 119, 256, 108, 114, 6780, 6785, 101, 102, 116, 59, 25018, 105, 103, 104, 116, 59, 25019, 640, 82, 83, 97, 99, 100, 6802, 6804, 6806, 6810, 6815, 187, 3911, 59, 25800, 115, 116, 59, 25243, 105, 114, 99, 59, 25242, 97, 115, 104, 59, 25245, 110, 105, 110, 116, 59, 27152, 105, 100, 59, 27375, 99, 105, 114, 59, 27074, 117, 98, 115, 256, 59, 117, 6843, 6844, 26211, 105, 116, 187, 6844, 748, 6855, 6868, 6906, 0, 6922, 111, 110, 256, 59, 101, 6861, 6862, 16442, 256, 59, 113, 199, 198, 621, 6873, 0, 0, 6882, 97, 256, 59, 116, 6878, 6879, 16428, 59, 16448, 384, 59, 102, 108, 6888, 6889, 6891, 25089, 238, 4448, 101, 256, 109, 120, 6897, 6902, 101, 110, 116, 187, 6889, 101, 243, 589, 487, 6910, 0, 6919, 256, 59, 100, 4795, 6914, 111, 116, 59, 27245, 110, 244, 582, 384, 102, 114, 121, 6928, 6932, 6935, 59, 49152, 55349, 56660, 111, 228, 596, 33024, 169, 59, 115, 341, 6941, 114, 59, 24855, 256, 97, 111, 6949, 6953, 114, 114, 59, 25013, 115, 115, 59, 26391, 256, 99, 117, 6962, 6967, 114, 59, 49152, 55349, 56504, 256, 98, 112, 6972, 6980, 256, 59, 101, 6977, 6978, 27343, 59, 27345, 256, 59, 101, 6985, 6986, 27344, 59, 27346, 100, 111, 116, 59, 25327, 896, 100, 101, 108, 112, 114, 118, 119, 7008, 7020, 7031, 7042, 7084, 7124, 7161, 97, 114, 114, 256, 108, 114, 7016, 7018, 59, 26936, 59, 26933, 624, 7026, 0, 0, 7029, 114, 59, 25310, 99, 59, 25311, 97, 114, 114, 256, 59, 112, 7039, 7040, 25014, 59, 26941, 768, 59, 98, 99, 100, 111, 115, 7055, 7056, 7062, 7073, 7077, 7080, 25130, 114, 99, 97, 112, 59, 27208, 256, 97, 117, 7067, 7070, 112, 59, 27206, 112, 59, 27210, 111, 116, 59, 25229, 114, 59, 27205, 59, 49152, 8746, 65024, 512, 97, 108, 114, 118, 7093, 7103, 7134, 7139, 114, 114, 256, 59, 109, 7100, 7101, 25015, 59, 26940, 121, 384, 101, 118, 119, 7111, 7124, 7128, 113, 624, 7118, 0, 0, 7122, 114, 101, 227, 7027, 117, 227, 7029, 101, 101, 59, 25294, 101, 100, 103, 101, 59, 25295, 101, 110, 32827, 164, 16548, 101, 97, 114, 114, 111, 119, 256, 108, 114, 7150, 7155, 101, 102, 116, 187, 7040, 105, 103, 104, 116, 187, 7101, 101, 228, 7133, 256, 99, 105, 7169, 7175, 111, 110, 105, 110, 244, 503, 110, 116, 59, 25137, 108, 99, 116, 121, 59, 25389, 2432, 65, 72, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 111, 114, 115, 116, 117, 119, 122, 7224, 7227, 7231, 7261, 7273, 7285, 7306, 7326, 7340, 7351, 7419, 7423, 7437, 7547, 7569, 7595, 7611, 7622, 7629, 114, 242, 897, 97, 114, 59, 26981, 512, 103, 108, 114, 115, 7240, 7245, 7250, 7252, 103, 101, 114, 59, 24608, 101, 116, 104, 59, 24888, 242, 4403, 104, 256, 59, 118, 7258, 7259, 24592, 187, 2314, 363, 7265, 7271, 97, 114, 111, 119, 59, 26895, 97, 227, 789, 256, 97, 121, 7278, 7283, 114, 111, 110, 59, 16655, 59, 17460, 384, 59, 97, 111, 818, 7292, 7300, 256, 103, 114, 703, 7297, 114, 59, 25034, 116, 115, 101, 113, 59, 27255, 384, 103, 108, 109, 7313, 7316, 7320, 32827, 176, 16560, 116, 97, 59, 17332, 112, 116, 121, 118, 59, 27057, 256, 105, 114, 7331, 7336, 115, 104, 116, 59, 27007, 59, 49152, 55349, 56609, 97, 114, 256, 108, 114, 7347, 7349, 187, 2268, 187, 4126, 640, 97, 101, 103, 115, 118, 7362, 888, 7382, 7388, 7392, 109, 384, 59, 111, 115, 806, 7370, 7380, 110, 100, 256, 59, 115, 806, 7377, 117, 105, 116, 59, 26214, 97, 109, 109, 97, 59, 17373, 105, 110, 59, 25330, 384, 59, 105, 111, 7399, 7400, 7416, 16631, 100, 101, 33024, 247, 59, 111, 7399, 7408, 110, 116, 105, 109, 101, 115, 59, 25287, 110, 248, 7415, 99, 121, 59, 17490, 99, 623, 7430, 0, 0, 7434, 114, 110, 59, 25374, 111, 112, 59, 25357, 640, 108, 112, 116, 117, 119, 7448, 7453, 7458, 7497, 7509, 108, 97, 114, 59, 16420, 102, 59, 49152, 55349, 56661, 640, 59, 101, 109, 112, 115, 779, 7469, 7479, 7485, 7490, 113, 256, 59, 100, 850, 7475, 111, 116, 59, 25169, 105, 110, 117, 115, 59, 25144, 108, 117, 115, 59, 25108, 113, 117, 97, 114, 101, 59, 25249, 98, 108, 101, 98, 97, 114, 119, 101, 100, 103, 229, 250, 110, 384, 97, 100, 104, 4398, 7517, 7527, 111, 119, 110, 97, 114, 114, 111, 119, 243, 7299, 97, 114, 112, 111, 111, 110, 256, 108, 114, 7538, 7542, 101, 102, 244, 7348, 105, 103, 104, 244, 7350, 354, 7551, 7557, 107, 97, 114, 111, 247, 3906, 623, 7562, 0, 0, 7566, 114, 110, 59, 25375, 111, 112, 59, 25356, 384, 99, 111, 116, 7576, 7587, 7590, 256, 114, 121, 7581, 7585, 59, 49152, 55349, 56505, 59, 17493, 108, 59, 27126, 114, 111, 107, 59, 16657, 256, 100, 114, 7600, 7604, 111, 116, 59, 25329, 105, 256, 59, 102, 7610, 6166, 26047, 256, 97, 104, 7616, 7619, 114, 242, 1065, 97, 242, 4006, 97, 110, 103, 108, 101, 59, 27046, 256, 99, 105, 7634, 7637, 121, 59, 17503, 103, 114, 97, 114, 114, 59, 26623, 2304, 68, 97, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 7681, 7689, 7705, 7736, 1400, 7740, 7753, 7777, 7806, 7845, 7855, 7869, 7905, 7978, 7991, 8004, 8014, 8026, 256, 68, 111, 7686, 7476, 111, 244, 7305, 256, 99, 115, 7694, 7700, 117, 116, 101, 32827, 233, 16617, 116, 101, 114, 59, 27246, 512, 97, 105, 111, 121, 7714, 7719, 7729, 7734, 114, 111, 110, 59, 16667, 114, 256, 59, 99, 7725, 7726, 25174, 32827, 234, 16618, 108, 111, 110, 59, 25173, 59, 17485, 111, 116, 59, 16663, 256, 68, 114, 7745, 7749, 111, 116, 59, 25170, 59, 49152, 55349, 56610, 384, 59, 114, 115, 7760, 7761, 7767, 27290, 97, 118, 101, 32827, 232, 16616, 256, 59, 100, 7772, 7773, 27286, 111, 116, 59, 27288, 512, 59, 105, 108, 115, 7786, 7787, 7794, 7796, 27289, 110, 116, 101, 114, 115, 59, 25575, 59, 24851, 256, 59, 100, 7801, 7802, 27285, 111, 116, 59, 27287, 384, 97, 112, 115, 7813, 7817, 7831, 99, 114, 59, 16659, 116, 121, 384, 59, 115, 118, 7826, 7827, 7829, 25093, 101, 116, 187, 7827, 112, 256, 49, 59, 7837, 7844, 307, 7841, 7843, 59, 24580, 59, 24581, 24579, 256, 103, 115, 7850, 7852, 59, 16715, 112, 59, 24578, 256, 103, 112, 7860, 7864, 111, 110, 59, 16665, 102, 59, 49152, 55349, 56662, 384, 97, 108, 115, 7876, 7886, 7890, 114, 256, 59, 115, 7882, 7883, 25301, 108, 59, 27107, 117, 115, 59, 27249, 105, 384, 59, 108, 118, 7898, 7899, 7903, 17333, 111, 110, 187, 7899, 59, 17397, 512, 99, 115, 117, 118, 7914, 7923, 7947, 7971, 256, 105, 111, 7919, 7729, 114, 99, 187, 7726, 617, 7929, 0, 0, 7931, 237, 1352, 97, 110, 116, 256, 103, 108, 7938, 7942, 116, 114, 187, 7773, 101, 115, 115, 187, 7802, 384, 97, 101, 105, 7954, 7958, 7962, 108, 115, 59, 16445, 115, 116, 59, 25183, 118, 256, 59, 68, 565, 7968, 68, 59, 27256, 112, 97, 114, 115, 108, 59, 27109, 256, 68, 97, 7983, 7987, 111, 116, 59, 25171, 114, 114, 59, 26993, 384, 99, 100, 105, 7998, 8001, 7928, 114, 59, 24879, 111, 244, 850, 256, 97, 104, 8009, 8011, 59, 17335, 32827, 240, 16624, 256, 109, 114, 8019, 8023, 108, 32827, 235, 16619, 111, 59, 24748, 384, 99, 105, 112, 8033, 8036, 8039, 108, 59, 16417, 115, 244, 1390, 256, 101, 111, 8044, 8052, 99, 116, 97, 116, 105, 111, 238, 1369, 110, 101, 110, 116, 105, 97, 108, 229, 1401, 2529, 8082, 0, 8094, 0, 8097, 8103, 0, 0, 8134, 8140, 0, 8147, 0, 8166, 8170, 8192, 0, 8200, 8282, 108, 108, 105, 110, 103, 100, 111, 116, 115, 101, 241, 7748, 121, 59, 17476, 109, 97, 108, 101, 59, 26176, 384, 105, 108, 114, 8109, 8115, 8129, 108, 105, 103, 59, 32768, 64259, 617, 8121, 0, 0, 8125, 103, 59, 32768, 64256, 105, 103, 59, 32768, 64260, 59, 49152, 55349, 56611, 108, 105, 103, 59, 32768, 64257, 108, 105, 103, 59, 49152, 102, 106, 384, 97, 108, 116, 8153, 8156, 8161, 116, 59, 26221, 105, 103, 59, 32768, 64258, 110, 115, 59, 26033, 111, 102, 59, 16786, 496, 8174, 0, 8179, 102, 59, 49152, 55349, 56663, 256, 97, 107, 1471, 8183, 256, 59, 118, 8188, 8189, 25300, 59, 27353, 97, 114, 116, 105, 110, 116, 59, 27149, 256, 97, 111, 8204, 8277, 256, 99, 115, 8209, 8274, 945, 8218, 8240, 8248, 8261, 8264, 0, 8272, 946, 8226, 8229, 8231, 8234, 8236, 0, 8238, 32827, 189, 16573, 59, 24915, 32827, 188, 16572, 59, 24917, 59, 24921, 59, 24923, 435, 8244, 0, 8246, 59, 24916, 59, 24918, 692, 8254, 8257, 0, 0, 8259, 32827, 190, 16574, 59, 24919, 59, 24924, 53, 59, 24920, 438, 8268, 0, 8270, 59, 24922, 59, 24925, 56, 59, 24926, 108, 59, 24644, 119, 110, 59, 25378, 99, 114, 59, 49152, 55349, 56507, 2176, 69, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 114, 115, 116, 118, 8322, 8329, 8351, 8357, 8368, 8372, 8432, 8437, 8442, 8447, 8451, 8466, 8504, 791, 8510, 8530, 8606, 256, 59, 108, 1613, 8327, 59, 27276, 384, 99, 109, 112, 8336, 8341, 8349, 117, 116, 101, 59, 16885, 109, 97, 256, 59, 100, 8348, 7386, 17331, 59, 27270, 114, 101, 118, 101, 59, 16671, 256, 105, 121, 8362, 8366, 114, 99, 59, 16669, 59, 17459, 111, 116, 59, 16673, 512, 59, 108, 113, 115, 1598, 1602, 8381, 8393, 384, 59, 113, 115, 1598, 1612, 8388, 108, 97, 110, 244, 1637, 512, 59, 99, 100, 108, 1637, 8402, 8405, 8421, 99, 59, 27305, 111, 116, 256, 59, 111, 8412, 8413, 27264, 256, 59, 108, 8418, 8419, 27266, 59, 27268, 256, 59, 101, 8426, 8429, 49152, 8923, 65024, 115, 59, 27284, 114, 59, 49152, 55349, 56612, 256, 59, 103, 1651, 1563, 109, 101, 108, 59, 24887, 99, 121, 59, 17491, 512, 59, 69, 97, 106, 1626, 8460, 8462, 8464, 59, 27282, 59, 27301, 59, 27300, 512, 69, 97, 101, 115, 8475, 8477, 8489, 8500, 59, 25193, 112, 256, 59, 112, 8483, 8484, 27274, 114, 111, 120, 187, 8484, 256, 59, 113, 8494, 8495, 27272, 256, 59, 113, 8494, 8475, 105, 109, 59, 25319, 112, 102, 59, 49152, 55349, 56664, 256, 99, 105, 8515, 8518, 114, 59, 24842, 109, 384, 59, 101, 108, 1643, 8526, 8528, 59, 27278, 59, 27280, 33536, 62, 59, 99, 100, 108, 113, 114, 1518, 8544, 8554, 8558, 8563, 8569, 256, 99, 105, 8549, 8551, 59, 27303, 114, 59, 27258, 111, 116, 59, 25303, 80, 97, 114, 59, 27029, 117, 101, 115, 116, 59, 27260, 640, 97, 100, 101, 108, 115, 8580, 8554, 8592, 1622, 8603, 496, 8585, 0, 8590, 112, 114, 111, 248, 8350, 114, 59, 27000, 113, 256, 108, 113, 1599, 8598, 108, 101, 115, 243, 8328, 105, 237, 1643, 256, 101, 110, 8611, 8621, 114, 116, 110, 101, 113, 113, 59, 49152, 8809, 65024, 197, 8618, 1280, 65, 97, 98, 99, 101, 102, 107, 111, 115, 121, 8644, 8647, 8689, 8693, 8698, 8728, 8733, 8751, 8808, 8829, 114, 242, 928, 512, 105, 108, 109, 114, 8656, 8660, 8663, 8667, 114, 115, 240, 5252, 102, 187, 8228, 105, 108, 244, 1705, 256, 100, 114, 8672, 8676, 99, 121, 59, 17482, 384, 59, 99, 119, 2292, 8683, 8687, 105, 114, 59, 26952, 59, 25005, 97, 114, 59, 24847, 105, 114, 99, 59, 16677, 384, 97, 108, 114, 8705, 8718, 8723, 114, 116, 115, 256, 59, 117, 8713, 8714, 26213, 105, 116, 187, 8714, 108, 105, 112, 59, 24614, 99, 111, 110, 59, 25273, 114, 59, 49152, 55349, 56613, 115, 256, 101, 119, 8739, 8745, 97, 114, 111, 119, 59, 26917, 97, 114, 111, 119, 59, 26918, 640, 97, 109, 111, 112, 114, 8762, 8766, 8771, 8798, 8803, 114, 114, 59, 25087, 116, 104, 116, 59, 25147, 107, 256, 108, 114, 8777, 8787, 101, 102, 116, 97, 114, 114, 111, 119, 59, 25001, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 25002, 102, 59, 49152, 55349, 56665, 98, 97, 114, 59, 24597, 384, 99, 108, 116, 8815, 8820, 8824, 114, 59, 49152, 55349, 56509, 97, 115, 232, 8692, 114, 111, 107, 59, 16679, 256, 98, 112, 8834, 8839, 117, 108, 108, 59, 24643, 104, 101, 110, 187, 7259, 2785, 8867, 0, 8874, 0, 8888, 8901, 8910, 0, 8917, 8947, 0, 0, 8952, 8994, 9063, 9058, 9087, 0, 9094, 9130, 9140, 99, 117, 116, 101, 32827, 237, 16621, 384, 59, 105, 121, 1905, 8880, 8885, 114, 99, 32827, 238, 16622, 59, 17464, 256, 99, 120, 8892, 8895, 121, 59, 17461, 99, 108, 32827, 161, 16545, 256, 102, 114, 927, 8905, 59, 49152, 55349, 56614, 114, 97, 118, 101, 32827, 236, 16620, 512, 59, 105, 110, 111, 1854, 8925, 8937, 8942, 256, 105, 110, 8930, 8934, 110, 116, 59, 27148, 116, 59, 25133, 102, 105, 110, 59, 27100, 116, 97, 59, 24873, 108, 105, 103, 59, 16691, 384, 97, 111, 112, 8958, 8986, 8989, 384, 99, 103, 116, 8965, 8968, 8983, 114, 59, 16683, 384, 101, 108, 112, 1823, 8975, 8979, 105, 110, 229, 1934, 97, 114, 244, 1824, 104, 59, 16689, 102, 59, 25271, 101, 100, 59, 16821, 640, 59, 99, 102, 111, 116, 1268, 9004, 9009, 9021, 9025, 97, 114, 101, 59, 24837, 105, 110, 256, 59, 116, 9016, 9017, 25118, 105, 101, 59, 27101, 100, 111, 244, 8985, 640, 59, 99, 101, 108, 112, 1879, 9036, 9040, 9051, 9057, 97, 108, 59, 25274, 256, 103, 114, 9045, 9049, 101, 114, 243, 5475, 227, 9037, 97, 114, 104, 107, 59, 27159, 114, 111, 100, 59, 27196, 512, 99, 103, 112, 116, 9071, 9074, 9078, 9083, 121, 59, 17489, 111, 110, 59, 16687, 102, 59, 49152, 55349, 56666, 97, 59, 17337, 117, 101, 115, 116, 32827, 191, 16575, 256, 99, 105, 9098, 9103, 114, 59, 49152, 55349, 56510, 110, 640, 59, 69, 100, 115, 118, 1268, 9115, 9117, 9121, 1267, 59, 25337, 111, 116, 59, 25333, 256, 59, 118, 9126, 9127, 25332, 59, 25331, 256, 59, 105, 1911, 9134, 108, 100, 101, 59, 16681, 491, 9144, 0, 9148, 99, 121, 59, 17494, 108, 32827, 239, 16623, 768, 99, 102, 109, 111, 115, 117, 9164, 9175, 9180, 9185, 9191, 9205, 256, 105, 121, 9169, 9173, 114, 99, 59, 16693, 59, 17465, 114, 59, 49152, 55349, 56615, 97, 116, 104, 59, 16951, 112, 102, 59, 49152, 55349, 56667, 483, 9196, 0, 9201, 114, 59, 49152, 55349, 56511, 114, 99, 121, 59, 17496, 107, 99, 121, 59, 17492, 1024, 97, 99, 102, 103, 104, 106, 111, 115, 9227, 9238, 9250, 9255, 9261, 9265, 9269, 9275, 112, 112, 97, 256, 59, 118, 9235, 9236, 17338, 59, 17392, 256, 101, 121, 9243, 9248, 100, 105, 108, 59, 16695, 59, 17466, 114, 59, 49152, 55349, 56616, 114, 101, 101, 110, 59, 16696, 99, 121, 59, 17477, 99, 121, 59, 17500, 112, 102, 59, 49152, 55349, 56668, 99, 114, 59, 49152, 55349, 56512, 2944, 65, 66, 69, 72, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 9328, 9345, 9350, 9357, 9361, 9486, 9533, 9562, 9600, 9806, 9822, 9829, 9849, 9853, 9882, 9906, 9944, 10077, 10088, 10123, 10176, 10241, 10258, 384, 97, 114, 116, 9335, 9338, 9340, 114, 242, 2502, 242, 917, 97, 105, 108, 59, 26907, 97, 114, 114, 59, 26894, 256, 59, 103, 2452, 9355, 59, 27275, 97, 114, 59, 26978, 2403, 9381, 0, 9386, 0, 9393, 0, 0, 0, 0, 0, 9397, 9402, 0, 9414, 9416, 9421, 0, 9465, 117, 116, 101, 59, 16698, 109, 112, 116, 121, 118, 59, 27060, 114, 97, 238, 2124, 98, 100, 97, 59, 17339, 103, 384, 59, 100, 108, 2190, 9409, 9411, 59, 27025, 229, 2190, 59, 27269, 117, 111, 32827, 171, 16555, 114, 1024, 59, 98, 102, 104, 108, 112, 115, 116, 2201, 9438, 9446, 9449, 9451, 9454, 9457, 9461, 256, 59, 102, 2205, 9443, 115, 59, 26911, 115, 59, 26909, 235, 8786, 112, 59, 25003, 108, 59, 26937, 105, 109, 59, 26995, 108, 59, 24994, 384, 59, 97, 101, 9471, 9472, 9476, 27307, 105, 108, 59, 26905, 256, 59, 115, 9481, 9482, 27309, 59, 49152, 10925, 65024, 384, 97, 98, 114, 9493, 9497, 9501, 114, 114, 59, 26892, 114, 107, 59, 26482, 256, 97, 107, 9506, 9516, 99, 256, 101, 107, 9512, 9514, 59, 16507, 59, 16475, 256, 101, 115, 9521, 9523, 59, 27019, 108, 256, 100, 117, 9529, 9531, 59, 27023, 59, 27021, 512, 97, 101, 117, 121, 9542, 9547, 9558, 9560, 114, 111, 110, 59, 16702, 256, 100, 105, 9552, 9556, 105, 108, 59, 16700, 236, 2224, 226, 9513, 59, 17467, 512, 99, 113, 114, 115, 9571, 9574, 9581, 9597, 97, 59, 26934, 117, 111, 256, 59, 114, 3609, 5958, 256, 100, 117, 9586, 9591, 104, 97, 114, 59, 26983, 115, 104, 97, 114, 59, 26955, 104, 59, 25010, 640, 59, 102, 103, 113, 115, 9611, 9612, 2441, 9715, 9727, 25188, 116, 640, 97, 104, 108, 114, 116, 9624, 9636, 9655, 9666, 9704, 114, 114, 111, 119, 256, 59, 116, 2201, 9633, 97, 233, 9462, 97, 114, 112, 111, 111, 110, 256, 100, 117, 9647, 9652, 111, 119, 110, 187, 1114, 112, 187, 2406, 101, 102, 116, 97, 114, 114, 111, 119, 115, 59, 25031, 105, 103, 104, 116, 384, 97, 104, 115, 9677, 9686, 9694, 114, 114, 111, 119, 256, 59, 115, 2292, 2215, 97, 114, 112, 111, 111, 110, 243, 3992, 113, 117, 105, 103, 97, 114, 114, 111, 247, 8688, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 25291, 384, 59, 113, 115, 9611, 2451, 9722, 108, 97, 110, 244, 2476, 640, 59, 99, 100, 103, 115, 2476, 9738, 9741, 9757, 9768, 99, 59, 27304, 111, 116, 256, 59, 111, 9748, 9749, 27263, 256, 59, 114, 9754, 9755, 27265, 59, 27267, 256, 59, 101, 9762, 9765, 49152, 8922, 65024, 115, 59, 27283, 640, 97, 100, 101, 103, 115, 9779, 9785, 9789, 9801, 9803, 112, 112, 114, 111, 248, 9414, 111, 116, 59, 25302, 113, 256, 103, 113, 9795, 9797, 244, 2441, 103, 116, 242, 9356, 244, 2459, 105, 237, 2482, 384, 105, 108, 114, 9813, 2273, 9818, 115, 104, 116, 59, 27004, 59, 49152, 55349, 56617, 256, 59, 69, 2460, 9827, 59, 27281, 353, 9833, 9846, 114, 256, 100, 117, 9650, 9838, 256, 59, 108, 2405, 9843, 59, 26986, 108, 107, 59, 25988, 99, 121, 59, 17497, 640, 59, 97, 99, 104, 116, 2632, 9864, 9867, 9873, 9878, 114, 242, 9665, 111, 114, 110, 101, 242, 7432, 97, 114, 100, 59, 26987, 114, 105, 59, 26106, 256, 105, 111, 9887, 9892, 100, 111, 116, 59, 16704, 117, 115, 116, 256, 59, 97, 9900, 9901, 25520, 99, 104, 101, 187, 9901, 512, 69, 97, 101, 115, 9915, 9917, 9929, 9940, 59, 25192, 112, 256, 59, 112, 9923, 9924, 27273, 114, 111, 120, 187, 9924, 256, 59, 113, 9934, 9935, 27271, 256, 59, 113, 9934, 9915, 105, 109, 59, 25318, 1024, 97, 98, 110, 111, 112, 116, 119, 122, 9961, 9972, 9975, 10010, 10031, 10049, 10055, 10064, 256, 110, 114, 9966, 9969, 103, 59, 26604, 114, 59, 25085, 114, 235, 2241, 103, 384, 108, 109, 114, 9983, 9997, 10004, 101, 102, 116, 256, 97, 114, 2534, 9991, 105, 103, 104, 116, 225, 2546, 97, 112, 115, 116, 111, 59, 26620, 105, 103, 104, 116, 225, 2557, 112, 97, 114, 114, 111, 119, 256, 108, 114, 10021, 10025, 101, 102, 244, 9453, 105, 103, 104, 116, 59, 25004, 384, 97, 102, 108, 10038, 10041, 10045, 114, 59, 27013, 59, 49152, 55349, 56669, 117, 115, 59, 27181, 105, 109, 101, 115, 59, 27188, 353, 10059, 10063, 115, 116, 59, 25111, 225, 4942, 384, 59, 101, 102, 10071, 10072, 6144, 26058, 110, 103, 101, 187, 10072, 97, 114, 256, 59, 108, 10084, 10085, 16424, 116, 59, 27027, 640, 97, 99, 104, 109, 116, 10099, 10102, 10108, 10117, 10119, 114, 242, 2216, 111, 114, 110, 101, 242, 7564, 97, 114, 256, 59, 100, 3992, 10115, 59, 26989, 59, 24590, 114, 105, 59, 25279, 768, 97, 99, 104, 105, 113, 116, 10136, 10141, 2624, 10146, 10158, 10171, 113, 117, 111, 59, 24633, 114, 59, 49152, 55349, 56513, 109, 384, 59, 101, 103, 2482, 10154, 10156, 59, 27277, 59, 27279, 256, 98, 117, 9514, 10163, 111, 256, 59, 114, 3615, 10169, 59, 24602, 114, 111, 107, 59, 16706, 33792, 60, 59, 99, 100, 104, 105, 108, 113, 114, 2091, 10194, 9785, 10204, 10208, 10213, 10218, 10224, 256, 99, 105, 10199, 10201, 59, 27302, 114, 59, 27257, 114, 101, 229, 9714, 109, 101, 115, 59, 25289, 97, 114, 114, 59, 26998, 117, 101, 115, 116, 59, 27259, 256, 80, 105, 10229, 10233, 97, 114, 59, 27030, 384, 59, 101, 102, 10240, 2349, 6171, 26051, 114, 256, 100, 117, 10247, 10253, 115, 104, 97, 114, 59, 26954, 104, 97, 114, 59, 26982, 256, 101, 110, 10263, 10273, 114, 116, 110, 101, 113, 113, 59, 49152, 8808, 65024, 197, 10270, 1792, 68, 97, 99, 100, 101, 102, 104, 105, 108, 110, 111, 112, 115, 117, 10304, 10309, 10370, 10382, 10387, 10400, 10405, 10408, 10458, 10466, 10468, 2691, 10483, 10498, 68, 111, 116, 59, 25146, 512, 99, 108, 112, 114, 10318, 10322, 10339, 10365, 114, 32827, 175, 16559, 256, 101, 116, 10327, 10329, 59, 26178, 256, 59, 101, 10334, 10335, 26400, 115, 101, 187, 10335, 256, 59, 115, 4155, 10344, 116, 111, 512, 59, 100, 108, 117, 4155, 10355, 10359, 10363, 111, 119, 238, 1164, 101, 102, 244, 2319, 240, 5073, 107, 101, 114, 59, 26030, 256, 111, 121, 10375, 10380, 109, 109, 97, 59, 27177, 59, 17468, 97, 115, 104, 59, 24596, 97, 115, 117, 114, 101, 100, 97, 110, 103, 108, 101, 187, 5670, 114, 59, 49152, 55349, 56618, 111, 59, 24871, 384, 99, 100, 110, 10415, 10420, 10441, 114, 111, 32827, 181, 16565, 512, 59, 97, 99, 100, 5220, 10429, 10432, 10436, 115, 244, 5799, 105, 114, 59, 27376, 111, 116, 32955, 183, 437, 117, 115, 384, 59, 98, 100, 10450, 6403, 10451, 25106, 256, 59, 117, 7484, 10456, 59, 27178, 355, 10462, 10465, 112, 59, 27355, 242, 8722, 240, 2689, 256, 100, 112, 10473, 10478, 101, 108, 115, 59, 25255, 102, 59, 49152, 55349, 56670, 256, 99, 116, 10488, 10493, 114, 59, 49152, 55349, 56514, 112, 111, 115, 187, 5533, 384, 59, 108, 109, 10505, 10506, 10509, 17340, 116, 105, 109, 97, 112, 59, 25272, 3072, 71, 76, 82, 86, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 10562, 10579, 10622, 10633, 10648, 10714, 10729, 10773, 10778, 10840, 10845, 10883, 10901, 10916, 10920, 11012, 11015, 11076, 11135, 11182, 11316, 11367, 11388, 11497, 256, 103, 116, 10567, 10571, 59, 49152, 8921, 824, 256, 59, 118, 10576, 3023, 49152, 8811, 8402, 384, 101, 108, 116, 10586, 10610, 10614, 102, 116, 256, 97, 114, 10593, 10599, 114, 114, 111, 119, 59, 25037, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 25038, 59, 49152, 8920, 824, 256, 59, 118, 10619, 3143, 49152, 8810, 8402, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 25039, 256, 68, 100, 10638, 10643, 97, 115, 104, 59, 25263, 97, 115, 104, 59, 25262, 640, 98, 99, 110, 112, 116, 10659, 10663, 10668, 10673, 10700, 108, 97, 187, 734, 117, 116, 101, 59, 16708, 103, 59, 49152, 8736, 8402, 640, 59, 69, 105, 111, 112, 3460, 10684, 10688, 10693, 10696, 59, 49152, 10864, 824, 100, 59, 49152, 8779, 824, 115, 59, 16713, 114, 111, 248, 3460, 117, 114, 256, 59, 97, 10707, 10708, 26222, 108, 256, 59, 115, 10707, 2872, 499, 10719, 0, 10723, 112, 32955, 160, 2871, 109, 112, 256, 59, 101, 3065, 3072, 640, 97, 101, 111, 117, 121, 10740, 10750, 10755, 10768, 10771, 496, 10745, 0, 10747, 59, 27203, 111, 110, 59, 16712, 100, 105, 108, 59, 16710, 110, 103, 256, 59, 100, 3454, 10762, 111, 116, 59, 49152, 10861, 824, 112, 59, 27202, 59, 17469, 97, 115, 104, 59, 24595, 896, 59, 65, 97, 100, 113, 115, 120, 2962, 10793, 10797, 10811, 10817, 10821, 10832, 114, 114, 59, 25047, 114, 256, 104, 114, 10803, 10806, 107, 59, 26916, 256, 59, 111, 5106, 5104, 111, 116, 59, 49152, 8784, 824, 117, 105, 246, 2915, 256, 101, 105, 10826, 10830, 97, 114, 59, 26920, 237, 2968, 105, 115, 116, 256, 59, 115, 2976, 2975, 114, 59, 49152, 55349, 56619, 512, 69, 101, 115, 116, 3013, 10854, 10873, 10876, 384, 59, 113, 115, 3004, 10861, 3041, 384, 59, 113, 115, 3004, 3013, 10868, 108, 97, 110, 244, 3042, 105, 237, 3050, 256, 59, 114, 2998, 10881, 187, 2999, 384, 65, 97, 112, 10890, 10893, 10897, 114, 242, 10609, 114, 114, 59, 25006, 97, 114, 59, 27378, 384, 59, 115, 118, 3981, 10908, 3980, 256, 59, 100, 10913, 10914, 25340, 59, 25338, 99, 121, 59, 17498, 896, 65, 69, 97, 100, 101, 115, 116, 10935, 10938, 10942, 10946, 10949, 10998, 11001, 114, 242, 10598, 59, 49152, 8806, 824, 114, 114, 59, 24986, 114, 59, 24613, 512, 59, 102, 113, 115, 3131, 10958, 10979, 10991, 116, 256, 97, 114, 10964, 10969, 114, 114, 111, 247, 10945, 105, 103, 104, 116, 97, 114, 114, 111, 247, 10896, 384, 59, 113, 115, 3131, 10938, 10986, 108, 97, 110, 244, 3157, 256, 59, 115, 3157, 10996, 187, 3126, 105, 237, 3165, 256, 59, 114, 3125, 11006, 105, 256, 59, 101, 3098, 3109, 105, 228, 3472, 256, 112, 116, 11020, 11025, 102, 59, 49152, 55349, 56671, 33152, 172, 59, 105, 110, 11033, 11034, 11062, 16556, 110, 512, 59, 69, 100, 118, 2953, 11044, 11048, 11054, 59, 49152, 8953, 824, 111, 116, 59, 49152, 8949, 824, 481, 2953, 11059, 11061, 59, 25335, 59, 25334, 105, 256, 59, 118, 3256, 11068, 481, 3256, 11073, 11075, 59, 25342, 59, 25341, 384, 97, 111, 114, 11083, 11107, 11113, 114, 512, 59, 97, 115, 116, 2939, 11093, 11098, 11103, 108, 108, 101, 236, 2939, 108, 59, 49152, 11005, 8421, 59, 49152, 8706, 824, 108, 105, 110, 116, 59, 27156, 384, 59, 99, 101, 3218, 11120, 11123, 117, 229, 3237, 256, 59, 99, 3224, 11128, 256, 59, 101, 3218, 11133, 241, 3224, 512, 65, 97, 105, 116, 11144, 11147, 11165, 11175, 114, 242, 10632, 114, 114, 384, 59, 99, 119, 11156, 11157, 11161, 24987, 59, 49152, 10547, 824, 59, 49152, 8605, 824, 103, 104, 116, 97, 114, 114, 111, 119, 187, 11157, 114, 105, 256, 59, 101, 3275, 3286, 896, 99, 104, 105, 109, 112, 113, 117, 11197, 11213, 11225, 11012, 2936, 11236, 11247, 512, 59, 99, 101, 114, 3378, 11206, 3383, 11209, 117, 229, 3397, 59, 49152, 55349, 56515, 111, 114, 116, 621, 11013, 0, 0, 11222, 97, 114, 225, 11094, 109, 256, 59, 101, 3438, 11231, 256, 59, 113, 3444, 3443, 115, 117, 256, 98, 112, 11243, 11245, 229, 3320, 229, 3339, 384, 98, 99, 112, 11254, 11281, 11289, 512, 59, 69, 101, 115, 11263, 11264, 3362, 11268, 25220, 59, 49152, 10949, 824, 101, 116, 256, 59, 101, 3355, 11275, 113, 256, 59, 113, 3363, 11264, 99, 256, 59, 101, 3378, 11287, 241, 3384, 512, 59, 69, 101, 115, 11298, 11299, 3423, 11303, 25221, 59, 49152, 10950, 824, 101, 116, 256, 59, 101, 3416, 11310, 113, 256, 59, 113, 3424, 11299, 512, 103, 105, 108, 114, 11325, 11327, 11333, 11335, 236, 3031, 108, 100, 101, 32827, 241, 16625, 231, 3139, 105, 97, 110, 103, 108, 101, 256, 108, 114, 11346, 11356, 101, 102, 116, 256, 59, 101, 3098, 11354, 241, 3110, 105, 103, 104, 116, 256, 59, 101, 3275, 11365, 241, 3287, 256, 59, 109, 11372, 11373, 17341, 384, 59, 101, 115, 11380, 11381, 11385, 16419, 114, 111, 59, 24854, 112, 59, 24583, 1152, 68, 72, 97, 100, 103, 105, 108, 114, 115, 11407, 11412, 11417, 11422, 11427, 11440, 11446, 11475, 11491, 97, 115, 104, 59, 25261, 97, 114, 114, 59, 26884, 112, 59, 49152, 8781, 8402, 97, 115, 104, 59, 25260, 256, 101, 116, 11432, 11436, 59, 49152, 8805, 8402, 59, 49152, 62, 8402, 110, 102, 105, 110, 59, 27102, 384, 65, 101, 116, 11453, 11457, 11461, 114, 114, 59, 26882, 59, 49152, 8804, 8402, 256, 59, 114, 11466, 11469, 49152, 60, 8402, 105, 101, 59, 49152, 8884, 8402, 256, 65, 116, 11480, 11484, 114, 114, 59, 26883, 114, 105, 101, 59, 49152, 8885, 8402, 105, 109, 59, 49152, 8764, 8402, 384, 65, 97, 110, 11504, 11508, 11522, 114, 114, 59, 25046, 114, 256, 104, 114, 11514, 11517, 107, 59, 26915, 256, 59, 111, 5095, 5093, 101, 97, 114, 59, 26919, 4691, 6805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11565, 0, 11576, 11592, 11616, 11621, 11634, 11652, 6919, 0, 0, 11661, 11691, 0, 11720, 11726, 0, 11740, 11801, 11819, 11838, 11843, 256, 99, 115, 11569, 6807, 117, 116, 101, 32827, 243, 16627, 256, 105, 121, 11580, 11589, 114, 256, 59, 99, 6814, 11586, 32827, 244, 16628, 59, 17470, 640, 97, 98, 105, 111, 115, 6816, 11602, 11607, 456, 11610, 108, 97, 99, 59, 16721, 118, 59, 27192, 111, 108, 100, 59, 27068, 108, 105, 103, 59, 16723, 256, 99, 114, 11625, 11629, 105, 114, 59, 27071, 59, 49152, 55349, 56620, 879, 11641, 0, 0, 11644, 0, 11650, 110, 59, 17115, 97, 118, 101, 32827, 242, 16626, 59, 27073, 256, 98, 109, 11656, 3572, 97, 114, 59, 27061, 512, 97, 99, 105, 116, 11669, 11672, 11685, 11688, 114, 242, 6784, 256, 105, 114, 11677, 11680, 114, 59, 27070, 111, 115, 115, 59, 27067, 110, 229, 3666, 59, 27072, 384, 97, 101, 105, 11697, 11701, 11705, 99, 114, 59, 16717, 103, 97, 59, 17353, 384, 99, 100, 110, 11712, 11717, 461, 114, 111, 110, 59, 17343, 59, 27062, 112, 102, 59, 49152, 55349, 56672, 384, 97, 101, 108, 11732, 11735, 466, 114, 59, 27063, 114, 112, 59, 27065, 896, 59, 97, 100, 105, 111, 115, 118, 11754, 11755, 11758, 11784, 11789, 11792, 11798, 25128, 114, 242, 6790, 512, 59, 101, 102, 109, 11767, 11768, 11778, 11781, 27229, 114, 256, 59, 111, 11774, 11775, 24884, 102, 187, 11775, 32827, 170, 16554, 32827, 186, 16570, 103, 111, 102, 59, 25270, 114, 59, 27222, 108, 111, 112, 101, 59, 27223, 59, 27227, 384, 99, 108, 111, 11807, 11809, 11815, 242, 11777, 97, 115, 104, 32827, 248, 16632, 108, 59, 25240, 105, 364, 11823, 11828, 100, 101, 32827, 245, 16629, 101, 115, 256, 59, 97, 475, 11834, 115, 59, 27190, 109, 108, 32827, 246, 16630, 98, 97, 114, 59, 25405, 2785, 11870, 0, 11901, 0, 11904, 11933, 0, 11938, 11961, 0, 0, 11979, 3740, 0, 12051, 0, 0, 12075, 12220, 0, 12232, 114, 512, 59, 97, 115, 116, 1027, 11879, 11890, 3717, 33024, 182, 59, 108, 11885, 11886, 16566, 108, 101, 236, 1027, 617, 11896, 0, 0, 11899, 109, 59, 27379, 59, 27389, 121, 59, 17471, 114, 640, 99, 105, 109, 112, 116, 11915, 11919, 11923, 6245, 11927, 110, 116, 59, 16421, 111, 100, 59, 16430, 105, 108, 59, 24624, 101, 110, 107, 59, 24625, 114, 59, 49152, 55349, 56621, 384, 105, 109, 111, 11944, 11952, 11956, 256, 59, 118, 11949, 11950, 17350, 59, 17365, 109, 97, 244, 2678, 110, 101, 59, 26126, 384, 59, 116, 118, 11967, 11968, 11976, 17344, 99, 104, 102, 111, 114, 107, 187, 8189, 59, 17366, 256, 97, 117, 11983, 11999, 110, 256, 99, 107, 11989, 11997, 107, 256, 59, 104, 8692, 11995, 59, 24846, 246, 8692, 115, 1152, 59, 97, 98, 99, 100, 101, 109, 115, 116, 12019, 12020, 6408, 12025, 12029, 12036, 12038, 12042, 12046, 16427, 99, 105, 114, 59, 27171, 105, 114, 59, 27170, 256, 111, 117, 7488, 12034, 59, 27173, 59, 27250, 110, 32955, 177, 3741, 105, 109, 59, 27174, 119, 111, 59, 27175, 384, 105, 112, 117, 12057, 12064, 12069, 110, 116, 105, 110, 116, 59, 27157, 102, 59, 49152, 55349, 56673, 110, 100, 32827, 163, 16547, 1280, 59, 69, 97, 99, 101, 105, 110, 111, 115, 117, 3784, 12095, 12097, 12100, 12103, 12161, 12169, 12178, 12158, 12214, 59, 27315, 112, 59, 27319, 117, 229, 3801, 256, 59, 99, 3790, 12108, 768, 59, 97, 99, 101, 110, 115, 3784, 12121, 12127, 12134, 12136, 12158, 112, 112, 114, 111, 248, 12099, 117, 114, 108, 121, 101, 241, 3801, 241, 3790, 384, 97, 101, 115, 12143, 12150, 12154, 112, 112, 114, 111, 120, 59, 27321, 113, 113, 59, 27317, 105, 109, 59, 25320, 105, 237, 3807, 109, 101, 256, 59, 115, 12168, 3758, 24626, 384, 69, 97, 115, 12152, 12176, 12154, 240, 12149, 384, 100, 102, 112, 3820, 12185, 12207, 384, 97, 108, 115, 12192, 12197, 12202, 108, 97, 114, 59, 25390, 105, 110, 101, 59, 25362, 117, 114, 102, 59, 25363, 256, 59, 116, 3835, 12212, 239, 3835, 114, 101, 108, 59, 25264, 256, 99, 105, 12224, 12229, 114, 59, 49152, 55349, 56517, 59, 17352, 110, 99, 115, 112, 59, 24584, 768, 102, 105, 111, 112, 115, 117, 12250, 8930, 12255, 12261, 12267, 12273, 114, 59, 49152, 55349, 56622, 112, 102, 59, 49152, 55349, 56674, 114, 105, 109, 101, 59, 24663, 99, 114, 59, 49152, 55349, 56518, 384, 97, 101, 111, 12280, 12297, 12307, 116, 256, 101, 105, 12286, 12293, 114, 110, 105, 111, 110, 243, 1712, 110, 116, 59, 27158, 115, 116, 256, 59, 101, 12304, 12305, 16447, 241, 7961, 244, 3860, 2688, 65, 66, 72, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 114, 115, 116, 117, 120, 12352, 12369, 12373, 12377, 12512, 12558, 12587, 12615, 12642, 12658, 12686, 12806, 12821, 12836, 12841, 12888, 12910, 12914, 12944, 12976, 12983, 384, 97, 114, 116, 12359, 12362, 12364, 114, 242, 4275, 242, 989, 97, 105, 108, 59, 26908, 97, 114, 242, 7269, 97, 114, 59, 26980, 896, 99, 100, 101, 110, 113, 114, 116, 12392, 12405, 12408, 12415, 12431, 12436, 12492, 256, 101, 117, 12397, 12401, 59, 49152, 8765, 817, 116, 101, 59, 16725, 105, 227, 4462, 109, 112, 116, 121, 118, 59, 27059, 103, 512, 59, 100, 101, 108, 4049, 12425, 12427, 12429, 59, 27026, 59, 27045, 229, 4049, 117, 111, 32827, 187, 16571, 114, 1408, 59, 97, 98, 99, 102, 104, 108, 112, 115, 116, 119, 4060, 12460, 12463, 12471, 12473, 12476, 12478, 12480, 12483, 12487, 12490, 112, 59, 26997, 256, 59, 102, 4064, 12468, 115, 59, 26912, 59, 26931, 115, 59, 26910, 235, 8797, 240, 10030, 108, 59, 26949, 105, 109, 59, 26996, 108, 59, 24995, 59, 24989, 256, 97, 105, 12497, 12501, 105, 108, 59, 26906, 111, 256, 59, 110, 12507, 12508, 25142, 97, 108, 243, 3870, 384, 97, 98, 114, 12519, 12522, 12526, 114, 242, 6117, 114, 107, 59, 26483, 256, 97, 107, 12531, 12541, 99, 256, 101, 107, 12537, 12539, 59, 16509, 59, 16477, 256, 101, 115, 12546, 12548, 59, 27020, 108, 256, 100, 117, 12554, 12556, 59, 27022, 59, 27024, 512, 97, 101, 117, 121, 12567, 12572, 12583, 12585, 114, 111, 110, 59, 16729, 256, 100, 105, 12577, 12581, 105, 108, 59, 16727, 236, 4082, 226, 12538, 59, 17472, 512, 99, 108, 113, 115, 12596, 12599, 12605, 12612, 97, 59, 26935, 100, 104, 97, 114, 59, 26985, 117, 111, 256, 59, 114, 526, 525, 104, 59, 25011, 384, 97, 99, 103, 12622, 12639, 3908, 108, 512, 59, 105, 112, 115, 3960, 12632, 12635, 4252, 110, 229, 4283, 97, 114, 244, 4009, 116, 59, 26029, 384, 105, 108, 114, 12649, 4131, 12654, 115, 104, 116, 59, 27005, 59, 49152, 55349, 56623, 256, 97, 111, 12663, 12678, 114, 256, 100, 117, 12669, 12671, 187, 1147, 256, 59, 108, 4241, 12676, 59, 26988, 256, 59, 118, 12683, 12684, 17345, 59, 17393, 384, 103, 110, 115, 12693, 12793, 12796, 104, 116, 768, 97, 104, 108, 114, 115, 116, 12708, 12720, 12738, 12760, 12772, 12782, 114, 114, 111, 119, 256, 59, 116, 4060, 12717, 97, 233, 12488, 97, 114, 112, 111, 111, 110, 256, 100, 117, 12731, 12735, 111, 119, 238, 12670, 112, 187, 4242, 101, 102, 116, 256, 97, 104, 12746, 12752, 114, 114, 111, 119, 243, 4074, 97, 114, 112, 111, 111, 110, 243, 1361, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59, 25033, 113, 117, 105, 103, 97, 114, 114, 111, 247, 12491, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 25292, 103, 59, 17114, 105, 110, 103, 100, 111, 116, 115, 101, 241, 7986, 384, 97, 104, 109, 12813, 12816, 12819, 114, 242, 4074, 97, 242, 1361, 59, 24591, 111, 117, 115, 116, 256, 59, 97, 12830, 12831, 25521, 99, 104, 101, 187, 12831, 109, 105, 100, 59, 27374, 512, 97, 98, 112, 116, 12850, 12861, 12864, 12882, 256, 110, 114, 12855, 12858, 103, 59, 26605, 114, 59, 25086, 114, 235, 4099, 384, 97, 102, 108, 12871, 12874, 12878, 114, 59, 27014, 59, 49152, 55349, 56675, 117, 115, 59, 27182, 105, 109, 101, 115, 59, 27189, 256, 97, 112, 12893, 12903, 114, 256, 59, 103, 12899, 12900, 16425, 116, 59, 27028, 111, 108, 105, 110, 116, 59, 27154, 97, 114, 242, 12771, 512, 97, 99, 104, 113, 12923, 12928, 4284, 12933, 113, 117, 111, 59, 24634, 114, 59, 49152, 55349, 56519, 256, 98, 117, 12539, 12938, 111, 256, 59, 114, 532, 531, 384, 104, 105, 114, 12951, 12955, 12960, 114, 101, 229, 12792, 109, 101, 115, 59, 25290, 105, 512, 59, 101, 102, 108, 12970, 4185, 6177, 12971, 26041, 116, 114, 105, 59, 27086, 108, 117, 104, 97, 114, 59, 26984, 59, 24862, 3425, 13013, 13019, 13023, 13100, 13112, 13169, 0, 13178, 13220, 0, 0, 13292, 13296, 0, 13352, 13384, 13402, 13485, 13489, 13514, 13553, 0, 13846, 0, 0, 13875, 99, 117, 116, 101, 59, 16731, 113, 117, 239, 10170, 1280, 59, 69, 97, 99, 101, 105, 110, 112, 115, 121, 4589, 13043, 13045, 13055, 13058, 13067, 13071, 13087, 13094, 13097, 59, 27316, 496, 13050, 0, 13052, 59, 27320, 111, 110, 59, 16737, 117, 229, 4606, 256, 59, 100, 4595, 13063, 105, 108, 59, 16735, 114, 99, 59, 16733, 384, 69, 97, 115, 13078, 13080, 13083, 59, 27318, 112, 59, 27322, 105, 109, 59, 25321, 111, 108, 105, 110, 116, 59, 27155, 105, 237, 4612, 59, 17473, 111, 116, 384, 59, 98, 101, 13108, 7495, 13109, 25285, 59, 27238, 896, 65, 97, 99, 109, 115, 116, 120, 13126, 13130, 13143, 13147, 13150, 13155, 13165, 114, 114, 59, 25048, 114, 256, 104, 114, 13136, 13138, 235, 8744, 256, 59, 111, 2614, 2612, 116, 32827, 167, 16551, 105, 59, 16443, 119, 97, 114, 59, 26921, 109, 256, 105, 110, 13161, 240, 110, 117, 243, 241, 116, 59, 26422, 114, 256, 59, 111, 13174, 8277, 49152, 55349, 56624, 512, 97, 99, 111, 121, 13186, 13190, 13201, 13216, 114, 112, 59, 26223, 256, 104, 121, 13195, 13199, 99, 121, 59, 17481, 59, 17480, 114, 116, 621, 13209, 0, 0, 13212, 105, 228, 5220, 97, 114, 97, 236, 11887, 32827, 173, 16557, 256, 103, 109, 13224, 13236, 109, 97, 384, 59, 102, 118, 13233, 13234, 13234, 17347, 59, 17346, 1024, 59, 100, 101, 103, 108, 110, 112, 114, 4779, 13253, 13257, 13262, 13270, 13278, 13281, 13286, 111, 116, 59, 27242, 256, 59, 113, 4785, 4784, 256, 59, 69, 13267, 13268, 27294, 59, 27296, 256, 59, 69, 13275, 13276, 27293, 59, 27295, 101, 59, 25158, 108, 117, 115, 59, 27172, 97, 114, 114, 59, 26994, 97, 114, 242, 4413, 512, 97, 101, 105, 116, 13304, 13320, 13327, 13335, 256, 108, 115, 13309, 13316, 108, 115, 101, 116, 109, 233, 13162, 104, 112, 59, 27187, 112, 97, 114, 115, 108, 59, 27108, 256, 100, 108, 5219, 13332, 101, 59, 25379, 256, 59, 101, 13340, 13341, 27306, 256, 59, 115, 13346, 13347, 27308, 59, 49152, 10924, 65024, 384, 102, 108, 112, 13358, 13363, 13378, 116, 99, 121, 59, 17484, 256, 59, 98, 13368, 13369, 16431, 256, 59, 97, 13374, 13375, 27076, 114, 59, 25407, 102, 59, 49152, 55349, 56676, 97, 256, 100, 114, 13389, 1026, 101, 115, 256, 59, 117, 13396, 13397, 26208, 105, 116, 187, 13397, 384, 99, 115, 117, 13408, 13433, 13471, 256, 97, 117, 13413, 13423, 112, 256, 59, 115, 4488, 13419, 59, 49152, 8851, 65024, 112, 256, 59, 115, 4532, 13429, 59, 49152, 8852, 65024, 117, 256, 98, 112, 13439, 13455, 384, 59, 101, 115, 4503, 4508, 13446, 101, 116, 256, 59, 101, 4503, 13453, 241, 4509, 384, 59, 101, 115, 4520, 4525, 13462, 101, 116, 256, 59, 101, 4520, 13469, 241, 4526, 384, 59, 97, 102, 4475, 13478, 1456, 114, 357, 13483, 1457, 187, 4476, 97, 114, 242, 4424, 512, 99, 101, 109, 116, 13497, 13502, 13506, 13509, 114, 59, 49152, 55349, 56520, 116, 109, 238, 241, 105, 236, 13333, 97, 114, 230, 4542, 256, 97, 114, 13518, 13525, 114, 256, 59, 102, 13524, 6079, 26118, 256, 97, 110, 13530, 13549, 105, 103, 104, 116, 256, 101, 112, 13539, 13546, 112, 115, 105, 108, 111, 238, 7904, 104, 233, 11951, 115, 187, 10322, 640, 98, 99, 109, 110, 112, 13563, 13662, 4617, 13707, 13710, 1152, 59, 69, 100, 101, 109, 110, 112, 114, 115, 13582, 13583, 13585, 13589, 13598, 13603, 13612, 13617, 13622, 25218, 59, 27333, 111, 116, 59, 27325, 256, 59, 100, 4570, 13594, 111, 116, 59, 27331, 117, 108, 116, 59, 27329, 256, 69, 101, 13608, 13610, 59, 27339, 59, 25226, 108, 117, 115, 59, 27327, 97, 114, 114, 59, 27001, 384, 101, 105, 117, 13629, 13650, 13653, 116, 384, 59, 101, 110, 13582, 13637, 13643, 113, 256, 59, 113, 4570, 13583, 101, 113, 256, 59, 113, 13611, 13608, 109, 59, 27335, 256, 98, 112, 13658, 13660, 59, 27349, 59, 27347, 99, 768, 59, 97, 99, 101, 110, 115, 4589, 13676, 13682, 13689, 13691, 13094, 112, 112, 114, 111, 248, 13050, 117, 114, 108, 121, 101, 241, 4606, 241, 4595, 384, 97, 101, 115, 13698, 13704, 13083, 112, 112, 114, 111, 248, 13082, 113, 241, 13079, 103, 59, 26218, 1664, 49, 50, 51, 59, 69, 100, 101, 104, 108, 109, 110, 112, 115, 13737, 13740, 13743, 4636, 13746, 13748, 13760, 13769, 13781, 13786, 13791, 13800, 13805, 32827, 185, 16569, 32827, 178, 16562, 32827, 179, 16563, 59, 27334, 256, 111, 115, 13753, 13756, 116, 59, 27326, 117, 98, 59, 27352, 256, 59, 100, 4642, 13765, 111, 116, 59, 27332, 115, 256, 111, 117, 13775, 13778, 108, 59, 26569, 98, 59, 27351, 97, 114, 114, 59, 27003, 117, 108, 116, 59, 27330, 256, 69, 101, 13796, 13798, 59, 27340, 59, 25227, 108, 117, 115, 59, 27328, 384, 101, 105, 117, 13812, 13833, 13836, 116, 384, 59, 101, 110, 4636, 13820, 13826, 113, 256, 59, 113, 4642, 13746, 101, 113, 256, 59, 113, 13799, 13796, 109, 59, 27336, 256, 98, 112, 13841, 13843, 59, 27348, 59, 27350, 384, 65, 97, 110, 13852, 13856, 13869, 114, 114, 59, 25049, 114, 256, 104, 114, 13862, 13864, 235, 8750, 256, 59, 111, 2603, 2601, 119, 97, 114, 59, 26922, 108, 105, 103, 32827, 223, 16607, 3041, 13905, 13917, 13920, 4814, 13939, 13945, 0, 13950, 14018, 0, 0, 0, 0, 0, 14043, 14083, 0, 14089, 14188, 0, 0, 0, 14215, 626, 13910, 0, 0, 13915, 103, 101, 116, 59, 25366, 59, 17348, 114, 235, 3679, 384, 97, 101, 121, 13926, 13931, 13936, 114, 111, 110, 59, 16741, 100, 105, 108, 59, 16739, 59, 17474, 108, 114, 101, 99, 59, 25365, 114, 59, 49152, 55349, 56625, 512, 101, 105, 107, 111, 13958, 13981, 14005, 14012, 498, 13963, 0, 13969, 101, 256, 52, 102, 4740, 4737, 97, 384, 59, 115, 118, 13976, 13977, 13979, 17336, 121, 109, 59, 17361, 256, 99, 110, 13986, 14002, 107, 256, 97, 115, 13992, 13998, 112, 112, 114, 111, 248, 4801, 105, 109, 187, 4780, 115, 240, 4766, 256, 97, 115, 14010, 13998, 240, 4801, 114, 110, 32827, 254, 16638, 492, 799, 14022, 8935, 101, 115, 33152, 215, 59, 98, 100, 14031, 14032, 14040, 16599, 256, 59, 97, 6415, 14037, 114, 59, 27185, 59, 27184, 384, 101, 112, 115, 14049, 14051, 14080, 225, 10829, 512, 59, 98, 99, 102, 1158, 14060, 14064, 14068, 111, 116, 59, 25398, 105, 114, 59, 27377, 256, 59, 111, 14073, 14076, 49152, 55349, 56677, 114, 107, 59, 27354, 225, 13154, 114, 105, 109, 101, 59, 24628, 384, 97, 105, 112, 14095, 14098, 14180, 100, 229, 4680, 896, 97, 100, 101, 109, 112, 115, 116, 14113, 14157, 14144, 14161, 14167, 14172, 14175, 110, 103, 108, 101, 640, 59, 100, 108, 113, 114, 14128, 14129, 14134, 14144, 14146, 26037, 111, 119, 110, 187, 7611, 101, 102, 116, 256, 59, 101, 10240, 14142, 241, 2350, 59, 25180, 105, 103, 104, 116, 256, 59, 101, 12970, 14155, 241, 4186, 111, 116, 59, 26092, 105, 110, 117, 115, 59, 27194, 108, 117, 115, 59, 27193, 98, 59, 27085, 105, 109, 101, 59, 27195, 101, 122, 105, 117, 109, 59, 25570, 384, 99, 104, 116, 14194, 14205, 14209, 256, 114, 121, 14199, 14203, 59, 49152, 55349, 56521, 59, 17478, 99, 121, 59, 17499, 114, 111, 107, 59, 16743, 256, 105, 111, 14219, 14222, 120, 244, 6007, 104, 101, 97, 100, 256, 108, 114, 14231, 14240, 101, 102, 116, 97, 114, 114, 111, 247, 2127, 105, 103, 104, 116, 97, 114, 114, 111, 119, 187, 3933, 2304, 65, 72, 97, 98, 99, 100, 102, 103, 104, 108, 109, 111, 112, 114, 115, 116, 117, 119, 14288, 14291, 14295, 14308, 14320, 14332, 14350, 14364, 14371, 14388, 14417, 14429, 14443, 14505, 14540, 14546, 14570, 14582, 114, 242, 1005, 97, 114, 59, 26979, 256, 99, 114, 14300, 14306, 117, 116, 101, 32827, 250, 16634, 242, 4432, 114, 483, 14314, 0, 14317, 121, 59, 17502, 118, 101, 59, 16749, 256, 105, 121, 14325, 14330, 114, 99, 32827, 251, 16635, 59, 17475, 384, 97, 98, 104, 14339, 14342, 14347, 114, 242, 5037, 108, 97, 99, 59, 16753, 97, 242, 5059, 256, 105, 114, 14355, 14360, 115, 104, 116, 59, 27006, 59, 49152, 55349, 56626, 114, 97, 118, 101, 32827, 249, 16633, 353, 14375, 14385, 114, 256, 108, 114, 14380, 14382, 187, 2391, 187, 4227, 108, 107, 59, 25984, 256, 99, 116, 14393, 14413, 623, 14399, 0, 0, 14410, 114, 110, 256, 59, 101, 14405, 14406, 25372, 114, 187, 14406, 111, 112, 59, 25359, 114, 105, 59, 26104, 256, 97, 108, 14422, 14426, 99, 114, 59, 16747, 32955, 168, 841, 256, 103, 112, 14434, 14438, 111, 110, 59, 16755, 102, 59, 49152, 55349, 56678, 768, 97, 100, 104, 108, 115, 117, 4427, 14456, 14461, 4978, 14481, 14496, 111, 119, 110, 225, 5043, 97, 114, 112, 111, 111, 110, 256, 108, 114, 14472, 14476, 101, 102, 244, 14381, 105, 103, 104, 244, 14383, 105, 384, 59, 104, 108, 14489, 14490, 14492, 17349, 187, 5114, 111, 110, 187, 14490, 112, 97, 114, 114, 111, 119, 115, 59, 25032, 384, 99, 105, 116, 14512, 14532, 14536, 623, 14518, 0, 0, 14529, 114, 110, 256, 59, 101, 14524, 14525, 25373, 114, 187, 14525, 111, 112, 59, 25358, 110, 103, 59, 16751, 114, 105, 59, 26105, 99, 114, 59, 49152, 55349, 56522, 384, 100, 105, 114, 14553, 14557, 14562, 111, 116, 59, 25328, 108, 100, 101, 59, 16745, 105, 256, 59, 102, 14128, 14568, 187, 6163, 256, 97, 109, 14575, 14578, 114, 242, 14504, 108, 32827, 252, 16636, 97, 110, 103, 108, 101, 59, 27047, 1920, 65, 66, 68, 97, 99, 100, 101, 102, 108, 110, 111, 112, 114, 115, 122, 14620, 14623, 14633, 14637, 14773, 14776, 14781, 14815, 14820, 14824, 14835, 14841, 14845, 14849, 14880, 114, 242, 1015, 97, 114, 256, 59, 118, 14630, 14631, 27368, 59, 27369, 97, 115, 232, 993, 256, 110, 114, 14642, 14647, 103, 114, 116, 59, 27036, 896, 101, 107, 110, 112, 114, 115, 116, 13539, 14662, 14667, 14674, 14685, 14692, 14742, 97, 112, 112, 225, 9237, 111, 116, 104, 105, 110, 231, 7830, 384, 104, 105, 114, 13547, 11976, 14681, 111, 112, 244, 12213, 256, 59, 104, 5047, 14690, 239, 12685, 256, 105, 117, 14697, 14701, 103, 109, 225, 13235, 256, 98, 112, 14706, 14724, 115, 101, 116, 110, 101, 113, 256, 59, 113, 14717, 14720, 49152, 8842, 65024, 59, 49152, 10955, 65024, 115, 101, 116, 110, 101, 113, 256, 59, 113, 14735, 14738, 49152, 8843, 65024, 59, 49152, 10956, 65024, 256, 104, 114, 14747, 14751, 101, 116, 225, 13980, 105, 97, 110, 103, 108, 101, 256, 108, 114, 14762, 14767, 101, 102, 116, 187, 2341, 105, 103, 104, 116, 187, 4177, 121, 59, 17458, 97, 115, 104, 187, 4150, 384, 101, 108, 114, 14788, 14802, 14807, 384, 59, 98, 101, 11754, 14795, 14799, 97, 114, 59, 25275, 113, 59, 25178, 108, 105, 112, 59, 25326, 256, 98, 116, 14812, 5224, 97, 242, 5225, 114, 59, 49152, 55349, 56627, 116, 114, 233, 14766, 115, 117, 256, 98, 112, 14831, 14833, 187, 3356, 187, 3417, 112, 102, 59, 49152, 55349, 56679, 114, 111, 240, 3835, 116, 114, 233, 14772, 256, 99, 117, 14854, 14859, 114, 59, 49152, 55349, 56523, 256, 98, 112, 14864, 14872, 110, 256, 69, 101, 14720, 14870, 187, 14718, 110, 256, 69, 101, 14738, 14878, 187, 14736, 105, 103, 122, 97, 103, 59, 27034, 896, 99, 101, 102, 111, 112, 114, 115, 14902, 14907, 14934, 14939, 14932, 14945, 14954, 105, 114, 99, 59, 16757, 256, 100, 105, 14912, 14929, 256, 98, 103, 14917, 14921, 97, 114, 59, 27231, 101, 256, 59, 113, 5626, 14927, 59, 25177, 101, 114, 112, 59, 24856, 114, 59, 49152, 55349, 56628, 112, 102, 59, 49152, 55349, 56680, 256, 59, 101, 5241, 14950, 97, 116, 232, 5241, 99, 114, 59, 49152, 55349, 56524, 2787, 6030, 14983, 0, 14987, 0, 14992, 15003, 0, 0, 15005, 15016, 15019, 15023, 0, 0, 15043, 15054, 0, 15064, 6108, 6111, 116, 114, 233, 6097, 114, 59, 49152, 55349, 56629, 256, 65, 97, 14996, 14999, 114, 242, 963, 114, 242, 2550, 59, 17342, 256, 65, 97, 15009, 15012, 114, 242, 952, 114, 242, 2539, 97, 240, 10003, 105, 115, 59, 25339, 384, 100, 112, 116, 6052, 15029, 15038, 256, 102, 108, 15034, 6057, 59, 49152, 55349, 56681, 105, 109, 229, 6066, 256, 65, 97, 15047, 15050, 114, 242, 974, 114, 242, 2561, 256, 99, 113, 15058, 6072, 114, 59, 49152, 55349, 56525, 256, 112, 116, 6102, 15068, 114, 233, 6100, 1024, 97, 99, 101, 102, 105, 111, 115, 117, 15088, 15101, 15112, 15116, 15121, 15125, 15131, 15137, 99, 256, 117, 121, 15094, 15099, 116, 101, 32827, 253, 16637, 59, 17487, 256, 105, 121, 15106, 15110, 114, 99, 59, 16759, 59, 17483, 110, 32827, 165, 16549, 114, 59, 49152, 55349, 56630, 99, 121, 59, 17495, 112, 102, 59, 49152, 55349, 56682, 99, 114, 59, 49152, 55349, 56526, 256, 99, 109, 15142, 15145, 121, 59, 17486, 108, 32827, 255, 16639, 1280, 97, 99, 100, 101, 102, 104, 105, 111, 115, 119, 15170, 15176, 15188, 15192, 15204, 15209, 15213, 15220, 15226, 15232, 99, 117, 116, 101, 59, 16762, 256, 97, 121, 15181, 15186, 114, 111, 110, 59, 16766, 59, 17463, 111, 116, 59, 16764, 256, 101, 116, 15197, 15201, 116, 114, 230, 5471, 97, 59, 17334, 114, 59, 49152, 55349, 56631, 99, 121, 59, 17462, 103, 114, 97, 114, 114, 59, 25053, 112, 102, 59, 49152, 55349, 56683, 99, 114, 59, 49152, 55349, 56527, 256, 106, 110, 15237, 15239, 59, 24589, 106, 59, 24588]);

   var CharCodes;
   (function (CharCodes) {
       CharCodes[CharCodes["NUM"] = 35] = "NUM";
       CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
       CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
       CharCodes[CharCodes["NINE"] = 57] = "NINE";
       CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
       CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
       CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
       /** Bit that needs to be set to convert an upper case ASCII character to lower case */
       CharCodes[CharCodes["To_LOWER_BIT"] = 32] = "To_LOWER_BIT";
   })(CharCodes || (CharCodes = {}));
   var BinTrieFlags;
   (function (BinTrieFlags) {
       BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
       BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
       BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
   })(BinTrieFlags || (BinTrieFlags = {}));
   function determineBranch(decodeTree, current, nodeIdx, char) {
       const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
       const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
       // Case 1: Single branch encoded in jump offset
       if (branchCount === 0) {
           return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
       }
       // Case 2: Multiple branches encoded in jump table
       if (jumpOffset) {
           const value = char - jumpOffset;
           return value < 0 || value >= branchCount
               ? -1
               : decodeTree[nodeIdx + value] - 1;
       }
       // Case 3: Multiple branches encoded in dictionary
       // Binary search for the character.
       let lo = nodeIdx;
       let hi = lo + branchCount - 1;
       while (lo <= hi) {
           const mid = (lo + hi) >>> 1;
           const midVal = decodeTree[mid];
           if (midVal < char) {
               lo = mid + 1;
           }
           else if (midVal > char) {
               hi = mid - 1;
           }
           else {
               return decodeTree[mid + branchCount];
           }
       }
       return -1;
   }

   /** All valid namespaces in HTML. */
   var NS;
   (function (NS) {
       NS["HTML"] = "http://www.w3.org/1999/xhtml";
       NS["MATHML"] = "http://www.w3.org/1998/Math/MathML";
       NS["SVG"] = "http://www.w3.org/2000/svg";
       NS["XLINK"] = "http://www.w3.org/1999/xlink";
       NS["XML"] = "http://www.w3.org/XML/1998/namespace";
       NS["XMLNS"] = "http://www.w3.org/2000/xmlns/";
   })(NS || (NS = {}));
   var ATTRS;
   (function (ATTRS) {
       ATTRS["TYPE"] = "type";
       ATTRS["ACTION"] = "action";
       ATTRS["ENCODING"] = "encoding";
       ATTRS["PROMPT"] = "prompt";
       ATTRS["NAME"] = "name";
       ATTRS["COLOR"] = "color";
       ATTRS["FACE"] = "face";
       ATTRS["SIZE"] = "size";
   })(ATTRS || (ATTRS = {}));
   /**
    * The mode of the document.
    *
    * @see {@link https://dom.spec.whatwg.org/#concept-document-limited-quirks}
    */
   var DOCUMENT_MODE;
   (function (DOCUMENT_MODE) {
       DOCUMENT_MODE["NO_QUIRKS"] = "no-quirks";
       DOCUMENT_MODE["QUIRKS"] = "quirks";
       DOCUMENT_MODE["LIMITED_QUIRKS"] = "limited-quirks";
   })(DOCUMENT_MODE || (DOCUMENT_MODE = {}));
   var TAG_NAMES;
   (function (TAG_NAMES) {
       TAG_NAMES["A"] = "a";
       TAG_NAMES["ADDRESS"] = "address";
       TAG_NAMES["ANNOTATION_XML"] = "annotation-xml";
       TAG_NAMES["APPLET"] = "applet";
       TAG_NAMES["AREA"] = "area";
       TAG_NAMES["ARTICLE"] = "article";
       TAG_NAMES["ASIDE"] = "aside";
       TAG_NAMES["B"] = "b";
       TAG_NAMES["BASE"] = "base";
       TAG_NAMES["BASEFONT"] = "basefont";
       TAG_NAMES["BGSOUND"] = "bgsound";
       TAG_NAMES["BIG"] = "big";
       TAG_NAMES["BLOCKQUOTE"] = "blockquote";
       TAG_NAMES["BODY"] = "body";
       TAG_NAMES["BR"] = "br";
       TAG_NAMES["BUTTON"] = "button";
       TAG_NAMES["CAPTION"] = "caption";
       TAG_NAMES["CENTER"] = "center";
       TAG_NAMES["CODE"] = "code";
       TAG_NAMES["COL"] = "col";
       TAG_NAMES["COLGROUP"] = "colgroup";
       TAG_NAMES["DD"] = "dd";
       TAG_NAMES["DESC"] = "desc";
       TAG_NAMES["DETAILS"] = "details";
       TAG_NAMES["DIALOG"] = "dialog";
       TAG_NAMES["DIR"] = "dir";
       TAG_NAMES["DIV"] = "div";
       TAG_NAMES["DL"] = "dl";
       TAG_NAMES["DT"] = "dt";
       TAG_NAMES["EM"] = "em";
       TAG_NAMES["EMBED"] = "embed";
       TAG_NAMES["FIELDSET"] = "fieldset";
       TAG_NAMES["FIGCAPTION"] = "figcaption";
       TAG_NAMES["FIGURE"] = "figure";
       TAG_NAMES["FONT"] = "font";
       TAG_NAMES["FOOTER"] = "footer";
       TAG_NAMES["FOREIGN_OBJECT"] = "foreignObject";
       TAG_NAMES["FORM"] = "form";
       TAG_NAMES["FRAME"] = "frame";
       TAG_NAMES["FRAMESET"] = "frameset";
       TAG_NAMES["H1"] = "h1";
       TAG_NAMES["H2"] = "h2";
       TAG_NAMES["H3"] = "h3";
       TAG_NAMES["H4"] = "h4";
       TAG_NAMES["H5"] = "h5";
       TAG_NAMES["H6"] = "h6";
       TAG_NAMES["HEAD"] = "head";
       TAG_NAMES["HEADER"] = "header";
       TAG_NAMES["HGROUP"] = "hgroup";
       TAG_NAMES["HR"] = "hr";
       TAG_NAMES["HTML"] = "html";
       TAG_NAMES["I"] = "i";
       TAG_NAMES["IMG"] = "img";
       TAG_NAMES["IMAGE"] = "image";
       TAG_NAMES["INPUT"] = "input";
       TAG_NAMES["IFRAME"] = "iframe";
       TAG_NAMES["KEYGEN"] = "keygen";
       TAG_NAMES["LABEL"] = "label";
       TAG_NAMES["LI"] = "li";
       TAG_NAMES["LINK"] = "link";
       TAG_NAMES["LISTING"] = "listing";
       TAG_NAMES["MAIN"] = "main";
       TAG_NAMES["MALIGNMARK"] = "malignmark";
       TAG_NAMES["MARQUEE"] = "marquee";
       TAG_NAMES["MATH"] = "math";
       TAG_NAMES["MENU"] = "menu";
       TAG_NAMES["META"] = "meta";
       TAG_NAMES["MGLYPH"] = "mglyph";
       TAG_NAMES["MI"] = "mi";
       TAG_NAMES["MO"] = "mo";
       TAG_NAMES["MN"] = "mn";
       TAG_NAMES["MS"] = "ms";
       TAG_NAMES["MTEXT"] = "mtext";
       TAG_NAMES["NAV"] = "nav";
       TAG_NAMES["NOBR"] = "nobr";
       TAG_NAMES["NOFRAMES"] = "noframes";
       TAG_NAMES["NOEMBED"] = "noembed";
       TAG_NAMES["NOSCRIPT"] = "noscript";
       TAG_NAMES["OBJECT"] = "object";
       TAG_NAMES["OL"] = "ol";
       TAG_NAMES["OPTGROUP"] = "optgroup";
       TAG_NAMES["OPTION"] = "option";
       TAG_NAMES["P"] = "p";
       TAG_NAMES["PARAM"] = "param";
       TAG_NAMES["PLAINTEXT"] = "plaintext";
       TAG_NAMES["PRE"] = "pre";
       TAG_NAMES["RB"] = "rb";
       TAG_NAMES["RP"] = "rp";
       TAG_NAMES["RT"] = "rt";
       TAG_NAMES["RTC"] = "rtc";
       TAG_NAMES["RUBY"] = "ruby";
       TAG_NAMES["S"] = "s";
       TAG_NAMES["SCRIPT"] = "script";
       TAG_NAMES["SECTION"] = "section";
       TAG_NAMES["SELECT"] = "select";
       TAG_NAMES["SOURCE"] = "source";
       TAG_NAMES["SMALL"] = "small";
       TAG_NAMES["SPAN"] = "span";
       TAG_NAMES["STRIKE"] = "strike";
       TAG_NAMES["STRONG"] = "strong";
       TAG_NAMES["STYLE"] = "style";
       TAG_NAMES["SUB"] = "sub";
       TAG_NAMES["SUMMARY"] = "summary";
       TAG_NAMES["SUP"] = "sup";
       TAG_NAMES["TABLE"] = "table";
       TAG_NAMES["TBODY"] = "tbody";
       TAG_NAMES["TEMPLATE"] = "template";
       TAG_NAMES["TEXTAREA"] = "textarea";
       TAG_NAMES["TFOOT"] = "tfoot";
       TAG_NAMES["TD"] = "td";
       TAG_NAMES["TH"] = "th";
       TAG_NAMES["THEAD"] = "thead";
       TAG_NAMES["TITLE"] = "title";
       TAG_NAMES["TR"] = "tr";
       TAG_NAMES["TRACK"] = "track";
       TAG_NAMES["TT"] = "tt";
       TAG_NAMES["U"] = "u";
       TAG_NAMES["UL"] = "ul";
       TAG_NAMES["SVG"] = "svg";
       TAG_NAMES["VAR"] = "var";
       TAG_NAMES["WBR"] = "wbr";
       TAG_NAMES["XMP"] = "xmp";
   })(TAG_NAMES || (TAG_NAMES = {}));
   /**
    * Tag IDs are numeric IDs for known tag names.
    *
    * We use tag IDs to improve the performance of tag name comparisons.
    */
   var TAG_ID;
   (function (TAG_ID) {
       TAG_ID[TAG_ID["UNKNOWN"] = 0] = "UNKNOWN";
       TAG_ID[TAG_ID["A"] = 1] = "A";
       TAG_ID[TAG_ID["ADDRESS"] = 2] = "ADDRESS";
       TAG_ID[TAG_ID["ANNOTATION_XML"] = 3] = "ANNOTATION_XML";
       TAG_ID[TAG_ID["APPLET"] = 4] = "APPLET";
       TAG_ID[TAG_ID["AREA"] = 5] = "AREA";
       TAG_ID[TAG_ID["ARTICLE"] = 6] = "ARTICLE";
       TAG_ID[TAG_ID["ASIDE"] = 7] = "ASIDE";
       TAG_ID[TAG_ID["B"] = 8] = "B";
       TAG_ID[TAG_ID["BASE"] = 9] = "BASE";
       TAG_ID[TAG_ID["BASEFONT"] = 10] = "BASEFONT";
       TAG_ID[TAG_ID["BGSOUND"] = 11] = "BGSOUND";
       TAG_ID[TAG_ID["BIG"] = 12] = "BIG";
       TAG_ID[TAG_ID["BLOCKQUOTE"] = 13] = "BLOCKQUOTE";
       TAG_ID[TAG_ID["BODY"] = 14] = "BODY";
       TAG_ID[TAG_ID["BR"] = 15] = "BR";
       TAG_ID[TAG_ID["BUTTON"] = 16] = "BUTTON";
       TAG_ID[TAG_ID["CAPTION"] = 17] = "CAPTION";
       TAG_ID[TAG_ID["CENTER"] = 18] = "CENTER";
       TAG_ID[TAG_ID["CODE"] = 19] = "CODE";
       TAG_ID[TAG_ID["COL"] = 20] = "COL";
       TAG_ID[TAG_ID["COLGROUP"] = 21] = "COLGROUP";
       TAG_ID[TAG_ID["DD"] = 22] = "DD";
       TAG_ID[TAG_ID["DESC"] = 23] = "DESC";
       TAG_ID[TAG_ID["DETAILS"] = 24] = "DETAILS";
       TAG_ID[TAG_ID["DIALOG"] = 25] = "DIALOG";
       TAG_ID[TAG_ID["DIR"] = 26] = "DIR";
       TAG_ID[TAG_ID["DIV"] = 27] = "DIV";
       TAG_ID[TAG_ID["DL"] = 28] = "DL";
       TAG_ID[TAG_ID["DT"] = 29] = "DT";
       TAG_ID[TAG_ID["EM"] = 30] = "EM";
       TAG_ID[TAG_ID["EMBED"] = 31] = "EMBED";
       TAG_ID[TAG_ID["FIELDSET"] = 32] = "FIELDSET";
       TAG_ID[TAG_ID["FIGCAPTION"] = 33] = "FIGCAPTION";
       TAG_ID[TAG_ID["FIGURE"] = 34] = "FIGURE";
       TAG_ID[TAG_ID["FONT"] = 35] = "FONT";
       TAG_ID[TAG_ID["FOOTER"] = 36] = "FOOTER";
       TAG_ID[TAG_ID["FOREIGN_OBJECT"] = 37] = "FOREIGN_OBJECT";
       TAG_ID[TAG_ID["FORM"] = 38] = "FORM";
       TAG_ID[TAG_ID["FRAME"] = 39] = "FRAME";
       TAG_ID[TAG_ID["FRAMESET"] = 40] = "FRAMESET";
       TAG_ID[TAG_ID["H1"] = 41] = "H1";
       TAG_ID[TAG_ID["H2"] = 42] = "H2";
       TAG_ID[TAG_ID["H3"] = 43] = "H3";
       TAG_ID[TAG_ID["H4"] = 44] = "H4";
       TAG_ID[TAG_ID["H5"] = 45] = "H5";
       TAG_ID[TAG_ID["H6"] = 46] = "H6";
       TAG_ID[TAG_ID["HEAD"] = 47] = "HEAD";
       TAG_ID[TAG_ID["HEADER"] = 48] = "HEADER";
       TAG_ID[TAG_ID["HGROUP"] = 49] = "HGROUP";
       TAG_ID[TAG_ID["HR"] = 50] = "HR";
       TAG_ID[TAG_ID["HTML"] = 51] = "HTML";
       TAG_ID[TAG_ID["I"] = 52] = "I";
       TAG_ID[TAG_ID["IMG"] = 53] = "IMG";
       TAG_ID[TAG_ID["IMAGE"] = 54] = "IMAGE";
       TAG_ID[TAG_ID["INPUT"] = 55] = "INPUT";
       TAG_ID[TAG_ID["IFRAME"] = 56] = "IFRAME";
       TAG_ID[TAG_ID["KEYGEN"] = 57] = "KEYGEN";
       TAG_ID[TAG_ID["LABEL"] = 58] = "LABEL";
       TAG_ID[TAG_ID["LI"] = 59] = "LI";
       TAG_ID[TAG_ID["LINK"] = 60] = "LINK";
       TAG_ID[TAG_ID["LISTING"] = 61] = "LISTING";
       TAG_ID[TAG_ID["MAIN"] = 62] = "MAIN";
       TAG_ID[TAG_ID["MALIGNMARK"] = 63] = "MALIGNMARK";
       TAG_ID[TAG_ID["MARQUEE"] = 64] = "MARQUEE";
       TAG_ID[TAG_ID["MATH"] = 65] = "MATH";
       TAG_ID[TAG_ID["MENU"] = 66] = "MENU";
       TAG_ID[TAG_ID["META"] = 67] = "META";
       TAG_ID[TAG_ID["MGLYPH"] = 68] = "MGLYPH";
       TAG_ID[TAG_ID["MI"] = 69] = "MI";
       TAG_ID[TAG_ID["MO"] = 70] = "MO";
       TAG_ID[TAG_ID["MN"] = 71] = "MN";
       TAG_ID[TAG_ID["MS"] = 72] = "MS";
       TAG_ID[TAG_ID["MTEXT"] = 73] = "MTEXT";
       TAG_ID[TAG_ID["NAV"] = 74] = "NAV";
       TAG_ID[TAG_ID["NOBR"] = 75] = "NOBR";
       TAG_ID[TAG_ID["NOFRAMES"] = 76] = "NOFRAMES";
       TAG_ID[TAG_ID["NOEMBED"] = 77] = "NOEMBED";
       TAG_ID[TAG_ID["NOSCRIPT"] = 78] = "NOSCRIPT";
       TAG_ID[TAG_ID["OBJECT"] = 79] = "OBJECT";
       TAG_ID[TAG_ID["OL"] = 80] = "OL";
       TAG_ID[TAG_ID["OPTGROUP"] = 81] = "OPTGROUP";
       TAG_ID[TAG_ID["OPTION"] = 82] = "OPTION";
       TAG_ID[TAG_ID["P"] = 83] = "P";
       TAG_ID[TAG_ID["PARAM"] = 84] = "PARAM";
       TAG_ID[TAG_ID["PLAINTEXT"] = 85] = "PLAINTEXT";
       TAG_ID[TAG_ID["PRE"] = 86] = "PRE";
       TAG_ID[TAG_ID["RB"] = 87] = "RB";
       TAG_ID[TAG_ID["RP"] = 88] = "RP";
       TAG_ID[TAG_ID["RT"] = 89] = "RT";
       TAG_ID[TAG_ID["RTC"] = 90] = "RTC";
       TAG_ID[TAG_ID["RUBY"] = 91] = "RUBY";
       TAG_ID[TAG_ID["S"] = 92] = "S";
       TAG_ID[TAG_ID["SCRIPT"] = 93] = "SCRIPT";
       TAG_ID[TAG_ID["SECTION"] = 94] = "SECTION";
       TAG_ID[TAG_ID["SELECT"] = 95] = "SELECT";
       TAG_ID[TAG_ID["SOURCE"] = 96] = "SOURCE";
       TAG_ID[TAG_ID["SMALL"] = 97] = "SMALL";
       TAG_ID[TAG_ID["SPAN"] = 98] = "SPAN";
       TAG_ID[TAG_ID["STRIKE"] = 99] = "STRIKE";
       TAG_ID[TAG_ID["STRONG"] = 100] = "STRONG";
       TAG_ID[TAG_ID["STYLE"] = 101] = "STYLE";
       TAG_ID[TAG_ID["SUB"] = 102] = "SUB";
       TAG_ID[TAG_ID["SUMMARY"] = 103] = "SUMMARY";
       TAG_ID[TAG_ID["SUP"] = 104] = "SUP";
       TAG_ID[TAG_ID["TABLE"] = 105] = "TABLE";
       TAG_ID[TAG_ID["TBODY"] = 106] = "TBODY";
       TAG_ID[TAG_ID["TEMPLATE"] = 107] = "TEMPLATE";
       TAG_ID[TAG_ID["TEXTAREA"] = 108] = "TEXTAREA";
       TAG_ID[TAG_ID["TFOOT"] = 109] = "TFOOT";
       TAG_ID[TAG_ID["TD"] = 110] = "TD";
       TAG_ID[TAG_ID["TH"] = 111] = "TH";
       TAG_ID[TAG_ID["THEAD"] = 112] = "THEAD";
       TAG_ID[TAG_ID["TITLE"] = 113] = "TITLE";
       TAG_ID[TAG_ID["TR"] = 114] = "TR";
       TAG_ID[TAG_ID["TRACK"] = 115] = "TRACK";
       TAG_ID[TAG_ID["TT"] = 116] = "TT";
       TAG_ID[TAG_ID["U"] = 117] = "U";
       TAG_ID[TAG_ID["UL"] = 118] = "UL";
       TAG_ID[TAG_ID["SVG"] = 119] = "SVG";
       TAG_ID[TAG_ID["VAR"] = 120] = "VAR";
       TAG_ID[TAG_ID["WBR"] = 121] = "WBR";
       TAG_ID[TAG_ID["XMP"] = 122] = "XMP";
   })(TAG_ID || (TAG_ID = {}));
   const TAG_NAME_TO_ID = new Map([
       [TAG_NAMES.A, TAG_ID.A],
       [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],
       [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],
       [TAG_NAMES.APPLET, TAG_ID.APPLET],
       [TAG_NAMES.AREA, TAG_ID.AREA],
       [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],
       [TAG_NAMES.ASIDE, TAG_ID.ASIDE],
       [TAG_NAMES.B, TAG_ID.B],
       [TAG_NAMES.BASE, TAG_ID.BASE],
       [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],
       [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],
       [TAG_NAMES.BIG, TAG_ID.BIG],
       [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],
       [TAG_NAMES.BODY, TAG_ID.BODY],
       [TAG_NAMES.BR, TAG_ID.BR],
       [TAG_NAMES.BUTTON, TAG_ID.BUTTON],
       [TAG_NAMES.CAPTION, TAG_ID.CAPTION],
       [TAG_NAMES.CENTER, TAG_ID.CENTER],
       [TAG_NAMES.CODE, TAG_ID.CODE],
       [TAG_NAMES.COL, TAG_ID.COL],
       [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],
       [TAG_NAMES.DD, TAG_ID.DD],
       [TAG_NAMES.DESC, TAG_ID.DESC],
       [TAG_NAMES.DETAILS, TAG_ID.DETAILS],
       [TAG_NAMES.DIALOG, TAG_ID.DIALOG],
       [TAG_NAMES.DIR, TAG_ID.DIR],
       [TAG_NAMES.DIV, TAG_ID.DIV],
       [TAG_NAMES.DL, TAG_ID.DL],
       [TAG_NAMES.DT, TAG_ID.DT],
       [TAG_NAMES.EM, TAG_ID.EM],
       [TAG_NAMES.EMBED, TAG_ID.EMBED],
       [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],
       [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],
       [TAG_NAMES.FIGURE, TAG_ID.FIGURE],
       [TAG_NAMES.FONT, TAG_ID.FONT],
       [TAG_NAMES.FOOTER, TAG_ID.FOOTER],
       [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],
       [TAG_NAMES.FORM, TAG_ID.FORM],
       [TAG_NAMES.FRAME, TAG_ID.FRAME],
       [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],
       [TAG_NAMES.H1, TAG_ID.H1],
       [TAG_NAMES.H2, TAG_ID.H2],
       [TAG_NAMES.H3, TAG_ID.H3],
       [TAG_NAMES.H4, TAG_ID.H4],
       [TAG_NAMES.H5, TAG_ID.H5],
       [TAG_NAMES.H6, TAG_ID.H6],
       [TAG_NAMES.HEAD, TAG_ID.HEAD],
       [TAG_NAMES.HEADER, TAG_ID.HEADER],
       [TAG_NAMES.HGROUP, TAG_ID.HGROUP],
       [TAG_NAMES.HR, TAG_ID.HR],
       [TAG_NAMES.HTML, TAG_ID.HTML],
       [TAG_NAMES.I, TAG_ID.I],
       [TAG_NAMES.IMG, TAG_ID.IMG],
       [TAG_NAMES.IMAGE, TAG_ID.IMAGE],
       [TAG_NAMES.INPUT, TAG_ID.INPUT],
       [TAG_NAMES.IFRAME, TAG_ID.IFRAME],
       [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],
       [TAG_NAMES.LABEL, TAG_ID.LABEL],
       [TAG_NAMES.LI, TAG_ID.LI],
       [TAG_NAMES.LINK, TAG_ID.LINK],
       [TAG_NAMES.LISTING, TAG_ID.LISTING],
       [TAG_NAMES.MAIN, TAG_ID.MAIN],
       [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],
       [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],
       [TAG_NAMES.MATH, TAG_ID.MATH],
       [TAG_NAMES.MENU, TAG_ID.MENU],
       [TAG_NAMES.META, TAG_ID.META],
       [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],
       [TAG_NAMES.MI, TAG_ID.MI],
       [TAG_NAMES.MO, TAG_ID.MO],
       [TAG_NAMES.MN, TAG_ID.MN],
       [TAG_NAMES.MS, TAG_ID.MS],
       [TAG_NAMES.MTEXT, TAG_ID.MTEXT],
       [TAG_NAMES.NAV, TAG_ID.NAV],
       [TAG_NAMES.NOBR, TAG_ID.NOBR],
       [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],
       [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],
       [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],
       [TAG_NAMES.OBJECT, TAG_ID.OBJECT],
       [TAG_NAMES.OL, TAG_ID.OL],
       [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],
       [TAG_NAMES.OPTION, TAG_ID.OPTION],
       [TAG_NAMES.P, TAG_ID.P],
       [TAG_NAMES.PARAM, TAG_ID.PARAM],
       [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],
       [TAG_NAMES.PRE, TAG_ID.PRE],
       [TAG_NAMES.RB, TAG_ID.RB],
       [TAG_NAMES.RP, TAG_ID.RP],
       [TAG_NAMES.RT, TAG_ID.RT],
       [TAG_NAMES.RTC, TAG_ID.RTC],
       [TAG_NAMES.RUBY, TAG_ID.RUBY],
       [TAG_NAMES.S, TAG_ID.S],
       [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],
       [TAG_NAMES.SECTION, TAG_ID.SECTION],
       [TAG_NAMES.SELECT, TAG_ID.SELECT],
       [TAG_NAMES.SOURCE, TAG_ID.SOURCE],
       [TAG_NAMES.SMALL, TAG_ID.SMALL],
       [TAG_NAMES.SPAN, TAG_ID.SPAN],
       [TAG_NAMES.STRIKE, TAG_ID.STRIKE],
       [TAG_NAMES.STRONG, TAG_ID.STRONG],
       [TAG_NAMES.STYLE, TAG_ID.STYLE],
       [TAG_NAMES.SUB, TAG_ID.SUB],
       [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],
       [TAG_NAMES.SUP, TAG_ID.SUP],
       [TAG_NAMES.TABLE, TAG_ID.TABLE],
       [TAG_NAMES.TBODY, TAG_ID.TBODY],
       [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],
       [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],
       [TAG_NAMES.TFOOT, TAG_ID.TFOOT],
       [TAG_NAMES.TD, TAG_ID.TD],
       [TAG_NAMES.TH, TAG_ID.TH],
       [TAG_NAMES.THEAD, TAG_ID.THEAD],
       [TAG_NAMES.TITLE, TAG_ID.TITLE],
       [TAG_NAMES.TR, TAG_ID.TR],
       [TAG_NAMES.TRACK, TAG_ID.TRACK],
       [TAG_NAMES.TT, TAG_ID.TT],
       [TAG_NAMES.U, TAG_ID.U],
       [TAG_NAMES.UL, TAG_ID.UL],
       [TAG_NAMES.SVG, TAG_ID.SVG],
       [TAG_NAMES.VAR, TAG_ID.VAR],
       [TAG_NAMES.WBR, TAG_ID.WBR],
       [TAG_NAMES.XMP, TAG_ID.XMP],
   ]);
   function getTagID(tagName) {
       var _a;
       return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;
   }
   const $ = TAG_ID;
   const SPECIAL_ELEMENTS = {
       [NS.HTML]: new Set([
           $.ADDRESS,
           $.APPLET,
           $.AREA,
           $.ARTICLE,
           $.ASIDE,
           $.BASE,
           $.BASEFONT,
           $.BGSOUND,
           $.BLOCKQUOTE,
           $.BODY,
           $.BR,
           $.BUTTON,
           $.CAPTION,
           $.CENTER,
           $.COL,
           $.COLGROUP,
           $.DD,
           $.DETAILS,
           $.DIR,
           $.DIV,
           $.DL,
           $.DT,
           $.EMBED,
           $.FIELDSET,
           $.FIGCAPTION,
           $.FIGURE,
           $.FOOTER,
           $.FORM,
           $.FRAME,
           $.FRAMESET,
           $.H1,
           $.H2,
           $.H3,
           $.H4,
           $.H5,
           $.H6,
           $.HEAD,
           $.HEADER,
           $.HGROUP,
           $.HR,
           $.HTML,
           $.IFRAME,
           $.IMG,
           $.INPUT,
           $.LI,
           $.LINK,
           $.LISTING,
           $.MAIN,
           $.MARQUEE,
           $.MENU,
           $.META,
           $.NAV,
           $.NOEMBED,
           $.NOFRAMES,
           $.NOSCRIPT,
           $.OBJECT,
           $.OL,
           $.P,
           $.PARAM,
           $.PLAINTEXT,
           $.PRE,
           $.SCRIPT,
           $.SECTION,
           $.SELECT,
           $.SOURCE,
           $.STYLE,
           $.SUMMARY,
           $.TABLE,
           $.TBODY,
           $.TD,
           $.TEMPLATE,
           $.TEXTAREA,
           $.TFOOT,
           $.TH,
           $.THEAD,
           $.TITLE,
           $.TR,
           $.TRACK,
           $.UL,
           $.WBR,
           $.XMP,
       ]),
       [NS.MATHML]: new Set([$.MI, $.MO, $.MN, $.MS, $.MTEXT, $.ANNOTATION_XML]),
       [NS.SVG]: new Set([$.TITLE, $.FOREIGN_OBJECT, $.DESC]),
       [NS.XLINK]: new Set(),
       [NS.XML]: new Set(),
       [NS.XMLNS]: new Set(),
   };
   function isNumberedHeader(tn) {
       return tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6;
   }
   new Set([
       TAG_NAMES.STYLE,
       TAG_NAMES.SCRIPT,
       TAG_NAMES.XMP,
       TAG_NAMES.IFRAME,
       TAG_NAMES.NOEMBED,
       TAG_NAMES.NOFRAMES,
       TAG_NAMES.PLAINTEXT,
   ]);

   //C1 Unicode control character reference replacements
   const C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([
       [0x80, 8364],
       [0x82, 8218],
       [0x83, 402],
       [0x84, 8222],
       [0x85, 8230],
       [0x86, 8224],
       [0x87, 8225],
       [0x88, 710],
       [0x89, 8240],
       [0x8a, 352],
       [0x8b, 8249],
       [0x8c, 338],
       [0x8e, 381],
       [0x91, 8216],
       [0x92, 8217],
       [0x93, 8220],
       [0x94, 8221],
       [0x95, 8226],
       [0x96, 8211],
       [0x97, 8212],
       [0x98, 732],
       [0x99, 8482],
       [0x9a, 353],
       [0x9b, 8250],
       [0x9c, 339],
       [0x9e, 382],
       [0x9f, 376],
   ]);
   //States
   var State;
   (function (State) {
       State[State["DATA"] = 0] = "DATA";
       State[State["RCDATA"] = 1] = "RCDATA";
       State[State["RAWTEXT"] = 2] = "RAWTEXT";
       State[State["SCRIPT_DATA"] = 3] = "SCRIPT_DATA";
       State[State["PLAINTEXT"] = 4] = "PLAINTEXT";
       State[State["TAG_OPEN"] = 5] = "TAG_OPEN";
       State[State["END_TAG_OPEN"] = 6] = "END_TAG_OPEN";
       State[State["TAG_NAME"] = 7] = "TAG_NAME";
       State[State["RCDATA_LESS_THAN_SIGN"] = 8] = "RCDATA_LESS_THAN_SIGN";
       State[State["RCDATA_END_TAG_OPEN"] = 9] = "RCDATA_END_TAG_OPEN";
       State[State["RCDATA_END_TAG_NAME"] = 10] = "RCDATA_END_TAG_NAME";
       State[State["RAWTEXT_LESS_THAN_SIGN"] = 11] = "RAWTEXT_LESS_THAN_SIGN";
       State[State["RAWTEXT_END_TAG_OPEN"] = 12] = "RAWTEXT_END_TAG_OPEN";
       State[State["RAWTEXT_END_TAG_NAME"] = 13] = "RAWTEXT_END_TAG_NAME";
       State[State["SCRIPT_DATA_LESS_THAN_SIGN"] = 14] = "SCRIPT_DATA_LESS_THAN_SIGN";
       State[State["SCRIPT_DATA_END_TAG_OPEN"] = 15] = "SCRIPT_DATA_END_TAG_OPEN";
       State[State["SCRIPT_DATA_END_TAG_NAME"] = 16] = "SCRIPT_DATA_END_TAG_NAME";
       State[State["SCRIPT_DATA_ESCAPE_START"] = 17] = "SCRIPT_DATA_ESCAPE_START";
       State[State["SCRIPT_DATA_ESCAPE_START_DASH"] = 18] = "SCRIPT_DATA_ESCAPE_START_DASH";
       State[State["SCRIPT_DATA_ESCAPED"] = 19] = "SCRIPT_DATA_ESCAPED";
       State[State["SCRIPT_DATA_ESCAPED_DASH"] = 20] = "SCRIPT_DATA_ESCAPED_DASH";
       State[State["SCRIPT_DATA_ESCAPED_DASH_DASH"] = 21] = "SCRIPT_DATA_ESCAPED_DASH_DASH";
       State[State["SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN"] = 22] = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN";
       State[State["SCRIPT_DATA_ESCAPED_END_TAG_OPEN"] = 23] = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN";
       State[State["SCRIPT_DATA_ESCAPED_END_TAG_NAME"] = 24] = "SCRIPT_DATA_ESCAPED_END_TAG_NAME";
       State[State["SCRIPT_DATA_DOUBLE_ESCAPE_START"] = 25] = "SCRIPT_DATA_DOUBLE_ESCAPE_START";
       State[State["SCRIPT_DATA_DOUBLE_ESCAPED"] = 26] = "SCRIPT_DATA_DOUBLE_ESCAPED";
       State[State["SCRIPT_DATA_DOUBLE_ESCAPED_DASH"] = 27] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH";
       State[State["SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH"] = 28] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH";
       State[State["SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN"] = 29] = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN";
       State[State["SCRIPT_DATA_DOUBLE_ESCAPE_END"] = 30] = "SCRIPT_DATA_DOUBLE_ESCAPE_END";
       State[State["BEFORE_ATTRIBUTE_NAME"] = 31] = "BEFORE_ATTRIBUTE_NAME";
       State[State["ATTRIBUTE_NAME"] = 32] = "ATTRIBUTE_NAME";
       State[State["AFTER_ATTRIBUTE_NAME"] = 33] = "AFTER_ATTRIBUTE_NAME";
       State[State["BEFORE_ATTRIBUTE_VALUE"] = 34] = "BEFORE_ATTRIBUTE_VALUE";
       State[State["ATTRIBUTE_VALUE_DOUBLE_QUOTED"] = 35] = "ATTRIBUTE_VALUE_DOUBLE_QUOTED";
       State[State["ATTRIBUTE_VALUE_SINGLE_QUOTED"] = 36] = "ATTRIBUTE_VALUE_SINGLE_QUOTED";
       State[State["ATTRIBUTE_VALUE_UNQUOTED"] = 37] = "ATTRIBUTE_VALUE_UNQUOTED";
       State[State["AFTER_ATTRIBUTE_VALUE_QUOTED"] = 38] = "AFTER_ATTRIBUTE_VALUE_QUOTED";
       State[State["SELF_CLOSING_START_TAG"] = 39] = "SELF_CLOSING_START_TAG";
       State[State["BOGUS_COMMENT"] = 40] = "BOGUS_COMMENT";
       State[State["MARKUP_DECLARATION_OPEN"] = 41] = "MARKUP_DECLARATION_OPEN";
       State[State["COMMENT_START"] = 42] = "COMMENT_START";
       State[State["COMMENT_START_DASH"] = 43] = "COMMENT_START_DASH";
       State[State["COMMENT"] = 44] = "COMMENT";
       State[State["COMMENT_LESS_THAN_SIGN"] = 45] = "COMMENT_LESS_THAN_SIGN";
       State[State["COMMENT_LESS_THAN_SIGN_BANG"] = 46] = "COMMENT_LESS_THAN_SIGN_BANG";
       State[State["COMMENT_LESS_THAN_SIGN_BANG_DASH"] = 47] = "COMMENT_LESS_THAN_SIGN_BANG_DASH";
       State[State["COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH"] = 48] = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH";
       State[State["COMMENT_END_DASH"] = 49] = "COMMENT_END_DASH";
       State[State["COMMENT_END"] = 50] = "COMMENT_END";
       State[State["COMMENT_END_BANG"] = 51] = "COMMENT_END_BANG";
       State[State["DOCTYPE"] = 52] = "DOCTYPE";
       State[State["BEFORE_DOCTYPE_NAME"] = 53] = "BEFORE_DOCTYPE_NAME";
       State[State["DOCTYPE_NAME"] = 54] = "DOCTYPE_NAME";
       State[State["AFTER_DOCTYPE_NAME"] = 55] = "AFTER_DOCTYPE_NAME";
       State[State["AFTER_DOCTYPE_PUBLIC_KEYWORD"] = 56] = "AFTER_DOCTYPE_PUBLIC_KEYWORD";
       State[State["BEFORE_DOCTYPE_PUBLIC_IDENTIFIER"] = 57] = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER";
       State[State["DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED"] = 58] = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED";
       State[State["DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED"] = 59] = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED";
       State[State["AFTER_DOCTYPE_PUBLIC_IDENTIFIER"] = 60] = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER";
       State[State["BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS"] = 61] = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS";
       State[State["AFTER_DOCTYPE_SYSTEM_KEYWORD"] = 62] = "AFTER_DOCTYPE_SYSTEM_KEYWORD";
       State[State["BEFORE_DOCTYPE_SYSTEM_IDENTIFIER"] = 63] = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER";
       State[State["DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED"] = 64] = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED";
       State[State["DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED"] = 65] = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED";
       State[State["AFTER_DOCTYPE_SYSTEM_IDENTIFIER"] = 66] = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER";
       State[State["BOGUS_DOCTYPE"] = 67] = "BOGUS_DOCTYPE";
       State[State["CDATA_SECTION"] = 68] = "CDATA_SECTION";
       State[State["CDATA_SECTION_BRACKET"] = 69] = "CDATA_SECTION_BRACKET";
       State[State["CDATA_SECTION_END"] = 70] = "CDATA_SECTION_END";
       State[State["CHARACTER_REFERENCE"] = 71] = "CHARACTER_REFERENCE";
       State[State["NAMED_CHARACTER_REFERENCE"] = 72] = "NAMED_CHARACTER_REFERENCE";
       State[State["AMBIGUOUS_AMPERSAND"] = 73] = "AMBIGUOUS_AMPERSAND";
       State[State["NUMERIC_CHARACTER_REFERENCE"] = 74] = "NUMERIC_CHARACTER_REFERENCE";
       State[State["HEXADEMICAL_CHARACTER_REFERENCE_START"] = 75] = "HEXADEMICAL_CHARACTER_REFERENCE_START";
       State[State["DECIMAL_CHARACTER_REFERENCE_START"] = 76] = "DECIMAL_CHARACTER_REFERENCE_START";
       State[State["HEXADEMICAL_CHARACTER_REFERENCE"] = 77] = "HEXADEMICAL_CHARACTER_REFERENCE";
       State[State["DECIMAL_CHARACTER_REFERENCE"] = 78] = "DECIMAL_CHARACTER_REFERENCE";
       State[State["NUMERIC_CHARACTER_REFERENCE_END"] = 79] = "NUMERIC_CHARACTER_REFERENCE_END";
   })(State || (State = {}));
   //Tokenizer initial states for different modes
   const TokenizerMode = {
       DATA: State.DATA,
       RCDATA: State.RCDATA,
       RAWTEXT: State.RAWTEXT,
       SCRIPT_DATA: State.SCRIPT_DATA,
       PLAINTEXT: State.PLAINTEXT,
       CDATA_SECTION: State.CDATA_SECTION,
   };
   //Utils
   //OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
   //this functions if they will be situated in another module due to context switch.
   //Always perform inlining check before modifying this functions ('node --trace-inlining').
   function isAsciiDigit(cp) {
       return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;
   }
   function isAsciiUpper(cp) {
       return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;
   }
   function isAsciiLower(cp) {
       return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;
   }
   function isAsciiLetter(cp) {
       return isAsciiLower(cp) || isAsciiUpper(cp);
   }
   function isAsciiAlphaNumeric(cp) {
       return isAsciiLetter(cp) || isAsciiDigit(cp);
   }
   function isAsciiUpperHexDigit(cp) {
       return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;
   }
   function isAsciiLowerHexDigit(cp) {
       return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;
   }
   function isAsciiHexDigit(cp) {
       return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
   }
   function toAsciiLower(cp) {
       return cp + 32;
   }
   function isWhitespace(cp) {
       return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;
   }
   function isEntityInAttributeInvalidEnd(nextCp) {
       return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
   }
   function isScriptDataDoubleEscapeSequenceEnd(cp) {
       return isWhitespace(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;
   }
   //Tokenizer
   class Tokenizer {
       constructor(options, handler) {
           this.options = options;
           this.handler = handler;
           this.paused = false;
           /** Ensures that the parsing loop isn't run multiple times at once. */
           this.inLoop = false;
           /**
            * Indicates that the current adjusted node exists, is not an element in the HTML namespace,
            * and that it is not an integration point for either MathML or HTML.
            *
            * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}
            */
           this.inForeignNode = false;
           this.lastStartTagName = '';
           this.active = false;
           this.state = State.DATA;
           this.returnState = State.DATA;
           this.charRefCode = -1;
           this.consumedAfterSnapshot = -1;
           this.currentCharacterToken = null;
           this.currentToken = null;
           this.currentAttr = { name: '', value: '' };
           this.preprocessor = new Preprocessor(handler);
           this.currentLocation = this.getCurrentLocation(-1);
       }
       //Errors
       _err(code) {
           var _a, _b;
           (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));
       }
       // NOTE: `offset` may never run across line boundaries.
       getCurrentLocation(offset) {
           if (!this.options.sourceCodeLocationInfo) {
               return null;
           }
           return {
               startLine: this.preprocessor.line,
               startCol: this.preprocessor.col - offset,
               startOffset: this.preprocessor.offset - offset,
               endLine: -1,
               endCol: -1,
               endOffset: -1,
           };
       }
       _runParsingLoop() {
           if (this.inLoop)
               return;
           this.inLoop = true;
           while (this.active && !this.paused) {
               this.consumedAfterSnapshot = 0;
               const cp = this._consume();
               if (!this._ensureHibernation()) {
                   this._callState(cp);
               }
           }
           this.inLoop = false;
       }
       //API
       pause() {
           this.paused = true;
       }
       resume(writeCallback) {
           if (!this.paused) {
               throw new Error('Parser was already resumed');
           }
           this.paused = false;
           // Necessary for synchronous resume.
           if (this.inLoop)
               return;
           this._runParsingLoop();
           if (!this.paused) {
               writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
           }
       }
       write(chunk, isLastChunk, writeCallback) {
           this.active = true;
           this.preprocessor.write(chunk, isLastChunk);
           this._runParsingLoop();
           if (!this.paused) {
               writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
           }
       }
       insertHtmlAtCurrentPos(chunk) {
           this.active = true;
           this.preprocessor.insertHtmlAtCurrentPos(chunk);
           this._runParsingLoop();
       }
       //Hibernation
       _ensureHibernation() {
           if (this.preprocessor.endOfChunkHit) {
               this._unconsume(this.consumedAfterSnapshot);
               this.active = false;
               return true;
           }
           return false;
       }
       //Consumption
       _consume() {
           this.consumedAfterSnapshot++;
           return this.preprocessor.advance();
       }
       _unconsume(count) {
           this.consumedAfterSnapshot -= count;
           this.preprocessor.retreat(count);
       }
       _reconsumeInState(state) {
           this.state = state;
           this._unconsume(1);
       }
       _advanceBy(count) {
           this.consumedAfterSnapshot += count;
           for (let i = 0; i < count; i++) {
               this.preprocessor.advance();
           }
       }
       _consumeSequenceIfMatch(pattern, caseSensitive) {
           if (this.preprocessor.startsWith(pattern, caseSensitive)) {
               // We will already have consumed one character before calling this method.
               this._advanceBy(pattern.length - 1);
               return true;
           }
           return false;
       }
       //Token creation
       _createStartTagToken() {
           this.currentToken = {
               type: TokenType.START_TAG,
               tagName: '',
               tagID: TAG_ID.UNKNOWN,
               selfClosing: false,
               ackSelfClosing: false,
               attrs: [],
               location: this.getCurrentLocation(1),
           };
       }
       _createEndTagToken() {
           this.currentToken = {
               type: TokenType.END_TAG,
               tagName: '',
               tagID: TAG_ID.UNKNOWN,
               selfClosing: false,
               ackSelfClosing: false,
               attrs: [],
               location: this.getCurrentLocation(2),
           };
       }
       _createCommentToken(offset) {
           this.currentToken = {
               type: TokenType.COMMENT,
               data: '',
               location: this.getCurrentLocation(offset),
           };
       }
       _createDoctypeToken(initialName) {
           this.currentToken = {
               type: TokenType.DOCTYPE,
               name: initialName,
               forceQuirks: false,
               publicId: null,
               systemId: null,
               location: this.currentLocation,
           };
       }
       _createCharacterToken(type, chars) {
           this.currentCharacterToken = {
               type,
               chars,
               location: this.currentLocation,
           };
       }
       //Tag attributes
       _createAttr(attrNameFirstCh) {
           this.currentAttr = {
               name: attrNameFirstCh,
               value: '',
           };
           this.currentLocation = this.getCurrentLocation(0);
       }
       _leaveAttrName() {
           var _a;
           var _b;
           const token = this.currentToken;
           if (getTokenAttr(token, this.currentAttr.name) === null) {
               token.attrs.push(this.currentAttr);
               if (token.location && this.currentLocation) {
                   const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));
                   attrLocations[this.currentAttr.name] = this.currentLocation;
                   // Set end location
                   this._leaveAttrValue();
               }
           }
           else {
               this._err(ERR.duplicateAttribute);
           }
       }
       _leaveAttrValue() {
           if (this.currentLocation) {
               this.currentLocation.endLine = this.preprocessor.line;
               this.currentLocation.endCol = this.preprocessor.col;
               this.currentLocation.endOffset = this.preprocessor.offset;
           }
       }
       //Token emission
       prepareToken(ct) {
           this._emitCurrentCharacterToken(ct.location);
           this.currentToken = null;
           if (ct.location) {
               ct.location.endLine = this.preprocessor.line;
               ct.location.endCol = this.preprocessor.col + 1;
               ct.location.endOffset = this.preprocessor.offset + 1;
           }
           this.currentLocation = this.getCurrentLocation(-1);
       }
       emitCurrentTagToken() {
           const ct = this.currentToken;
           this.prepareToken(ct);
           ct.tagID = getTagID(ct.tagName);
           if (ct.type === TokenType.START_TAG) {
               this.lastStartTagName = ct.tagName;
               this.handler.onStartTag(ct);
           }
           else {
               if (ct.attrs.length > 0) {
                   this._err(ERR.endTagWithAttributes);
               }
               if (ct.selfClosing) {
                   this._err(ERR.endTagWithTrailingSolidus);
               }
               this.handler.onEndTag(ct);
           }
           this.preprocessor.dropParsedChunk();
       }
       emitCurrentComment(ct) {
           this.prepareToken(ct);
           this.handler.onComment(ct);
           this.preprocessor.dropParsedChunk();
       }
       emitCurrentDoctype(ct) {
           this.prepareToken(ct);
           this.handler.onDoctype(ct);
           this.preprocessor.dropParsedChunk();
       }
       _emitCurrentCharacterToken(nextLocation) {
           if (this.currentCharacterToken) {
               //NOTE: if we have a pending character token, make it's end location equal to the
               //current token's start location.
               if (nextLocation && this.currentCharacterToken.location) {
                   this.currentCharacterToken.location.endLine = nextLocation.startLine;
                   this.currentCharacterToken.location.endCol = nextLocation.startCol;
                   this.currentCharacterToken.location.endOffset = nextLocation.startOffset;
               }
               switch (this.currentCharacterToken.type) {
                   case TokenType.CHARACTER: {
                       this.handler.onCharacter(this.currentCharacterToken);
                       break;
                   }
                   case TokenType.NULL_CHARACTER: {
                       this.handler.onNullCharacter(this.currentCharacterToken);
                       break;
                   }
                   case TokenType.WHITESPACE_CHARACTER: {
                       this.handler.onWhitespaceCharacter(this.currentCharacterToken);
                       break;
                   }
               }
               this.currentCharacterToken = null;
           }
       }
       _emitEOFToken() {
           const location = this.getCurrentLocation(0);
           if (location) {
               location.endLine = location.startLine;
               location.endCol = location.startCol;
               location.endOffset = location.startOffset;
           }
           this._emitCurrentCharacterToken(location);
           this.handler.onEof({ type: TokenType.EOF, location });
           this.active = false;
       }
       //Characters emission
       //OPTIMIZATION: specification uses only one type of character tokens (one token per character).
       //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
       //If we have a sequence of characters that belong to the same group, the parser can process it
       //as a single solid character token.
       //So, there are 3 types of character tokens in parse5:
       //1)TokenType.NULL_CHARACTER - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
       //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
       //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
       _appendCharToCurrentCharacterToken(type, ch) {
           if (this.currentCharacterToken) {
               if (this.currentCharacterToken.type !== type) {
                   this.currentLocation = this.getCurrentLocation(0);
                   this._emitCurrentCharacterToken(this.currentLocation);
                   this.preprocessor.dropParsedChunk();
               }
               else {
                   this.currentCharacterToken.chars += ch;
                   return;
               }
           }
           this._createCharacterToken(type, ch);
       }
       _emitCodePoint(cp) {
           let type = TokenType.CHARACTER;
           if (isWhitespace(cp)) {
               type = TokenType.WHITESPACE_CHARACTER;
           }
           else if (cp === CODE_POINTS.NULL) {
               type = TokenType.NULL_CHARACTER;
           }
           this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));
       }
       //NOTE: used when we emit characters explicitly.
       //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.
       _emitChars(ch) {
           this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);
       }
       // Character reference helpers
       _matchNamedCharacterReference(cp) {
           let result = null;
           let excess = 0;
           let withoutSemicolon = false;
           for (let i = 0, current = htmlDecodeTree[0]; i >= 0; cp = this._consume()) {
               i = determineBranch(htmlDecodeTree, current, i + 1, cp);
               if (i < 0)
                   break;
               excess += 1;
               current = htmlDecodeTree[i];
               const masked = current & BinTrieFlags.VALUE_LENGTH;
               // If the branch is a value, store it and continue
               if (masked) {
                   // The mask is the number of bytes of the value, including the current byte.
                   const valueLength = (masked >> 14) - 1;
                   // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.
                   // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
                   if (cp !== CODE_POINTS.SEMICOLON &&
                       this._isCharacterReferenceInAttribute() &&
                       isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {
                       //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after
                       //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.
                       result = [CODE_POINTS.AMPERSAND];
                       // Skip over the value.
                       i += valueLength;
                   }
                   else {
                       // If this is a surrogate pair, consume the next two bytes.
                       result =
                           valueLength === 0
                               ? [htmlDecodeTree[i] & ~BinTrieFlags.VALUE_LENGTH]
                               : valueLength === 1
                                   ? [htmlDecodeTree[++i]]
                                   : [htmlDecodeTree[++i], htmlDecodeTree[++i]];
                       excess = 0;
                       withoutSemicolon = cp !== CODE_POINTS.SEMICOLON;
                   }
                   if (valueLength === 0) {
                       // If the value is zero-length, we're done.
                       this._consume();
                       break;
                   }
               }
           }
           this._unconsume(excess);
           if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {
               this._err(ERR.missingSemicolonAfterCharacterReference);
           }
           // We want to emit the error above on the code point after the entity.
           // We always consume one code point too many in the loop, and we wait to
           // unconsume it until after the error is emitted.
           this._unconsume(1);
           return result;
       }
       _isCharacterReferenceInAttribute() {
           return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||
               this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||
               this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);
       }
       _flushCodePointConsumedAsCharacterReference(cp) {
           if (this._isCharacterReferenceInAttribute()) {
               this.currentAttr.value += String.fromCodePoint(cp);
           }
           else {
               this._emitCodePoint(cp);
           }
       }
       // Calling states this way turns out to be much faster than any other approach.
       _callState(cp) {
           switch (this.state) {
               case State.DATA: {
                   this._stateData(cp);
                   break;
               }
               case State.RCDATA: {
                   this._stateRcdata(cp);
                   break;
               }
               case State.RAWTEXT: {
                   this._stateRawtext(cp);
                   break;
               }
               case State.SCRIPT_DATA: {
                   this._stateScriptData(cp);
                   break;
               }
               case State.PLAINTEXT: {
                   this._statePlaintext(cp);
                   break;
               }
               case State.TAG_OPEN: {
                   this._stateTagOpen(cp);
                   break;
               }
               case State.END_TAG_OPEN: {
                   this._stateEndTagOpen(cp);
                   break;
               }
               case State.TAG_NAME: {
                   this._stateTagName(cp);
                   break;
               }
               case State.RCDATA_LESS_THAN_SIGN: {
                   this._stateRcdataLessThanSign(cp);
                   break;
               }
               case State.RCDATA_END_TAG_OPEN: {
                   this._stateRcdataEndTagOpen(cp);
                   break;
               }
               case State.RCDATA_END_TAG_NAME: {
                   this._stateRcdataEndTagName(cp);
                   break;
               }
               case State.RAWTEXT_LESS_THAN_SIGN: {
                   this._stateRawtextLessThanSign(cp);
                   break;
               }
               case State.RAWTEXT_END_TAG_OPEN: {
                   this._stateRawtextEndTagOpen(cp);
                   break;
               }
               case State.RAWTEXT_END_TAG_NAME: {
                   this._stateRawtextEndTagName(cp);
                   break;
               }
               case State.SCRIPT_DATA_LESS_THAN_SIGN: {
                   this._stateScriptDataLessThanSign(cp);
                   break;
               }
               case State.SCRIPT_DATA_END_TAG_OPEN: {
                   this._stateScriptDataEndTagOpen(cp);
                   break;
               }
               case State.SCRIPT_DATA_END_TAG_NAME: {
                   this._stateScriptDataEndTagName(cp);
                   break;
               }
               case State.SCRIPT_DATA_ESCAPE_START: {
                   this._stateScriptDataEscapeStart(cp);
                   break;
               }
               case State.SCRIPT_DATA_ESCAPE_START_DASH: {
                   this._stateScriptDataEscapeStartDash(cp);
                   break;
               }
               case State.SCRIPT_DATA_ESCAPED: {
                   this._stateScriptDataEscaped(cp);
                   break;
               }
               case State.SCRIPT_DATA_ESCAPED_DASH: {
                   this._stateScriptDataEscapedDash(cp);
                   break;
               }
               case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {
                   this._stateScriptDataEscapedDashDash(cp);
                   break;
               }
               case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {
                   this._stateScriptDataEscapedLessThanSign(cp);
                   break;
               }
               case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {
                   this._stateScriptDataEscapedEndTagOpen(cp);
                   break;
               }
               case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {
                   this._stateScriptDataEscapedEndTagName(cp);
                   break;
               }
               case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {
                   this._stateScriptDataDoubleEscapeStart(cp);
                   break;
               }
               case State.SCRIPT_DATA_DOUBLE_ESCAPED: {
                   this._stateScriptDataDoubleEscaped(cp);
                   break;
               }
               case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {
                   this._stateScriptDataDoubleEscapedDash(cp);
                   break;
               }
               case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {
                   this._stateScriptDataDoubleEscapedDashDash(cp);
                   break;
               }
               case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {
                   this._stateScriptDataDoubleEscapedLessThanSign(cp);
                   break;
               }
               case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {
                   this._stateScriptDataDoubleEscapeEnd(cp);
                   break;
               }
               case State.BEFORE_ATTRIBUTE_NAME: {
                   this._stateBeforeAttributeName(cp);
                   break;
               }
               case State.ATTRIBUTE_NAME: {
                   this._stateAttributeName(cp);
                   break;
               }
               case State.AFTER_ATTRIBUTE_NAME: {
                   this._stateAfterAttributeName(cp);
                   break;
               }
               case State.BEFORE_ATTRIBUTE_VALUE: {
                   this._stateBeforeAttributeValue(cp);
                   break;
               }
               case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {
                   this._stateAttributeValueDoubleQuoted(cp);
                   break;
               }
               case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {
                   this._stateAttributeValueSingleQuoted(cp);
                   break;
               }
               case State.ATTRIBUTE_VALUE_UNQUOTED: {
                   this._stateAttributeValueUnquoted(cp);
                   break;
               }
               case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {
                   this._stateAfterAttributeValueQuoted(cp);
                   break;
               }
               case State.SELF_CLOSING_START_TAG: {
                   this._stateSelfClosingStartTag(cp);
                   break;
               }
               case State.BOGUS_COMMENT: {
                   this._stateBogusComment(cp);
                   break;
               }
               case State.MARKUP_DECLARATION_OPEN: {
                   this._stateMarkupDeclarationOpen(cp);
                   break;
               }
               case State.COMMENT_START: {
                   this._stateCommentStart(cp);
                   break;
               }
               case State.COMMENT_START_DASH: {
                   this._stateCommentStartDash(cp);
                   break;
               }
               case State.COMMENT: {
                   this._stateComment(cp);
                   break;
               }
               case State.COMMENT_LESS_THAN_SIGN: {
                   this._stateCommentLessThanSign(cp);
                   break;
               }
               case State.COMMENT_LESS_THAN_SIGN_BANG: {
                   this._stateCommentLessThanSignBang(cp);
                   break;
               }
               case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {
                   this._stateCommentLessThanSignBangDash(cp);
                   break;
               }
               case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {
                   this._stateCommentLessThanSignBangDashDash(cp);
                   break;
               }
               case State.COMMENT_END_DASH: {
                   this._stateCommentEndDash(cp);
                   break;
               }
               case State.COMMENT_END: {
                   this._stateCommentEnd(cp);
                   break;
               }
               case State.COMMENT_END_BANG: {
                   this._stateCommentEndBang(cp);
                   break;
               }
               case State.DOCTYPE: {
                   this._stateDoctype(cp);
                   break;
               }
               case State.BEFORE_DOCTYPE_NAME: {
                   this._stateBeforeDoctypeName(cp);
                   break;
               }
               case State.DOCTYPE_NAME: {
                   this._stateDoctypeName(cp);
                   break;
               }
               case State.AFTER_DOCTYPE_NAME: {
                   this._stateAfterDoctypeName(cp);
                   break;
               }
               case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {
                   this._stateAfterDoctypePublicKeyword(cp);
                   break;
               }
               case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {
                   this._stateBeforeDoctypePublicIdentifier(cp);
                   break;
               }
               case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {
                   this._stateDoctypePublicIdentifierDoubleQuoted(cp);
                   break;
               }
               case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {
                   this._stateDoctypePublicIdentifierSingleQuoted(cp);
                   break;
               }
               case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {
                   this._stateAfterDoctypePublicIdentifier(cp);
                   break;
               }
               case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {
                   this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);
                   break;
               }
               case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {
                   this._stateAfterDoctypeSystemKeyword(cp);
                   break;
               }
               case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {
                   this._stateBeforeDoctypeSystemIdentifier(cp);
                   break;
               }
               case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {
                   this._stateDoctypeSystemIdentifierDoubleQuoted(cp);
                   break;
               }
               case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {
                   this._stateDoctypeSystemIdentifierSingleQuoted(cp);
                   break;
               }
               case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {
                   this._stateAfterDoctypeSystemIdentifier(cp);
                   break;
               }
               case State.BOGUS_DOCTYPE: {
                   this._stateBogusDoctype(cp);
                   break;
               }
               case State.CDATA_SECTION: {
                   this._stateCdataSection(cp);
                   break;
               }
               case State.CDATA_SECTION_BRACKET: {
                   this._stateCdataSectionBracket(cp);
                   break;
               }
               case State.CDATA_SECTION_END: {
                   this._stateCdataSectionEnd(cp);
                   break;
               }
               case State.CHARACTER_REFERENCE: {
                   this._stateCharacterReference(cp);
                   break;
               }
               case State.NAMED_CHARACTER_REFERENCE: {
                   this._stateNamedCharacterReference(cp);
                   break;
               }
               case State.AMBIGUOUS_AMPERSAND: {
                   this._stateAmbiguousAmpersand(cp);
                   break;
               }
               case State.NUMERIC_CHARACTER_REFERENCE: {
                   this._stateNumericCharacterReference(cp);
                   break;
               }
               case State.HEXADEMICAL_CHARACTER_REFERENCE_START: {
                   this._stateHexademicalCharacterReferenceStart(cp);
                   break;
               }
               case State.DECIMAL_CHARACTER_REFERENCE_START: {
                   this._stateDecimalCharacterReferenceStart(cp);
                   break;
               }
               case State.HEXADEMICAL_CHARACTER_REFERENCE: {
                   this._stateHexademicalCharacterReference(cp);
                   break;
               }
               case State.DECIMAL_CHARACTER_REFERENCE: {
                   this._stateDecimalCharacterReference(cp);
                   break;
               }
               case State.NUMERIC_CHARACTER_REFERENCE_END: {
                   this._stateNumericCharacterReferenceEnd();
                   break;
               }
               default: {
                   throw new Error('Unknown state');
               }
           }
       }
       // State machine
       // Data state
       //------------------------------------------------------------------
       _stateData(cp) {
           switch (cp) {
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State.TAG_OPEN;
                   break;
               }
               case CODE_POINTS.AMPERSAND: {
                   this.returnState = State.DATA;
                   this.state = State.CHARACTER_REFERENCE;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitCodePoint(cp);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       //  RCDATA state
       //------------------------------------------------------------------
       _stateRcdata(cp) {
           switch (cp) {
               case CODE_POINTS.AMPERSAND: {
                   this.returnState = State.RCDATA;
                   this.state = State.CHARACTER_REFERENCE;
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State.RCDATA_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // RAWTEXT state
       //------------------------------------------------------------------
       _stateRawtext(cp) {
           switch (cp) {
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State.RAWTEXT_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data state
       //------------------------------------------------------------------
       _stateScriptData(cp) {
           switch (cp) {
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // PLAINTEXT state
       //------------------------------------------------------------------
       _statePlaintext(cp) {
           switch (cp) {
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // Tag open state
       //------------------------------------------------------------------
       _stateTagOpen(cp) {
           if (isAsciiLetter(cp)) {
               this._createStartTagToken();
               this.state = State.TAG_NAME;
               this._stateTagName(cp);
           }
           else
               switch (cp) {
                   case CODE_POINTS.EXCLAMATION_MARK: {
                       this.state = State.MARKUP_DECLARATION_OPEN;
                       break;
                   }
                   case CODE_POINTS.SOLIDUS: {
                       this.state = State.END_TAG_OPEN;
                       break;
                   }
                   case CODE_POINTS.QUESTION_MARK: {
                       this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
                       this._createCommentToken(1);
                       this.state = State.BOGUS_COMMENT;
                       this._stateBogusComment(cp);
                       break;
                   }
                   case CODE_POINTS.EOF: {
                       this._err(ERR.eofBeforeTagName);
                       this._emitChars('<');
                       this._emitEOFToken();
                       break;
                   }
                   default: {
                       this._err(ERR.invalidFirstCharacterOfTagName);
                       this._emitChars('<');
                       this.state = State.DATA;
                       this._stateData(cp);
                   }
               }
       }
       // End tag open state
       //------------------------------------------------------------------
       _stateEndTagOpen(cp) {
           if (isAsciiLetter(cp)) {
               this._createEndTagToken();
               this.state = State.TAG_NAME;
               this._stateTagName(cp);
           }
           else
               switch (cp) {
                   case CODE_POINTS.GREATER_THAN_SIGN: {
                       this._err(ERR.missingEndTagName);
                       this.state = State.DATA;
                       break;
                   }
                   case CODE_POINTS.EOF: {
                       this._err(ERR.eofBeforeTagName);
                       this._emitChars('</');
                       this._emitEOFToken();
                       break;
                   }
                   default: {
                       this._err(ERR.invalidFirstCharacterOfTagName);
                       this._createCommentToken(2);
                       this.state = State.BOGUS_COMMENT;
                       this._stateBogusComment(cp);
                   }
               }
       }
       // Tag name state
       //------------------------------------------------------------------
       _stateTagName(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this.state = State.BEFORE_ATTRIBUTE_NAME;
                   break;
               }
               case CODE_POINTS.SOLIDUS: {
                   this.state = State.SELF_CLOSING_START_TAG;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State.DATA;
                   this.emitCurrentTagToken();
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.tagName += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
               }
           }
       }
       // RCDATA less-than sign state
       //------------------------------------------------------------------
       _stateRcdataLessThanSign(cp) {
           if (cp === CODE_POINTS.SOLIDUS) {
               this.state = State.RCDATA_END_TAG_OPEN;
           }
           else {
               this._emitChars('<');
               this.state = State.RCDATA;
               this._stateRcdata(cp);
           }
       }
       // RCDATA end tag open state
       //------------------------------------------------------------------
       _stateRcdataEndTagOpen(cp) {
           if (isAsciiLetter(cp)) {
               this.state = State.RCDATA_END_TAG_NAME;
               this._stateRcdataEndTagName(cp);
           }
           else {
               this._emitChars('</');
               this.state = State.RCDATA;
               this._stateRcdata(cp);
           }
       }
       handleSpecialEndTag(_cp) {
           if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {
               return !this._ensureHibernation();
           }
           this._createEndTagToken();
           const token = this.currentToken;
           token.tagName = this.lastStartTagName;
           const cp = this.preprocessor.peek(this.lastStartTagName.length);
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this._advanceBy(this.lastStartTagName.length);
                   this.state = State.BEFORE_ATTRIBUTE_NAME;
                   return false;
               }
               case CODE_POINTS.SOLIDUS: {
                   this._advanceBy(this.lastStartTagName.length);
                   this.state = State.SELF_CLOSING_START_TAG;
                   return false;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._advanceBy(this.lastStartTagName.length);
                   this.emitCurrentTagToken();
                   this.state = State.DATA;
                   return false;
               }
               default: {
                   return !this._ensureHibernation();
               }
           }
       }
       // RCDATA end tag name state
       //------------------------------------------------------------------
       _stateRcdataEndTagName(cp) {
           if (this.handleSpecialEndTag(cp)) {
               this._emitChars('</');
               this.state = State.RCDATA;
               this._stateRcdata(cp);
           }
       }
       // RAWTEXT less-than sign state
       //------------------------------------------------------------------
       _stateRawtextLessThanSign(cp) {
           if (cp === CODE_POINTS.SOLIDUS) {
               this.state = State.RAWTEXT_END_TAG_OPEN;
           }
           else {
               this._emitChars('<');
               this.state = State.RAWTEXT;
               this._stateRawtext(cp);
           }
       }
       // RAWTEXT end tag open state
       //------------------------------------------------------------------
       _stateRawtextEndTagOpen(cp) {
           if (isAsciiLetter(cp)) {
               this.state = State.RAWTEXT_END_TAG_NAME;
               this._stateRawtextEndTagName(cp);
           }
           else {
               this._emitChars('</');
               this.state = State.RAWTEXT;
               this._stateRawtext(cp);
           }
       }
       // RAWTEXT end tag name state
       //------------------------------------------------------------------
       _stateRawtextEndTagName(cp) {
           if (this.handleSpecialEndTag(cp)) {
               this._emitChars('</');
               this.state = State.RAWTEXT;
               this._stateRawtext(cp);
           }
       }
       // Script data less-than sign state
       //------------------------------------------------------------------
       _stateScriptDataLessThanSign(cp) {
           switch (cp) {
               case CODE_POINTS.SOLIDUS: {
                   this.state = State.SCRIPT_DATA_END_TAG_OPEN;
                   break;
               }
               case CODE_POINTS.EXCLAMATION_MARK: {
                   this.state = State.SCRIPT_DATA_ESCAPE_START;
                   this._emitChars('<!');
                   break;
               }
               default: {
                   this._emitChars('<');
                   this.state = State.SCRIPT_DATA;
                   this._stateScriptData(cp);
               }
           }
       }
       // Script data end tag open state
       //------------------------------------------------------------------
       _stateScriptDataEndTagOpen(cp) {
           if (isAsciiLetter(cp)) {
               this.state = State.SCRIPT_DATA_END_TAG_NAME;
               this._stateScriptDataEndTagName(cp);
           }
           else {
               this._emitChars('</');
               this.state = State.SCRIPT_DATA;
               this._stateScriptData(cp);
           }
       }
       // Script data end tag name state
       //------------------------------------------------------------------
       _stateScriptDataEndTagName(cp) {
           if (this.handleSpecialEndTag(cp)) {
               this._emitChars('</');
               this.state = State.SCRIPT_DATA;
               this._stateScriptData(cp);
           }
       }
       // Script data escape start state
       //------------------------------------------------------------------
       _stateScriptDataEscapeStart(cp) {
           if (cp === CODE_POINTS.HYPHEN_MINUS) {
               this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;
               this._emitChars('-');
           }
           else {
               this.state = State.SCRIPT_DATA;
               this._stateScriptData(cp);
           }
       }
       // Script data escape start dash state
       //------------------------------------------------------------------
       _stateScriptDataEscapeStartDash(cp) {
           if (cp === CODE_POINTS.HYPHEN_MINUS) {
               this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;
               this._emitChars('-');
           }
           else {
               this.state = State.SCRIPT_DATA;
               this._stateScriptData(cp);
           }
       }
       // Script data escaped state
       //------------------------------------------------------------------
       _stateScriptDataEscaped(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State.SCRIPT_DATA_ESCAPED_DASH;
                   this._emitChars('-');
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInScriptHtmlCommentLikeText);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data escaped dash state
       //------------------------------------------------------------------
       _stateScriptDataEscapedDash(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;
                   this._emitChars('-');
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.state = State.SCRIPT_DATA_ESCAPED;
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInScriptHtmlCommentLikeText);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.state = State.SCRIPT_DATA_ESCAPED;
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data escaped dash dash state
       //------------------------------------------------------------------
       _stateScriptDataEscapedDashDash(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this._emitChars('-');
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State.SCRIPT_DATA;
                   this._emitChars('>');
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.state = State.SCRIPT_DATA_ESCAPED;
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInScriptHtmlCommentLikeText);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.state = State.SCRIPT_DATA_ESCAPED;
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data escaped less-than sign state
       //------------------------------------------------------------------
       _stateScriptDataEscapedLessThanSign(cp) {
           if (cp === CODE_POINTS.SOLIDUS) {
               this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;
           }
           else if (isAsciiLetter(cp)) {
               this._emitChars('<');
               this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;
               this._stateScriptDataDoubleEscapeStart(cp);
           }
           else {
               this._emitChars('<');
               this.state = State.SCRIPT_DATA_ESCAPED;
               this._stateScriptDataEscaped(cp);
           }
       }
       // Script data escaped end tag open state
       //------------------------------------------------------------------
       _stateScriptDataEscapedEndTagOpen(cp) {
           if (isAsciiLetter(cp)) {
               this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;
               this._stateScriptDataEscapedEndTagName(cp);
           }
           else {
               this._emitChars('</');
               this.state = State.SCRIPT_DATA_ESCAPED;
               this._stateScriptDataEscaped(cp);
           }
       }
       // Script data escaped end tag name state
       //------------------------------------------------------------------
       _stateScriptDataEscapedEndTagName(cp) {
           if (this.handleSpecialEndTag(cp)) {
               this._emitChars('</');
               this.state = State.SCRIPT_DATA_ESCAPED;
               this._stateScriptDataEscaped(cp);
           }
       }
       // Script data double escape start state
       //------------------------------------------------------------------
       _stateScriptDataDoubleEscapeStart(cp) {
           if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) &&
               isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
               this._emitCodePoint(cp);
               for (let i = 0; i < SEQUENCES.SCRIPT.length; i++) {
                   this._emitCodePoint(this._consume());
               }
               this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
           }
           else if (!this._ensureHibernation()) {
               this.state = State.SCRIPT_DATA_ESCAPED;
               this._stateScriptDataEscaped(cp);
           }
       }
       // Script data double escaped state
       //------------------------------------------------------------------
       _stateScriptDataDoubleEscaped(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;
                   this._emitChars('-');
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
                   this._emitChars('<');
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInScriptHtmlCommentLikeText);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data double escaped dash state
       //------------------------------------------------------------------
       _stateScriptDataDoubleEscapedDash(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;
                   this._emitChars('-');
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
                   this._emitChars('<');
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInScriptHtmlCommentLikeText);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data double escaped dash dash state
       //------------------------------------------------------------------
       _stateScriptDataDoubleEscapedDashDash(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this._emitChars('-');
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
                   this._emitChars('<');
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State.SCRIPT_DATA;
                   this._emitChars('>');
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInScriptHtmlCommentLikeText);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data double escaped less-than sign state
       //------------------------------------------------------------------
       _stateScriptDataDoubleEscapedLessThanSign(cp) {
           if (cp === CODE_POINTS.SOLIDUS) {
               this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;
               this._emitChars('/');
           }
           else {
               this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
               this._stateScriptDataDoubleEscaped(cp);
           }
       }
       // Script data double escape end state
       //------------------------------------------------------------------
       _stateScriptDataDoubleEscapeEnd(cp) {
           if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) &&
               isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
               this._emitCodePoint(cp);
               for (let i = 0; i < SEQUENCES.SCRIPT.length; i++) {
                   this._emitCodePoint(this._consume());
               }
               this.state = State.SCRIPT_DATA_ESCAPED;
           }
           else if (!this._ensureHibernation()) {
               this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
               this._stateScriptDataDoubleEscaped(cp);
           }
       }
       // Before attribute name state
       //------------------------------------------------------------------
       _stateBeforeAttributeName(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.SOLIDUS:
               case CODE_POINTS.GREATER_THAN_SIGN:
               case CODE_POINTS.EOF: {
                   this.state = State.AFTER_ATTRIBUTE_NAME;
                   this._stateAfterAttributeName(cp);
                   break;
               }
               case CODE_POINTS.EQUALS_SIGN: {
                   this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
                   this._createAttr('=');
                   this.state = State.ATTRIBUTE_NAME;
                   break;
               }
               default: {
                   this._createAttr('');
                   this.state = State.ATTRIBUTE_NAME;
                   this._stateAttributeName(cp);
               }
           }
       }
       // Attribute name state
       //------------------------------------------------------------------
       _stateAttributeName(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED:
               case CODE_POINTS.SOLIDUS:
               case CODE_POINTS.GREATER_THAN_SIGN:
               case CODE_POINTS.EOF: {
                   this._leaveAttrName();
                   this.state = State.AFTER_ATTRIBUTE_NAME;
                   this._stateAfterAttributeName(cp);
                   break;
               }
               case CODE_POINTS.EQUALS_SIGN: {
                   this._leaveAttrName();
                   this.state = State.BEFORE_ATTRIBUTE_VALUE;
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK:
               case CODE_POINTS.APOSTROPHE:
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this._err(ERR.unexpectedCharacterInAttributeName);
                   this.currentAttr.name += String.fromCodePoint(cp);
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.currentAttr.name += REPLACEMENT_CHARACTER;
                   break;
               }
               default: {
                   this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
               }
           }
       }
       // After attribute name state
       //------------------------------------------------------------------
       _stateAfterAttributeName(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.SOLIDUS: {
                   this.state = State.SELF_CLOSING_START_TAG;
                   break;
               }
               case CODE_POINTS.EQUALS_SIGN: {
                   this.state = State.BEFORE_ATTRIBUTE_VALUE;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State.DATA;
                   this.emitCurrentTagToken();
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._createAttr('');
                   this.state = State.ATTRIBUTE_NAME;
                   this._stateAttributeName(cp);
               }
           }
       }
       // Before attribute value state
       //------------------------------------------------------------------
       _stateBeforeAttributeValue(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.missingAttributeValue);
                   this.state = State.DATA;
                   this.emitCurrentTagToken();
                   break;
               }
               default: {
                   this.state = State.ATTRIBUTE_VALUE_UNQUOTED;
                   this._stateAttributeValueUnquoted(cp);
               }
           }
       }
       // Attribute value (double-quoted) state
       //------------------------------------------------------------------
       _stateAttributeValueDoubleQuoted(cp) {
           switch (cp) {
               case CODE_POINTS.QUOTATION_MARK: {
                   this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;
                   break;
               }
               case CODE_POINTS.AMPERSAND: {
                   this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
                   this.state = State.CHARACTER_REFERENCE;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.currentAttr.value += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.currentAttr.value += String.fromCodePoint(cp);
               }
           }
       }
       // Attribute value (single-quoted) state
       //------------------------------------------------------------------
       _stateAttributeValueSingleQuoted(cp) {
           switch (cp) {
               case CODE_POINTS.APOSTROPHE: {
                   this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;
                   break;
               }
               case CODE_POINTS.AMPERSAND: {
                   this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;
                   this.state = State.CHARACTER_REFERENCE;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.currentAttr.value += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.currentAttr.value += String.fromCodePoint(cp);
               }
           }
       }
       // Attribute value (unquoted) state
       //------------------------------------------------------------------
       _stateAttributeValueUnquoted(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this._leaveAttrValue();
                   this.state = State.BEFORE_ATTRIBUTE_NAME;
                   break;
               }
               case CODE_POINTS.AMPERSAND: {
                   this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;
                   this.state = State.CHARACTER_REFERENCE;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._leaveAttrValue();
                   this.state = State.DATA;
                   this.emitCurrentTagToken();
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.currentAttr.value += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK:
               case CODE_POINTS.APOSTROPHE:
               case CODE_POINTS.LESS_THAN_SIGN:
               case CODE_POINTS.EQUALS_SIGN:
               case CODE_POINTS.GRAVE_ACCENT: {
                   this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
                   this.currentAttr.value += String.fromCodePoint(cp);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.currentAttr.value += String.fromCodePoint(cp);
               }
           }
       }
       // After attribute value (quoted) state
       //------------------------------------------------------------------
       _stateAfterAttributeValueQuoted(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this._leaveAttrValue();
                   this.state = State.BEFORE_ATTRIBUTE_NAME;
                   break;
               }
               case CODE_POINTS.SOLIDUS: {
                   this._leaveAttrValue();
                   this.state = State.SELF_CLOSING_START_TAG;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._leaveAttrValue();
                   this.state = State.DATA;
                   this.emitCurrentTagToken();
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingWhitespaceBetweenAttributes);
                   this.state = State.BEFORE_ATTRIBUTE_NAME;
                   this._stateBeforeAttributeName(cp);
               }
           }
       }
       // Self-closing start tag state
       //------------------------------------------------------------------
       _stateSelfClosingStartTag(cp) {
           switch (cp) {
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   const token = this.currentToken;
                   token.selfClosing = true;
                   this.state = State.DATA;
                   this.emitCurrentTagToken();
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.unexpectedSolidusInTag);
                   this.state = State.BEFORE_ATTRIBUTE_NAME;
                   this._stateBeforeAttributeName(cp);
               }
           }
       }
       // Bogus comment state
       //------------------------------------------------------------------
       _stateBogusComment(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State.DATA;
                   this.emitCurrentComment(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this.emitCurrentComment(token);
                   this._emitEOFToken();
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.data += REPLACEMENT_CHARACTER;
                   break;
               }
               default: {
                   token.data += String.fromCodePoint(cp);
               }
           }
       }
       // Markup declaration open state
       //------------------------------------------------------------------
       _stateMarkupDeclarationOpen(cp) {
           if (this._consumeSequenceIfMatch(SEQUENCES.DASH_DASH, true)) {
               this._createCommentToken(SEQUENCES.DASH_DASH.length + 1);
               this.state = State.COMMENT_START;
           }
           else if (this._consumeSequenceIfMatch(SEQUENCES.DOCTYPE, false)) {
               // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.
               this.currentLocation = this.getCurrentLocation(SEQUENCES.DOCTYPE.length + 1);
               this.state = State.DOCTYPE;
           }
           else if (this._consumeSequenceIfMatch(SEQUENCES.CDATA_START, true)) {
               if (this.inForeignNode) {
                   this.state = State.CDATA_SECTION;
               }
               else {
                   this._err(ERR.cdataInHtmlContent);
                   this._createCommentToken(SEQUENCES.CDATA_START.length + 1);
                   this.currentToken.data = '[CDATA[';
                   this.state = State.BOGUS_COMMENT;
               }
           }
           //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup
           //results are no longer valid and we will need to start over.
           else if (!this._ensureHibernation()) {
               this._err(ERR.incorrectlyOpenedComment);
               this._createCommentToken(2);
               this.state = State.BOGUS_COMMENT;
               this._stateBogusComment(cp);
           }
       }
       // Comment start state
       //------------------------------------------------------------------
       _stateCommentStart(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State.COMMENT_START_DASH;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.abruptClosingOfEmptyComment);
                   this.state = State.DATA;
                   const token = this.currentToken;
                   this.emitCurrentComment(token);
                   break;
               }
               default: {
                   this.state = State.COMMENT;
                   this._stateComment(cp);
               }
           }
       }
       // Comment start dash state
       //------------------------------------------------------------------
       _stateCommentStartDash(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State.COMMENT_END;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.abruptClosingOfEmptyComment);
                   this.state = State.DATA;
                   this.emitCurrentComment(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInComment);
                   this.emitCurrentComment(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.data += '-';
                   this.state = State.COMMENT;
                   this._stateComment(cp);
               }
           }
       }
       // Comment state
       //------------------------------------------------------------------
       _stateComment(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State.COMMENT_END_DASH;
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   token.data += '<';
                   this.state = State.COMMENT_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.data += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInComment);
                   this.emitCurrentComment(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.data += String.fromCodePoint(cp);
               }
           }
       }
       // Comment less-than sign state
       //------------------------------------------------------------------
       _stateCommentLessThanSign(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.EXCLAMATION_MARK: {
                   token.data += '!';
                   this.state = State.COMMENT_LESS_THAN_SIGN_BANG;
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   token.data += '<';
                   break;
               }
               default: {
                   this.state = State.COMMENT;
                   this._stateComment(cp);
               }
           }
       }
       // Comment less-than sign bang state
       //------------------------------------------------------------------
       _stateCommentLessThanSignBang(cp) {
           if (cp === CODE_POINTS.HYPHEN_MINUS) {
               this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;
           }
           else {
               this.state = State.COMMENT;
               this._stateComment(cp);
           }
       }
       // Comment less-than sign bang dash state
       //------------------------------------------------------------------
       _stateCommentLessThanSignBangDash(cp) {
           if (cp === CODE_POINTS.HYPHEN_MINUS) {
               this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;
           }
           else {
               this.state = State.COMMENT_END_DASH;
               this._stateCommentEndDash(cp);
           }
       }
       // Comment less-than sign bang dash dash state
       //------------------------------------------------------------------
       _stateCommentLessThanSignBangDashDash(cp) {
           if (cp !== CODE_POINTS.GREATER_THAN_SIGN && cp !== CODE_POINTS.EOF) {
               this._err(ERR.nestedComment);
           }
           this.state = State.COMMENT_END;
           this._stateCommentEnd(cp);
       }
       // Comment end dash state
       //------------------------------------------------------------------
       _stateCommentEndDash(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State.COMMENT_END;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInComment);
                   this.emitCurrentComment(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.data += '-';
                   this.state = State.COMMENT;
                   this._stateComment(cp);
               }
           }
       }
       // Comment end state
       //------------------------------------------------------------------
       _stateCommentEnd(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State.DATA;
                   this.emitCurrentComment(token);
                   break;
               }
               case CODE_POINTS.EXCLAMATION_MARK: {
                   this.state = State.COMMENT_END_BANG;
                   break;
               }
               case CODE_POINTS.HYPHEN_MINUS: {
                   token.data += '-';
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInComment);
                   this.emitCurrentComment(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.data += '--';
                   this.state = State.COMMENT;
                   this._stateComment(cp);
               }
           }
       }
       // Comment end bang state
       //------------------------------------------------------------------
       _stateCommentEndBang(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   token.data += '--!';
                   this.state = State.COMMENT_END_DASH;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.incorrectlyClosedComment);
                   this.state = State.DATA;
                   this.emitCurrentComment(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInComment);
                   this.emitCurrentComment(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.data += '--!';
                   this.state = State.COMMENT;
                   this._stateComment(cp);
               }
           }
       }
       // DOCTYPE state
       //------------------------------------------------------------------
       _stateDoctype(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this.state = State.BEFORE_DOCTYPE_NAME;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State.BEFORE_DOCTYPE_NAME;
                   this._stateBeforeDoctypeName(cp);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   this._createDoctypeToken(null);
                   const token = this.currentToken;
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingWhitespaceBeforeDoctypeName);
                   this.state = State.BEFORE_DOCTYPE_NAME;
                   this._stateBeforeDoctypeName(cp);
               }
           }
       }
       // Before DOCTYPE name state
       //------------------------------------------------------------------
       _stateBeforeDoctypeName(cp) {
           if (isAsciiUpper(cp)) {
               this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));
               this.state = State.DOCTYPE_NAME;
           }
           else
               switch (cp) {
                   case CODE_POINTS.SPACE:
                   case CODE_POINTS.LINE_FEED:
                   case CODE_POINTS.TABULATION:
                   case CODE_POINTS.FORM_FEED: {
                       // Ignore whitespace
                       break;
                   }
                   case CODE_POINTS.NULL: {
                       this._err(ERR.unexpectedNullCharacter);
                       this._createDoctypeToken(REPLACEMENT_CHARACTER);
                       this.state = State.DOCTYPE_NAME;
                       break;
                   }
                   case CODE_POINTS.GREATER_THAN_SIGN: {
                       this._err(ERR.missingDoctypeName);
                       this._createDoctypeToken(null);
                       const token = this.currentToken;
                       token.forceQuirks = true;
                       this.emitCurrentDoctype(token);
                       this.state = State.DATA;
                       break;
                   }
                   case CODE_POINTS.EOF: {
                       this._err(ERR.eofInDoctype);
                       this._createDoctypeToken(null);
                       const token = this.currentToken;
                       token.forceQuirks = true;
                       this.emitCurrentDoctype(token);
                       this._emitEOFToken();
                       break;
                   }
                   default: {
                       this._createDoctypeToken(String.fromCodePoint(cp));
                       this.state = State.DOCTYPE_NAME;
                   }
               }
       }
       // DOCTYPE name state
       //------------------------------------------------------------------
       _stateDoctypeName(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this.state = State.AFTER_DOCTYPE_NAME;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.name += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
               }
           }
       }
       // After DOCTYPE name state
       //------------------------------------------------------------------
       _stateAfterDoctypeName(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default:
                   if (this._consumeSequenceIfMatch(SEQUENCES.PUBLIC, false)) {
                       this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;
                   }
                   else if (this._consumeSequenceIfMatch(SEQUENCES.SYSTEM, false)) {
                       this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;
                   }
                   //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup
                   //results are no longer valid and we will need to start over.
                   else if (!this._ensureHibernation()) {
                       this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
                       token.forceQuirks = true;
                       this.state = State.BOGUS_DOCTYPE;
                       this._stateBogusDoctype(cp);
                   }
           }
       }
       // After DOCTYPE public keyword state
       //------------------------------------------------------------------
       _stateAfterDoctypePublicKeyword(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
                   token.publicId = '';
                   this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
                   token.publicId = '';
                   this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.missingDoctypePublicIdentifier);
                   token.forceQuirks = true;
                   this.state = State.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
                   token.forceQuirks = true;
                   this.state = State.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // Before DOCTYPE public identifier state
       //------------------------------------------------------------------
       _stateBeforeDoctypePublicIdentifier(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   token.publicId = '';
                   this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   token.publicId = '';
                   this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.missingDoctypePublicIdentifier);
                   token.forceQuirks = true;
                   this.state = State.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
                   token.forceQuirks = true;
                   this.state = State.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // DOCTYPE public identifier (double-quoted) state
       //------------------------------------------------------------------
       _stateDoctypePublicIdentifierDoubleQuoted(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.QUOTATION_MARK: {
                   this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.publicId += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.abruptDoctypePublicIdentifier);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this.state = State.DATA;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.publicId += String.fromCodePoint(cp);
               }
           }
       }
       // DOCTYPE public identifier (single-quoted) state
       //------------------------------------------------------------------
       _stateDoctypePublicIdentifierSingleQuoted(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.APOSTROPHE: {
                   this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.publicId += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.abruptDoctypePublicIdentifier);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this.state = State.DATA;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.publicId += String.fromCodePoint(cp);
               }
           }
       }
       // After DOCTYPE public identifier state
       //------------------------------------------------------------------
       _stateAfterDoctypePublicIdentifier(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
                   token.systemId = '';
                   this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
                   token.systemId = '';
                   this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.state = State.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // Between DOCTYPE public and system identifiers state
       //------------------------------------------------------------------
       _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.emitCurrentDoctype(token);
                   this.state = State.DATA;
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   token.systemId = '';
                   this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   token.systemId = '';
                   this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.state = State.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // After DOCTYPE system keyword state
       //------------------------------------------------------------------
       _stateAfterDoctypeSystemKeyword(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
                   token.systemId = '';
                   this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
                   token.systemId = '';
                   this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.missingDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.state = State.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.state = State.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // Before DOCTYPE system identifier state
       //------------------------------------------------------------------
       _stateBeforeDoctypeSystemIdentifier(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   token.systemId = '';
                   this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   token.systemId = '';
                   this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.missingDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.state = State.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.state = State.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // DOCTYPE system identifier (double-quoted) state
       //------------------------------------------------------------------
       _stateDoctypeSystemIdentifierDoubleQuoted(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.QUOTATION_MARK: {
                   this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.systemId += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.abruptDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this.state = State.DATA;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.systemId += String.fromCodePoint(cp);
               }
           }
       }
       // DOCTYPE system identifier (single-quoted) state
       //------------------------------------------------------------------
       _stateDoctypeSystemIdentifierSingleQuoted(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.APOSTROPHE: {
                   this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.systemId += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.abruptDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this.state = State.DATA;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.systemId += String.fromCodePoint(cp);
               }
           }
       }
       // After DOCTYPE system identifier state
       //------------------------------------------------------------------
       _stateAfterDoctypeSystemIdentifier(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.emitCurrentDoctype(token);
                   this.state = State.DATA;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
                   this.state = State.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // Bogus DOCTYPE state
       //------------------------------------------------------------------
       _stateBogusDoctype(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.emitCurrentDoctype(token);
                   this.state = State.DATA;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               // Do nothing
           }
       }
       // CDATA section state
       //------------------------------------------------------------------
       _stateCdataSection(cp) {
           switch (cp) {
               case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
                   this.state = State.CDATA_SECTION_BRACKET;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInCdata);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // CDATA section bracket state
       //------------------------------------------------------------------
       _stateCdataSectionBracket(cp) {
           if (cp === CODE_POINTS.RIGHT_SQUARE_BRACKET) {
               this.state = State.CDATA_SECTION_END;
           }
           else {
               this._emitChars(']');
               this.state = State.CDATA_SECTION;
               this._stateCdataSection(cp);
           }
       }
       // CDATA section end state
       //------------------------------------------------------------------
       _stateCdataSectionEnd(cp) {
           switch (cp) {
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State.DATA;
                   break;
               }
               case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
                   this._emitChars(']');
                   break;
               }
               default: {
                   this._emitChars(']]');
                   this.state = State.CDATA_SECTION;
                   this._stateCdataSection(cp);
               }
           }
       }
       // Character reference state
       //------------------------------------------------------------------
       _stateCharacterReference(cp) {
           if (cp === CODE_POINTS.NUMBER_SIGN) {
               this.state = State.NUMERIC_CHARACTER_REFERENCE;
           }
           else if (isAsciiAlphaNumeric(cp)) {
               this.state = State.NAMED_CHARACTER_REFERENCE;
               this._stateNamedCharacterReference(cp);
           }
           else {
               this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
               this._reconsumeInState(this.returnState);
           }
       }
       // Named character reference state
       //------------------------------------------------------------------
       _stateNamedCharacterReference(cp) {
           const matchResult = this._matchNamedCharacterReference(cp);
           //NOTE: Matching can be abrupted by hibernation. In that case, match
           //results are no longer valid and we will need to start over.
           if (this._ensureHibernation()) ;
           else if (matchResult) {
               for (let i = 0; i < matchResult.length; i++) {
                   this._flushCodePointConsumedAsCharacterReference(matchResult[i]);
               }
               this.state = this.returnState;
           }
           else {
               this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
               this.state = State.AMBIGUOUS_AMPERSAND;
           }
       }
       // Ambiguos ampersand state
       //------------------------------------------------------------------
       _stateAmbiguousAmpersand(cp) {
           if (isAsciiAlphaNumeric(cp)) {
               this._flushCodePointConsumedAsCharacterReference(cp);
           }
           else {
               if (cp === CODE_POINTS.SEMICOLON) {
                   this._err(ERR.unknownNamedCharacterReference);
               }
               this._reconsumeInState(this.returnState);
           }
       }
       // Numeric character reference state
       //------------------------------------------------------------------
       _stateNumericCharacterReference(cp) {
           this.charRefCode = 0;
           if (cp === CODE_POINTS.LATIN_SMALL_X || cp === CODE_POINTS.LATIN_CAPITAL_X) {
               this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;
           }
           else {
               this.state = State.DECIMAL_CHARACTER_REFERENCE_START;
               this._stateDecimalCharacterReferenceStart(cp);
           }
       }
       // Hexademical character reference start state
       //------------------------------------------------------------------
       _stateHexademicalCharacterReferenceStart(cp) {
           if (isAsciiHexDigit(cp)) {
               this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;
               this._stateHexademicalCharacterReference(cp);
           }
           else {
               this._err(ERR.absenceOfDigitsInNumericCharacterReference);
               this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
               this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
               this._unconsume(2);
               this.state = this.returnState;
           }
       }
       // Decimal character reference start state
       //------------------------------------------------------------------
       _stateDecimalCharacterReferenceStart(cp) {
           if (isAsciiDigit(cp)) {
               this.state = State.DECIMAL_CHARACTER_REFERENCE;
               this._stateDecimalCharacterReference(cp);
           }
           else {
               this._err(ERR.absenceOfDigitsInNumericCharacterReference);
               this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
               this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
               this._reconsumeInState(this.returnState);
           }
       }
       // Hexademical character reference state
       //------------------------------------------------------------------
       _stateHexademicalCharacterReference(cp) {
           if (isAsciiUpperHexDigit(cp)) {
               this.charRefCode = this.charRefCode * 16 + cp - 0x37;
           }
           else if (isAsciiLowerHexDigit(cp)) {
               this.charRefCode = this.charRefCode * 16 + cp - 0x57;
           }
           else if (isAsciiDigit(cp)) {
               this.charRefCode = this.charRefCode * 16 + cp - 0x30;
           }
           else if (cp === CODE_POINTS.SEMICOLON) {
               this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
           }
           else {
               this._err(ERR.missingSemicolonAfterCharacterReference);
               this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
               this._stateNumericCharacterReferenceEnd();
           }
       }
       // Decimal character reference state
       //------------------------------------------------------------------
       _stateDecimalCharacterReference(cp) {
           if (isAsciiDigit(cp)) {
               this.charRefCode = this.charRefCode * 10 + cp - 0x30;
           }
           else if (cp === CODE_POINTS.SEMICOLON) {
               this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
           }
           else {
               this._err(ERR.missingSemicolonAfterCharacterReference);
               this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
               this._stateNumericCharacterReferenceEnd();
           }
       }
       // Numeric character reference end state
       //------------------------------------------------------------------
       _stateNumericCharacterReferenceEnd() {
           if (this.charRefCode === CODE_POINTS.NULL) {
               this._err(ERR.nullCharacterReference);
               this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
           }
           else if (this.charRefCode > 1114111) {
               this._err(ERR.characterReferenceOutsideUnicodeRange);
               this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
           }
           else if (isSurrogate(this.charRefCode)) {
               this._err(ERR.surrogateCharacterReference);
               this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
           }
           else if (isUndefinedCodePoint(this.charRefCode)) {
               this._err(ERR.noncharacterCharacterReference);
           }
           else if (isControlCodePoint(this.charRefCode) || this.charRefCode === CODE_POINTS.CARRIAGE_RETURN) {
               this._err(ERR.controlCharacterReference);
               const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);
               if (replacement !== undefined) {
                   this.charRefCode = replacement;
               }
           }
           this._flushCodePointConsumedAsCharacterReference(this.charRefCode);
           this._reconsumeInState(this.returnState);
       }
   }

   //Element utils
   const IMPLICIT_END_TAG_REQUIRED = new Set([TAG_ID.DD, TAG_ID.DT, TAG_ID.LI, TAG_ID.OPTGROUP, TAG_ID.OPTION, TAG_ID.P, TAG_ID.RB, TAG_ID.RP, TAG_ID.RT, TAG_ID.RTC]);
   const IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([
       ...IMPLICIT_END_TAG_REQUIRED,
       TAG_ID.CAPTION,
       TAG_ID.COLGROUP,
       TAG_ID.TBODY,
       TAG_ID.TD,
       TAG_ID.TFOOT,
       TAG_ID.TH,
       TAG_ID.THEAD,
       TAG_ID.TR,
   ]);
   const SCOPING_ELEMENT_NS = new Map([
       [TAG_ID.APPLET, NS.HTML],
       [TAG_ID.CAPTION, NS.HTML],
       [TAG_ID.HTML, NS.HTML],
       [TAG_ID.MARQUEE, NS.HTML],
       [TAG_ID.OBJECT, NS.HTML],
       [TAG_ID.TABLE, NS.HTML],
       [TAG_ID.TD, NS.HTML],
       [TAG_ID.TEMPLATE, NS.HTML],
       [TAG_ID.TH, NS.HTML],
       [TAG_ID.ANNOTATION_XML, NS.MATHML],
       [TAG_ID.MI, NS.MATHML],
       [TAG_ID.MN, NS.MATHML],
       [TAG_ID.MO, NS.MATHML],
       [TAG_ID.MS, NS.MATHML],
       [TAG_ID.MTEXT, NS.MATHML],
       [TAG_ID.DESC, NS.SVG],
       [TAG_ID.FOREIGN_OBJECT, NS.SVG],
       [TAG_ID.TITLE, NS.SVG],
   ]);
   const NAMED_HEADERS = [TAG_ID.H1, TAG_ID.H2, TAG_ID.H3, TAG_ID.H4, TAG_ID.H5, TAG_ID.H6];
   const TABLE_ROW_CONTEXT = [TAG_ID.TR, TAG_ID.TEMPLATE, TAG_ID.HTML];
   const TABLE_BODY_CONTEXT = [TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TEMPLATE, TAG_ID.HTML];
   const TABLE_CONTEXT = [TAG_ID.TABLE, TAG_ID.TEMPLATE, TAG_ID.HTML];
   const TABLE_CELLS = [TAG_ID.TD, TAG_ID.TH];
   //Stack of open elements
   class OpenElementStack {
       constructor(document, treeAdapter, handler) {
           this.treeAdapter = treeAdapter;
           this.handler = handler;
           this.items = [];
           this.tagIDs = [];
           this.stackTop = -1;
           this.tmplCount = 0;
           this.currentTagId = TAG_ID.UNKNOWN;
           this.current = document;
       }
       get currentTmplContentOrNode() {
           return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;
       }
       //Index of element
       _indexOf(element) {
           return this.items.lastIndexOf(element, this.stackTop);
       }
       //Update current element
       _isInTemplate() {
           return this.currentTagId === TAG_ID.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
       }
       _updateCurrentElement() {
           this.current = this.items[this.stackTop];
           this.currentTagId = this.tagIDs[this.stackTop];
       }
       //Mutations
       push(element, tagID) {
           this.stackTop++;
           this.items[this.stackTop] = element;
           this.current = element;
           this.tagIDs[this.stackTop] = tagID;
           this.currentTagId = tagID;
           if (this._isInTemplate()) {
               this.tmplCount++;
           }
           this.handler.onItemPush(element, tagID, true);
       }
       pop() {
           const popped = this.current;
           if (this.tmplCount > 0 && this._isInTemplate()) {
               this.tmplCount--;
           }
           this.stackTop--;
           this._updateCurrentElement();
           this.handler.onItemPop(popped, true);
       }
       replace(oldElement, newElement) {
           const idx = this._indexOf(oldElement);
           this.items[idx] = newElement;
           if (idx === this.stackTop) {
               this.current = newElement;
           }
       }
       insertAfter(referenceElement, newElement, newElementID) {
           const insertionIdx = this._indexOf(referenceElement) + 1;
           this.items.splice(insertionIdx, 0, newElement);
           this.tagIDs.splice(insertionIdx, 0, newElementID);
           this.stackTop++;
           if (insertionIdx === this.stackTop) {
               this._updateCurrentElement();
           }
           this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);
       }
       popUntilTagNamePopped(tagName) {
           let targetIdx = this.stackTop + 1;
           do {
               targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);
           } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);
           this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);
       }
       shortenToLength(idx) {
           while (this.stackTop >= idx) {
               const popped = this.current;
               if (this.tmplCount > 0 && this._isInTemplate()) {
                   this.tmplCount -= 1;
               }
               this.stackTop--;
               this._updateCurrentElement();
               this.handler.onItemPop(popped, this.stackTop < idx);
           }
       }
       popUntilElementPopped(element) {
           const idx = this._indexOf(element);
           this.shortenToLength(idx < 0 ? 0 : idx);
       }
       popUntilPopped(tagNames, targetNS) {
           const idx = this._indexOfTagNames(tagNames, targetNS);
           this.shortenToLength(idx < 0 ? 0 : idx);
       }
       popUntilNumberedHeaderPopped() {
           this.popUntilPopped(NAMED_HEADERS, NS.HTML);
       }
       popUntilTableCellPopped() {
           this.popUntilPopped(TABLE_CELLS, NS.HTML);
       }
       popAllUpToHtmlElement() {
           //NOTE: here we assume that the root <html> element is always first in the open element stack, so
           //we perform this fast stack clean up.
           this.tmplCount = 0;
           this.shortenToLength(1);
       }
       _indexOfTagNames(tagNames, namespace) {
           for (let i = this.stackTop; i >= 0; i--) {
               if (tagNames.includes(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {
                   return i;
               }
           }
           return -1;
       }
       clearBackTo(tagNames, targetNS) {
           const idx = this._indexOfTagNames(tagNames, targetNS);
           this.shortenToLength(idx + 1);
       }
       clearBackToTableContext() {
           this.clearBackTo(TABLE_CONTEXT, NS.HTML);
       }
       clearBackToTableBodyContext() {
           this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);
       }
       clearBackToTableRowContext() {
           this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);
       }
       remove(element) {
           const idx = this._indexOf(element);
           if (idx >= 0) {
               if (idx === this.stackTop) {
                   this.pop();
               }
               else {
                   this.items.splice(idx, 1);
                   this.tagIDs.splice(idx, 1);
                   this.stackTop--;
                   this._updateCurrentElement();
                   this.handler.onItemPop(element, false);
               }
           }
       }
       //Search
       tryPeekProperlyNestedBodyElement() {
           //Properly nested <body> element (should be second element in stack).
           return this.stackTop >= 1 && this.tagIDs[1] === TAG_ID.BODY ? this.items[1] : null;
       }
       contains(element) {
           return this._indexOf(element) > -1;
       }
       getCommonAncestor(element) {
           const elementIdx = this._indexOf(element) - 1;
           return elementIdx >= 0 ? this.items[elementIdx] : null;
       }
       isRootHtmlElementCurrent() {
           return this.stackTop === 0 && this.tagIDs[0] === TAG_ID.HTML;
       }
       //Element in scope
       hasInScope(tagName) {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (tn === tagName && ns === NS.HTML) {
                   return true;
               }
               if (SCOPING_ELEMENT_NS.get(tn) === ns) {
                   return false;
               }
           }
           return true;
       }
       hasNumberedHeaderInScope() {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (isNumberedHeader(tn) && ns === NS.HTML) {
                   return true;
               }
               if (SCOPING_ELEMENT_NS.get(tn) === ns) {
                   return false;
               }
           }
           return true;
       }
       hasInListItemScope(tagName) {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (tn === tagName && ns === NS.HTML) {
                   return true;
               }
               if (((tn === TAG_ID.UL || tn === TAG_ID.OL) && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {
                   return false;
               }
           }
           return true;
       }
       hasInButtonScope(tagName) {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (tn === tagName && ns === NS.HTML) {
                   return true;
               }
               if ((tn === TAG_ID.BUTTON && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {
                   return false;
               }
           }
           return true;
       }
       hasInTableScope(tagName) {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (ns !== NS.HTML) {
                   continue;
               }
               if (tn === tagName) {
                   return true;
               }
               if (tn === TAG_ID.TABLE || tn === TAG_ID.TEMPLATE || tn === TAG_ID.HTML) {
                   return false;
               }
           }
           return true;
       }
       hasTableBodyContextInTableScope() {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (ns !== NS.HTML) {
                   continue;
               }
               if (tn === TAG_ID.TBODY || tn === TAG_ID.THEAD || tn === TAG_ID.TFOOT) {
                   return true;
               }
               if (tn === TAG_ID.TABLE || tn === TAG_ID.HTML) {
                   return false;
               }
           }
           return true;
       }
       hasInSelectScope(tagName) {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (ns !== NS.HTML) {
                   continue;
               }
               if (tn === tagName) {
                   return true;
               }
               if (tn !== TAG_ID.OPTION && tn !== TAG_ID.OPTGROUP) {
                   return false;
               }
           }
           return true;
       }
       //Implied end tags
       generateImpliedEndTags() {
           while (IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {
               this.pop();
           }
       }
       generateImpliedEndTagsThoroughly() {
           while (IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
               this.pop();
           }
       }
       generateImpliedEndTagsWithExclusion(exclusionId) {
           while (this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
               this.pop();
           }
       }
   }

   //Const
   const NOAH_ARK_CAPACITY = 3;
   var EntryType;
   (function (EntryType) {
       EntryType[EntryType["Marker"] = 0] = "Marker";
       EntryType[EntryType["Element"] = 1] = "Element";
   })(EntryType || (EntryType = {}));
   const MARKER = { type: EntryType.Marker };
   //List of formatting elements
   class FormattingElementList {
       constructor(treeAdapter) {
           this.treeAdapter = treeAdapter;
           this.entries = [];
           this.bookmark = null;
       }
       //Noah Ark's condition
       //OPTIMIZATION: at first we try to find possible candidates for exclusion using
       //lightweight heuristics without thorough attributes check.
       _getNoahArkConditionCandidates(newElement, neAttrs) {
           const candidates = [];
           const neAttrsLength = neAttrs.length;
           const neTagName = this.treeAdapter.getTagName(newElement);
           const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
           for (let i = 0; i < this.entries.length; i++) {
               const entry = this.entries[i];
               if (entry.type === EntryType.Marker) {
                   break;
               }
               const { element } = entry;
               if (this.treeAdapter.getTagName(element) === neTagName &&
                   this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {
                   const elementAttrs = this.treeAdapter.getAttrList(element);
                   if (elementAttrs.length === neAttrsLength) {
                       candidates.push({ idx: i, attrs: elementAttrs });
                   }
               }
           }
           return candidates;
       }
       _ensureNoahArkCondition(newElement) {
           if (this.entries.length < NOAH_ARK_CAPACITY)
               return;
           const neAttrs = this.treeAdapter.getAttrList(newElement);
           const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);
           if (candidates.length < NOAH_ARK_CAPACITY)
               return;
           //NOTE: build attrs map for the new element, so we can perform fast lookups
           const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));
           let validCandidates = 0;
           //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met
           for (let i = 0; i < candidates.length; i++) {
               const candidate = candidates[i];
               // We know that `candidate.attrs.length === neAttrs.length`
               if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {
                   validCandidates += 1;
                   if (validCandidates >= NOAH_ARK_CAPACITY) {
                       this.entries.splice(candidate.idx, 1);
                   }
               }
           }
       }
       //Mutations
       insertMarker() {
           this.entries.unshift(MARKER);
       }
       pushElement(element, token) {
           this._ensureNoahArkCondition(element);
           this.entries.unshift({
               type: EntryType.Element,
               element,
               token,
           });
       }
       insertElementAfterBookmark(element, token) {
           const bookmarkIdx = this.entries.indexOf(this.bookmark);
           this.entries.splice(bookmarkIdx, 0, {
               type: EntryType.Element,
               element,
               token,
           });
       }
       removeEntry(entry) {
           const entryIndex = this.entries.indexOf(entry);
           if (entryIndex >= 0) {
               this.entries.splice(entryIndex, 1);
           }
       }
       clearToLastMarker() {
           const markerIdx = this.entries.indexOf(MARKER);
           if (markerIdx >= 0) {
               this.entries.splice(0, markerIdx + 1);
           }
           else {
               this.entries.length = 0;
           }
       }
       //Search
       getElementEntryInScopeWithTagName(tagName) {
           const entry = this.entries.find((entry) => entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);
           return entry && entry.type === EntryType.Element ? entry : null;
       }
       getElementEntry(element) {
           return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);
       }
   }

   var NodeType;
   (function (NodeType) {
       NodeType["Document"] = "#document";
       NodeType["DocumentFragment"] = "#document-fragment";
       NodeType["Comment"] = "#comment";
       NodeType["Text"] = "#text";
       NodeType["DocumentType"] = "#documentType";
   })(NodeType || (NodeType = {}));
   function createTextNode(value) {
       return {
           nodeName: NodeType.Text,
           value,
           parentNode: null,
       };
   }
   const defaultTreeAdapter = {
       //Node construction
       createDocument() {
           return {
               nodeName: NodeType.Document,
               mode: DOCUMENT_MODE.NO_QUIRKS,
               childNodes: [],
           };
       },
       createDocumentFragment() {
           return {
               nodeName: NodeType.DocumentFragment,
               childNodes: [],
           };
       },
       createElement(tagName, namespaceURI, attrs) {
           return {
               nodeName: tagName,
               tagName,
               attrs,
               namespaceURI,
               childNodes: [],
               parentNode: null,
           };
       },
       createCommentNode(data) {
           return {
               nodeName: NodeType.Comment,
               data,
               parentNode: null,
           };
       },
       //Tree mutation
       appendChild(parentNode, newNode) {
           parentNode.childNodes.push(newNode);
           newNode.parentNode = parentNode;
       },
       insertBefore(parentNode, newNode, referenceNode) {
           const insertionIdx = parentNode.childNodes.indexOf(referenceNode);
           parentNode.childNodes.splice(insertionIdx, 0, newNode);
           newNode.parentNode = parentNode;
       },
       setTemplateContent(templateElement, contentElement) {
           templateElement.content = contentElement;
       },
       getTemplateContent(templateElement) {
           return templateElement.content;
       },
       setDocumentType(document, name, publicId, systemId) {
           const doctypeNode = document.childNodes.find((node) => node.nodeName === NodeType.DocumentType);
           if (doctypeNode) {
               doctypeNode.name = name;
               doctypeNode.publicId = publicId;
               doctypeNode.systemId = systemId;
           }
           else {
               const node = {
                   nodeName: NodeType.DocumentType,
                   name,
                   publicId,
                   systemId,
                   parentNode: null,
               };
               defaultTreeAdapter.appendChild(document, node);
           }
       },
       setDocumentMode(document, mode) {
           document.mode = mode;
       },
       getDocumentMode(document) {
           return document.mode;
       },
       detachNode(node) {
           if (node.parentNode) {
               const idx = node.parentNode.childNodes.indexOf(node);
               node.parentNode.childNodes.splice(idx, 1);
               node.parentNode = null;
           }
       },
       insertText(parentNode, text) {
           if (parentNode.childNodes.length > 0) {
               const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
               if (defaultTreeAdapter.isTextNode(prevNode)) {
                   prevNode.value += text;
                   return;
               }
           }
           defaultTreeAdapter.appendChild(parentNode, createTextNode(text));
       },
       insertTextBefore(parentNode, text, referenceNode) {
           const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
           if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {
               prevNode.value += text;
           }
           else {
               defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);
           }
       },
       adoptAttributes(recipient, attrs) {
           const recipientAttrsMap = new Set(recipient.attrs.map((attr) => attr.name));
           for (let j = 0; j < attrs.length; j++) {
               if (!recipientAttrsMap.has(attrs[j].name)) {
                   recipient.attrs.push(attrs[j]);
               }
           }
       },
       //Tree traversing
       getFirstChild(node) {
           return node.childNodes[0];
       },
       getChildNodes(node) {
           return node.childNodes;
       },
       getParentNode(node) {
           return node.parentNode;
       },
       getAttrList(element) {
           return element.attrs;
       },
       //Node data
       getTagName(element) {
           return element.tagName;
       },
       getNamespaceURI(element) {
           return element.namespaceURI;
       },
       getTextNodeContent(textNode) {
           return textNode.value;
       },
       getCommentNodeContent(commentNode) {
           return commentNode.data;
       },
       getDocumentTypeNodeName(doctypeNode) {
           return doctypeNode.name;
       },
       getDocumentTypeNodePublicId(doctypeNode) {
           return doctypeNode.publicId;
       },
       getDocumentTypeNodeSystemId(doctypeNode) {
           return doctypeNode.systemId;
       },
       //Node types
       isTextNode(node) {
           return node.nodeName === '#text';
       },
       isCommentNode(node) {
           return node.nodeName === '#comment';
       },
       isDocumentTypeNode(node) {
           return node.nodeName === NodeType.DocumentType;
       },
       isElementNode(node) {
           return Object.prototype.hasOwnProperty.call(node, 'tagName');
       },
       // Source code location
       setNodeSourceCodeLocation(node, location) {
           node.sourceCodeLocation = location;
       },
       getNodeSourceCodeLocation(node) {
           return node.sourceCodeLocation;
       },
       updateNodeSourceCodeLocation(node, endLocation) {
           node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };
       },
   };

   //Const
   const VALID_DOCTYPE_NAME = 'html';
   const VALID_SYSTEM_ID = 'about:legacy-compat';
   const QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';
   const QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
       '+//silmaril//dtd html pro v0r11 19970101//',
       '-//as//dtd html 3.0 aswedit + extensions//',
       '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',
       '-//ietf//dtd html 2.0 level 1//',
       '-//ietf//dtd html 2.0 level 2//',
       '-//ietf//dtd html 2.0 strict level 1//',
       '-//ietf//dtd html 2.0 strict level 2//',
       '-//ietf//dtd html 2.0 strict//',
       '-//ietf//dtd html 2.0//',
       '-//ietf//dtd html 2.1e//',
       '-//ietf//dtd html 3.0//',
       '-//ietf//dtd html 3.2 final//',
       '-//ietf//dtd html 3.2//',
       '-//ietf//dtd html 3//',
       '-//ietf//dtd html level 0//',
       '-//ietf//dtd html level 1//',
       '-//ietf//dtd html level 2//',
       '-//ietf//dtd html level 3//',
       '-//ietf//dtd html strict level 0//',
       '-//ietf//dtd html strict level 1//',
       '-//ietf//dtd html strict level 2//',
       '-//ietf//dtd html strict level 3//',
       '-//ietf//dtd html strict//',
       '-//ietf//dtd html//',
       '-//metrius//dtd metrius presentational//',
       '-//microsoft//dtd internet explorer 2.0 html strict//',
       '-//microsoft//dtd internet explorer 2.0 html//',
       '-//microsoft//dtd internet explorer 2.0 tables//',
       '-//microsoft//dtd internet explorer 3.0 html strict//',
       '-//microsoft//dtd internet explorer 3.0 html//',
       '-//microsoft//dtd internet explorer 3.0 tables//',
       '-//netscape comm. corp.//dtd html//',
       '-//netscape comm. corp.//dtd strict html//',
       "-//o'reilly and associates//dtd html 2.0//",
       "-//o'reilly and associates//dtd html extended 1.0//",
       "-//o'reilly and associates//dtd html extended relaxed 1.0//",
       '-//sq//dtd html 2.0 hotmetal + extensions//',
       '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',
       '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',
       '-//spyglass//dtd html 2.0 extended//',
       '-//sun microsystems corp.//dtd hotjava html//',
       '-//sun microsystems corp.//dtd hotjava strict html//',
       '-//w3c//dtd html 3 1995-03-24//',
       '-//w3c//dtd html 3.2 draft//',
       '-//w3c//dtd html 3.2 final//',
       '-//w3c//dtd html 3.2//',
       '-//w3c//dtd html 3.2s draft//',
       '-//w3c//dtd html 4.0 frameset//',
       '-//w3c//dtd html 4.0 transitional//',
       '-//w3c//dtd html experimental 19960712//',
       '-//w3c//dtd html experimental 970421//',
       '-//w3c//dtd w3 html//',
       '-//w3o//dtd w3 html 3.0//',
       '-//webtechs//dtd mozilla html 2.0//',
       '-//webtechs//dtd mozilla html//',
   ];
   const QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
       ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,
       '-//w3c//dtd html 4.01 frameset//',
       '-//w3c//dtd html 4.01 transitional//',
   ];
   const QUIRKS_MODE_PUBLIC_IDS = new Set([
       '-//w3o//dtd w3 html strict 3.0//en//',
       '-/w3c/dtd html 4.0 transitional/en',
       'html',
   ]);
   const LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];
   const LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
       ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,
       '-//w3c//dtd html 4.01 frameset//',
       '-//w3c//dtd html 4.01 transitional//',
   ];
   //Utils
   function hasPrefix(publicId, prefixes) {
       return prefixes.some((prefix) => publicId.startsWith(prefix));
   }
   //API
   function isConforming(token) {
       return (token.name === VALID_DOCTYPE_NAME &&
           token.publicId === null &&
           (token.systemId === null || token.systemId === VALID_SYSTEM_ID));
   }
   function getDocumentMode(token) {
       if (token.name !== VALID_DOCTYPE_NAME) {
           return DOCUMENT_MODE.QUIRKS;
       }
       const { systemId } = token;
       if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
           return DOCUMENT_MODE.QUIRKS;
       }
       let { publicId } = token;
       if (publicId !== null) {
           publicId = publicId.toLowerCase();
           if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {
               return DOCUMENT_MODE.QUIRKS;
           }
           let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
           if (hasPrefix(publicId, prefixes)) {
               return DOCUMENT_MODE.QUIRKS;
           }
           prefixes =
               systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
           if (hasPrefix(publicId, prefixes)) {
               return DOCUMENT_MODE.LIMITED_QUIRKS;
           }
       }
       return DOCUMENT_MODE.NO_QUIRKS;
   }

   //MIME types
   const MIME_TYPES = {
       TEXT_HTML: 'text/html',
       APPLICATION_XML: 'application/xhtml+xml',
   };
   //Attributes
   const DEFINITION_URL_ATTR = 'definitionurl';
   const ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';
   const SVG_ATTRS_ADJUSTMENT_MAP = new Map([
       'attributeName',
       'attributeType',
       'baseFrequency',
       'baseProfile',
       'calcMode',
       'clipPathUnits',
       'diffuseConstant',
       'edgeMode',
       'filterUnits',
       'glyphRef',
       'gradientTransform',
       'gradientUnits',
       'kernelMatrix',
       'kernelUnitLength',
       'keyPoints',
       'keySplines',
       'keyTimes',
       'lengthAdjust',
       'limitingConeAngle',
       'markerHeight',
       'markerUnits',
       'markerWidth',
       'maskContentUnits',
       'maskUnits',
       'numOctaves',
       'pathLength',
       'patternContentUnits',
       'patternTransform',
       'patternUnits',
       'pointsAtX',
       'pointsAtY',
       'pointsAtZ',
       'preserveAlpha',
       'preserveAspectRatio',
       'primitiveUnits',
       'refX',
       'refY',
       'repeatCount',
       'repeatDur',
       'requiredExtensions',
       'requiredFeatures',
       'specularConstant',
       'specularExponent',
       'spreadMethod',
       'startOffset',
       'stdDeviation',
       'stitchTiles',
       'surfaceScale',
       'systemLanguage',
       'tableValues',
       'targetX',
       'targetY',
       'textLength',
       'viewBox',
       'viewTarget',
       'xChannelSelector',
       'yChannelSelector',
       'zoomAndPan',
   ].map((attr) => [attr.toLowerCase(), attr]));
   const XML_ATTRS_ADJUSTMENT_MAP = new Map([
       ['xlink:actuate', { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK }],
       ['xlink:arcrole', { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK }],
       ['xlink:href', { prefix: 'xlink', name: 'href', namespace: NS.XLINK }],
       ['xlink:role', { prefix: 'xlink', name: 'role', namespace: NS.XLINK }],
       ['xlink:show', { prefix: 'xlink', name: 'show', namespace: NS.XLINK }],
       ['xlink:title', { prefix: 'xlink', name: 'title', namespace: NS.XLINK }],
       ['xlink:type', { prefix: 'xlink', name: 'type', namespace: NS.XLINK }],
       ['xml:base', { prefix: 'xml', name: 'base', namespace: NS.XML }],
       ['xml:lang', { prefix: 'xml', name: 'lang', namespace: NS.XML }],
       ['xml:space', { prefix: 'xml', name: 'space', namespace: NS.XML }],
       ['xmlns', { prefix: '', name: 'xmlns', namespace: NS.XMLNS }],
       ['xmlns:xlink', { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }],
   ]);
   //SVG tag names adjustment map
   const SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([
       'altGlyph',
       'altGlyphDef',
       'altGlyphItem',
       'animateColor',
       'animateMotion',
       'animateTransform',
       'clipPath',
       'feBlend',
       'feColorMatrix',
       'feComponentTransfer',
       'feComposite',
       'feConvolveMatrix',
       'feDiffuseLighting',
       'feDisplacementMap',
       'feDistantLight',
       'feFlood',
       'feFuncA',
       'feFuncB',
       'feFuncG',
       'feFuncR',
       'feGaussianBlur',
       'feImage',
       'feMerge',
       'feMergeNode',
       'feMorphology',
       'feOffset',
       'fePointLight',
       'feSpecularLighting',
       'feSpotLight',
       'feTile',
       'feTurbulence',
       'foreignObject',
       'glyphRef',
       'linearGradient',
       'radialGradient',
       'textPath',
   ].map((tn) => [tn.toLowerCase(), tn]));
   //Tags that causes exit from foreign content
   const EXITS_FOREIGN_CONTENT = new Set([
       TAG_ID.B,
       TAG_ID.BIG,
       TAG_ID.BLOCKQUOTE,
       TAG_ID.BODY,
       TAG_ID.BR,
       TAG_ID.CENTER,
       TAG_ID.CODE,
       TAG_ID.DD,
       TAG_ID.DIV,
       TAG_ID.DL,
       TAG_ID.DT,
       TAG_ID.EM,
       TAG_ID.EMBED,
       TAG_ID.H1,
       TAG_ID.H2,
       TAG_ID.H3,
       TAG_ID.H4,
       TAG_ID.H5,
       TAG_ID.H6,
       TAG_ID.HEAD,
       TAG_ID.HR,
       TAG_ID.I,
       TAG_ID.IMG,
       TAG_ID.LI,
       TAG_ID.LISTING,
       TAG_ID.MENU,
       TAG_ID.META,
       TAG_ID.NOBR,
       TAG_ID.OL,
       TAG_ID.P,
       TAG_ID.PRE,
       TAG_ID.RUBY,
       TAG_ID.S,
       TAG_ID.SMALL,
       TAG_ID.SPAN,
       TAG_ID.STRONG,
       TAG_ID.STRIKE,
       TAG_ID.SUB,
       TAG_ID.SUP,
       TAG_ID.TABLE,
       TAG_ID.TT,
       TAG_ID.U,
       TAG_ID.UL,
       TAG_ID.VAR,
   ]);
   //Check exit from foreign content
   function causesExit(startTagToken) {
       const tn = startTagToken.tagID;
       const isFontWithAttrs = tn === TAG_ID.FONT &&
           startTagToken.attrs.some(({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE);
       return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);
   }
   //Token adjustments
   function adjustTokenMathMLAttrs(token) {
       for (let i = 0; i < token.attrs.length; i++) {
           if (token.attrs[i].name === DEFINITION_URL_ATTR) {
               token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
               break;
           }
       }
   }
   function adjustTokenSVGAttrs(token) {
       for (let i = 0; i < token.attrs.length; i++) {
           const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);
           if (adjustedAttrName != null) {
               token.attrs[i].name = adjustedAttrName;
           }
       }
   }
   function adjustTokenXMLAttrs(token) {
       for (let i = 0; i < token.attrs.length; i++) {
           const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);
           if (adjustedAttrEntry) {
               token.attrs[i].prefix = adjustedAttrEntry.prefix;
               token.attrs[i].name = adjustedAttrEntry.name;
               token.attrs[i].namespace = adjustedAttrEntry.namespace;
           }
       }
   }
   function adjustTokenSVGTagName(token) {
       const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);
       if (adjustedTagName != null) {
           token.tagName = adjustedTagName;
           token.tagID = getTagID(token.tagName);
       }
   }
   //Integration points
   function isMathMLTextIntegrationPoint(tn, ns) {
       return ns === NS.MATHML && (tn === TAG_ID.MI || tn === TAG_ID.MO || tn === TAG_ID.MN || tn === TAG_ID.MS || tn === TAG_ID.MTEXT);
   }
   function isHtmlIntegrationPoint(tn, ns, attrs) {
       if (ns === NS.MATHML && tn === TAG_ID.ANNOTATION_XML) {
           for (let i = 0; i < attrs.length; i++) {
               if (attrs[i].name === ATTRS.ENCODING) {
                   const value = attrs[i].value.toLowerCase();
                   return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
               }
           }
       }
       return ns === NS.SVG && (tn === TAG_ID.FOREIGN_OBJECT || tn === TAG_ID.DESC || tn === TAG_ID.TITLE);
   }
   function isIntegrationPoint(tn, ns, attrs, foreignNS) {
       return (((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) ||
           ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)));
   }

   //Misc constants
   const HIDDEN_INPUT_TYPE = 'hidden';
   //Adoption agency loops iteration count
   const AA_OUTER_LOOP_ITER = 8;
   const AA_INNER_LOOP_ITER = 3;
   //Insertion modes
   var InsertionMode;
   (function (InsertionMode) {
       InsertionMode[InsertionMode["INITIAL"] = 0] = "INITIAL";
       InsertionMode[InsertionMode["BEFORE_HTML"] = 1] = "BEFORE_HTML";
       InsertionMode[InsertionMode["BEFORE_HEAD"] = 2] = "BEFORE_HEAD";
       InsertionMode[InsertionMode["IN_HEAD"] = 3] = "IN_HEAD";
       InsertionMode[InsertionMode["IN_HEAD_NO_SCRIPT"] = 4] = "IN_HEAD_NO_SCRIPT";
       InsertionMode[InsertionMode["AFTER_HEAD"] = 5] = "AFTER_HEAD";
       InsertionMode[InsertionMode["IN_BODY"] = 6] = "IN_BODY";
       InsertionMode[InsertionMode["TEXT"] = 7] = "TEXT";
       InsertionMode[InsertionMode["IN_TABLE"] = 8] = "IN_TABLE";
       InsertionMode[InsertionMode["IN_TABLE_TEXT"] = 9] = "IN_TABLE_TEXT";
       InsertionMode[InsertionMode["IN_CAPTION"] = 10] = "IN_CAPTION";
       InsertionMode[InsertionMode["IN_COLUMN_GROUP"] = 11] = "IN_COLUMN_GROUP";
       InsertionMode[InsertionMode["IN_TABLE_BODY"] = 12] = "IN_TABLE_BODY";
       InsertionMode[InsertionMode["IN_ROW"] = 13] = "IN_ROW";
       InsertionMode[InsertionMode["IN_CELL"] = 14] = "IN_CELL";
       InsertionMode[InsertionMode["IN_SELECT"] = 15] = "IN_SELECT";
       InsertionMode[InsertionMode["IN_SELECT_IN_TABLE"] = 16] = "IN_SELECT_IN_TABLE";
       InsertionMode[InsertionMode["IN_TEMPLATE"] = 17] = "IN_TEMPLATE";
       InsertionMode[InsertionMode["AFTER_BODY"] = 18] = "AFTER_BODY";
       InsertionMode[InsertionMode["IN_FRAMESET"] = 19] = "IN_FRAMESET";
       InsertionMode[InsertionMode["AFTER_FRAMESET"] = 20] = "AFTER_FRAMESET";
       InsertionMode[InsertionMode["AFTER_AFTER_BODY"] = 21] = "AFTER_AFTER_BODY";
       InsertionMode[InsertionMode["AFTER_AFTER_FRAMESET"] = 22] = "AFTER_AFTER_FRAMESET";
   })(InsertionMode || (InsertionMode = {}));
   const BASE_LOC = {
       startLine: -1,
       startCol: -1,
       startOffset: -1,
       endLine: -1,
       endCol: -1,
       endOffset: -1,
   };
   const TABLE_STRUCTURE_TAGS = new Set([TAG_ID.TABLE, TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TR]);
   const defaultParserOptions = {
       scriptingEnabled: true,
       sourceCodeLocationInfo: false,
       treeAdapter: defaultTreeAdapter,
       onParseError: null,
   };
   //Parser
   class Parser {
       constructor(options, document, fragmentContext = null, scriptHandler = null) {
           this.fragmentContext = fragmentContext;
           this.scriptHandler = scriptHandler;
           this.currentToken = null;
           this.stopped = false;
           this.insertionMode = InsertionMode.INITIAL;
           this.originalInsertionMode = InsertionMode.INITIAL;
           this.headElement = null;
           this.formElement = null;
           /** Indicates that the current node is not an element in the HTML namespace */
           this.currentNotInHTML = false;
           /**
            * The template insertion mode stack is maintained from the left.
            * Ie. the topmost element will always have index 0.
            */
           this.tmplInsertionModeStack = [];
           this.pendingCharacterTokens = [];
           this.hasNonWhitespacePendingCharacterToken = false;
           this.framesetOk = true;
           this.skipNextNewLine = false;
           this.fosterParentingEnabled = false;
           this.options = {
               ...defaultParserOptions,
               ...options,
           };
           this.treeAdapter = this.options.treeAdapter;
           this.onParseError = this.options.onParseError;
           // Always enable location info if we report parse errors.
           if (this.onParseError) {
               this.options.sourceCodeLocationInfo = true;
           }
           this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();
           this.tokenizer = new Tokenizer(this.options, this);
           this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
           this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : TAG_ID.UNKNOWN;
           this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);
           this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);
       }
       // API
       static parse(html, options) {
           const parser = new this(options);
           parser.tokenizer.write(html, true);
           return parser.document;
       }
       static getFragmentParser(fragmentContext, options) {
           const opts = {
               ...defaultParserOptions,
               ...options,
           };
           //NOTE: use a <template> element as the fragment context if no context element was provided,
           //so we will parse in a "forgiving" manner
           fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : (fragmentContext = opts.treeAdapter.createElement(TAG_NAMES.TEMPLATE, NS.HTML, []));
           //NOTE: create a fake element which will be used as the `document` for fragment parsing.
           //This is important for jsdom, where a new `document` cannot be created. This led to
           //fragment parsing messing with the main `document`.
           const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);
           const parser = new this(opts, documentMock, fragmentContext);
           if (parser.fragmentContextID === TAG_ID.TEMPLATE) {
               parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
           }
           parser._initTokenizerForFragmentParsing();
           parser._insertFakeRootElement();
           parser._resetInsertionMode();
           parser._findFormInFragmentContext();
           return parser;
       }
       getFragment() {
           const rootElement = this.treeAdapter.getFirstChild(this.document);
           const fragment = this.treeAdapter.createDocumentFragment();
           this._adoptNodes(rootElement, fragment);
           return fragment;
       }
       //Errors
       _err(token, code, beforeToken) {
           var _a;
           if (!this.onParseError)
               return;
           const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;
           const err = {
               code,
               startLine: loc.startLine,
               startCol: loc.startCol,
               startOffset: loc.startOffset,
               endLine: beforeToken ? loc.startLine : loc.endLine,
               endCol: beforeToken ? loc.startCol : loc.endCol,
               endOffset: beforeToken ? loc.startOffset : loc.endOffset,
           };
           this.onParseError(err);
       }
       //Stack events
       onItemPush(node, tid, isTop) {
           var _a, _b;
           (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);
           if (isTop && this.openElements.stackTop > 0)
               this._setContextModes(node, tid);
       }
       onItemPop(node, isTop) {
           var _a, _b;
           if (this.options.sourceCodeLocationInfo) {
               this._setEndLocation(node, this.currentToken);
           }
           (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);
           if (isTop) {
               let current;
               let currentTagId;
               if (this.openElements.stackTop === 0 && this.fragmentContext) {
                   current = this.fragmentContext;
                   currentTagId = this.fragmentContextID;
               }
               else {
                   ({ current, currentTagId } = this.openElements);
               }
               this._setContextModes(current, currentTagId);
           }
       }
       _setContextModes(current, tid) {
           const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;
           this.currentNotInHTML = !isHTML;
           this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);
       }
       _switchToTextParsing(currentToken, nextTokenizerState) {
           this._insertElement(currentToken, NS.HTML);
           this.tokenizer.state = nextTokenizerState;
           this.originalInsertionMode = this.insertionMode;
           this.insertionMode = InsertionMode.TEXT;
       }
       switchToPlaintextParsing() {
           this.insertionMode = InsertionMode.TEXT;
           this.originalInsertionMode = InsertionMode.IN_BODY;
           this.tokenizer.state = TokenizerMode.PLAINTEXT;
       }
       //Fragment parsing
       _getAdjustedCurrentElement() {
           return this.openElements.stackTop === 0 && this.fragmentContext
               ? this.fragmentContext
               : this.openElements.current;
       }
       _findFormInFragmentContext() {
           let node = this.fragmentContext;
           while (node) {
               if (this.treeAdapter.getTagName(node) === TAG_NAMES.FORM) {
                   this.formElement = node;
                   break;
               }
               node = this.treeAdapter.getParentNode(node);
           }
       }
       _initTokenizerForFragmentParsing() {
           if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {
               return;
           }
           switch (this.fragmentContextID) {
               case TAG_ID.TITLE:
               case TAG_ID.TEXTAREA: {
                   this.tokenizer.state = TokenizerMode.RCDATA;
                   break;
               }
               case TAG_ID.STYLE:
               case TAG_ID.XMP:
               case TAG_ID.IFRAME:
               case TAG_ID.NOEMBED:
               case TAG_ID.NOFRAMES:
               case TAG_ID.NOSCRIPT: {
                   this.tokenizer.state = TokenizerMode.RAWTEXT;
                   break;
               }
               case TAG_ID.SCRIPT: {
                   this.tokenizer.state = TokenizerMode.SCRIPT_DATA;
                   break;
               }
               case TAG_ID.PLAINTEXT: {
                   this.tokenizer.state = TokenizerMode.PLAINTEXT;
                   break;
               }
               // Do nothing
           }
       }
       //Tree mutation
       _setDocumentType(token) {
           const name = token.name || '';
           const publicId = token.publicId || '';
           const systemId = token.systemId || '';
           this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
           if (token.location) {
               const documentChildren = this.treeAdapter.getChildNodes(this.document);
               const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));
               if (docTypeNode) {
                   this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);
               }
           }
       }
       _attachElementToTree(element, location) {
           if (this.options.sourceCodeLocationInfo) {
               const loc = location && {
                   ...location,
                   startTag: location,
               };
               this.treeAdapter.setNodeSourceCodeLocation(element, loc);
           }
           if (this._shouldFosterParentOnInsertion()) {
               this._fosterParentElement(element);
           }
           else {
               const parent = this.openElements.currentTmplContentOrNode;
               this.treeAdapter.appendChild(parent, element);
           }
       }
       _appendElement(token, namespaceURI) {
           const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
           this._attachElementToTree(element, token.location);
       }
       _insertElement(token, namespaceURI) {
           const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
           this._attachElementToTree(element, token.location);
           this.openElements.push(element, token.tagID);
       }
       _insertFakeElement(tagName, tagID) {
           const element = this.treeAdapter.createElement(tagName, NS.HTML, []);
           this._attachElementToTree(element, null);
           this.openElements.push(element, tagID);
       }
       _insertTemplate(token) {
           const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
           const content = this.treeAdapter.createDocumentFragment();
           this.treeAdapter.setTemplateContent(tmpl, content);
           this._attachElementToTree(tmpl, token.location);
           this.openElements.push(tmpl, token.tagID);
           if (this.options.sourceCodeLocationInfo)
               this.treeAdapter.setNodeSourceCodeLocation(content, null);
       }
       _insertFakeRootElement() {
           const element = this.treeAdapter.createElement(TAG_NAMES.HTML, NS.HTML, []);
           if (this.options.sourceCodeLocationInfo)
               this.treeAdapter.setNodeSourceCodeLocation(element, null);
           this.treeAdapter.appendChild(this.openElements.current, element);
           this.openElements.push(element, TAG_ID.HTML);
       }
       _appendCommentNode(token, parent) {
           const commentNode = this.treeAdapter.createCommentNode(token.data);
           this.treeAdapter.appendChild(parent, commentNode);
           if (this.options.sourceCodeLocationInfo) {
               this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
           }
       }
       _insertCharacters(token) {
           let parent;
           let beforeElement;
           if (this._shouldFosterParentOnInsertion()) {
               ({ parent, beforeElement } = this._findFosterParentingLocation());
               if (beforeElement) {
                   this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);
               }
               else {
                   this.treeAdapter.insertText(parent, token.chars);
               }
           }
           else {
               parent = this.openElements.currentTmplContentOrNode;
               this.treeAdapter.insertText(parent, token.chars);
           }
           if (!token.location)
               return;
           const siblings = this.treeAdapter.getChildNodes(parent);
           const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;
           const textNode = siblings[textNodeIdx - 1];
           //NOTE: if we have a location assigned by another token, then just update the end position
           const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
           if (tnLoc) {
               const { endLine, endCol, endOffset } = token.location;
               this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
           }
           else if (this.options.sourceCodeLocationInfo) {
               this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
           }
       }
       _adoptNodes(donor, recipient) {
           for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
               this.treeAdapter.detachNode(child);
               this.treeAdapter.appendChild(recipient, child);
           }
       }
       _setEndLocation(element, closingToken) {
           if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {
               const ctLoc = closingToken.location;
               const tn = this.treeAdapter.getTagName(element);
               const endLoc = 
               // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing
               // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.
               closingToken.type === TokenType.END_TAG && tn === closingToken.tagName
                   ? {
                       endTag: { ...ctLoc },
                       endLine: ctLoc.endLine,
                       endCol: ctLoc.endCol,
                       endOffset: ctLoc.endOffset,
                   }
                   : {
                       endLine: ctLoc.startLine,
                       endCol: ctLoc.startCol,
                       endOffset: ctLoc.startOffset,
                   };
               this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
           }
       }
       //Token processing
       shouldProcessStartTagTokenInForeignContent(token) {
           // Check that neither current === document, or ns === NS.HTML
           if (!this.currentNotInHTML)
               return false;
           let current;
           let currentTagId;
           if (this.openElements.stackTop === 0 && this.fragmentContext) {
               current = this.fragmentContext;
               currentTagId = this.fragmentContextID;
           }
           else {
               ({ current, currentTagId } = this.openElements);
           }
           if (token.tagID === TAG_ID.SVG &&
               this.treeAdapter.getTagName(current) === TAG_NAMES.ANNOTATION_XML &&
               this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {
               return false;
           }
           return (
           // Check that `current` is not an integration point for HTML or MathML elements.
           this.tokenizer.inForeignNode ||
               // If it _is_ an integration point, then we might have to check that it is not an HTML
               // integration point.
               ((token.tagID === TAG_ID.MGLYPH || token.tagID === TAG_ID.MALIGNMARK) &&
                   !this._isIntegrationPoint(currentTagId, current, NS.HTML)));
       }
       _processToken(token) {
           switch (token.type) {
               case TokenType.CHARACTER: {
                   this.onCharacter(token);
                   break;
               }
               case TokenType.NULL_CHARACTER: {
                   this.onNullCharacter(token);
                   break;
               }
               case TokenType.COMMENT: {
                   this.onComment(token);
                   break;
               }
               case TokenType.DOCTYPE: {
                   this.onDoctype(token);
                   break;
               }
               case TokenType.START_TAG: {
                   this._processStartTag(token);
                   break;
               }
               case TokenType.END_TAG: {
                   this.onEndTag(token);
                   break;
               }
               case TokenType.EOF: {
                   this.onEof(token);
                   break;
               }
               case TokenType.WHITESPACE_CHARACTER: {
                   this.onWhitespaceCharacter(token);
                   break;
               }
           }
       }
       //Integration points
       _isIntegrationPoint(tid, element, foreignNS) {
           const ns = this.treeAdapter.getNamespaceURI(element);
           const attrs = this.treeAdapter.getAttrList(element);
           return isIntegrationPoint(tid, ns, attrs, foreignNS);
       }
       //Active formatting elements reconstruction
       _reconstructActiveFormattingElements() {
           const listLength = this.activeFormattingElements.entries.length;
           if (listLength) {
               const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));
               const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;
               for (let i = unopenIdx; i >= 0; i--) {
                   const entry = this.activeFormattingElements.entries[i];
                   this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
                   entry.element = this.openElements.current;
               }
           }
       }
       //Close elements
       _closeTableCell() {
           this.openElements.generateImpliedEndTags();
           this.openElements.popUntilTableCellPopped();
           this.activeFormattingElements.clearToLastMarker();
           this.insertionMode = InsertionMode.IN_ROW;
       }
       _closePElement() {
           this.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.P);
           this.openElements.popUntilTagNamePopped(TAG_ID.P);
       }
       //Insertion modes
       _resetInsertionMode() {
           for (let i = this.openElements.stackTop; i >= 0; i--) {
               //Insertion mode reset map
               switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {
                   case TAG_ID.TR:
                       this.insertionMode = InsertionMode.IN_ROW;
                       return;
                   case TAG_ID.TBODY:
                   case TAG_ID.THEAD:
                   case TAG_ID.TFOOT:
                       this.insertionMode = InsertionMode.IN_TABLE_BODY;
                       return;
                   case TAG_ID.CAPTION:
                       this.insertionMode = InsertionMode.IN_CAPTION;
                       return;
                   case TAG_ID.COLGROUP:
                       this.insertionMode = InsertionMode.IN_COLUMN_GROUP;
                       return;
                   case TAG_ID.TABLE:
                       this.insertionMode = InsertionMode.IN_TABLE;
                       return;
                   case TAG_ID.BODY:
                       this.insertionMode = InsertionMode.IN_BODY;
                       return;
                   case TAG_ID.FRAMESET:
                       this.insertionMode = InsertionMode.IN_FRAMESET;
                       return;
                   case TAG_ID.SELECT:
                       this._resetInsertionModeForSelect(i);
                       return;
                   case TAG_ID.TEMPLATE:
                       this.insertionMode = this.tmplInsertionModeStack[0];
                       return;
                   case TAG_ID.HTML:
                       this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;
                       return;
                   case TAG_ID.TD:
                   case TAG_ID.TH:
                       if (i > 0) {
                           this.insertionMode = InsertionMode.IN_CELL;
                           return;
                       }
                       break;
                   case TAG_ID.HEAD:
                       if (i > 0) {
                           this.insertionMode = InsertionMode.IN_HEAD;
                           return;
                       }
                       break;
               }
           }
           this.insertionMode = InsertionMode.IN_BODY;
       }
       _resetInsertionModeForSelect(selectIdx) {
           if (selectIdx > 0) {
               for (let i = selectIdx - 1; i > 0; i--) {
                   const tn = this.openElements.tagIDs[i];
                   if (tn === TAG_ID.TEMPLATE) {
                       break;
                   }
                   else if (tn === TAG_ID.TABLE) {
                       this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;
                       return;
                   }
               }
           }
           this.insertionMode = InsertionMode.IN_SELECT;
       }
       //Foster parenting
       _isElementCausesFosterParenting(tn) {
           return TABLE_STRUCTURE_TAGS.has(tn);
       }
       _shouldFosterParentOnInsertion() {
           return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);
       }
       _findFosterParentingLocation() {
           for (let i = this.openElements.stackTop; i >= 0; i--) {
               const openElement = this.openElements.items[i];
               switch (this.openElements.tagIDs[i]) {
                   case TAG_ID.TEMPLATE:
                       if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {
                           return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };
                       }
                       break;
                   case TAG_ID.TABLE: {
                       const parent = this.treeAdapter.getParentNode(openElement);
                       if (parent) {
                           return { parent, beforeElement: openElement };
                       }
                       return { parent: this.openElements.items[i - 1], beforeElement: null };
                   }
                   // Do nothing
               }
           }
           return { parent: this.openElements.items[0], beforeElement: null };
       }
       _fosterParentElement(element) {
           const location = this._findFosterParentingLocation();
           if (location.beforeElement) {
               this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
           }
           else {
               this.treeAdapter.appendChild(location.parent, element);
           }
       }
       //Special elements
       _isSpecialElement(element, id) {
           const ns = this.treeAdapter.getNamespaceURI(element);
           return SPECIAL_ELEMENTS[ns].has(id);
       }
       onCharacter(token) {
           this.skipNextNewLine = false;
           if (this.tokenizer.inForeignNode) {
               characterInForeignContent(this, token);
               return;
           }
           switch (this.insertionMode) {
               case InsertionMode.INITIAL:
                   tokenInInitialMode(this, token);
                   break;
               case InsertionMode.BEFORE_HTML:
                   tokenBeforeHtml(this, token);
                   break;
               case InsertionMode.BEFORE_HEAD:
                   tokenBeforeHead(this, token);
                   break;
               case InsertionMode.IN_HEAD:
                   tokenInHead(this, token);
                   break;
               case InsertionMode.IN_HEAD_NO_SCRIPT:
                   tokenInHeadNoScript(this, token);
                   break;
               case InsertionMode.AFTER_HEAD:
                   tokenAfterHead(this, token);
                   break;
               case InsertionMode.IN_BODY:
               case InsertionMode.IN_CAPTION:
               case InsertionMode.IN_CELL:
               case InsertionMode.IN_TEMPLATE:
                   characterInBody(this, token);
                   break;
               case InsertionMode.TEXT:
               case InsertionMode.IN_SELECT:
               case InsertionMode.IN_SELECT_IN_TABLE:
                   this._insertCharacters(token);
                   break;
               case InsertionMode.IN_TABLE:
               case InsertionMode.IN_TABLE_BODY:
               case InsertionMode.IN_ROW:
                   characterInTable(this, token);
                   break;
               case InsertionMode.IN_TABLE_TEXT:
                   characterInTableText(this, token);
                   break;
               case InsertionMode.IN_COLUMN_GROUP:
                   tokenInColumnGroup(this, token);
                   break;
               case InsertionMode.AFTER_BODY:
                   tokenAfterBody(this, token);
                   break;
               case InsertionMode.AFTER_AFTER_BODY:
                   tokenAfterAfterBody(this, token);
                   break;
               // Do nothing
           }
       }
       onNullCharacter(token) {
           this.skipNextNewLine = false;
           if (this.tokenizer.inForeignNode) {
               nullCharacterInForeignContent(this, token);
               return;
           }
           switch (this.insertionMode) {
               case InsertionMode.INITIAL:
                   tokenInInitialMode(this, token);
                   break;
               case InsertionMode.BEFORE_HTML:
                   tokenBeforeHtml(this, token);
                   break;
               case InsertionMode.BEFORE_HEAD:
                   tokenBeforeHead(this, token);
                   break;
               case InsertionMode.IN_HEAD:
                   tokenInHead(this, token);
                   break;
               case InsertionMode.IN_HEAD_NO_SCRIPT:
                   tokenInHeadNoScript(this, token);
                   break;
               case InsertionMode.AFTER_HEAD:
                   tokenAfterHead(this, token);
                   break;
               case InsertionMode.TEXT:
                   this._insertCharacters(token);
                   break;
               case InsertionMode.IN_TABLE:
               case InsertionMode.IN_TABLE_BODY:
               case InsertionMode.IN_ROW:
                   characterInTable(this, token);
                   break;
               case InsertionMode.IN_COLUMN_GROUP:
                   tokenInColumnGroup(this, token);
                   break;
               case InsertionMode.AFTER_BODY:
                   tokenAfterBody(this, token);
                   break;
               case InsertionMode.AFTER_AFTER_BODY:
                   tokenAfterAfterBody(this, token);
                   break;
               // Do nothing
           }
       }
       onComment(token) {
           this.skipNextNewLine = false;
           if (this.currentNotInHTML) {
               appendComment(this, token);
               return;
           }
           switch (this.insertionMode) {
               case InsertionMode.INITIAL:
               case InsertionMode.BEFORE_HTML:
               case InsertionMode.BEFORE_HEAD:
               case InsertionMode.IN_HEAD:
               case InsertionMode.IN_HEAD_NO_SCRIPT:
               case InsertionMode.AFTER_HEAD:
               case InsertionMode.IN_BODY:
               case InsertionMode.IN_TABLE:
               case InsertionMode.IN_CAPTION:
               case InsertionMode.IN_COLUMN_GROUP:
               case InsertionMode.IN_TABLE_BODY:
               case InsertionMode.IN_ROW:
               case InsertionMode.IN_CELL:
               case InsertionMode.IN_SELECT:
               case InsertionMode.IN_SELECT_IN_TABLE:
               case InsertionMode.IN_TEMPLATE:
               case InsertionMode.IN_FRAMESET:
               case InsertionMode.AFTER_FRAMESET:
                   appendComment(this, token);
                   break;
               case InsertionMode.IN_TABLE_TEXT:
                   tokenInTableText(this, token);
                   break;
               case InsertionMode.AFTER_BODY:
                   appendCommentToRootHtmlElement(this, token);
                   break;
               case InsertionMode.AFTER_AFTER_BODY:
               case InsertionMode.AFTER_AFTER_FRAMESET:
                   appendCommentToDocument(this, token);
                   break;
               // Do nothing
           }
       }
       onDoctype(token) {
           this.skipNextNewLine = false;
           switch (this.insertionMode) {
               case InsertionMode.INITIAL:
                   doctypeInInitialMode(this, token);
                   break;
               case InsertionMode.BEFORE_HEAD:
               case InsertionMode.IN_HEAD:
               case InsertionMode.IN_HEAD_NO_SCRIPT:
               case InsertionMode.AFTER_HEAD:
                   this._err(token, ERR.misplacedDoctype);
                   break;
               case InsertionMode.IN_TABLE_TEXT:
                   tokenInTableText(this, token);
                   break;
               // Do nothing
           }
       }
       onStartTag(token) {
           this.skipNextNewLine = false;
           this.currentToken = token;
           this._processStartTag(token);
           if (token.selfClosing && !token.ackSelfClosing) {
               this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
           }
       }
       /**
        * Processes a given start tag.
        *
        * `onStartTag` checks if a self-closing tag was recognized. When a token
        * is moved inbetween multiple insertion modes, this check for self-closing
        * could lead to false positives. To avoid this, `_processStartTag` is used
        * for nested calls.
        *
        * @param token The token to process.
        */
       _processStartTag(token) {
           if (this.shouldProcessStartTagTokenInForeignContent(token)) {
               startTagInForeignContent(this, token);
           }
           else {
               this._startTagOutsideForeignContent(token);
           }
       }
       _startTagOutsideForeignContent(token) {
           switch (this.insertionMode) {
               case InsertionMode.INITIAL:
                   tokenInInitialMode(this, token);
                   break;
               case InsertionMode.BEFORE_HTML:
                   startTagBeforeHtml(this, token);
                   break;
               case InsertionMode.BEFORE_HEAD:
                   startTagBeforeHead(this, token);
                   break;
               case InsertionMode.IN_HEAD:
                   startTagInHead(this, token);
                   break;
               case InsertionMode.IN_HEAD_NO_SCRIPT:
                   startTagInHeadNoScript(this, token);
                   break;
               case InsertionMode.AFTER_HEAD:
                   startTagAfterHead(this, token);
                   break;
               case InsertionMode.IN_BODY:
                   startTagInBody(this, token);
                   break;
               case InsertionMode.IN_TABLE:
                   startTagInTable(this, token);
                   break;
               case InsertionMode.IN_TABLE_TEXT:
                   tokenInTableText(this, token);
                   break;
               case InsertionMode.IN_CAPTION:
                   startTagInCaption(this, token);
                   break;
               case InsertionMode.IN_COLUMN_GROUP:
                   startTagInColumnGroup(this, token);
                   break;
               case InsertionMode.IN_TABLE_BODY:
                   startTagInTableBody(this, token);
                   break;
               case InsertionMode.IN_ROW:
                   startTagInRow(this, token);
                   break;
               case InsertionMode.IN_CELL:
                   startTagInCell(this, token);
                   break;
               case InsertionMode.IN_SELECT:
                   startTagInSelect(this, token);
                   break;
               case InsertionMode.IN_SELECT_IN_TABLE:
                   startTagInSelectInTable(this, token);
                   break;
               case InsertionMode.IN_TEMPLATE:
                   startTagInTemplate(this, token);
                   break;
               case InsertionMode.AFTER_BODY:
                   startTagAfterBody(this, token);
                   break;
               case InsertionMode.IN_FRAMESET:
                   startTagInFrameset(this, token);
                   break;
               case InsertionMode.AFTER_FRAMESET:
                   startTagAfterFrameset(this, token);
                   break;
               case InsertionMode.AFTER_AFTER_BODY:
                   startTagAfterAfterBody(this, token);
                   break;
               case InsertionMode.AFTER_AFTER_FRAMESET:
                   startTagAfterAfterFrameset(this, token);
                   break;
               // Do nothing
           }
       }
       onEndTag(token) {
           this.skipNextNewLine = false;
           this.currentToken = token;
           if (this.currentNotInHTML) {
               endTagInForeignContent(this, token);
           }
           else {
               this._endTagOutsideForeignContent(token);
           }
       }
       _endTagOutsideForeignContent(token) {
           switch (this.insertionMode) {
               case InsertionMode.INITIAL:
                   tokenInInitialMode(this, token);
                   break;
               case InsertionMode.BEFORE_HTML:
                   endTagBeforeHtml(this, token);
                   break;
               case InsertionMode.BEFORE_HEAD:
                   endTagBeforeHead(this, token);
                   break;
               case InsertionMode.IN_HEAD:
                   endTagInHead(this, token);
                   break;
               case InsertionMode.IN_HEAD_NO_SCRIPT:
                   endTagInHeadNoScript(this, token);
                   break;
               case InsertionMode.AFTER_HEAD:
                   endTagAfterHead(this, token);
                   break;
               case InsertionMode.IN_BODY:
                   endTagInBody(this, token);
                   break;
               case InsertionMode.TEXT:
                   endTagInText(this, token);
                   break;
               case InsertionMode.IN_TABLE:
                   endTagInTable(this, token);
                   break;
               case InsertionMode.IN_TABLE_TEXT:
                   tokenInTableText(this, token);
                   break;
               case InsertionMode.IN_CAPTION:
                   endTagInCaption(this, token);
                   break;
               case InsertionMode.IN_COLUMN_GROUP:
                   endTagInColumnGroup(this, token);
                   break;
               case InsertionMode.IN_TABLE_BODY:
                   endTagInTableBody(this, token);
                   break;
               case InsertionMode.IN_ROW:
                   endTagInRow(this, token);
                   break;
               case InsertionMode.IN_CELL:
                   endTagInCell(this, token);
                   break;
               case InsertionMode.IN_SELECT:
                   endTagInSelect(this, token);
                   break;
               case InsertionMode.IN_SELECT_IN_TABLE:
                   endTagInSelectInTable(this, token);
                   break;
               case InsertionMode.IN_TEMPLATE:
                   endTagInTemplate(this, token);
                   break;
               case InsertionMode.AFTER_BODY:
                   endTagAfterBody(this, token);
                   break;
               case InsertionMode.IN_FRAMESET:
                   endTagInFrameset(this, token);
                   break;
               case InsertionMode.AFTER_FRAMESET:
                   endTagAfterFrameset(this, token);
                   break;
               case InsertionMode.AFTER_AFTER_BODY:
                   tokenAfterAfterBody(this, token);
                   break;
               // Do nothing
           }
       }
       onEof(token) {
           switch (this.insertionMode) {
               case InsertionMode.INITIAL:
                   tokenInInitialMode(this, token);
                   break;
               case InsertionMode.BEFORE_HTML:
                   tokenBeforeHtml(this, token);
                   break;
               case InsertionMode.BEFORE_HEAD:
                   tokenBeforeHead(this, token);
                   break;
               case InsertionMode.IN_HEAD:
                   tokenInHead(this, token);
                   break;
               case InsertionMode.IN_HEAD_NO_SCRIPT:
                   tokenInHeadNoScript(this, token);
                   break;
               case InsertionMode.AFTER_HEAD:
                   tokenAfterHead(this, token);
                   break;
               case InsertionMode.IN_BODY:
               case InsertionMode.IN_TABLE:
               case InsertionMode.IN_CAPTION:
               case InsertionMode.IN_COLUMN_GROUP:
               case InsertionMode.IN_TABLE_BODY:
               case InsertionMode.IN_ROW:
               case InsertionMode.IN_CELL:
               case InsertionMode.IN_SELECT:
               case InsertionMode.IN_SELECT_IN_TABLE:
                   eofInBody(this, token);
                   break;
               case InsertionMode.TEXT:
                   eofInText(this, token);
                   break;
               case InsertionMode.IN_TABLE_TEXT:
                   tokenInTableText(this, token);
                   break;
               case InsertionMode.IN_TEMPLATE:
                   eofInTemplate(this, token);
                   break;
               case InsertionMode.AFTER_BODY:
               case InsertionMode.IN_FRAMESET:
               case InsertionMode.AFTER_FRAMESET:
               case InsertionMode.AFTER_AFTER_BODY:
               case InsertionMode.AFTER_AFTER_FRAMESET:
                   stopParsing(this, token);
                   break;
               // Do nothing
           }
       }
       onWhitespaceCharacter(token) {
           if (this.skipNextNewLine) {
               this.skipNextNewLine = false;
               if (token.chars.charCodeAt(0) === CODE_POINTS.LINE_FEED) {
                   if (token.chars.length === 1) {
                       return;
                   }
                   token.chars = token.chars.substr(1);
               }
           }
           if (this.tokenizer.inForeignNode) {
               this._insertCharacters(token);
               return;
           }
           switch (this.insertionMode) {
               case InsertionMode.IN_HEAD:
               case InsertionMode.IN_HEAD_NO_SCRIPT:
               case InsertionMode.AFTER_HEAD:
               case InsertionMode.TEXT:
               case InsertionMode.IN_COLUMN_GROUP:
               case InsertionMode.IN_SELECT:
               case InsertionMode.IN_SELECT_IN_TABLE:
               case InsertionMode.IN_FRAMESET:
               case InsertionMode.AFTER_FRAMESET:
                   this._insertCharacters(token);
                   break;
               case InsertionMode.IN_BODY:
               case InsertionMode.IN_CAPTION:
               case InsertionMode.IN_CELL:
               case InsertionMode.IN_TEMPLATE:
               case InsertionMode.AFTER_BODY:
               case InsertionMode.AFTER_AFTER_BODY:
               case InsertionMode.AFTER_AFTER_FRAMESET:
                   whitespaceCharacterInBody(this, token);
                   break;
               case InsertionMode.IN_TABLE:
               case InsertionMode.IN_TABLE_BODY:
               case InsertionMode.IN_ROW:
                   characterInTable(this, token);
                   break;
               case InsertionMode.IN_TABLE_TEXT:
                   whitespaceCharacterInTableText(this, token);
                   break;
               // Do nothing
           }
       }
   }
   //Adoption agency algorithm
   //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)
   //------------------------------------------------------------------
   //Steps 5-8 of the algorithm
   function aaObtainFormattingElementEntry(p, token) {
       let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
       if (formattingElementEntry) {
           if (!p.openElements.contains(formattingElementEntry.element)) {
               p.activeFormattingElements.removeEntry(formattingElementEntry);
               formattingElementEntry = null;
           }
           else if (!p.openElements.hasInScope(token.tagID)) {
               formattingElementEntry = null;
           }
       }
       else {
           genericEndTagInBody(p, token);
       }
       return formattingElementEntry;
   }
   //Steps 9 and 10 of the algorithm
   function aaObtainFurthestBlock(p, formattingElementEntry) {
       let furthestBlock = null;
       let idx = p.openElements.stackTop;
       for (; idx >= 0; idx--) {
           const element = p.openElements.items[idx];
           if (element === formattingElementEntry.element) {
               break;
           }
           if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {
               furthestBlock = element;
           }
       }
       if (!furthestBlock) {
           p.openElements.shortenToLength(idx < 0 ? 0 : idx);
           p.activeFormattingElements.removeEntry(formattingElementEntry);
       }
       return furthestBlock;
   }
   //Step 13 of the algorithm
   function aaInnerLoop(p, furthestBlock, formattingElement) {
       let lastElement = furthestBlock;
       let nextElement = p.openElements.getCommonAncestor(furthestBlock);
       for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
           //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)
           nextElement = p.openElements.getCommonAncestor(element);
           const elementEntry = p.activeFormattingElements.getElementEntry(element);
           const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
           const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
           if (shouldRemoveFromOpenElements) {
               if (counterOverflow) {
                   p.activeFormattingElements.removeEntry(elementEntry);
               }
               p.openElements.remove(element);
           }
           else {
               element = aaRecreateElementFromEntry(p, elementEntry);
               if (lastElement === furthestBlock) {
                   p.activeFormattingElements.bookmark = elementEntry;
               }
               p.treeAdapter.detachNode(lastElement);
               p.treeAdapter.appendChild(element, lastElement);
               lastElement = element;
           }
       }
       return lastElement;
   }
   //Step 13.7 of the algorithm
   function aaRecreateElementFromEntry(p, elementEntry) {
       const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
       const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
       p.openElements.replace(elementEntry.element, newElement);
       elementEntry.element = newElement;
       return newElement;
   }
   //Step 14 of the algorithm
   function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
       const tn = p.treeAdapter.getTagName(commonAncestor);
       const tid = getTagID(tn);
       if (p._isElementCausesFosterParenting(tid)) {
           p._fosterParentElement(lastElement);
       }
       else {
           const ns = p.treeAdapter.getNamespaceURI(commonAncestor);
           if (tid === TAG_ID.TEMPLATE && ns === NS.HTML) {
               commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
           }
           p.treeAdapter.appendChild(commonAncestor, lastElement);
       }
   }
   //Steps 15-19 of the algorithm
   function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
       const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
       const { token } = formattingElementEntry;
       const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
       p._adoptNodes(furthestBlock, newElement);
       p.treeAdapter.appendChild(furthestBlock, newElement);
       p.activeFormattingElements.insertElementAfterBookmark(newElement, token);
       p.activeFormattingElements.removeEntry(formattingElementEntry);
       p.openElements.remove(formattingElementEntry.element);
       p.openElements.insertAfter(furthestBlock, newElement, token.tagID);
   }
   //Algorithm entry point
   function callAdoptionAgency(p, token) {
       for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {
           const formattingElementEntry = aaObtainFormattingElementEntry(p, token);
           if (!formattingElementEntry) {
               break;
           }
           const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
           if (!furthestBlock) {
               break;
           }
           p.activeFormattingElements.bookmark = formattingElementEntry;
           const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
           const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
           p.treeAdapter.detachNode(lastElement);
           if (commonAncestor)
               aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
           aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
       }
   }
   //Generic token handlers
   //------------------------------------------------------------------
   function appendComment(p, token) {
       p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);
   }
   function appendCommentToRootHtmlElement(p, token) {
       p._appendCommentNode(token, p.openElements.items[0]);
   }
   function appendCommentToDocument(p, token) {
       p._appendCommentNode(token, p.document);
   }
   function stopParsing(p, token) {
       p.stopped = true;
       // NOTE: Set end locations for elements that remain on the open element stack.
       if (token.location) {
           // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.
           // This is a problem, as we might overwrite their end position here.
           const target = p.fragmentContext ? 0 : 2;
           for (let i = p.openElements.stackTop; i >= target; i--) {
               p._setEndLocation(p.openElements.items[i], token);
           }
           // Handle `html` and `body`
           if (!p.fragmentContext && p.openElements.stackTop >= 0) {
               const htmlElement = p.openElements.items[0];
               const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);
               if (htmlLocation && !htmlLocation.endTag) {
                   p._setEndLocation(htmlElement, token);
                   if (p.openElements.stackTop >= 1) {
                       const bodyElement = p.openElements.items[1];
                       const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);
                       if (bodyLocation && !bodyLocation.endTag) {
                           p._setEndLocation(bodyElement, token);
                       }
                   }
               }
           }
       }
   }
   // The "initial" insertion mode
   //------------------------------------------------------------------
   function doctypeInInitialMode(p, token) {
       p._setDocumentType(token);
       const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : getDocumentMode(token);
       if (!isConforming(token)) {
           p._err(token, ERR.nonConformingDoctype);
       }
       p.treeAdapter.setDocumentMode(p.document, mode);
       p.insertionMode = InsertionMode.BEFORE_HTML;
   }
   function tokenInInitialMode(p, token) {
       p._err(token, ERR.missingDoctype, true);
       p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);
       p.insertionMode = InsertionMode.BEFORE_HTML;
       p._processToken(token);
   }
   // The "before html" insertion mode
   //------------------------------------------------------------------
   function startTagBeforeHtml(p, token) {
       if (token.tagID === TAG_ID.HTML) {
           p._insertElement(token, NS.HTML);
           p.insertionMode = InsertionMode.BEFORE_HEAD;
       }
       else {
           tokenBeforeHtml(p, token);
       }
   }
   function endTagBeforeHtml(p, token) {
       const tn = token.tagID;
       if (tn === TAG_ID.HTML || tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.BR) {
           tokenBeforeHtml(p, token);
       }
   }
   function tokenBeforeHtml(p, token) {
       p._insertFakeRootElement();
       p.insertionMode = InsertionMode.BEFORE_HEAD;
       p._processToken(token);
   }
   // The "before head" insertion mode
   //------------------------------------------------------------------
   function startTagBeforeHead(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.HEAD: {
               p._insertElement(token, NS.HTML);
               p.headElement = p.openElements.current;
               p.insertionMode = InsertionMode.IN_HEAD;
               break;
           }
           default: {
               tokenBeforeHead(p, token);
           }
       }
   }
   function endTagBeforeHead(p, token) {
       const tn = token.tagID;
       if (tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.HTML || tn === TAG_ID.BR) {
           tokenBeforeHead(p, token);
       }
       else {
           p._err(token, ERR.endTagWithoutMatchingOpenElement);
       }
   }
   function tokenBeforeHead(p, token) {
       p._insertFakeElement(TAG_NAMES.HEAD, TAG_ID.HEAD);
       p.headElement = p.openElements.current;
       p.insertionMode = InsertionMode.IN_HEAD;
       p._processToken(token);
   }
   // The "in head" insertion mode
   //------------------------------------------------------------------
   function startTagInHead(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.BASE:
           case TAG_ID.BASEFONT:
           case TAG_ID.BGSOUND:
           case TAG_ID.LINK:
           case TAG_ID.META: {
               p._appendElement(token, NS.HTML);
               token.ackSelfClosing = true;
               break;
           }
           case TAG_ID.TITLE: {
               p._switchToTextParsing(token, TokenizerMode.RCDATA);
               break;
           }
           case TAG_ID.NOSCRIPT: {
               if (p.options.scriptingEnabled) {
                   p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
               }
               else {
                   p._insertElement(token, NS.HTML);
                   p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;
               }
               break;
           }
           case TAG_ID.NOFRAMES:
           case TAG_ID.STYLE: {
               p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
               break;
           }
           case TAG_ID.SCRIPT: {
               p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);
               break;
           }
           case TAG_ID.TEMPLATE: {
               p._insertTemplate(token);
               p.activeFormattingElements.insertMarker();
               p.framesetOk = false;
               p.insertionMode = InsertionMode.IN_TEMPLATE;
               p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
               break;
           }
           case TAG_ID.HEAD: {
               p._err(token, ERR.misplacedStartTagForHeadElement);
               break;
           }
           default: {
               tokenInHead(p, token);
           }
       }
   }
   function endTagInHead(p, token) {
       switch (token.tagID) {
           case TAG_ID.HEAD: {
               p.openElements.pop();
               p.insertionMode = InsertionMode.AFTER_HEAD;
               break;
           }
           case TAG_ID.BODY:
           case TAG_ID.BR:
           case TAG_ID.HTML: {
               tokenInHead(p, token);
               break;
           }
           case TAG_ID.TEMPLATE: {
               if (p.openElements.tmplCount > 0) {
                   p.openElements.generateImpliedEndTagsThoroughly();
                   if (p.openElements.currentTagId !== TAG_ID.TEMPLATE) {
                       p._err(token, ERR.closingOfElementWithOpenChildElements);
                   }
                   p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
                   p.activeFormattingElements.clearToLastMarker();
                   p.tmplInsertionModeStack.shift();
                   p._resetInsertionMode();
               }
               else {
                   p._err(token, ERR.endTagWithoutMatchingOpenElement);
               }
               break;
           }
           default: {
               p._err(token, ERR.endTagWithoutMatchingOpenElement);
           }
       }
   }
   function tokenInHead(p, token) {
       p.openElements.pop();
       p.insertionMode = InsertionMode.AFTER_HEAD;
       p._processToken(token);
   }
   // The "in head no script" insertion mode
   //------------------------------------------------------------------
   function startTagInHeadNoScript(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.BASEFONT:
           case TAG_ID.BGSOUND:
           case TAG_ID.HEAD:
           case TAG_ID.LINK:
           case TAG_ID.META:
           case TAG_ID.NOFRAMES:
           case TAG_ID.STYLE: {
               startTagInHead(p, token);
               break;
           }
           case TAG_ID.NOSCRIPT: {
               p._err(token, ERR.nestedNoscriptInHead);
               break;
           }
           default: {
               tokenInHeadNoScript(p, token);
           }
       }
   }
   function endTagInHeadNoScript(p, token) {
       switch (token.tagID) {
           case TAG_ID.NOSCRIPT: {
               p.openElements.pop();
               p.insertionMode = InsertionMode.IN_HEAD;
               break;
           }
           case TAG_ID.BR: {
               tokenInHeadNoScript(p, token);
               break;
           }
           default: {
               p._err(token, ERR.endTagWithoutMatchingOpenElement);
           }
       }
   }
   function tokenInHeadNoScript(p, token) {
       const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;
       p._err(token, errCode);
       p.openElements.pop();
       p.insertionMode = InsertionMode.IN_HEAD;
       p._processToken(token);
   }
   // The "after head" insertion mode
   //------------------------------------------------------------------
   function startTagAfterHead(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.BODY: {
               p._insertElement(token, NS.HTML);
               p.framesetOk = false;
               p.insertionMode = InsertionMode.IN_BODY;
               break;
           }
           case TAG_ID.FRAMESET: {
               p._insertElement(token, NS.HTML);
               p.insertionMode = InsertionMode.IN_FRAMESET;
               break;
           }
           case TAG_ID.BASE:
           case TAG_ID.BASEFONT:
           case TAG_ID.BGSOUND:
           case TAG_ID.LINK:
           case TAG_ID.META:
           case TAG_ID.NOFRAMES:
           case TAG_ID.SCRIPT:
           case TAG_ID.STYLE:
           case TAG_ID.TEMPLATE:
           case TAG_ID.TITLE: {
               p._err(token, ERR.abandonedHeadElementChild);
               p.openElements.push(p.headElement, TAG_ID.HEAD);
               startTagInHead(p, token);
               p.openElements.remove(p.headElement);
               break;
           }
           case TAG_ID.HEAD: {
               p._err(token, ERR.misplacedStartTagForHeadElement);
               break;
           }
           default: {
               tokenAfterHead(p, token);
           }
       }
   }
   function endTagAfterHead(p, token) {
       switch (token.tagID) {
           case TAG_ID.BODY:
           case TAG_ID.HTML:
           case TAG_ID.BR: {
               tokenAfterHead(p, token);
               break;
           }
           case TAG_ID.TEMPLATE: {
               endTagInHead(p, token);
               break;
           }
           default: {
               p._err(token, ERR.endTagWithoutMatchingOpenElement);
           }
       }
   }
   function tokenAfterHead(p, token) {
       p._insertFakeElement(TAG_NAMES.BODY, TAG_ID.BODY);
       p.insertionMode = InsertionMode.IN_BODY;
       modeInBody(p, token);
   }
   // The "in body" insertion mode
   //------------------------------------------------------------------
   function modeInBody(p, token) {
       switch (token.type) {
           case TokenType.CHARACTER: {
               characterInBody(p, token);
               break;
           }
           case TokenType.WHITESPACE_CHARACTER: {
               whitespaceCharacterInBody(p, token);
               break;
           }
           case TokenType.COMMENT: {
               appendComment(p, token);
               break;
           }
           case TokenType.START_TAG: {
               startTagInBody(p, token);
               break;
           }
           case TokenType.END_TAG: {
               endTagInBody(p, token);
               break;
           }
           case TokenType.EOF: {
               eofInBody(p, token);
               break;
           }
           // Do nothing
       }
   }
   function whitespaceCharacterInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._insertCharacters(token);
   }
   function characterInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._insertCharacters(token);
       p.framesetOk = false;
   }
   function htmlStartTagInBody(p, token) {
       if (p.openElements.tmplCount === 0) {
           p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
       }
   }
   function bodyStartTagInBody(p, token) {
       const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
       if (bodyElement && p.openElements.tmplCount === 0) {
           p.framesetOk = false;
           p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
       }
   }
   function framesetStartTagInBody(p, token) {
       const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
       if (p.framesetOk && bodyElement) {
           p.treeAdapter.detachNode(bodyElement);
           p.openElements.popAllUpToHtmlElement();
           p._insertElement(token, NS.HTML);
           p.insertionMode = InsertionMode.IN_FRAMESET;
       }
   }
   function addressStartTagInBody(p, token) {
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._insertElement(token, NS.HTML);
   }
   function numberedHeaderStartTagInBody(p, token) {
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       if (isNumberedHeader(p.openElements.currentTagId)) {
           p.openElements.pop();
       }
       p._insertElement(token, NS.HTML);
   }
   function preStartTagInBody(p, token) {
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._insertElement(token, NS.HTML);
       //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
       //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)
       p.skipNextNewLine = true;
       p.framesetOk = false;
   }
   function formStartTagInBody(p, token) {
       const inTemplate = p.openElements.tmplCount > 0;
       if (!p.formElement || inTemplate) {
           if (p.openElements.hasInButtonScope(TAG_ID.P)) {
               p._closePElement();
           }
           p._insertElement(token, NS.HTML);
           if (!inTemplate) {
               p.formElement = p.openElements.current;
           }
       }
   }
   function listItemStartTagInBody(p, token) {
       p.framesetOk = false;
       const tn = token.tagID;
       for (let i = p.openElements.stackTop; i >= 0; i--) {
           const elementId = p.openElements.tagIDs[i];
           if ((tn === TAG_ID.LI && elementId === TAG_ID.LI) ||
               ((tn === TAG_ID.DD || tn === TAG_ID.DT) && (elementId === TAG_ID.DD || elementId === TAG_ID.DT))) {
               p.openElements.generateImpliedEndTagsWithExclusion(elementId);
               p.openElements.popUntilTagNamePopped(elementId);
               break;
           }
           if (elementId !== TAG_ID.ADDRESS &&
               elementId !== TAG_ID.DIV &&
               elementId !== TAG_ID.P &&
               p._isSpecialElement(p.openElements.items[i], elementId)) {
               break;
           }
       }
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._insertElement(token, NS.HTML);
   }
   function plaintextStartTagInBody(p, token) {
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._insertElement(token, NS.HTML);
       p.tokenizer.state = TokenizerMode.PLAINTEXT;
   }
   function buttonStartTagInBody(p, token) {
       if (p.openElements.hasInScope(TAG_ID.BUTTON)) {
           p.openElements.generateImpliedEndTags();
           p.openElements.popUntilTagNamePopped(TAG_ID.BUTTON);
       }
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
       p.framesetOk = false;
   }
   function aStartTagInBody(p, token) {
       const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TAG_NAMES.A);
       if (activeElementEntry) {
           callAdoptionAgency(p, token);
           p.openElements.remove(activeElementEntry.element);
           p.activeFormattingElements.removeEntry(activeElementEntry);
       }
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
       p.activeFormattingElements.pushElement(p.openElements.current, token);
   }
   function bStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
       p.activeFormattingElements.pushElement(p.openElements.current, token);
   }
   function nobrStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       if (p.openElements.hasInScope(TAG_ID.NOBR)) {
           callAdoptionAgency(p, token);
           p._reconstructActiveFormattingElements();
       }
       p._insertElement(token, NS.HTML);
       p.activeFormattingElements.pushElement(p.openElements.current, token);
   }
   function appletStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
       p.activeFormattingElements.insertMarker();
       p.framesetOk = false;
   }
   function tableStartTagInBody(p, token) {
       if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._insertElement(token, NS.HTML);
       p.framesetOk = false;
       p.insertionMode = InsertionMode.IN_TABLE;
   }
   function areaStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._appendElement(token, NS.HTML);
       p.framesetOk = false;
       token.ackSelfClosing = true;
   }
   function isHiddenInput(token) {
       const inputType = getTokenAttr(token, ATTRS.TYPE);
       return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;
   }
   function inputStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._appendElement(token, NS.HTML);
       if (!isHiddenInput(token)) {
           p.framesetOk = false;
       }
       token.ackSelfClosing = true;
   }
   function paramStartTagInBody(p, token) {
       p._appendElement(token, NS.HTML);
       token.ackSelfClosing = true;
   }
   function hrStartTagInBody(p, token) {
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._appendElement(token, NS.HTML);
       p.framesetOk = false;
       token.ackSelfClosing = true;
   }
   function imageStartTagInBody(p, token) {
       token.tagName = TAG_NAMES.IMG;
       token.tagID = TAG_ID.IMG;
       areaStartTagInBody(p, token);
   }
   function textareaStartTagInBody(p, token) {
       p._insertElement(token, NS.HTML);
       //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
       //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
       p.skipNextNewLine = true;
       p.tokenizer.state = TokenizerMode.RCDATA;
       p.originalInsertionMode = p.insertionMode;
       p.framesetOk = false;
       p.insertionMode = InsertionMode.TEXT;
   }
   function xmpStartTagInBody(p, token) {
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._reconstructActiveFormattingElements();
       p.framesetOk = false;
       p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
   }
   function iframeStartTagInBody(p, token) {
       p.framesetOk = false;
       p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
   }
   //NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse
   //<noembed> as rawtext.
   function noembedStartTagInBody(p, token) {
       p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
   }
   function selectStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
       p.framesetOk = false;
       p.insertionMode =
           p.insertionMode === InsertionMode.IN_TABLE ||
               p.insertionMode === InsertionMode.IN_CAPTION ||
               p.insertionMode === InsertionMode.IN_TABLE_BODY ||
               p.insertionMode === InsertionMode.IN_ROW ||
               p.insertionMode === InsertionMode.IN_CELL
               ? InsertionMode.IN_SELECT_IN_TABLE
               : InsertionMode.IN_SELECT;
   }
   function optgroupStartTagInBody(p, token) {
       if (p.openElements.currentTagId === TAG_ID.OPTION) {
           p.openElements.pop();
       }
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
   }
   function rbStartTagInBody(p, token) {
       if (p.openElements.hasInScope(TAG_ID.RUBY)) {
           p.openElements.generateImpliedEndTags();
       }
       p._insertElement(token, NS.HTML);
   }
   function rtStartTagInBody(p, token) {
       if (p.openElements.hasInScope(TAG_ID.RUBY)) {
           p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.RTC);
       }
       p._insertElement(token, NS.HTML);
   }
   function mathStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       adjustTokenMathMLAttrs(token);
       adjustTokenXMLAttrs(token);
       if (token.selfClosing) {
           p._appendElement(token, NS.MATHML);
       }
       else {
           p._insertElement(token, NS.MATHML);
       }
       token.ackSelfClosing = true;
   }
   function svgStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       adjustTokenSVGAttrs(token);
       adjustTokenXMLAttrs(token);
       if (token.selfClosing) {
           p._appendElement(token, NS.SVG);
       }
       else {
           p._insertElement(token, NS.SVG);
       }
       token.ackSelfClosing = true;
   }
   function genericStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
   }
   function startTagInBody(p, token) {
       switch (token.tagID) {
           case TAG_ID.I:
           case TAG_ID.S:
           case TAG_ID.B:
           case TAG_ID.U:
           case TAG_ID.EM:
           case TAG_ID.TT:
           case TAG_ID.BIG:
           case TAG_ID.CODE:
           case TAG_ID.FONT:
           case TAG_ID.SMALL:
           case TAG_ID.STRIKE:
           case TAG_ID.STRONG: {
               bStartTagInBody(p, token);
               break;
           }
           case TAG_ID.A: {
               aStartTagInBody(p, token);
               break;
           }
           case TAG_ID.H1:
           case TAG_ID.H2:
           case TAG_ID.H3:
           case TAG_ID.H4:
           case TAG_ID.H5:
           case TAG_ID.H6: {
               numberedHeaderStartTagInBody(p, token);
               break;
           }
           case TAG_ID.P:
           case TAG_ID.DL:
           case TAG_ID.OL:
           case TAG_ID.UL:
           case TAG_ID.DIV:
           case TAG_ID.DIR:
           case TAG_ID.NAV:
           case TAG_ID.MAIN:
           case TAG_ID.MENU:
           case TAG_ID.ASIDE:
           case TAG_ID.CENTER:
           case TAG_ID.FIGURE:
           case TAG_ID.FOOTER:
           case TAG_ID.HEADER:
           case TAG_ID.HGROUP:
           case TAG_ID.DIALOG:
           case TAG_ID.DETAILS:
           case TAG_ID.ADDRESS:
           case TAG_ID.ARTICLE:
           case TAG_ID.SECTION:
           case TAG_ID.SUMMARY:
           case TAG_ID.FIELDSET:
           case TAG_ID.BLOCKQUOTE:
           case TAG_ID.FIGCAPTION: {
               addressStartTagInBody(p, token);
               break;
           }
           case TAG_ID.LI:
           case TAG_ID.DD:
           case TAG_ID.DT: {
               listItemStartTagInBody(p, token);
               break;
           }
           case TAG_ID.BR:
           case TAG_ID.IMG:
           case TAG_ID.WBR:
           case TAG_ID.AREA:
           case TAG_ID.EMBED:
           case TAG_ID.KEYGEN: {
               areaStartTagInBody(p, token);
               break;
           }
           case TAG_ID.HR: {
               hrStartTagInBody(p, token);
               break;
           }
           case TAG_ID.RB:
           case TAG_ID.RTC: {
               rbStartTagInBody(p, token);
               break;
           }
           case TAG_ID.RT:
           case TAG_ID.RP: {
               rtStartTagInBody(p, token);
               break;
           }
           case TAG_ID.PRE:
           case TAG_ID.LISTING: {
               preStartTagInBody(p, token);
               break;
           }
           case TAG_ID.XMP: {
               xmpStartTagInBody(p, token);
               break;
           }
           case TAG_ID.SVG: {
               svgStartTagInBody(p, token);
               break;
           }
           case TAG_ID.HTML: {
               htmlStartTagInBody(p, token);
               break;
           }
           case TAG_ID.BASE:
           case TAG_ID.LINK:
           case TAG_ID.META:
           case TAG_ID.STYLE:
           case TAG_ID.TITLE:
           case TAG_ID.SCRIPT:
           case TAG_ID.BGSOUND:
           case TAG_ID.BASEFONT:
           case TAG_ID.TEMPLATE: {
               startTagInHead(p, token);
               break;
           }
           case TAG_ID.BODY: {
               bodyStartTagInBody(p, token);
               break;
           }
           case TAG_ID.FORM: {
               formStartTagInBody(p, token);
               break;
           }
           case TAG_ID.NOBR: {
               nobrStartTagInBody(p, token);
               break;
           }
           case TAG_ID.MATH: {
               mathStartTagInBody(p, token);
               break;
           }
           case TAG_ID.TABLE: {
               tableStartTagInBody(p, token);
               break;
           }
           case TAG_ID.INPUT: {
               inputStartTagInBody(p, token);
               break;
           }
           case TAG_ID.PARAM:
           case TAG_ID.TRACK:
           case TAG_ID.SOURCE: {
               paramStartTagInBody(p, token);
               break;
           }
           case TAG_ID.IMAGE: {
               imageStartTagInBody(p, token);
               break;
           }
           case TAG_ID.BUTTON: {
               buttonStartTagInBody(p, token);
               break;
           }
           case TAG_ID.APPLET:
           case TAG_ID.OBJECT:
           case TAG_ID.MARQUEE: {
               appletStartTagInBody(p, token);
               break;
           }
           case TAG_ID.IFRAME: {
               iframeStartTagInBody(p, token);
               break;
           }
           case TAG_ID.SELECT: {
               selectStartTagInBody(p, token);
               break;
           }
           case TAG_ID.OPTION:
           case TAG_ID.OPTGROUP: {
               optgroupStartTagInBody(p, token);
               break;
           }
           case TAG_ID.NOEMBED: {
               noembedStartTagInBody(p, token);
               break;
           }
           case TAG_ID.FRAMESET: {
               framesetStartTagInBody(p, token);
               break;
           }
           case TAG_ID.TEXTAREA: {
               textareaStartTagInBody(p, token);
               break;
           }
           case TAG_ID.NOSCRIPT: {
               if (p.options.scriptingEnabled) {
                   noembedStartTagInBody(p, token);
               }
               else {
                   genericStartTagInBody(p, token);
               }
               break;
           }
           case TAG_ID.PLAINTEXT: {
               plaintextStartTagInBody(p, token);
               break;
           }
           case TAG_ID.COL:
           case TAG_ID.TH:
           case TAG_ID.TD:
           case TAG_ID.TR:
           case TAG_ID.HEAD:
           case TAG_ID.FRAME:
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD:
           case TAG_ID.CAPTION:
           case TAG_ID.COLGROUP: {
               // Ignore token
               break;
           }
           default: {
               genericStartTagInBody(p, token);
           }
       }
   }
   function bodyEndTagInBody(p, token) {
       if (p.openElements.hasInScope(TAG_ID.BODY)) {
           p.insertionMode = InsertionMode.AFTER_BODY;
           //NOTE: <body> is never popped from the stack, so we need to updated
           //the end location explicitly.
           if (p.options.sourceCodeLocationInfo) {
               const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
               if (bodyElement) {
                   p._setEndLocation(bodyElement, token);
               }
           }
       }
   }
   function htmlEndTagInBody(p, token) {
       if (p.openElements.hasInScope(TAG_ID.BODY)) {
           p.insertionMode = InsertionMode.AFTER_BODY;
           endTagAfterBody(p, token);
       }
   }
   function addressEndTagInBody(p, token) {
       const tn = token.tagID;
       if (p.openElements.hasInScope(tn)) {
           p.openElements.generateImpliedEndTags();
           p.openElements.popUntilTagNamePopped(tn);
       }
   }
   function formEndTagInBody(p) {
       const inTemplate = p.openElements.tmplCount > 0;
       const { formElement } = p;
       if (!inTemplate) {
           p.formElement = null;
       }
       if ((formElement || inTemplate) && p.openElements.hasInScope(TAG_ID.FORM)) {
           p.openElements.generateImpliedEndTags();
           if (inTemplate) {
               p.openElements.popUntilTagNamePopped(TAG_ID.FORM);
           }
           else if (formElement) {
               p.openElements.remove(formElement);
           }
       }
   }
   function pEndTagInBody(p) {
       if (!p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._insertFakeElement(TAG_NAMES.P, TAG_ID.P);
       }
       p._closePElement();
   }
   function liEndTagInBody(p) {
       if (p.openElements.hasInListItemScope(TAG_ID.LI)) {
           p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.LI);
           p.openElements.popUntilTagNamePopped(TAG_ID.LI);
       }
   }
   function ddEndTagInBody(p, token) {
       const tn = token.tagID;
       if (p.openElements.hasInScope(tn)) {
           p.openElements.generateImpliedEndTagsWithExclusion(tn);
           p.openElements.popUntilTagNamePopped(tn);
       }
   }
   function numberedHeaderEndTagInBody(p) {
       if (p.openElements.hasNumberedHeaderInScope()) {
           p.openElements.generateImpliedEndTags();
           p.openElements.popUntilNumberedHeaderPopped();
       }
   }
   function appletEndTagInBody(p, token) {
       const tn = token.tagID;
       if (p.openElements.hasInScope(tn)) {
           p.openElements.generateImpliedEndTags();
           p.openElements.popUntilTagNamePopped(tn);
           p.activeFormattingElements.clearToLastMarker();
       }
   }
   function brEndTagInBody(p) {
       p._reconstructActiveFormattingElements();
       p._insertFakeElement(TAG_NAMES.BR, TAG_ID.BR);
       p.openElements.pop();
       p.framesetOk = false;
   }
   function genericEndTagInBody(p, token) {
       const tn = token.tagName;
       const tid = token.tagID;
       for (let i = p.openElements.stackTop; i > 0; i--) {
           const element = p.openElements.items[i];
           const elementId = p.openElements.tagIDs[i];
           // Compare the tag name here, as the tag might not be a known tag with an ID.
           if (tid === elementId && (tid !== TAG_ID.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {
               p.openElements.generateImpliedEndTagsWithExclusion(tid);
               if (p.openElements.stackTop >= i)
                   p.openElements.shortenToLength(i);
               break;
           }
           if (p._isSpecialElement(element, elementId)) {
               break;
           }
       }
   }
   function endTagInBody(p, token) {
       switch (token.tagID) {
           case TAG_ID.A:
           case TAG_ID.B:
           case TAG_ID.I:
           case TAG_ID.S:
           case TAG_ID.U:
           case TAG_ID.EM:
           case TAG_ID.TT:
           case TAG_ID.BIG:
           case TAG_ID.CODE:
           case TAG_ID.FONT:
           case TAG_ID.NOBR:
           case TAG_ID.SMALL:
           case TAG_ID.STRIKE:
           case TAG_ID.STRONG: {
               callAdoptionAgency(p, token);
               break;
           }
           case TAG_ID.P: {
               pEndTagInBody(p);
               break;
           }
           case TAG_ID.DL:
           case TAG_ID.UL:
           case TAG_ID.OL:
           case TAG_ID.DIR:
           case TAG_ID.DIV:
           case TAG_ID.NAV:
           case TAG_ID.PRE:
           case TAG_ID.MAIN:
           case TAG_ID.MENU:
           case TAG_ID.ASIDE:
           case TAG_ID.CENTER:
           case TAG_ID.FIGURE:
           case TAG_ID.FOOTER:
           case TAG_ID.HEADER:
           case TAG_ID.HGROUP:
           case TAG_ID.DIALOG:
           case TAG_ID.ADDRESS:
           case TAG_ID.ARTICLE:
           case TAG_ID.DETAILS:
           case TAG_ID.SECTION:
           case TAG_ID.SUMMARY:
           case TAG_ID.LISTING:
           case TAG_ID.FIELDSET:
           case TAG_ID.BLOCKQUOTE:
           case TAG_ID.FIGCAPTION: {
               addressEndTagInBody(p, token);
               break;
           }
           case TAG_ID.LI: {
               liEndTagInBody(p);
               break;
           }
           case TAG_ID.DD:
           case TAG_ID.DT: {
               ddEndTagInBody(p, token);
               break;
           }
           case TAG_ID.H1:
           case TAG_ID.H2:
           case TAG_ID.H3:
           case TAG_ID.H4:
           case TAG_ID.H5:
           case TAG_ID.H6: {
               numberedHeaderEndTagInBody(p);
               break;
           }
           case TAG_ID.BR: {
               brEndTagInBody(p);
               break;
           }
           case TAG_ID.BODY: {
               bodyEndTagInBody(p, token);
               break;
           }
           case TAG_ID.HTML: {
               htmlEndTagInBody(p, token);
               break;
           }
           case TAG_ID.FORM: {
               formEndTagInBody(p);
               break;
           }
           case TAG_ID.APPLET:
           case TAG_ID.OBJECT:
           case TAG_ID.MARQUEE: {
               appletEndTagInBody(p, token);
               break;
           }
           case TAG_ID.TEMPLATE: {
               endTagInHead(p, token);
               break;
           }
           default: {
               genericEndTagInBody(p, token);
           }
       }
   }
   function eofInBody(p, token) {
       if (p.tmplInsertionModeStack.length > 0) {
           eofInTemplate(p, token);
       }
       else {
           stopParsing(p, token);
       }
   }
   // The "text" insertion mode
   //------------------------------------------------------------------
   function endTagInText(p, token) {
       var _a;
       if (token.tagID === TAG_ID.SCRIPT) {
           (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);
       }
       p.openElements.pop();
       p.insertionMode = p.originalInsertionMode;
   }
   function eofInText(p, token) {
       p._err(token, ERR.eofInElementThatCanContainOnlyText);
       p.openElements.pop();
       p.insertionMode = p.originalInsertionMode;
       p.onEof(token);
   }
   // The "in table" insertion mode
   //------------------------------------------------------------------
   function characterInTable(p, token) {
       if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {
           p.pendingCharacterTokens.length = 0;
           p.hasNonWhitespacePendingCharacterToken = false;
           p.originalInsertionMode = p.insertionMode;
           p.insertionMode = InsertionMode.IN_TABLE_TEXT;
           switch (token.type) {
               case TokenType.CHARACTER: {
                   characterInTableText(p, token);
                   break;
               }
               case TokenType.WHITESPACE_CHARACTER: {
                   whitespaceCharacterInTableText(p, token);
                   break;
               }
               // Ignore null
           }
       }
       else {
           tokenInTable(p, token);
       }
   }
   function captionStartTagInTable(p, token) {
       p.openElements.clearBackToTableContext();
       p.activeFormattingElements.insertMarker();
       p._insertElement(token, NS.HTML);
       p.insertionMode = InsertionMode.IN_CAPTION;
   }
   function colgroupStartTagInTable(p, token) {
       p.openElements.clearBackToTableContext();
       p._insertElement(token, NS.HTML);
       p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
   }
   function colStartTagInTable(p, token) {
       p.openElements.clearBackToTableContext();
       p._insertFakeElement(TAG_NAMES.COLGROUP, TAG_ID.COLGROUP);
       p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
       startTagInColumnGroup(p, token);
   }
   function tbodyStartTagInTable(p, token) {
       p.openElements.clearBackToTableContext();
       p._insertElement(token, NS.HTML);
       p.insertionMode = InsertionMode.IN_TABLE_BODY;
   }
   function tdStartTagInTable(p, token) {
       p.openElements.clearBackToTableContext();
       p._insertFakeElement(TAG_NAMES.TBODY, TAG_ID.TBODY);
       p.insertionMode = InsertionMode.IN_TABLE_BODY;
       startTagInTableBody(p, token);
   }
   function tableStartTagInTable(p, token) {
       if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
           p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
           p._resetInsertionMode();
           p._processStartTag(token);
       }
   }
   function inputStartTagInTable(p, token) {
       if (isHiddenInput(token)) {
           p._appendElement(token, NS.HTML);
       }
       else {
           tokenInTable(p, token);
       }
       token.ackSelfClosing = true;
   }
   function formStartTagInTable(p, token) {
       if (!p.formElement && p.openElements.tmplCount === 0) {
           p._insertElement(token, NS.HTML);
           p.formElement = p.openElements.current;
           p.openElements.pop();
       }
   }
   function startTagInTable(p, token) {
       switch (token.tagID) {
           case TAG_ID.TD:
           case TAG_ID.TH:
           case TAG_ID.TR: {
               tdStartTagInTable(p, token);
               break;
           }
           case TAG_ID.STYLE:
           case TAG_ID.SCRIPT:
           case TAG_ID.TEMPLATE: {
               startTagInHead(p, token);
               break;
           }
           case TAG_ID.COL: {
               colStartTagInTable(p, token);
               break;
           }
           case TAG_ID.FORM: {
               formStartTagInTable(p, token);
               break;
           }
           case TAG_ID.TABLE: {
               tableStartTagInTable(p, token);
               break;
           }
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD: {
               tbodyStartTagInTable(p, token);
               break;
           }
           case TAG_ID.INPUT: {
               inputStartTagInTable(p, token);
               break;
           }
           case TAG_ID.CAPTION: {
               captionStartTagInTable(p, token);
               break;
           }
           case TAG_ID.COLGROUP: {
               colgroupStartTagInTable(p, token);
               break;
           }
           default: {
               tokenInTable(p, token);
           }
       }
   }
   function endTagInTable(p, token) {
       switch (token.tagID) {
           case TAG_ID.TABLE: {
               if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
                   p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
                   p._resetInsertionMode();
               }
               break;
           }
           case TAG_ID.TEMPLATE: {
               endTagInHead(p, token);
               break;
           }
           case TAG_ID.BODY:
           case TAG_ID.CAPTION:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.HTML:
           case TAG_ID.TBODY:
           case TAG_ID.TD:
           case TAG_ID.TFOOT:
           case TAG_ID.TH:
           case TAG_ID.THEAD:
           case TAG_ID.TR: {
               // Ignore token
               break;
           }
           default: {
               tokenInTable(p, token);
           }
       }
   }
   function tokenInTable(p, token) {
       const savedFosterParentingState = p.fosterParentingEnabled;
       p.fosterParentingEnabled = true;
       // Process token in `In Body` mode
       modeInBody(p, token);
       p.fosterParentingEnabled = savedFosterParentingState;
   }
   // The "in table text" insertion mode
   //------------------------------------------------------------------
   function whitespaceCharacterInTableText(p, token) {
       p.pendingCharacterTokens.push(token);
   }
   function characterInTableText(p, token) {
       p.pendingCharacterTokens.push(token);
       p.hasNonWhitespacePendingCharacterToken = true;
   }
   function tokenInTableText(p, token) {
       let i = 0;
       if (p.hasNonWhitespacePendingCharacterToken) {
           for (; i < p.pendingCharacterTokens.length; i++) {
               tokenInTable(p, p.pendingCharacterTokens[i]);
           }
       }
       else {
           for (; i < p.pendingCharacterTokens.length; i++) {
               p._insertCharacters(p.pendingCharacterTokens[i]);
           }
       }
       p.insertionMode = p.originalInsertionMode;
       p._processToken(token);
   }
   // The "in caption" insertion mode
   //------------------------------------------------------------------
   const TABLE_VOID_ELEMENTS = new Set([TAG_ID.CAPTION, TAG_ID.COL, TAG_ID.COLGROUP, TAG_ID.TBODY, TAG_ID.TD, TAG_ID.TFOOT, TAG_ID.TH, TAG_ID.THEAD, TAG_ID.TR]);
   function startTagInCaption(p, token) {
       const tn = token.tagID;
       if (TABLE_VOID_ELEMENTS.has(tn)) {
           if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
               p.openElements.generateImpliedEndTags();
               p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
               p.activeFormattingElements.clearToLastMarker();
               p.insertionMode = InsertionMode.IN_TABLE;
               startTagInTable(p, token);
           }
       }
       else {
           startTagInBody(p, token);
       }
   }
   function endTagInCaption(p, token) {
       const tn = token.tagID;
       switch (tn) {
           case TAG_ID.CAPTION:
           case TAG_ID.TABLE: {
               if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
                   p.openElements.generateImpliedEndTags();
                   p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
                   p.activeFormattingElements.clearToLastMarker();
                   p.insertionMode = InsertionMode.IN_TABLE;
                   if (tn === TAG_ID.TABLE) {
                       endTagInTable(p, token);
                   }
               }
               break;
           }
           case TAG_ID.BODY:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.HTML:
           case TAG_ID.TBODY:
           case TAG_ID.TD:
           case TAG_ID.TFOOT:
           case TAG_ID.TH:
           case TAG_ID.THEAD:
           case TAG_ID.TR: {
               // Ignore token
               break;
           }
           default: {
               endTagInBody(p, token);
           }
       }
   }
   // The "in column group" insertion mode
   //------------------------------------------------------------------
   function startTagInColumnGroup(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.COL: {
               p._appendElement(token, NS.HTML);
               token.ackSelfClosing = true;
               break;
           }
           case TAG_ID.TEMPLATE: {
               startTagInHead(p, token);
               break;
           }
           default: {
               tokenInColumnGroup(p, token);
           }
       }
   }
   function endTagInColumnGroup(p, token) {
       switch (token.tagID) {
           case TAG_ID.COLGROUP: {
               if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE;
               }
               break;
           }
           case TAG_ID.TEMPLATE: {
               endTagInHead(p, token);
               break;
           }
           case TAG_ID.COL: {
               // Ignore token
               break;
           }
           default: {
               tokenInColumnGroup(p, token);
           }
       }
   }
   function tokenInColumnGroup(p, token) {
       if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
           p.openElements.pop();
           p.insertionMode = InsertionMode.IN_TABLE;
           p._processToken(token);
       }
   }
   // The "in table body" insertion mode
   //------------------------------------------------------------------
   function startTagInTableBody(p, token) {
       switch (token.tagID) {
           case TAG_ID.TR: {
               p.openElements.clearBackToTableBodyContext();
               p._insertElement(token, NS.HTML);
               p.insertionMode = InsertionMode.IN_ROW;
               break;
           }
           case TAG_ID.TH:
           case TAG_ID.TD: {
               p.openElements.clearBackToTableBodyContext();
               p._insertFakeElement(TAG_NAMES.TR, TAG_ID.TR);
               p.insertionMode = InsertionMode.IN_ROW;
               startTagInRow(p, token);
               break;
           }
           case TAG_ID.CAPTION:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD: {
               if (p.openElements.hasTableBodyContextInTableScope()) {
                   p.openElements.clearBackToTableBodyContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE;
                   startTagInTable(p, token);
               }
               break;
           }
           default: {
               startTagInTable(p, token);
           }
       }
   }
   function endTagInTableBody(p, token) {
       const tn = token.tagID;
       switch (token.tagID) {
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD: {
               if (p.openElements.hasInTableScope(tn)) {
                   p.openElements.clearBackToTableBodyContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE;
               }
               break;
           }
           case TAG_ID.TABLE: {
               if (p.openElements.hasTableBodyContextInTableScope()) {
                   p.openElements.clearBackToTableBodyContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE;
                   endTagInTable(p, token);
               }
               break;
           }
           case TAG_ID.BODY:
           case TAG_ID.CAPTION:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.HTML:
           case TAG_ID.TD:
           case TAG_ID.TH:
           case TAG_ID.TR: {
               // Ignore token
               break;
           }
           default: {
               endTagInTable(p, token);
           }
       }
   }
   // The "in row" insertion mode
   //------------------------------------------------------------------
   function startTagInRow(p, token) {
       switch (token.tagID) {
           case TAG_ID.TH:
           case TAG_ID.TD: {
               p.openElements.clearBackToTableRowContext();
               p._insertElement(token, NS.HTML);
               p.insertionMode = InsertionMode.IN_CELL;
               p.activeFormattingElements.insertMarker();
               break;
           }
           case TAG_ID.CAPTION:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD:
           case TAG_ID.TR: {
               if (p.openElements.hasInTableScope(TAG_ID.TR)) {
                   p.openElements.clearBackToTableRowContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE_BODY;
                   startTagInTableBody(p, token);
               }
               break;
           }
           default: {
               startTagInTable(p, token);
           }
       }
   }
   function endTagInRow(p, token) {
       switch (token.tagID) {
           case TAG_ID.TR: {
               if (p.openElements.hasInTableScope(TAG_ID.TR)) {
                   p.openElements.clearBackToTableRowContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE_BODY;
               }
               break;
           }
           case TAG_ID.TABLE: {
               if (p.openElements.hasInTableScope(TAG_ID.TR)) {
                   p.openElements.clearBackToTableRowContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE_BODY;
                   endTagInTableBody(p, token);
               }
               break;
           }
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD: {
               if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope(TAG_ID.TR)) {
                   p.openElements.clearBackToTableRowContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE_BODY;
                   endTagInTableBody(p, token);
               }
               break;
           }
           case TAG_ID.BODY:
           case TAG_ID.CAPTION:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.HTML:
           case TAG_ID.TD:
           case TAG_ID.TH: {
               // Ignore end tag
               break;
           }
           default:
               endTagInTable(p, token);
       }
   }
   // The "in cell" insertion mode
   //------------------------------------------------------------------
   function startTagInCell(p, token) {
       const tn = token.tagID;
       if (TABLE_VOID_ELEMENTS.has(tn)) {
           if (p.openElements.hasInTableScope(TAG_ID.TD) || p.openElements.hasInTableScope(TAG_ID.TH)) {
               p._closeTableCell();
               startTagInRow(p, token);
           }
       }
       else {
           startTagInBody(p, token);
       }
   }
   function endTagInCell(p, token) {
       const tn = token.tagID;
       switch (tn) {
           case TAG_ID.TD:
           case TAG_ID.TH: {
               if (p.openElements.hasInTableScope(tn)) {
                   p.openElements.generateImpliedEndTags();
                   p.openElements.popUntilTagNamePopped(tn);
                   p.activeFormattingElements.clearToLastMarker();
                   p.insertionMode = InsertionMode.IN_ROW;
               }
               break;
           }
           case TAG_ID.TABLE:
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD:
           case TAG_ID.TR: {
               if (p.openElements.hasInTableScope(tn)) {
                   p._closeTableCell();
                   endTagInRow(p, token);
               }
               break;
           }
           case TAG_ID.BODY:
           case TAG_ID.CAPTION:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.HTML: {
               // Ignore token
               break;
           }
           default: {
               endTagInBody(p, token);
           }
       }
   }
   // The "in select" insertion mode
   //------------------------------------------------------------------
   function startTagInSelect(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.OPTION: {
               if (p.openElements.currentTagId === TAG_ID.OPTION) {
                   p.openElements.pop();
               }
               p._insertElement(token, NS.HTML);
               break;
           }
           case TAG_ID.OPTGROUP: {
               if (p.openElements.currentTagId === TAG_ID.OPTION) {
                   p.openElements.pop();
               }
               if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
                   p.openElements.pop();
               }
               p._insertElement(token, NS.HTML);
               break;
           }
           case TAG_ID.INPUT:
           case TAG_ID.KEYGEN:
           case TAG_ID.TEXTAREA:
           case TAG_ID.SELECT: {
               if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
                   p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
                   p._resetInsertionMode();
                   if (token.tagID !== TAG_ID.SELECT) {
                       p._processStartTag(token);
                   }
               }
               break;
           }
           case TAG_ID.SCRIPT:
           case TAG_ID.TEMPLATE: {
               startTagInHead(p, token);
               break;
           }
           // Do nothing
       }
   }
   function endTagInSelect(p, token) {
       switch (token.tagID) {
           case TAG_ID.OPTGROUP: {
               if (p.openElements.stackTop > 0 &&
                   p.openElements.currentTagId === TAG_ID.OPTION &&
                   p.openElements.tagIDs[p.openElements.stackTop - 1] === TAG_ID.OPTGROUP) {
                   p.openElements.pop();
               }
               if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
                   p.openElements.pop();
               }
               break;
           }
           case TAG_ID.OPTION: {
               if (p.openElements.currentTagId === TAG_ID.OPTION) {
                   p.openElements.pop();
               }
               break;
           }
           case TAG_ID.SELECT: {
               if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
                   p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
                   p._resetInsertionMode();
               }
               break;
           }
           case TAG_ID.TEMPLATE: {
               endTagInHead(p, token);
               break;
           }
           // Do nothing
       }
   }
   // The "in select in table" insertion mode
   //------------------------------------------------------------------
   function startTagInSelectInTable(p, token) {
       const tn = token.tagID;
       if (tn === TAG_ID.CAPTION ||
           tn === TAG_ID.TABLE ||
           tn === TAG_ID.TBODY ||
           tn === TAG_ID.TFOOT ||
           tn === TAG_ID.THEAD ||
           tn === TAG_ID.TR ||
           tn === TAG_ID.TD ||
           tn === TAG_ID.TH) {
           p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
           p._resetInsertionMode();
           p._processStartTag(token);
       }
       else {
           startTagInSelect(p, token);
       }
   }
   function endTagInSelectInTable(p, token) {
       const tn = token.tagID;
       if (tn === TAG_ID.CAPTION ||
           tn === TAG_ID.TABLE ||
           tn === TAG_ID.TBODY ||
           tn === TAG_ID.TFOOT ||
           tn === TAG_ID.THEAD ||
           tn === TAG_ID.TR ||
           tn === TAG_ID.TD ||
           tn === TAG_ID.TH) {
           if (p.openElements.hasInTableScope(tn)) {
               p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
               p._resetInsertionMode();
               p.onEndTag(token);
           }
       }
       else {
           endTagInSelect(p, token);
       }
   }
   // The "in template" insertion mode
   //------------------------------------------------------------------
   function startTagInTemplate(p, token) {
       switch (token.tagID) {
           // First, handle tags that can start without a mode change
           case TAG_ID.BASE:
           case TAG_ID.BASEFONT:
           case TAG_ID.BGSOUND:
           case TAG_ID.LINK:
           case TAG_ID.META:
           case TAG_ID.NOFRAMES:
           case TAG_ID.SCRIPT:
           case TAG_ID.STYLE:
           case TAG_ID.TEMPLATE:
           case TAG_ID.TITLE:
               startTagInHead(p, token);
               break;
           // Re-process the token in the appropriate mode
           case TAG_ID.CAPTION:
           case TAG_ID.COLGROUP:
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD:
               p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;
               p.insertionMode = InsertionMode.IN_TABLE;
               startTagInTable(p, token);
               break;
           case TAG_ID.COL:
               p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;
               p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
               startTagInColumnGroup(p, token);
               break;
           case TAG_ID.TR:
               p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;
               p.insertionMode = InsertionMode.IN_TABLE_BODY;
               startTagInTableBody(p, token);
               break;
           case TAG_ID.TD:
           case TAG_ID.TH:
               p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;
               p.insertionMode = InsertionMode.IN_ROW;
               startTagInRow(p, token);
               break;
           default:
               p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;
               p.insertionMode = InsertionMode.IN_BODY;
               startTagInBody(p, token);
       }
   }
   function endTagInTemplate(p, token) {
       if (token.tagID === TAG_ID.TEMPLATE) {
           endTagInHead(p, token);
       }
   }
   function eofInTemplate(p, token) {
       if (p.openElements.tmplCount > 0) {
           p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
           p.activeFormattingElements.clearToLastMarker();
           p.tmplInsertionModeStack.shift();
           p._resetInsertionMode();
           p.onEof(token);
       }
       else {
           stopParsing(p, token);
       }
   }
   // The "after body" insertion mode
   //------------------------------------------------------------------
   function startTagAfterBody(p, token) {
       if (token.tagID === TAG_ID.HTML) {
           startTagInBody(p, token);
       }
       else {
           tokenAfterBody(p, token);
       }
   }
   function endTagAfterBody(p, token) {
       var _a;
       if (token.tagID === TAG_ID.HTML) {
           if (!p.fragmentContext) {
               p.insertionMode = InsertionMode.AFTER_AFTER_BODY;
           }
           //NOTE: <html> is never popped from the stack, so we need to updated
           //the end location explicitly.
           if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === TAG_ID.HTML) {
               p._setEndLocation(p.openElements.items[0], token);
               // Update the body element, if it doesn't have an end tag
               const bodyElement = p.openElements.items[1];
               if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {
                   p._setEndLocation(bodyElement, token);
               }
           }
       }
       else {
           tokenAfterBody(p, token);
       }
   }
   function tokenAfterBody(p, token) {
       p.insertionMode = InsertionMode.IN_BODY;
       modeInBody(p, token);
   }
   // The "in frameset" insertion mode
   //------------------------------------------------------------------
   function startTagInFrameset(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.FRAMESET: {
               p._insertElement(token, NS.HTML);
               break;
           }
           case TAG_ID.FRAME: {
               p._appendElement(token, NS.HTML);
               token.ackSelfClosing = true;
               break;
           }
           case TAG_ID.NOFRAMES: {
               startTagInHead(p, token);
               break;
           }
           // Do nothing
       }
   }
   function endTagInFrameset(p, token) {
       if (token.tagID === TAG_ID.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
           p.openElements.pop();
           if (!p.fragmentContext && p.openElements.currentTagId !== TAG_ID.FRAMESET) {
               p.insertionMode = InsertionMode.AFTER_FRAMESET;
           }
       }
   }
   // The "after frameset" insertion mode
   //------------------------------------------------------------------
   function startTagAfterFrameset(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.NOFRAMES: {
               startTagInHead(p, token);
               break;
           }
           // Do nothing
       }
   }
   function endTagAfterFrameset(p, token) {
       if (token.tagID === TAG_ID.HTML) {
           p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;
       }
   }
   // The "after after body" insertion mode
   //------------------------------------------------------------------
   function startTagAfterAfterBody(p, token) {
       if (token.tagID === TAG_ID.HTML) {
           startTagInBody(p, token);
       }
       else {
           tokenAfterAfterBody(p, token);
       }
   }
   function tokenAfterAfterBody(p, token) {
       p.insertionMode = InsertionMode.IN_BODY;
       modeInBody(p, token);
   }
   // The "after after frameset" insertion mode
   //------------------------------------------------------------------
   function startTagAfterAfterFrameset(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.NOFRAMES: {
               startTagInHead(p, token);
               break;
           }
           // Do nothing
       }
   }
   // The rules for parsing tokens in foreign content
   //------------------------------------------------------------------
   function nullCharacterInForeignContent(p, token) {
       token.chars = REPLACEMENT_CHARACTER;
       p._insertCharacters(token);
   }
   function characterInForeignContent(p, token) {
       p._insertCharacters(token);
       p.framesetOk = false;
   }
   function popUntilHtmlOrIntegrationPoint(p) {
       while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&
           !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {
           p.openElements.pop();
       }
   }
   function startTagInForeignContent(p, token) {
       if (causesExit(token)) {
           popUntilHtmlOrIntegrationPoint(p);
           p._startTagOutsideForeignContent(token);
       }
       else {
           const current = p._getAdjustedCurrentElement();
           const currentNs = p.treeAdapter.getNamespaceURI(current);
           if (currentNs === NS.MATHML) {
               adjustTokenMathMLAttrs(token);
           }
           else if (currentNs === NS.SVG) {
               adjustTokenSVGTagName(token);
               adjustTokenSVGAttrs(token);
           }
           adjustTokenXMLAttrs(token);
           if (token.selfClosing) {
               p._appendElement(token, currentNs);
           }
           else {
               p._insertElement(token, currentNs);
           }
           token.ackSelfClosing = true;
       }
   }
   function endTagInForeignContent(p, token) {
       if (token.tagID === TAG_ID.P || token.tagID === TAG_ID.BR) {
           popUntilHtmlOrIntegrationPoint(p);
           p._endTagOutsideForeignContent(token);
           return;
       }
       for (let i = p.openElements.stackTop; i > 0; i--) {
           const element = p.openElements.items[i];
           if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
               p._endTagOutsideForeignContent(token);
               break;
           }
           const tagName = p.treeAdapter.getTagName(element);
           if (tagName.toLowerCase() === token.tagName) {
               //NOTE: update the token tag name for `_setEndLocation`.
               token.tagName = tagName;
               p.openElements.shortenToLength(i);
               break;
           }
       }
   }

   // Sets
   new Set([
       TAG_NAMES.AREA,
       TAG_NAMES.BASE,
       TAG_NAMES.BASEFONT,
       TAG_NAMES.BGSOUND,
       TAG_NAMES.BR,
       TAG_NAMES.COL,
       TAG_NAMES.EMBED,
       TAG_NAMES.FRAME,
       TAG_NAMES.HR,
       TAG_NAMES.IMG,
       TAG_NAMES.INPUT,
       TAG_NAMES.KEYGEN,
       TAG_NAMES.LINK,
       TAG_NAMES.META,
       TAG_NAMES.PARAM,
       TAG_NAMES.SOURCE,
       TAG_NAMES.TRACK,
       TAG_NAMES.WBR,
   ]);

   // Shorthands
   /**
    * Parses an HTML string.
    *
    * @param html Input HTML string.
    * @param options Parsing options.
    * @returns Document
    *
    * @example
    *
    * ```js
    * const parse5 = require('parse5');
    *
    * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');
    *
    * console.log(document.childNodes[1].tagName); //> 'html'
    *```
    */
   function parse$2(html, options) {
       return Parser.parse(html, options);
   }
   function parseFragment(fragmentContext, html, options) {
       if (typeof fragmentContext === 'string') {
           options = html;
           html = fragmentContext;
           fragmentContext = null;
       }
       const parser = Parser.getFragmentParser(fragmentContext, options);
       parser.tokenizer.write(html, true);
       return parser.getFragment();
   }

   /*!
    * Determine if an object is a Buffer
    *
    * @author   Feross Aboukhadijeh <https://feross.org>
    * @license  MIT
    */

   var isBuffer = function isBuffer (obj) {
     return obj != null && obj.constructor != null &&
       typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
   };

   /**
    * @typedef {import('unist').Point} Point
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Position} Position
    * @typedef {object & {type: string, position?: Position|undefined}} NodeLike
    */

   /**
    * Stringify one point, a position (start and end points), or a node’s
    * positional information.
    *
    * @param {Node|NodeLike|Position|Point|null} [value]
    * @returns {string}
    */
   function stringifyPosition(value) {
     // Nothing.
     if (!value || typeof value !== 'object') {
       return ''
     }

     // Node.
     if ('position' in value || 'type' in value) {
       return position$1(value.position)
     }

     // Position.
     if ('start' in value || 'end' in value) {
       return position$1(value)
     }

     // Point.
     if ('line' in value || 'column' in value) {
       return point$1(value)
     }

     // ?
     return ''
   }

   /**
    * @param {Point|undefined} point
    * @returns {string}
    */
   function point$1(point) {
     return index(point && point.line) + ':' + index(point && point.column)
   }

   /**
    * @param {Position|undefined} pos
    * @returns {string}
    */
   function position$1(pos) {
     return point$1(pos && pos.start) + '-' + point$1(pos && pos.end)
   }

   /**
    * @param {number|undefined} value
    * @returns {number}
    */
   function index(value) {
     return value && typeof value === 'number' ? value : 1
   }

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Position} Position
    * @typedef {import('unist').Point} Point
    * @typedef {object & {type: string, position?: Position|undefined}} NodeLike
    */

   class VFileMessage extends Error {
     /**
      * Constructor of a message for `reason` at `place` from `origin`.
      * When an error is passed in as `reason`, copies the `stack`.
      *
      * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
      * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
      * @param {string} [origin] Place in code the message originates from (`string`, optional).
      */
     constructor(reason, place, origin) {
       /** @type {[string|null, string|null]} */
       const parts = [null, null];
       /** @type {Position} */
       let position = {
         // @ts-expect-error: we always follows the structure of `position`.
         start: {line: null, column: null},
         // @ts-expect-error: "
         end: {line: null, column: null}
       };

       super();

       if (typeof place === 'string') {
         origin = place;
         place = undefined;
       }

       if (typeof origin === 'string') {
         const index = origin.indexOf(':');

         if (index === -1) {
           parts[1] = origin;
         } else {
           parts[0] = origin.slice(0, index);
           parts[1] = origin.slice(index + 1);
         }
       }

       if (place) {
         // Node.
         if ('type' in place || 'position' in place) {
           if (place.position) {
             position = place.position;
           }
         }
         // Position.
         else if ('start' in place || 'end' in place) {
           position = place;
         }
         // Point.
         else if ('line' in place || 'column' in place) {
           position.start = place;
         }
       }

       // Fields from `Error`
       this.name = stringifyPosition(place) || '1:1';
       this.message = typeof reason === 'object' ? reason.message : reason;
       this.stack = typeof reason === 'object' ? reason.stack : '';

       /**
        * Reason for message.
        * @type {string}
        */
       this.reason = this.message;
       /**
        * If true, marks associated file as no longer processable.
        * @type {boolean?}
        */
       // eslint-disable-next-line no-unused-expressions
       this.fatal;
       /**
        * Starting line of error.
        * @type {number?}
        */
       this.line = position.start.line;
       /**
        * Starting column of error.
        * @type {number?}
        */
       this.column = position.start.column;
       /**
        * Namespace of warning.
        * @type {string?}
        */
       this.source = parts[0];
       /**
        * Category of message.
        * @type {string?}
        */
       this.ruleId = parts[1];
       /**
        * Full range information, when available.
        * Has start and end properties, both set to an object with line and column, set to number?.
        * @type {Position?}
        */
       this.position = position;

       // The following fields are “well known”.
       // Not standard.
       // Feel free to add other non-standard fields to your messages.

       /* eslint-disable no-unused-expressions */
       /**
        * You can use this to specify the source value that’s being reported, which
        * is deemed incorrect.
        * @type {string?}
        */
       this.actual;
       /**
        * You can use this to suggest values that should be used instead of
        * `actual`, one or more values that are deemed as acceptable.
        * @type {Array<string>?}
        */
       this.expected;
       /**
        * You may add a file property with a path of a file (used throughout the VFile ecosystem).
        * @type {string?}
        */
       this.file;
       /**
        * You may add a url property with a link to documentation for the message.
        * @type {string?}
        */
       this.url;
       /**
        * You may add a note property with a long form description of the message (supported by vfile-reporter).
        * @type {string?}
        */
       this.note;
       /* eslint-enable no-unused-expressions */
     }
   }

   VFileMessage.prototype.file = '';
   VFileMessage.prototype.name = '';
   VFileMessage.prototype.reason = '';
   VFileMessage.prototype.message = '';
   VFileMessage.prototype.stack = '';
   VFileMessage.prototype.fatal = null;
   VFileMessage.prototype.column = null;
   VFileMessage.prototype.line = null;
   VFileMessage.prototype.source = null;
   VFileMessage.prototype.ruleId = null;
   VFileMessage.prototype.position = null;

   // A derivative work based on:
   // <https://github.com/browserify/path-browserify>.
   // Which is licensed:
   //
   // MIT License
   //
   // Copyright (c) 2013 James Halliday
   //
   // Permission is hereby granted, free of charge, to any person obtaining a copy of
   // this software and associated documentation files (the "Software"), to deal in
   // the Software without restriction, including without limitation the rights to
   // use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   // the Software, and to permit persons to whom the Software is furnished to do so,
   // subject to the following conditions:
   //
   // The above copyright notice and this permission notice shall be included in all
   // copies or substantial portions of the Software.
   //
   // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
   // FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
   // COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
   // IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   // CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   // A derivative work based on:
   //
   // Parts of that are extracted from Node’s internal `path` module:
   // <https://github.com/nodejs/node/blob/master/lib/path.js>.
   // Which is licensed:
   //
   // Copyright Joyent, Inc. and other Node contributors.
   //
   // Permission is hereby granted, free of charge, to any person obtaining a
   // copy of this software and associated documentation files (the
   // "Software"), to deal in the Software without restriction, including
   // without limitation the rights to use, copy, modify, merge, publish,
   // distribute, sublicense, and/or sell copies of the Software, and to permit
   // persons to whom the Software is furnished to do so, subject to the
   // following conditions:
   //
   // The above copyright notice and this permission notice shall be included
   // in all copies or substantial portions of the Software.
   //
   // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
   // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
   // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
   // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
   // USE OR OTHER DEALINGS IN THE SOFTWARE.

   const path = {basename, dirname, extname, join: join$1, sep: '/'};

   /* eslint-disable max-depth, complexity */

   /**
    * @param {string} path
    * @param {string} [ext]
    * @returns {string}
    */
   function basename(path, ext) {
     if (ext !== undefined && typeof ext !== 'string') {
       throw new TypeError('"ext" argument must be a string')
     }

     assertPath$1(path);
     let start = 0;
     let end = -1;
     let index = path.length;
     /** @type {boolean|undefined} */
     let seenNonSlash;

     if (ext === undefined || ext.length === 0 || ext.length > path.length) {
       while (index--) {
         if (path.charCodeAt(index) === 47 /* `/` */) {
           // If we reached a path separator that was not part of a set of path
           // separators at the end of the string, stop now.
           if (seenNonSlash) {
             start = index + 1;
             break
           }
         } else if (end < 0) {
           // We saw the first non-path separator, mark this as the end of our
           // path component.
           seenNonSlash = true;
           end = index + 1;
         }
       }

       return end < 0 ? '' : path.slice(start, end)
     }

     if (ext === path) {
       return ''
     }

     let firstNonSlashEnd = -1;
     let extIndex = ext.length - 1;

     while (index--) {
       if (path.charCodeAt(index) === 47 /* `/` */) {
         // If we reached a path separator that was not part of a set of path
         // separators at the end of the string, stop now.
         if (seenNonSlash) {
           start = index + 1;
           break
         }
       } else {
         if (firstNonSlashEnd < 0) {
           // We saw the first non-path separator, remember this index in case
           // we need it if the extension ends up not matching.
           seenNonSlash = true;
           firstNonSlashEnd = index + 1;
         }

         if (extIndex > -1) {
           // Try to match the explicit extension.
           if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {
             if (extIndex < 0) {
               // We matched the extension, so mark this as the end of our path
               // component
               end = index;
             }
           } else {
             // Extension does not match, so our result is the entire path
             // component
             extIndex = -1;
             end = firstNonSlashEnd;
           }
         }
       }
     }

     if (start === end) {
       end = firstNonSlashEnd;
     } else if (end < 0) {
       end = path.length;
     }

     return path.slice(start, end)
   }

   /**
    * @param {string} path
    * @returns {string}
    */
   function dirname(path) {
     assertPath$1(path);

     if (path.length === 0) {
       return '.'
     }

     let end = -1;
     let index = path.length;
     /** @type {boolean|undefined} */
     let unmatchedSlash;

     // Prefix `--` is important to not run on `0`.
     while (--index) {
       if (path.charCodeAt(index) === 47 /* `/` */) {
         if (unmatchedSlash) {
           end = index;
           break
         }
       } else if (!unmatchedSlash) {
         // We saw the first non-path separator
         unmatchedSlash = true;
       }
     }

     return end < 0
       ? path.charCodeAt(0) === 47 /* `/` */
         ? '/'
         : '.'
       : end === 1 && path.charCodeAt(0) === 47 /* `/` */
       ? '//'
       : path.slice(0, end)
   }

   /**
    * @param {string} path
    * @returns {string}
    */
   function extname(path) {
     assertPath$1(path);

     let index = path.length;

     let end = -1;
     let startPart = 0;
     let startDot = -1;
     // Track the state of characters (if any) we see before our first dot and
     // after any path separator we find.
     let preDotState = 0;
     /** @type {boolean|undefined} */
     let unmatchedSlash;

     while (index--) {
       const code = path.charCodeAt(index);

       if (code === 47 /* `/` */) {
         // If we reached a path separator that was not part of a set of path
         // separators at the end of the string, stop now.
         if (unmatchedSlash) {
           startPart = index + 1;
           break
         }

         continue
       }

       if (end < 0) {
         // We saw the first non-path separator, mark this as the end of our
         // extension.
         unmatchedSlash = true;
         end = index + 1;
       }

       if (code === 46 /* `.` */) {
         // If this is our first dot, mark it as the start of our extension.
         if (startDot < 0) {
           startDot = index;
         } else if (preDotState !== 1) {
           preDotState = 1;
         }
       } else if (startDot > -1) {
         // We saw a non-dot and non-path separator before our dot, so we should
         // have a good chance at having a non-empty extension.
         preDotState = -1;
       }
     }

     if (
       startDot < 0 ||
       end < 0 ||
       // We saw a non-dot character immediately before the dot.
       preDotState === 0 ||
       // The (right-most) trimmed path component is exactly `..`.
       (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)
     ) {
       return ''
     }

     return path.slice(startDot, end)
   }

   /**
    * @param {Array<string>} segments
    * @returns {string}
    */
   function join$1(...segments) {
     let index = -1;
     /** @type {string|undefined} */
     let joined;

     while (++index < segments.length) {
       assertPath$1(segments[index]);

       if (segments[index]) {
         joined =
           joined === undefined ? segments[index] : joined + '/' + segments[index];
       }
     }

     return joined === undefined ? '.' : normalize$1(joined)
   }

   /**
    * Note: `normalize` is not exposed as `path.normalize`, so some code is
    * manually removed from it.
    *
    * @param {string} path
    * @returns {string}
    */
   function normalize$1(path) {
     assertPath$1(path);

     const absolute = path.charCodeAt(0) === 47; /* `/` */

     // Normalize the path according to POSIX rules.
     let value = normalizeString(path, !absolute);

     if (value.length === 0 && !absolute) {
       value = '.';
     }

     if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {
       value += '/';
     }

     return absolute ? '/' + value : value
   }

   /**
    * Resolve `.` and `..` elements in a path with directory names.
    *
    * @param {string} path
    * @param {boolean} allowAboveRoot
    * @returns {string}
    */
   function normalizeString(path, allowAboveRoot) {
     let result = '';
     let lastSegmentLength = 0;
     let lastSlash = -1;
     let dots = 0;
     let index = -1;
     /** @type {number|undefined} */
     let code;
     /** @type {number} */
     let lastSlashIndex;

     while (++index <= path.length) {
       if (index < path.length) {
         code = path.charCodeAt(index);
       } else if (code === 47 /* `/` */) {
         break
       } else {
         code = 47; /* `/` */
       }

       if (code === 47 /* `/` */) {
         if (lastSlash === index - 1 || dots === 1) ; else if (lastSlash !== index - 1 && dots === 2) {
           if (
             result.length < 2 ||
             lastSegmentLength !== 2 ||
             result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||
             result.charCodeAt(result.length - 2) !== 46 /* `.` */
           ) {
             if (result.length > 2) {
               lastSlashIndex = result.lastIndexOf('/');

               if (lastSlashIndex !== result.length - 1) {
                 if (lastSlashIndex < 0) {
                   result = '';
                   lastSegmentLength = 0;
                 } else {
                   result = result.slice(0, lastSlashIndex);
                   lastSegmentLength = result.length - 1 - result.lastIndexOf('/');
                 }

                 lastSlash = index;
                 dots = 0;
                 continue
               }
             } else if (result.length > 0) {
               result = '';
               lastSegmentLength = 0;
               lastSlash = index;
               dots = 0;
               continue
             }
           }

           if (allowAboveRoot) {
             result = result.length > 0 ? result + '/..' : '..';
             lastSegmentLength = 2;
           }
         } else {
           if (result.length > 0) {
             result += '/' + path.slice(lastSlash + 1, index);
           } else {
             result = path.slice(lastSlash + 1, index);
           }

           lastSegmentLength = index - lastSlash - 1;
         }

         lastSlash = index;
         dots = 0;
       } else if (code === 46 /* `.` */ && dots > -1) {
         dots++;
       } else {
         dots = -1;
       }
     }

     return result
   }

   /**
    * @param {string} path
    */
   function assertPath$1(path) {
     if (typeof path !== 'string') {
       throw new TypeError(
         'Path must be a string. Received ' + JSON.stringify(path)
       )
     }
   }

   /* eslint-enable max-depth, complexity */

   // Somewhat based on:
   // <https://github.com/defunctzombie/node-process/blob/master/browser.js>.
   // But I don’t think one tiny line of code can be copyrighted. 😅
   const proc = {cwd};

   function cwd() {
     return '/'
   }

   /**
    * @typedef URL
    * @property {string} hash
    * @property {string} host
    * @property {string} hostname
    * @property {string} href
    * @property {string} origin
    * @property {string} password
    * @property {string} pathname
    * @property {string} port
    * @property {string} protocol
    * @property {string} search
    * @property {any} searchParams
    * @property {string} username
    * @property {() => string} toString
    * @property {() => string} toJSON
    */

   /**
    * @param {unknown} fileURLOrPath
    * @returns {fileURLOrPath is URL}
    */
   // From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>
   function isUrl(fileURLOrPath) {
     return (
       fileURLOrPath !== null &&
       typeof fileURLOrPath === 'object' &&
       // @ts-expect-error: indexable.
       fileURLOrPath.href &&
       // @ts-expect-error: indexable.
       fileURLOrPath.origin
     )
   }

   /// <reference lib="dom" />

   // See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>

   /**
    * @param {string|URL} path
    */
   function urlToPath(path) {
     if (typeof path === 'string') {
       path = new URL(path);
     } else if (!isUrl(path)) {
       /** @type {NodeJS.ErrnoException} */
       const error = new TypeError(
         'The "path" argument must be of type string or an instance of URL. Received `' +
           path +
           '`'
       );
       error.code = 'ERR_INVALID_ARG_TYPE';
       throw error
     }

     if (path.protocol !== 'file:') {
       /** @type {NodeJS.ErrnoException} */
       const error = new TypeError('The URL must be of scheme file');
       error.code = 'ERR_INVALID_URL_SCHEME';
       throw error
     }

     return getPathFromURLPosix(path)
   }

   /**
    * @param {URL} url
    */
   function getPathFromURLPosix(url) {
     if (url.hostname !== '') {
       /** @type {NodeJS.ErrnoException} */
       const error = new TypeError(
         'File URL host must be "localhost" or empty on darwin'
       );
       error.code = 'ERR_INVALID_FILE_URL_HOST';
       throw error
     }

     const pathname = url.pathname;
     let index = -1;

     while (++index < pathname.length) {
       if (
         pathname.charCodeAt(index) === 37 /* `%` */ &&
         pathname.charCodeAt(index + 1) === 50 /* `2` */
       ) {
         const third = pathname.charCodeAt(index + 2);
         if (third === 70 /* `F` */ || third === 102 /* `f` */) {
           /** @type {NodeJS.ErrnoException} */
           const error = new TypeError(
             'File URL path must not include encoded / characters'
           );
           error.code = 'ERR_INVALID_FILE_URL_PATH';
           throw error
         }
       }
     }

     return decodeURIComponent(pathname)
   }

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Position} Position
    * @typedef {import('unist').Point} Point
    * @typedef {Record<string, unknown> & {type: string, position?: Position|undefined}} NodeLike
    * @typedef {import('./minurl.shared.js').URL} URL
    * @typedef {import('../index.js').Data} Data
    * @typedef {import('../index.js').Value} Value
    *
    * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding
    *   Encodings supported by the buffer class.
    *   This is a copy of the typing from Node, copied to prevent Node globals from
    *   being needed.
    *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>
    *
    * @typedef {Value|Options|VFile|URL} Compatible
    *   Things that can be passed to the constructor.
    *
    * @typedef VFileCoreOptions
    * @property {Value} [value]
    * @property {string} [cwd]
    * @property {Array<string>} [history]
    * @property {string|URL} [path]
    * @property {string} [basename]
    * @property {string} [stem]
    * @property {string} [extname]
    * @property {string} [dirname]
    * @property {Data} [data]
    *
    * @typedef Map
    *   Raw source map, see:
    *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.
    * @property {number} version
    * @property {Array<string>} sources
    * @property {Array<string>} names
    * @property {string|undefined} [sourceRoot]
    * @property {Array<string>|undefined} [sourcesContent]
    * @property {string} mappings
    * @property {string} file
    *
    * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options
    *   Configuration: a bunch of keys that will be shallow copied over to the new
    *   file.
    *
    * @typedef {Record<string, unknown>} ReporterSettings
    * @typedef {<T = ReporterSettings>(files: Array<VFile>, options: T) => string} Reporter
    */

   // Order of setting (least specific to most), we need this because otherwise
   // `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
   // stem can be set.
   const order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];

   class VFile {
     /**
      * Create a new virtual file.
      *
      * If `options` is `string` or `Buffer`, it’s treated as `{value: options}`.
      * If `options` is a `URL`, it’s treated as `{path: options}`.
      * If `options` is a `VFile`, shallow copies its data over to the new file.
      * All fields in `options` are set on the newly created `VFile`.
      *
      * Path related fields are set in the following order (least specific to
      * most specific): `history`, `path`, `basename`, `stem`, `extname`,
      * `dirname`.
      *
      * It’s not possible to set either `dirname` or `extname` without setting
      * either `history`, `path`, `basename`, or `stem` as well.
      *
      * @param {Compatible} [value]
      */
     constructor(value) {
       /** @type {Options} */
       let options;

       if (!value) {
         options = {};
       } else if (typeof value === 'string' || isBuffer(value)) {
         // @ts-expect-error Looks like a buffer.
         options = {value};
       } else if (isUrl(value)) {
         options = {path: value};
       } else {
         // @ts-expect-error Looks like file or options.
         options = value;
       }

       /**
        * Place to store custom information (default: `{}`).
        * It’s OK to store custom data directly on the file but moving it to
        * `data` is recommended.
        * @type {Data}
        */
       this.data = {};

       /**
        * List of messages associated with the file.
        * @type {Array<VFileMessage>}
        */
       this.messages = [];

       /**
        * List of filepaths the file moved between.
        * The first is the original path and the last is the current path.
        * @type {Array<string>}
        */
       this.history = [];

       /**
        * Base of `path` (default: `process.cwd()` or `'/'` in browsers).
        * @type {string}
        */
       this.cwd = proc.cwd();

       /* eslint-disable no-unused-expressions */
       /**
        * Raw value.
        * @type {Value}
        */
       this.value;

       // The below are non-standard, they are “well-known”.
       // As in, used in several tools.

       /**
        * Whether a file was saved to disk.
        * This is used by vfile reporters.
        * @type {boolean}
        */
       this.stored;

       /**
        * Sometimes files have a non-string, compiled, representation.
        * This can be stored in the `result` field.
        * One example is when turning markdown into React nodes.
        * This is used by unified to store non-string results.
        * @type {unknown}
        */
       this.result;

       /**
        * Sometimes files have a source map associated with them.
        * This can be stored in the `map` field.
        * This should be a `Map` type, which is equivalent to the `RawSourceMap`
        * type from the `source-map` module.
        * @type {Map|undefined}
        */
       this.map;
       /* eslint-enable no-unused-expressions */

       // Set path related properties in the correct order.
       let index = -1;

       while (++index < order.length) {
         const prop = order[index];

         // Note: we specifically use `in` instead of `hasOwnProperty` to accept
         // `vfile`s too.
         if (prop in options && options[prop] !== undefined) {
           // @ts-expect-error: TS is confused by the different types for `history`.
           this[prop] = prop === 'history' ? [...options[prop]] : options[prop];
         }
       }

       /** @type {string} */
       let prop;

       // Set non-path related properties.
       for (prop in options) {
         // @ts-expect-error: fine to set other things.
         if (!order.includes(prop)) this[prop] = options[prop];
       }
     }

     /**
      * Get the full path (example: `'~/index.min.js'`).
      * @returns {string}
      */
     get path() {
       return this.history[this.history.length - 1]
     }

     /**
      * Set the full path (example: `'~/index.min.js'`).
      * Cannot be nullified.
      * You can set a file URL (a `URL` object with a `file:` protocol) which will
      * be turned into a path with `url.fileURLToPath`.
      * @param {string|URL} path
      */
     set path(path) {
       if (isUrl(path)) {
         path = urlToPath(path);
       }

       assertNonEmpty(path, 'path');

       if (this.path !== path) {
         this.history.push(path);
       }
     }

     /**
      * Get the parent path (example: `'~'`).
      */
     get dirname() {
       return typeof this.path === 'string' ? path.dirname(this.path) : undefined
     }

     /**
      * Set the parent path (example: `'~'`).
      * Cannot be set if there’s no `path` yet.
      */
     set dirname(dirname) {
       assertPath(this.basename, 'dirname');
       this.path = path.join(dirname || '', this.basename);
     }

     /**
      * Get the basename (including extname) (example: `'index.min.js'`).
      */
     get basename() {
       return typeof this.path === 'string' ? path.basename(this.path) : undefined
     }

     /**
      * Set basename (including extname) (`'index.min.js'`).
      * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
      * on windows).
      * Cannot be nullified (use `file.path = file.dirname` instead).
      */
     set basename(basename) {
       assertNonEmpty(basename, 'basename');
       assertPart(basename, 'basename');
       this.path = path.join(this.dirname || '', basename);
     }

     /**
      * Get the extname (including dot) (example: `'.js'`).
      */
     get extname() {
       return typeof this.path === 'string' ? path.extname(this.path) : undefined
     }

     /**
      * Set the extname (including dot) (example: `'.js'`).
      * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
      * on windows).
      * Cannot be set if there’s no `path` yet.
      */
     set extname(extname) {
       assertPart(extname, 'extname');
       assertPath(this.dirname, 'extname');

       if (extname) {
         if (extname.charCodeAt(0) !== 46 /* `.` */) {
           throw new Error('`extname` must start with `.`')
         }

         if (extname.includes('.', 1)) {
           throw new Error('`extname` cannot contain multiple dots')
         }
       }

       this.path = path.join(this.dirname, this.stem + (extname || ''));
     }

     /**
      * Get the stem (basename w/o extname) (example: `'index.min'`).
      */
     get stem() {
       return typeof this.path === 'string'
         ? path.basename(this.path, this.extname)
         : undefined
     }

     /**
      * Set the stem (basename w/o extname) (example: `'index.min'`).
      * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
      * on windows).
      * Cannot be nullified (use `file.path = file.dirname` instead).
      */
     set stem(stem) {
       assertNonEmpty(stem, 'stem');
       assertPart(stem, 'stem');
       this.path = path.join(this.dirname || '', stem + (this.extname || ''));
     }

     /**
      * Serialize the file.
      *
      * @param {BufferEncoding} [encoding='utf8']
      *   When `value` is a `Buffer`, `encoding` is a character encoding to
      *   understand it as (default: `'utf8'`).
      * @returns {string}
      *   Serialized file.
      */
     toString(encoding) {
       return (this.value || '').toString(encoding)
     }

     /**
      * Constructs a new `VFileMessage`, where `fatal` is set to `false`, and
      * associates it with the file by adding it to `vfile.messages` and setting
      * `message.file` to the current filepath.
      *
      * @param {string|Error} reason
      *   Human readable reason for the message, uses the stack and message of the error if given.
      * @param {Node|NodeLike|Position|Point} [place]
      *   Place where the message occurred in the file.
      * @param {string} [origin]
      *   Computer readable reason for the message
      * @returns {VFileMessage}
      *   Message.
      */
     message(reason, place, origin) {
       const message = new VFileMessage(reason, place, origin);

       if (this.path) {
         message.name = this.path + ':' + message.name;
         message.file = this.path;
       }

       message.fatal = false;

       this.messages.push(message);

       return message
     }

     /**
      * Like `VFile#message()`, but associates an informational message where
      * `fatal` is set to `null`.
      *
      * @param {string|Error} reason
      *   Human readable reason for the message, uses the stack and message of the error if given.
      * @param {Node|NodeLike|Position|Point} [place]
      *   Place where the message occurred in the file.
      * @param {string} [origin]
      *   Computer readable reason for the message
      * @returns {VFileMessage}
      *   Message.
      */
     info(reason, place, origin) {
       const message = this.message(reason, place, origin);

       message.fatal = null;

       return message
     }

     /**
      * Like `VFile#message()`, but associates a fatal message where `fatal` is
      * set to `true`, and then immediately throws it.
      *
      * > 👉 **Note**: a fatal error means that a file is no longer processable.
      *
      * @param {string|Error} reason
      *   Human readable reason for the message, uses the stack and message of the error if given.
      * @param {Node|NodeLike|Position|Point} [place]
      *   Place where the message occurred in the file.
      * @param {string} [origin]
      *   Computer readable reason for the message
      * @returns {never}
      *   Message.
      */
     fail(reason, place, origin) {
       const message = this.message(reason, place, origin);

       message.fatal = true;

       throw message
     }
   }

   /**
    * Assert that `part` is not a path (as in, does not contain `path.sep`).
    *
    * @param {string|undefined} part
    * @param {string} name
    * @returns {void}
    */
   function assertPart(part, name) {
     if (part && part.includes(path.sep)) {
       throw new Error(
         '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'
       )
     }
   }

   /**
    * Assert that `part` is not empty.
    *
    * @param {string|undefined} part
    * @param {string} name
    * @returns {asserts part is string}
    */
   function assertNonEmpty(part, name) {
     if (!part) {
       throw new Error('`' + name + '` cannot be empty')
     }
   }

   /**
    * Assert `path` exists.
    *
    * @param {string|undefined} path
    * @param {string} name
    * @returns {asserts path is string}
    */
   function assertPath(path, name) {
     if (!path) {
       throw new Error('Setting `' + name + '` requires `path` to be set too')
     }
   }

   /**
    * @typedef {import('./info.js').Info} Info
    * @typedef {Record<string, Info>} Properties
    * @typedef {Record<string, string>} Normal
    */

   class Schema {
     /**
      * @constructor
      * @param {Properties} property
      * @param {Normal} normal
      * @param {string} [space]
      */
     constructor(property, normal, space) {
       this.property = property;
       this.normal = normal;
       if (space) {
         this.space = space;
       }
     }
   }

   /** @type {Properties} */
   Schema.prototype.property = {};
   /** @type {Normal} */
   Schema.prototype.normal = {};
   /** @type {string|null} */
   Schema.prototype.space = null;

   /**
    * @typedef {import('./schema.js').Properties} Properties
    * @typedef {import('./schema.js').Normal} Normal
    */

   /**
    * @param {Schema[]} definitions
    * @param {string} [space]
    * @returns {Schema}
    */
   function merge(definitions, space) {
     /** @type {Properties} */
     const property = {};
     /** @type {Normal} */
     const normal = {};
     let index = -1;

     while (++index < definitions.length) {
       Object.assign(property, definitions[index].property);
       Object.assign(normal, definitions[index].normal);
     }

     return new Schema(property, normal, space)
   }

   /**
    * @param {string} value
    * @returns {string}
    */
   function normalize(value) {
     return value.toLowerCase()
   }

   class Info {
     /**
      * @constructor
      * @param {string} property
      * @param {string} attribute
      */
     constructor(property, attribute) {
       /** @type {string} */
       this.property = property;
       /** @type {string} */
       this.attribute = attribute;
     }
   }

   /** @type {string|null} */
   Info.prototype.space = null;
   Info.prototype.boolean = false;
   Info.prototype.booleanish = false;
   Info.prototype.overloadedBoolean = false;
   Info.prototype.number = false;
   Info.prototype.commaSeparated = false;
   Info.prototype.spaceSeparated = false;
   Info.prototype.commaOrSpaceSeparated = false;
   Info.prototype.mustUseProperty = false;
   Info.prototype.defined = false;

   let powers = 0;

   const boolean = increment();
   const booleanish = increment();
   const overloadedBoolean = increment();
   const number = increment();
   const spaceSeparated = increment();
   const commaSeparated = increment();
   const commaOrSpaceSeparated = increment();

   function increment() {
     return 2 ** ++powers
   }

   var types = /*#__PURE__*/Object.freeze({
      __proto__: null,
      boolean: boolean,
      booleanish: booleanish,
      overloadedBoolean: overloadedBoolean,
      number: number,
      spaceSeparated: spaceSeparated,
      commaSeparated: commaSeparated,
      commaOrSpaceSeparated: commaOrSpaceSeparated
   });

   /** @type {Array<keyof types>} */
   // @ts-expect-error: hush.
   const checks = Object.keys(types);

   class DefinedInfo extends Info {
     /**
      * @constructor
      * @param {string} property
      * @param {string} attribute
      * @param {number|null} [mask]
      * @param {string} [space]
      */
     constructor(property, attribute, mask, space) {
       let index = -1;

       super(property, attribute);

       mark(this, 'space', space);

       if (typeof mask === 'number') {
         while (++index < checks.length) {
           const check = checks[index];
           mark(this, checks[index], (mask & types[check]) === types[check]);
         }
       }
     }
   }

   DefinedInfo.prototype.defined = true;

   /**
    * @param {DefinedInfo} values
    * @param {string} key
    * @param {unknown} value
    */
   function mark(values, key, value) {
     if (value) {
       // @ts-expect-error: assume `value` matches the expected value of `key`.
       values[key] = value;
     }
   }

   /**
    * @typedef {import('./schema.js').Properties} Properties
    * @typedef {import('./schema.js').Normal} Normal
    *
    * @typedef {Record<string, string>} Attributes
    *
    * @typedef {Object} Definition
    * @property {Record<string, number|null>} properties
    * @property {(attributes: Attributes, property: string) => string} transform
    * @property {string} [space]
    * @property {Attributes} [attributes]
    * @property {Array<string>} [mustUseProperty]
    */

   const own$7 = {}.hasOwnProperty;

   /**
    * @param {Definition} definition
    * @returns {Schema}
    */
   function create(definition) {
     /** @type {Properties} */
     const property = {};
     /** @type {Normal} */
     const normal = {};
     /** @type {string} */
     let prop;

     for (prop in definition.properties) {
       if (own$7.call(definition.properties, prop)) {
         const value = definition.properties[prop];
         const info = new DefinedInfo(
           prop,
           definition.transform(definition.attributes || {}, prop),
           value,
           definition.space
         );

         if (
           definition.mustUseProperty &&
           definition.mustUseProperty.includes(prop)
         ) {
           info.mustUseProperty = true;
         }

         property[prop] = info;

         normal[normalize(prop)] = prop;
         normal[normalize(info.attribute)] = prop;
       }
     }

     return new Schema(property, normal, definition.space)
   }

   const xlink = create({
     space: 'xlink',
     transform(_, prop) {
       return 'xlink:' + prop.slice(5).toLowerCase()
     },
     properties: {
       xLinkActuate: null,
       xLinkArcRole: null,
       xLinkHref: null,
       xLinkRole: null,
       xLinkShow: null,
       xLinkTitle: null,
       xLinkType: null
     }
   });

   const xml = create({
     space: 'xml',
     transform(_, prop) {
       return 'xml:' + prop.slice(3).toLowerCase()
     },
     properties: {xmlLang: null, xmlBase: null, xmlSpace: null}
   });

   /**
    * @param {Record<string, string>} attributes
    * @param {string} attribute
    * @returns {string}
    */
   function caseSensitiveTransform(attributes, attribute) {
     return attribute in attributes ? attributes[attribute] : attribute
   }

   /**
    * @param {Record<string, string>} attributes
    * @param {string} property
    * @returns {string}
    */
   function caseInsensitiveTransform(attributes, property) {
     return caseSensitiveTransform(attributes, property.toLowerCase())
   }

   const xmlns = create({
     space: 'xmlns',
     attributes: {xmlnsxlink: 'xmlns:xlink'},
     transform: caseInsensitiveTransform,
     properties: {xmlns: null, xmlnsXLink: null}
   });

   const aria = create({
     transform(_, prop) {
       return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()
     },
     properties: {
       ariaActiveDescendant: null,
       ariaAtomic: booleanish,
       ariaAutoComplete: null,
       ariaBusy: booleanish,
       ariaChecked: booleanish,
       ariaColCount: number,
       ariaColIndex: number,
       ariaColSpan: number,
       ariaControls: spaceSeparated,
       ariaCurrent: null,
       ariaDescribedBy: spaceSeparated,
       ariaDetails: null,
       ariaDisabled: booleanish,
       ariaDropEffect: spaceSeparated,
       ariaErrorMessage: null,
       ariaExpanded: booleanish,
       ariaFlowTo: spaceSeparated,
       ariaGrabbed: booleanish,
       ariaHasPopup: null,
       ariaHidden: booleanish,
       ariaInvalid: null,
       ariaKeyShortcuts: null,
       ariaLabel: null,
       ariaLabelledBy: spaceSeparated,
       ariaLevel: number,
       ariaLive: null,
       ariaModal: booleanish,
       ariaMultiLine: booleanish,
       ariaMultiSelectable: booleanish,
       ariaOrientation: null,
       ariaOwns: spaceSeparated,
       ariaPlaceholder: null,
       ariaPosInSet: number,
       ariaPressed: booleanish,
       ariaReadOnly: booleanish,
       ariaRelevant: null,
       ariaRequired: booleanish,
       ariaRoleDescription: spaceSeparated,
       ariaRowCount: number,
       ariaRowIndex: number,
       ariaRowSpan: number,
       ariaSelected: booleanish,
       ariaSetSize: number,
       ariaSort: null,
       ariaValueMax: number,
       ariaValueMin: number,
       ariaValueNow: number,
       ariaValueText: null,
       role: null
     }
   });

   const html$2 = create({
     space: 'html',
     attributes: {
       acceptcharset: 'accept-charset',
       classname: 'class',
       htmlfor: 'for',
       httpequiv: 'http-equiv'
     },
     transform: caseInsensitiveTransform,
     mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
     properties: {
       // Standard Properties.
       abbr: null,
       accept: commaSeparated,
       acceptCharset: spaceSeparated,
       accessKey: spaceSeparated,
       action: null,
       allow: null,
       allowFullScreen: boolean,
       allowPaymentRequest: boolean,
       allowUserMedia: boolean,
       alt: null,
       as: null,
       async: boolean,
       autoCapitalize: null,
       autoComplete: spaceSeparated,
       autoFocus: boolean,
       autoPlay: boolean,
       capture: boolean,
       charSet: null,
       checked: boolean,
       cite: null,
       className: spaceSeparated,
       cols: number,
       colSpan: null,
       content: null,
       contentEditable: booleanish,
       controls: boolean,
       controlsList: spaceSeparated,
       coords: number | commaSeparated,
       crossOrigin: null,
       data: null,
       dateTime: null,
       decoding: null,
       default: boolean,
       defer: boolean,
       dir: null,
       dirName: null,
       disabled: boolean,
       download: overloadedBoolean,
       draggable: booleanish,
       encType: null,
       enterKeyHint: null,
       form: null,
       formAction: null,
       formEncType: null,
       formMethod: null,
       formNoValidate: boolean,
       formTarget: null,
       headers: spaceSeparated,
       height: number,
       hidden: boolean,
       high: number,
       href: null,
       hrefLang: null,
       htmlFor: spaceSeparated,
       httpEquiv: spaceSeparated,
       id: null,
       imageSizes: null,
       imageSrcSet: null,
       inputMode: null,
       integrity: null,
       is: null,
       isMap: boolean,
       itemId: null,
       itemProp: spaceSeparated,
       itemRef: spaceSeparated,
       itemScope: boolean,
       itemType: spaceSeparated,
       kind: null,
       label: null,
       lang: null,
       language: null,
       list: null,
       loading: null,
       loop: boolean,
       low: number,
       manifest: null,
       max: null,
       maxLength: number,
       media: null,
       method: null,
       min: null,
       minLength: number,
       multiple: boolean,
       muted: boolean,
       name: null,
       nonce: null,
       noModule: boolean,
       noValidate: boolean,
       onAbort: null,
       onAfterPrint: null,
       onAuxClick: null,
       onBeforePrint: null,
       onBeforeUnload: null,
       onBlur: null,
       onCancel: null,
       onCanPlay: null,
       onCanPlayThrough: null,
       onChange: null,
       onClick: null,
       onClose: null,
       onContextLost: null,
       onContextMenu: null,
       onContextRestored: null,
       onCopy: null,
       onCueChange: null,
       onCut: null,
       onDblClick: null,
       onDrag: null,
       onDragEnd: null,
       onDragEnter: null,
       onDragExit: null,
       onDragLeave: null,
       onDragOver: null,
       onDragStart: null,
       onDrop: null,
       onDurationChange: null,
       onEmptied: null,
       onEnded: null,
       onError: null,
       onFocus: null,
       onFormData: null,
       onHashChange: null,
       onInput: null,
       onInvalid: null,
       onKeyDown: null,
       onKeyPress: null,
       onKeyUp: null,
       onLanguageChange: null,
       onLoad: null,
       onLoadedData: null,
       onLoadedMetadata: null,
       onLoadEnd: null,
       onLoadStart: null,
       onMessage: null,
       onMessageError: null,
       onMouseDown: null,
       onMouseEnter: null,
       onMouseLeave: null,
       onMouseMove: null,
       onMouseOut: null,
       onMouseOver: null,
       onMouseUp: null,
       onOffline: null,
       onOnline: null,
       onPageHide: null,
       onPageShow: null,
       onPaste: null,
       onPause: null,
       onPlay: null,
       onPlaying: null,
       onPopState: null,
       onProgress: null,
       onRateChange: null,
       onRejectionHandled: null,
       onReset: null,
       onResize: null,
       onScroll: null,
       onSecurityPolicyViolation: null,
       onSeeked: null,
       onSeeking: null,
       onSelect: null,
       onSlotChange: null,
       onStalled: null,
       onStorage: null,
       onSubmit: null,
       onSuspend: null,
       onTimeUpdate: null,
       onToggle: null,
       onUnhandledRejection: null,
       onUnload: null,
       onVolumeChange: null,
       onWaiting: null,
       onWheel: null,
       open: boolean,
       optimum: number,
       pattern: null,
       ping: spaceSeparated,
       placeholder: null,
       playsInline: boolean,
       poster: null,
       preload: null,
       readOnly: boolean,
       referrerPolicy: null,
       rel: spaceSeparated,
       required: boolean,
       reversed: boolean,
       rows: number,
       rowSpan: number,
       sandbox: spaceSeparated,
       scope: null,
       scoped: boolean,
       seamless: boolean,
       selected: boolean,
       shape: null,
       size: number,
       sizes: null,
       slot: null,
       span: number,
       spellCheck: booleanish,
       src: null,
       srcDoc: null,
       srcLang: null,
       srcSet: null,
       start: number,
       step: null,
       style: null,
       tabIndex: number,
       target: null,
       title: null,
       translate: null,
       type: null,
       typeMustMatch: boolean,
       useMap: null,
       value: booleanish,
       width: number,
       wrap: null,

       // Legacy.
       // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
       align: null, // Several. Use CSS `text-align` instead,
       aLink: null, // `<body>`. Use CSS `a:active {color}` instead
       archive: spaceSeparated, // `<object>`. List of URIs to archives
       axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`
       background: null, // `<body>`. Use CSS `background-image` instead
       bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead
       border: number, // `<table>`. Use CSS `border-width` instead,
       borderColor: null, // `<table>`. Use CSS `border-color` instead,
       bottomMargin: number, // `<body>`
       cellPadding: null, // `<table>`
       cellSpacing: null, // `<table>`
       char: null, // Several table elements. When `align=char`, sets the character to align on
       charOff: null, // Several table elements. When `char`, offsets the alignment
       classId: null, // `<object>`
       clear: null, // `<br>`. Use CSS `clear` instead
       code: null, // `<object>`
       codeBase: null, // `<object>`
       codeType: null, // `<object>`
       color: null, // `<font>` and `<hr>`. Use CSS instead
       compact: boolean, // Lists. Use CSS to reduce space between items instead
       declare: boolean, // `<object>`
       event: null, // `<script>`
       face: null, // `<font>`. Use CSS instead
       frame: null, // `<table>`
       frameBorder: null, // `<iframe>`. Use CSS `border` instead
       hSpace: number, // `<img>` and `<object>`
       leftMargin: number, // `<body>`
       link: null, // `<body>`. Use CSS `a:link {color: *}` instead
       longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
       lowSrc: null, // `<img>`. Use a `<picture>`
       marginHeight: number, // `<body>`
       marginWidth: number, // `<body>`
       noResize: boolean, // `<frame>`
       noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`
       noShade: boolean, // `<hr>`. Use background-color and height instead of borders
       noWrap: boolean, // `<td>` and `<th>`
       object: null, // `<applet>`
       profile: null, // `<head>`
       prompt: null, // `<isindex>`
       rev: null, // `<link>`
       rightMargin: number, // `<body>`
       rules: null, // `<table>`
       scheme: null, // `<meta>`
       scrolling: booleanish, // `<frame>`. Use overflow in the child context
       standby: null, // `<object>`
       summary: null, // `<table>`
       text: null, // `<body>`. Use CSS `color` instead
       topMargin: number, // `<body>`
       valueType: null, // `<param>`
       version: null, // `<html>`. Use a doctype.
       vAlign: null, // Several. Use CSS `vertical-align` instead
       vLink: null, // `<body>`. Use CSS `a:visited {color}` instead
       vSpace: number, // `<img>` and `<object>`

       // Non-standard Properties.
       allowTransparency: null,
       autoCorrect: null,
       autoSave: null,
       disablePictureInPicture: boolean,
       disableRemotePlayback: boolean,
       prefix: null,
       property: null,
       results: number,
       security: null,
       unselectable: null
     }
   });

   const svg$1 = create({
     space: 'svg',
     attributes: {
       accentHeight: 'accent-height',
       alignmentBaseline: 'alignment-baseline',
       arabicForm: 'arabic-form',
       baselineShift: 'baseline-shift',
       capHeight: 'cap-height',
       className: 'class',
       clipPath: 'clip-path',
       clipRule: 'clip-rule',
       colorInterpolation: 'color-interpolation',
       colorInterpolationFilters: 'color-interpolation-filters',
       colorProfile: 'color-profile',
       colorRendering: 'color-rendering',
       crossOrigin: 'crossorigin',
       dataType: 'datatype',
       dominantBaseline: 'dominant-baseline',
       enableBackground: 'enable-background',
       fillOpacity: 'fill-opacity',
       fillRule: 'fill-rule',
       floodColor: 'flood-color',
       floodOpacity: 'flood-opacity',
       fontFamily: 'font-family',
       fontSize: 'font-size',
       fontSizeAdjust: 'font-size-adjust',
       fontStretch: 'font-stretch',
       fontStyle: 'font-style',
       fontVariant: 'font-variant',
       fontWeight: 'font-weight',
       glyphName: 'glyph-name',
       glyphOrientationHorizontal: 'glyph-orientation-horizontal',
       glyphOrientationVertical: 'glyph-orientation-vertical',
       hrefLang: 'hreflang',
       horizAdvX: 'horiz-adv-x',
       horizOriginX: 'horiz-origin-x',
       horizOriginY: 'horiz-origin-y',
       imageRendering: 'image-rendering',
       letterSpacing: 'letter-spacing',
       lightingColor: 'lighting-color',
       markerEnd: 'marker-end',
       markerMid: 'marker-mid',
       markerStart: 'marker-start',
       navDown: 'nav-down',
       navDownLeft: 'nav-down-left',
       navDownRight: 'nav-down-right',
       navLeft: 'nav-left',
       navNext: 'nav-next',
       navPrev: 'nav-prev',
       navRight: 'nav-right',
       navUp: 'nav-up',
       navUpLeft: 'nav-up-left',
       navUpRight: 'nav-up-right',
       onAbort: 'onabort',
       onActivate: 'onactivate',
       onAfterPrint: 'onafterprint',
       onBeforePrint: 'onbeforeprint',
       onBegin: 'onbegin',
       onCancel: 'oncancel',
       onCanPlay: 'oncanplay',
       onCanPlayThrough: 'oncanplaythrough',
       onChange: 'onchange',
       onClick: 'onclick',
       onClose: 'onclose',
       onCopy: 'oncopy',
       onCueChange: 'oncuechange',
       onCut: 'oncut',
       onDblClick: 'ondblclick',
       onDrag: 'ondrag',
       onDragEnd: 'ondragend',
       onDragEnter: 'ondragenter',
       onDragExit: 'ondragexit',
       onDragLeave: 'ondragleave',
       onDragOver: 'ondragover',
       onDragStart: 'ondragstart',
       onDrop: 'ondrop',
       onDurationChange: 'ondurationchange',
       onEmptied: 'onemptied',
       onEnd: 'onend',
       onEnded: 'onended',
       onError: 'onerror',
       onFocus: 'onfocus',
       onFocusIn: 'onfocusin',
       onFocusOut: 'onfocusout',
       onHashChange: 'onhashchange',
       onInput: 'oninput',
       onInvalid: 'oninvalid',
       onKeyDown: 'onkeydown',
       onKeyPress: 'onkeypress',
       onKeyUp: 'onkeyup',
       onLoad: 'onload',
       onLoadedData: 'onloadeddata',
       onLoadedMetadata: 'onloadedmetadata',
       onLoadStart: 'onloadstart',
       onMessage: 'onmessage',
       onMouseDown: 'onmousedown',
       onMouseEnter: 'onmouseenter',
       onMouseLeave: 'onmouseleave',
       onMouseMove: 'onmousemove',
       onMouseOut: 'onmouseout',
       onMouseOver: 'onmouseover',
       onMouseUp: 'onmouseup',
       onMouseWheel: 'onmousewheel',
       onOffline: 'onoffline',
       onOnline: 'ononline',
       onPageHide: 'onpagehide',
       onPageShow: 'onpageshow',
       onPaste: 'onpaste',
       onPause: 'onpause',
       onPlay: 'onplay',
       onPlaying: 'onplaying',
       onPopState: 'onpopstate',
       onProgress: 'onprogress',
       onRateChange: 'onratechange',
       onRepeat: 'onrepeat',
       onReset: 'onreset',
       onResize: 'onresize',
       onScroll: 'onscroll',
       onSeeked: 'onseeked',
       onSeeking: 'onseeking',
       onSelect: 'onselect',
       onShow: 'onshow',
       onStalled: 'onstalled',
       onStorage: 'onstorage',
       onSubmit: 'onsubmit',
       onSuspend: 'onsuspend',
       onTimeUpdate: 'ontimeupdate',
       onToggle: 'ontoggle',
       onUnload: 'onunload',
       onVolumeChange: 'onvolumechange',
       onWaiting: 'onwaiting',
       onZoom: 'onzoom',
       overlinePosition: 'overline-position',
       overlineThickness: 'overline-thickness',
       paintOrder: 'paint-order',
       panose1: 'panose-1',
       pointerEvents: 'pointer-events',
       referrerPolicy: 'referrerpolicy',
       renderingIntent: 'rendering-intent',
       shapeRendering: 'shape-rendering',
       stopColor: 'stop-color',
       stopOpacity: 'stop-opacity',
       strikethroughPosition: 'strikethrough-position',
       strikethroughThickness: 'strikethrough-thickness',
       strokeDashArray: 'stroke-dasharray',
       strokeDashOffset: 'stroke-dashoffset',
       strokeLineCap: 'stroke-linecap',
       strokeLineJoin: 'stroke-linejoin',
       strokeMiterLimit: 'stroke-miterlimit',
       strokeOpacity: 'stroke-opacity',
       strokeWidth: 'stroke-width',
       tabIndex: 'tabindex',
       textAnchor: 'text-anchor',
       textDecoration: 'text-decoration',
       textRendering: 'text-rendering',
       typeOf: 'typeof',
       underlinePosition: 'underline-position',
       underlineThickness: 'underline-thickness',
       unicodeBidi: 'unicode-bidi',
       unicodeRange: 'unicode-range',
       unitsPerEm: 'units-per-em',
       vAlphabetic: 'v-alphabetic',
       vHanging: 'v-hanging',
       vIdeographic: 'v-ideographic',
       vMathematical: 'v-mathematical',
       vectorEffect: 'vector-effect',
       vertAdvY: 'vert-adv-y',
       vertOriginX: 'vert-origin-x',
       vertOriginY: 'vert-origin-y',
       wordSpacing: 'word-spacing',
       writingMode: 'writing-mode',
       xHeight: 'x-height',
       // These were camelcased in Tiny. Now lowercased in SVG 2
       playbackOrder: 'playbackorder',
       timelineBegin: 'timelinebegin'
     },
     transform: caseSensitiveTransform,
     properties: {
       about: commaOrSpaceSeparated,
       accentHeight: number,
       accumulate: null,
       additive: null,
       alignmentBaseline: null,
       alphabetic: number,
       amplitude: number,
       arabicForm: null,
       ascent: number,
       attributeName: null,
       attributeType: null,
       azimuth: number,
       bandwidth: null,
       baselineShift: null,
       baseFrequency: null,
       baseProfile: null,
       bbox: null,
       begin: null,
       bias: number,
       by: null,
       calcMode: null,
       capHeight: number,
       className: spaceSeparated,
       clip: null,
       clipPath: null,
       clipPathUnits: null,
       clipRule: null,
       color: null,
       colorInterpolation: null,
       colorInterpolationFilters: null,
       colorProfile: null,
       colorRendering: null,
       content: null,
       contentScriptType: null,
       contentStyleType: null,
       crossOrigin: null,
       cursor: null,
       cx: null,
       cy: null,
       d: null,
       dataType: null,
       defaultAction: null,
       descent: number,
       diffuseConstant: number,
       direction: null,
       display: null,
       dur: null,
       divisor: number,
       dominantBaseline: null,
       download: boolean,
       dx: null,
       dy: null,
       edgeMode: null,
       editable: null,
       elevation: number,
       enableBackground: null,
       end: null,
       event: null,
       exponent: number,
       externalResourcesRequired: null,
       fill: null,
       fillOpacity: number,
       fillRule: null,
       filter: null,
       filterRes: null,
       filterUnits: null,
       floodColor: null,
       floodOpacity: null,
       focusable: null,
       focusHighlight: null,
       fontFamily: null,
       fontSize: null,
       fontSizeAdjust: null,
       fontStretch: null,
       fontStyle: null,
       fontVariant: null,
       fontWeight: null,
       format: null,
       fr: null,
       from: null,
       fx: null,
       fy: null,
       g1: commaSeparated,
       g2: commaSeparated,
       glyphName: commaSeparated,
       glyphOrientationHorizontal: null,
       glyphOrientationVertical: null,
       glyphRef: null,
       gradientTransform: null,
       gradientUnits: null,
       handler: null,
       hanging: number,
       hatchContentUnits: null,
       hatchUnits: null,
       height: null,
       href: null,
       hrefLang: null,
       horizAdvX: number,
       horizOriginX: number,
       horizOriginY: number,
       id: null,
       ideographic: number,
       imageRendering: null,
       initialVisibility: null,
       in: null,
       in2: null,
       intercept: number,
       k: number,
       k1: number,
       k2: number,
       k3: number,
       k4: number,
       kernelMatrix: commaOrSpaceSeparated,
       kernelUnitLength: null,
       keyPoints: null, // SEMI_COLON_SEPARATED
       keySplines: null, // SEMI_COLON_SEPARATED
       keyTimes: null, // SEMI_COLON_SEPARATED
       kerning: null,
       lang: null,
       lengthAdjust: null,
       letterSpacing: null,
       lightingColor: null,
       limitingConeAngle: number,
       local: null,
       markerEnd: null,
       markerMid: null,
       markerStart: null,
       markerHeight: null,
       markerUnits: null,
       markerWidth: null,
       mask: null,
       maskContentUnits: null,
       maskUnits: null,
       mathematical: null,
       max: null,
       media: null,
       mediaCharacterEncoding: null,
       mediaContentEncodings: null,
       mediaSize: number,
       mediaTime: null,
       method: null,
       min: null,
       mode: null,
       name: null,
       navDown: null,
       navDownLeft: null,
       navDownRight: null,
       navLeft: null,
       navNext: null,
       navPrev: null,
       navRight: null,
       navUp: null,
       navUpLeft: null,
       navUpRight: null,
       numOctaves: null,
       observer: null,
       offset: null,
       onAbort: null,
       onActivate: null,
       onAfterPrint: null,
       onBeforePrint: null,
       onBegin: null,
       onCancel: null,
       onCanPlay: null,
       onCanPlayThrough: null,
       onChange: null,
       onClick: null,
       onClose: null,
       onCopy: null,
       onCueChange: null,
       onCut: null,
       onDblClick: null,
       onDrag: null,
       onDragEnd: null,
       onDragEnter: null,
       onDragExit: null,
       onDragLeave: null,
       onDragOver: null,
       onDragStart: null,
       onDrop: null,
       onDurationChange: null,
       onEmptied: null,
       onEnd: null,
       onEnded: null,
       onError: null,
       onFocus: null,
       onFocusIn: null,
       onFocusOut: null,
       onHashChange: null,
       onInput: null,
       onInvalid: null,
       onKeyDown: null,
       onKeyPress: null,
       onKeyUp: null,
       onLoad: null,
       onLoadedData: null,
       onLoadedMetadata: null,
       onLoadStart: null,
       onMessage: null,
       onMouseDown: null,
       onMouseEnter: null,
       onMouseLeave: null,
       onMouseMove: null,
       onMouseOut: null,
       onMouseOver: null,
       onMouseUp: null,
       onMouseWheel: null,
       onOffline: null,
       onOnline: null,
       onPageHide: null,
       onPageShow: null,
       onPaste: null,
       onPause: null,
       onPlay: null,
       onPlaying: null,
       onPopState: null,
       onProgress: null,
       onRateChange: null,
       onRepeat: null,
       onReset: null,
       onResize: null,
       onScroll: null,
       onSeeked: null,
       onSeeking: null,
       onSelect: null,
       onShow: null,
       onStalled: null,
       onStorage: null,
       onSubmit: null,
       onSuspend: null,
       onTimeUpdate: null,
       onToggle: null,
       onUnload: null,
       onVolumeChange: null,
       onWaiting: null,
       onZoom: null,
       opacity: null,
       operator: null,
       order: null,
       orient: null,
       orientation: null,
       origin: null,
       overflow: null,
       overlay: null,
       overlinePosition: number,
       overlineThickness: number,
       paintOrder: null,
       panose1: null,
       path: null,
       pathLength: number,
       patternContentUnits: null,
       patternTransform: null,
       patternUnits: null,
       phase: null,
       ping: spaceSeparated,
       pitch: null,
       playbackOrder: null,
       pointerEvents: null,
       points: null,
       pointsAtX: number,
       pointsAtY: number,
       pointsAtZ: number,
       preserveAlpha: null,
       preserveAspectRatio: null,
       primitiveUnits: null,
       propagate: null,
       property: commaOrSpaceSeparated,
       r: null,
       radius: null,
       referrerPolicy: null,
       refX: null,
       refY: null,
       rel: commaOrSpaceSeparated,
       rev: commaOrSpaceSeparated,
       renderingIntent: null,
       repeatCount: null,
       repeatDur: null,
       requiredExtensions: commaOrSpaceSeparated,
       requiredFeatures: commaOrSpaceSeparated,
       requiredFonts: commaOrSpaceSeparated,
       requiredFormats: commaOrSpaceSeparated,
       resource: null,
       restart: null,
       result: null,
       rotate: null,
       rx: null,
       ry: null,
       scale: null,
       seed: null,
       shapeRendering: null,
       side: null,
       slope: null,
       snapshotTime: null,
       specularConstant: number,
       specularExponent: number,
       spreadMethod: null,
       spacing: null,
       startOffset: null,
       stdDeviation: null,
       stemh: null,
       stemv: null,
       stitchTiles: null,
       stopColor: null,
       stopOpacity: null,
       strikethroughPosition: number,
       strikethroughThickness: number,
       string: null,
       stroke: null,
       strokeDashArray: commaOrSpaceSeparated,
       strokeDashOffset: null,
       strokeLineCap: null,
       strokeLineJoin: null,
       strokeMiterLimit: number,
       strokeOpacity: number,
       strokeWidth: null,
       style: null,
       surfaceScale: number,
       syncBehavior: null,
       syncBehaviorDefault: null,
       syncMaster: null,
       syncTolerance: null,
       syncToleranceDefault: null,
       systemLanguage: commaOrSpaceSeparated,
       tabIndex: number,
       tableValues: null,
       target: null,
       targetX: number,
       targetY: number,
       textAnchor: null,
       textDecoration: null,
       textRendering: null,
       textLength: null,
       timelineBegin: null,
       title: null,
       transformBehavior: null,
       type: null,
       typeOf: commaOrSpaceSeparated,
       to: null,
       transform: null,
       u1: null,
       u2: null,
       underlinePosition: number,
       underlineThickness: number,
       unicode: null,
       unicodeBidi: null,
       unicodeRange: null,
       unitsPerEm: number,
       values: null,
       vAlphabetic: number,
       vMathematical: number,
       vectorEffect: null,
       vHanging: number,
       vIdeographic: number,
       version: null,
       vertAdvY: number,
       vertOriginX: number,
       vertOriginY: number,
       viewBox: null,
       viewTarget: null,
       visibility: null,
       width: null,
       widths: null,
       wordSpacing: null,
       writingMode: null,
       x: null,
       x1: null,
       x2: null,
       xChannelSelector: null,
       xHeight: number,
       y: null,
       y1: null,
       y2: null,
       yChannelSelector: null,
       z: null,
       zoomAndPan: null
     }
   });

   /**
    * @typedef {import('./util/schema.js').Schema} Schema
    */

   const valid = /^data[-\w.:]+$/i;
   const dash = /-[a-z]/g;
   const cap = /[A-Z]/g;

   /**
    * @param {Schema} schema
    * @param {string} value
    * @returns {Info}
    */
   function find(schema, value) {
     const normal = normalize(value);
     let prop = value;
     let Type = Info;

     if (normal in schema.normal) {
       return schema.property[schema.normal[normal]]
     }

     if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
       // Attribute or property.
       if (value.charAt(4) === '-') {
         // Turn it into a property.
         const rest = value.slice(5).replace(dash, camelcase$1);
         prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
       } else {
         // Turn it into an attribute.
         const rest = value.slice(4);

         if (!dash.test(rest)) {
           let dashes = rest.replace(cap, kebab);

           if (dashes.charAt(0) !== '-') {
             dashes = '-' + dashes;
           }

           value = 'data' + dashes;
         }
       }

       Type = DefinedInfo;
     }

     return new Type(prop, value)
   }

   /**
    * @param {string} $0
    * @returns {string}
    */
   function kebab($0) {
     return '-' + $0.toLowerCase()
   }

   /**
    * @param {string} $0
    * @returns {string}
    */
   function camelcase$1($0) {
     return $0.charAt(1).toUpperCase()
   }

   /**
    * @typedef {import('./lib/util/info.js').Info} Info
    * @typedef {import('./lib/util/schema.js').Schema} Schema
    */
   const html$1 = merge([xml, xlink, xmlns, aria, html$2], 'html');
   const svg = merge([xml, xlink, xmlns, aria, svg$1], 'svg');

   /**
    * @typedef {import('hast').Properties} Properties
    * @typedef {import('hast').Element} Element
    */

   var search = /[#.]/g;

   /**
    * Create a hast element from a simple CSS selector.
    *
    * @param selector A simple CSS selector.
    *   Can contain a tag-name (`foo`), classes (`.bar`), and an ID (`#baz`).
    *   Multiple classes are allowed.
    *   Uses the last ID if multiple IDs are found.
    * @param [defaultTagName='div'] Tag name to use if `selector` does not specify one.
    */
   const parseSelector =
     /**
      * @type {(
      *  <Selector extends string, DefaultTagName extends string = 'div'>(selector?: Selector, defaultTagName?: DefaultTagName) => Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}
      * )}
      */
     (
       /**
        * @param {string} [selector]
        * @param {string} [defaultTagName='div']
        * @returns {Element}
        */
       function (selector, defaultTagName = 'div') {
         var value = selector || '';
         /** @type {Properties} */
         var props = {};
         var start = 0;
         /** @type {string} */
         var subvalue;
         /** @type {string} */
         var previous;
         /** @type {RegExpMatchArray} */
         var match;

         while (start < value.length) {
           search.lastIndex = start;
           match = search.exec(value);
           subvalue = value.slice(start, match ? match.index : value.length);

           if (subvalue) {
             if (!previous) {
               defaultTagName = subvalue;
             } else if (previous === '#') {
               props.id = subvalue;
             } else if (Array.isArray(props.className)) {
               props.className.push(subvalue);
             } else {
               props.className = [subvalue];
             }

             start += subvalue.length;
           }

           if (match) {
             previous = match[0];
             start++;
           }
         }

         return {
           type: 'element',
           tagName: defaultTagName,
           properties: props,
           children: []
         }
       }
     );

   /**
    * Parse space separated tokens to an array of strings.
    *
    * @param {string} value Space separated tokens
    * @returns {Array.<string>} Tokens
    */
   function parse$1(value) {
     const input = String(value || '').trim();
     return input ? input.split(/[ \t\n\r\f]+/g) : []
   }

   /**
    * @typedef {Object} StringifyOptions
    * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).
    * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).
    */

   /**
    * Parse comma separated tokens to an array.
    *
    * @param {string} value
    * @returns {Array.<string>}
    */
   function parse(value) {
     /** @type {Array.<string>} */
     var tokens = [];
     var input = String(value || '');
     var index = input.indexOf(',');
     var start = 0;
     /** @type {boolean} */
     var end;
     /** @type {string} */
     var token;

     while (!end) {
       if (index === -1) {
         index = input.length;
         end = true;
       }

       token = input.slice(start, index).trim();

       if (token || !end) {
         tokens.push(token);
       }

       start = index + 1;
       index = input.indexOf(',', start);
     }

     return tokens
   }

   /**
    * @typedef {import('hast').Root} Root
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').Properties} Properties
    * @typedef {Root['children'][number]} Child
    * @typedef {Child|Root} Node
    * @typedef {import('property-information').Info} Info
    * @typedef {import('property-information').Schema} Schema
    *
    * @typedef {Root|Element} HResult
    * @typedef {string|number} HStyleValue
    * @typedef {Object.<string, HStyleValue>} HStyle
    * @typedef {string|number|boolean|null|undefined} HPrimitiveValue
    * @typedef {Array.<string|number>} HArrayValue
    * @typedef {HPrimitiveValue|HArrayValue} HPropertyValue
    * @typedef {{[property: string]: HPropertyValue|HStyle}} HProperties
    *
    * @typedef {string|number|null|undefined} HPrimitiveChild
    * @typedef {Array.<Node|HPrimitiveChild>} HArrayChild
    * @typedef {Node|HPrimitiveChild|HArrayChild} HChild
    */

   const buttonTypes = new Set(['menu', 'submit', 'reset', 'button']);

   const own$6 = {}.hasOwnProperty;

   /**
    * @param {Schema} schema
    * @param {string} defaultTagName
    * @param {Array.<string>} [caseSensitive]
    */
   function core(schema, defaultTagName, caseSensitive) {
     const adjust = caseSensitive && createAdjustMap(caseSensitive);

     const h =
       /**
        * @type {{
        *   (): Root
        *   (selector: null|undefined, ...children: HChild[]): Root
        *   (selector: string, properties?: HProperties, ...children: HChild[]): Element
        *   (selector: string, ...children: HChild[]): Element
        * }}
        */
       (
         /**
          * Hyperscript compatible DSL for creating virtual hast trees.
          *
          * @param {string|null} [selector]
          * @param {HProperties|HChild} [properties]
          * @param {HChild[]} children
          * @returns {HResult}
          */
         function (selector, properties, ...children) {
           let index = -1;
           /** @type {HResult} */
           let node;

           if (selector === undefined || selector === null) {
             node = {type: 'root', children: []};
             // @ts-expect-error Properties are not supported for roots.
             children.unshift(properties);
           } else {
             node = parseSelector(selector, defaultTagName);
             // Normalize the name.
             node.tagName = node.tagName.toLowerCase();
             if (adjust && own$6.call(adjust, node.tagName)) {
               node.tagName = adjust[node.tagName];
             }

             // Handle props.
             if (isProperties(properties, node.tagName)) {
               /** @type {string} */
               let key;

               for (key in properties) {
                 if (own$6.call(properties, key)) {
                   // @ts-expect-error `node.properties` is set.
                   addProperty(schema, node.properties, key, properties[key]);
                 }
               }
             } else {
               children.unshift(properties);
             }
           }

           // Handle children.
           while (++index < children.length) {
             addChild(node.children, children[index]);
           }

           if (node.type === 'element' && node.tagName === 'template') {
             node.content = {type: 'root', children: node.children};
             node.children = [];
           }

           return node
         }
       );

     return h
   }

   /**
    * @param {HProperties|HChild} value
    * @param {string} name
    * @returns {value is HProperties}
    */
   function isProperties(value, name) {
     if (
       value === null ||
       value === undefined ||
       typeof value !== 'object' ||
       Array.isArray(value)
     ) {
       return false
     }

     if (name === 'input' || !value.type || typeof value.type !== 'string') {
       return true
     }

     if ('children' in value && Array.isArray(value.children)) {
       return false
     }

     if (name === 'button') {
       return buttonTypes.has(value.type.toLowerCase())
     }

     return !('value' in value)
   }

   /**
    * @param {Schema} schema
    * @param {Properties} properties
    * @param {string} key
    * @param {HStyle|HPropertyValue} value
    * @returns {void}
    */
   function addProperty(schema, properties, key, value) {
     const info = find(schema, key);
     let index = -1;
     /** @type {HPropertyValue} */
     let result;

     // Ignore nullish and NaN values.
     if (value === undefined || value === null) return

     if (typeof value === 'number') {
       // Ignore NaN.
       if (Number.isNaN(value)) return

       result = value;
     }
     // Booleans.
     else if (typeof value === 'boolean') {
       result = value;
     }
     // Handle list values.
     else if (typeof value === 'string') {
       if (info.spaceSeparated) {
         result = parse$1(value);
       } else if (info.commaSeparated) {
         result = parse(value);
       } else if (info.commaOrSpaceSeparated) {
         result = parse$1(parse(value).join(' '));
       } else {
         result = parsePrimitive(info, info.property, value);
       }
     } else if (Array.isArray(value)) {
       result = value.concat();
     } else {
       result = info.property === 'style' ? style(value) : String(value);
     }

     if (Array.isArray(result)) {
       /** @type {Array.<string|number>} */
       const finalResult = [];

       while (++index < result.length) {
         // @ts-expect-error Assume no booleans in array.
         finalResult[index] = parsePrimitive(info, info.property, result[index]);
       }

       result = finalResult;
     }

     // Class names (which can be added both on the `selector` and here).
     if (info.property === 'className' && Array.isArray(properties.className)) {
       // @ts-expect-error Assume no booleans in `className`.
       result = properties.className.concat(result);
     }

     properties[info.property] = result;
   }

   /**
    * @param {Array.<Child>} nodes
    * @param {HChild} value
    * @returns {void}
    */
   function addChild(nodes, value) {
     let index = -1;

     if (value === undefined || value === null) ; else if (typeof value === 'string' || typeof value === 'number') {
       nodes.push({type: 'text', value: String(value)});
     } else if (Array.isArray(value)) {
       while (++index < value.length) {
         addChild(nodes, value[index]);
       }
     } else if (typeof value === 'object' && 'type' in value) {
       if (value.type === 'root') {
         addChild(nodes, value.children);
       } else {
         nodes.push(value);
       }
     } else {
       throw new Error('Expected node, nodes, or string, got `' + value + '`')
     }
   }

   /**
    * Parse a single primitives.
    *
    * @param {Info} info
    * @param {string} name
    * @param {HPrimitiveValue} value
    * @returns {HPrimitiveValue}
    */
   function parsePrimitive(info, name, value) {
     if (typeof value === 'string') {
       if (info.number && value && !Number.isNaN(Number(value))) {
         return Number(value)
       }

       if (
         (info.boolean || info.overloadedBoolean) &&
         (value === '' || normalize(value) === normalize(name))
       ) {
         return true
       }
     }

     return value
   }

   /**
    * @param {HStyle} value
    * @returns {string}
    */
   function style(value) {
     /** @type {Array.<string>} */
     const result = [];
     /** @type {string} */
     let key;

     for (key in value) {
       if (own$6.call(value, key)) {
         result.push([key, value[key]].join(': '));
       }
     }

     return result.join('; ')
   }

   /**
    * @param {Array.<string>} values
    * @returns {Object.<string, string>}
    */
   function createAdjustMap(values) {
     /** @type {Object.<string, string>} */
     const result = {};
     let index = -1;

     while (++index < values.length) {
       result[values[index].toLowerCase()] = values[index];
     }

     return result
   }

   /**
    * @typedef {import('./core.js').HChild} Child Acceptable child value
    * @typedef {import('./core.js').HProperties} Properties Acceptable properties value.
    *
    * @typedef {import('./jsx-classic').Element} h.JSX.Element
    * @typedef {import('./jsx-classic').IntrinsicAttributes} h.JSX.IntrinsicAttributes
    * @typedef {import('./jsx-classic').IntrinsicElements} h.JSX.IntrinsicElements
    * @typedef {import('./jsx-classic').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute
    */

   const h = core(html$1, 'div');

   const svgCaseSensitiveTagNames = [
     'altGlyph',
     'altGlyphDef',
     'altGlyphItem',
     'animateColor',
     'animateMotion',
     'animateTransform',
     'clipPath',
     'feBlend',
     'feColorMatrix',
     'feComponentTransfer',
     'feComposite',
     'feConvolveMatrix',
     'feDiffuseLighting',
     'feDisplacementMap',
     'feDistantLight',
     'feDropShadow',
     'feFlood',
     'feFuncA',
     'feFuncB',
     'feFuncG',
     'feFuncR',
     'feGaussianBlur',
     'feImage',
     'feMerge',
     'feMergeNode',
     'feMorphology',
     'feOffset',
     'fePointLight',
     'feSpecularLighting',
     'feSpotLight',
     'feTile',
     'feTurbulence',
     'foreignObject',
     'glyphRef',
     'linearGradient',
     'radialGradient',
     'solidColor',
     'textArea',
     'textPath'
   ];

   /**
    * @typedef {import('./core.js').HChild} Child Acceptable child value
    * @typedef {import('./core.js').HProperties} Properties Acceptable properties value.
    *
    * @typedef {import('./jsx-classic').Element} s.JSX.Element
    * @typedef {import('./jsx-classic').IntrinsicAttributes} s.JSX.IntrinsicAttributes
    * @typedef {import('./jsx-classic').IntrinsicElements} s.JSX.IntrinsicElements
    * @typedef {import('./jsx-classic').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute
    */

   const s = core(svg, 'g', svgCaseSensitiveTagNames);

   /**
    * @typedef {import('unist').Point} Point
    * @typedef {import('vfile').VFile} VFile
    *
    * @typedef {Pick<Point, 'line'|'column'>} PositionalPoint
    * @typedef {Required<Point>} FullPoint
    * @typedef {NonNullable<Point['offset']>} Offset
    */

   /**
    * Get transform functions for the given `document`.
    *
    * @param {string|Uint8Array|VFile} file
    */
   function location(file) {
     var value = String(file);
     /** @type {Array.<number>} */
     var indices = [];
     var search = /\r?\n|\r/g;

     while (search.test(value)) {
       indices.push(search.lastIndex);
     }

     indices.push(value.length + 1);

     return {toPoint, toOffset}

     /**
      * Get the line and column-based `point` for `offset` in the bound indices.
      * Returns a point with `undefined` values when given invalid or out of bounds
      * input.
      *
      * @param {Offset} offset
      * @returns {FullPoint}
      */
     function toPoint(offset) {
       var index = -1;

       if (offset > -1 && offset < indices[indices.length - 1]) {
         while (++index < indices.length) {
           if (indices[index] > offset) {
             return {
               line: index + 1,
               column: offset - (indices[index - 1] || 0) + 1,
               offset
             }
           }
         }
       }

       return {line: undefined, column: undefined, offset: undefined}
     }

     /**
      * Get the `offset` for a line and column-based `point` in the bound indices.
      * Returns `-1` when given invalid or out of bounds input.
      *
      * @param {PositionalPoint} point
      * @returns {Offset}
      */
     function toOffset(point) {
       var line = point && point.line;
       var column = point && point.column;
       /** @type {number} */
       var offset;

       if (
         typeof line === 'number' &&
         typeof column === 'number' &&
         !Number.isNaN(line) &&
         !Number.isNaN(column) &&
         line - 1 in indices
       ) {
         offset = (indices[line - 2] || 0) + column - 1 || 0;
       }

       return offset > -1 && offset < indices[indices.length - 1] ? offset : -1
     }
   }

   /**
    * Map of web namespaces.
    *
    * @type {Record<string, string>}
    */
   const webNamespaces = {
     html: 'http://www.w3.org/1999/xhtml',
     mathml: 'http://www.w3.org/1998/Math/MathML',
     svg: 'http://www.w3.org/2000/svg',
     xlink: 'http://www.w3.org/1999/xlink',
     xml: 'http://www.w3.org/XML/1998/namespace',
     xmlns: 'http://www.w3.org/2000/xmlns/'
   };

   /**
    * @typedef {import('vfile').VFile} VFile
    * @typedef {import('property-information').Schema} Schema
    * @typedef {import('unist').Position} Position
    * @typedef {import('unist').Point} Point
    * @typedef {import('hast').Parent} Parent
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').Root} Root
    * @typedef {import('hast').Text} Text
    * @typedef {import('hast').Comment} Comment
    * @typedef {import('hast').DocType} Doctype
    * @typedef {Parent['children'][number]} Child
    * @typedef {Element['children'][number]} ElementChild
    * @typedef {Child|Root} Node
    * @typedef {import('parse5').Document} P5Document
    * @typedef {import('parse5').DocumentType} P5Doctype
    * @typedef {import('parse5').CommentNode} P5Comment
    * @typedef {import('parse5').TextNode} P5Text
    * @typedef {import('parse5').Element} P5Element
    * @typedef {import('parse5').ElementLocation} P5ElementLocation
    * @typedef {import('parse5').Location} P5Location
    * @typedef {import('parse5').Attribute} P5Attribute
    * @typedef {import('parse5').Node} P5Node
    *
    * @typedef {'html'|'svg'} Space
    *
    * @callback Handler
    * @param {Context} ctx
    * @param {P5Node} node
    * @param {Array.<Child>} [children]
    * @returns {Node}
    *
    * @typedef Options
    * @property {Space} [space='html'] Whether the root of the tree is in the `'html'` or `'svg'` space. If an element in with the SVG namespace is found in `ast`, `fromParse5` automatically switches to the SVG space when entering the element, and switches back when leaving
    * @property {VFile} [file] `VFile`, used to add positional information to nodes. If given, the file should have the original HTML source as its contents
    * @property {boolean} [verbose=false] Whether to add extra positional information about starting tags, closing tags, and attributes to elements. Note: not used without `file`
    *
    * @typedef Context
    * @property {Schema} schema
    * @property {VFile|undefined} file
    * @property {boolean|undefined} verbose
    * @property {boolean} location
    */

   const own$5 = {}.hasOwnProperty;

   // Handlers.
   const map$2 = {
     '#document': root$2,
     '#document-fragment': root$2,
     '#text': text$2,
     '#comment': comment$1,
     '#documentType': doctype
   };

   /**
    * Transform Parse5’s AST to a hast tree.
    *
    * @param {P5Node} ast
    * @param {Options|VFile} [options]
    */
   function fromParse5(ast, options = {}) {
     /** @type {Options} */
     let settings;
     /** @type {VFile|undefined} */
     let file;

     if (isFile(options)) {
       file = options;
       settings = {};
     } else {
       file = options.file;
       settings = options;
     }

     return transform(
       {
         schema: settings.space === 'svg' ? svg : html$1,
         file,
         verbose: settings.verbose,
         location: false
       },
       ast
     )
   }

   /**
    * Transform children.
    *
    * @param {Context} ctx
    * @param {P5Node} ast
    * @returns {Node}
    */
   function transform(ctx, ast) {
     const schema = ctx.schema;
     /** @type {Handler} */
     // @ts-expect-error: index is fine.
     const fn = own$5.call(map$2, ast.nodeName) ? map$2[ast.nodeName] : element$1;
     /** @type {Array.<Child>|undefined} */
     let children;

     // Element.
     if ('tagName' in ast) {
       ctx.schema = ast.namespaceURI === webNamespaces.svg ? svg : html$1;
     }

     if ('childNodes' in ast) {
       children = nodes(ctx, ast.childNodes);
     }

     const result = fn(ctx, ast, children);

     if ('sourceCodeLocation' in ast && ast.sourceCodeLocation && ctx.file) {
       // @ts-expect-error It’s fine.
       const position = createLocation(ctx, result, ast.sourceCodeLocation);

       if (position) {
         ctx.location = true;
         result.position = position;
       }
     }

     ctx.schema = schema;

     return result
   }

   /**
    * Transform children.
    *
    * @param {Context} ctx
    * @param {Array.<P5Node>} children
    * @returns {Array.<Child>}
    */
   function nodes(ctx, children) {
     let index = -1;
     /** @type {Array.<Child>} */
     const result = [];

     while (++index < children.length) {
       // @ts-expect-error Assume no roots in children.
       result[index] = transform(ctx, children[index]);
     }

     return result
   }

   /**
    * Transform a document.
    * Stores `ast.quirksMode` in `node.data.quirksMode`.
    *
    * @type {Handler}
    * @param {P5Document} ast
    * @param {Array.<Child>} children
    * @returns {Root}
    */
   function root$2(ctx, ast, children) {
     /** @type {Root} */
     const result = {
       type: 'root',
       children,
       data: {quirksMode: ast.mode === 'quirks' || ast.mode === 'limited-quirks'}
     };

     if (ctx.file && ctx.location) {
       const doc = String(ctx.file);
       const loc = location(doc);
       result.position = {
         start: loc.toPoint(0),
         end: loc.toPoint(doc.length)
       };
     }

     return result
   }

   /**
    * Transform a doctype.
    *
    * @type {Handler}
    * @returns {Doctype}
    */
   function doctype() {
     // @ts-expect-error Types are out of date.
     return {type: 'doctype'}
   }

   /**
    * Transform a text.
    *
    * @type {Handler}
    * @param {P5Text} ast
    * @returns {Text}
    */
   function text$2(_, ast) {
     return {type: 'text', value: ast.value}
   }

   /**
    * Transform a comment.
    *
    * @type {Handler}
    * @param {P5Comment} ast
    * @returns {Comment}
    */
   function comment$1(_, ast) {
     return {type: 'comment', value: ast.data}
   }

   /**
    * Transform an element.
    *
    * @type {Handler}
    * @param {P5Element} ast
    * @param {Array.<ElementChild>} children
    * @returns {Element}
    */
   function element$1(ctx, ast, children) {
     const fn = ctx.schema.space === 'svg' ? s : h;
     let index = -1;
     /** @type {Object.<string, string>} */
     const props = {};

     while (++index < ast.attrs.length) {
       const attribute = ast.attrs[index];
       props[(attribute.prefix ? attribute.prefix + ':' : '') + attribute.name] =
         attribute.value;
     }

     const result = fn(ast.tagName, props, children);

     if (result.tagName === 'template' && 'content' in ast) {
       const pos = ast.sourceCodeLocation;
       const startTag = pos && pos.startTag && position(pos.startTag);
       const endTag = pos && pos.endTag && position(pos.endTag);

       /** @type {Root} */
       // @ts-expect-error Types are wrong.
       const content = transform(ctx, ast.content);

       if (startTag && endTag && ctx.file) {
         content.position = {start: startTag.end, end: endTag.start};
       }

       result.content = content;
     }

     return result
   }

   /**
    * Create clean positional information.
    *
    * @param {Context} ctx
    * @param {Node} node
    * @param {P5ElementLocation} location
    * @returns {Position|null}
    */
   function createLocation(ctx, node, location) {
     const result = position(location);

     if (node.type === 'element') {
       const tail = node.children[node.children.length - 1];

       // Bug for unclosed with children.
       // See: <https://github.com/inikulin/parse5/issues/109>.
       if (
         result &&
         !location.endTag &&
         tail &&
         tail.position &&
         tail.position.end
       ) {
         result.end = Object.assign({}, tail.position.end);
       }

       if (ctx.verbose) {
         /** @type {Object.<string, Position|null>} */
         const props = {};
         /** @type {string} */
         let key;

         for (key in location.attrs) {
           if (own$5.call(location.attrs, key)) {
             props[find(ctx.schema, key).property] = position(location.attrs[key]);
           }
         }

         node.data = {
           position: {
             opening: position(location.startTag),
             closing: location.endTag ? position(location.endTag) : null,
             properties: props
           }
         };
       }
     }

     return result
   }

   /**
    * @param {P5Location} loc
    * @returns {Position|null}
    */
   function position(loc) {
     const start = point({
       line: loc.startLine,
       column: loc.startCol,
       offset: loc.startOffset
     });
     const end = point({
       line: loc.endLine,
       column: loc.endCol,
       offset: loc.endOffset
     });
     // @ts-expect-error `null` is fine.
     return start || end ? {start, end} : null
   }

   /**
    * @param {Point} point
    * @returns {Point|null}
    */
   function point(point) {
     return point.line && point.column ? point : null
   }

   /**
    * @param {VFile|Options} value
    * @returns {value is VFile}
    */
   function isFile(value) {
     return 'messages' in value
   }

   const errors = {
     abandonedHeadElementChild: {
       reason: 'Unexpected metadata element after head',
       description:
         'Unexpected element after head. Expected the element before `</head>`',
       url: false
     },
     abruptClosingOfEmptyComment: {
       reason: 'Unexpected abruptly closed empty comment',
       description: 'Unexpected `>` or `->`. Expected `-->` to close comments'
     },
     abruptDoctypePublicIdentifier: {
       reason: 'Unexpected abruptly closed public identifier',
       description:
         'Unexpected `>`. Expected a closing `"` or `\'` after the public identifier'
     },
     abruptDoctypeSystemIdentifier: {
       reason: 'Unexpected abruptly closed system identifier',
       description:
         'Unexpected `>`. Expected a closing `"` or `\'` after the identifier identifier'
     },
     absenceOfDigitsInNumericCharacterReference: {
       reason: 'Unexpected non-digit at start of numeric character reference',
       description:
         'Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references'
     },
     cdataInHtmlContent: {
       reason: 'Unexpected CDATA section in HTML',
       description:
         'Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead'
     },
     characterReferenceOutsideUnicodeRange: {
       reason: 'Unexpected too big numeric character reference',
       description:
         'Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)'
     },
     closingOfElementWithOpenChildElements: {
       reason: 'Unexpected closing tag with open child elements',
       description:
         'Unexpectedly closing tag. Expected other tags to be closed first',
       url: false
     },
     controlCharacterInInputStream: {
       reason: 'Unexpected control character',
       description:
         'Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace'
     },
     controlCharacterReference: {
       reason: 'Unexpected control character reference',
       description:
         'Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace'
     },
     disallowedContentInNoscriptInHead: {
       reason: 'Disallowed content inside `<noscript>` in `<head>`',
       description:
         'Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`',
       url: false
     },
     duplicateAttribute: {
       reason: 'Unexpected duplicate attribute',
       description:
         'Unexpectedly double attribute. Expected attributes to occur only once'
     },
     endTagWithAttributes: {
       reason: 'Unexpected attribute on closing tag',
       description: 'Unexpected attribute. Expected `>` instead'
     },
     endTagWithTrailingSolidus: {
       reason: 'Unexpected slash at end of closing tag',
       description: 'Unexpected `%c-1`. Expected `>` instead'
     },
     endTagWithoutMatchingOpenElement: {
       reason: 'Unexpected unopened end tag',
       description: 'Unexpected end tag. Expected no end tag or another end tag',
       url: false
     },
     eofBeforeTagName: {
       reason: 'Unexpected end of file',
       description: 'Unexpected end of file. Expected tag name instead'
     },
     eofInCdata: {
       reason: 'Unexpected end of file in CDATA',
       description: 'Unexpected end of file. Expected `]]>` to close the CDATA'
     },
     eofInComment: {
       reason: 'Unexpected end of file in comment',
       description: 'Unexpected end of file. Expected `-->` to close the comment'
     },
     eofInDoctype: {
       reason: 'Unexpected end of file in doctype',
       description:
         'Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)'
     },
     eofInElementThatCanContainOnlyText: {
       reason: 'Unexpected end of file in element that can only contain text',
       description: 'Unexpected end of file. Expected text or a closing tag',
       url: false
     },
     eofInScriptHtmlCommentLikeText: {
       reason: 'Unexpected end of file in comment inside script',
       description: 'Unexpected end of file. Expected `-->` to close the comment'
     },
     eofInTag: {
       reason: 'Unexpected end of file in tag',
       description: 'Unexpected end of file. Expected `>` to close the tag'
     },
     incorrectlyClosedComment: {
       reason: 'Incorrectly closed comment',
       description: 'Unexpected `%c-1`. Expected `-->` to close the comment'
     },
     incorrectlyOpenedComment: {
       reason: 'Incorrectly opened comment',
       description: 'Unexpected `%c`. Expected `<!--` to open the comment'
     },
     invalidCharacterSequenceAfterDoctypeName: {
       reason: 'Invalid sequence after doctype name',
       description: 'Unexpected sequence at `%c`. Expected `public` or `system`'
     },
     invalidFirstCharacterOfTagName: {
       reason: 'Invalid first character in tag name',
       description: 'Unexpected `%c`. Expected an ASCII letter instead'
     },
     misplacedDoctype: {
       reason: 'Misplaced doctype',
       description: 'Unexpected doctype. Expected doctype before head',
       url: false
     },
     misplacedStartTagForHeadElement: {
       reason: 'Misplaced `<head>` start tag',
       description:
         'Unexpected start tag `<head>`. Expected `<head>` directly after doctype',
       url: false
     },
     missingAttributeValue: {
       reason: 'Missing attribute value',
       description:
         'Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead'
     },
     missingDoctype: {
       reason: 'Missing doctype before other content',
       description: 'Expected a `<!doctype html>` before anything else',
       url: false
     },
     missingDoctypeName: {
       reason: 'Missing doctype name',
       description: 'Unexpected doctype end at `%c`. Expected `html` instead'
     },
     missingDoctypePublicIdentifier: {
       reason: 'Missing public identifier in doctype',
       description: 'Unexpected `%c`. Expected identifier for `public` instead'
     },
     missingDoctypeSystemIdentifier: {
       reason: 'Missing system identifier in doctype',
       description:
         'Unexpected `%c`. Expected identifier for `system` instead (suggested: `"about:legacy-compat"`)'
     },
     missingEndTagName: {
       reason: 'Missing name in end tag',
       description: 'Unexpected `%c`. Expected an ASCII letter instead'
     },
     missingQuoteBeforeDoctypePublicIdentifier: {
       reason: 'Missing quote before public identifier in doctype',
       description: 'Unexpected `%c`. Expected `"` or `\'` instead'
     },
     missingQuoteBeforeDoctypeSystemIdentifier: {
       reason: 'Missing quote before system identifier in doctype',
       description: 'Unexpected `%c`. Expected `"` or `\'` instead'
     },
     missingSemicolonAfterCharacterReference: {
       reason: 'Missing semicolon after character reference',
       description: 'Unexpected `%c`. Expected `;` instead'
     },
     missingWhitespaceAfterDoctypePublicKeyword: {
       reason: 'Missing whitespace after public identifier in doctype',
       description: 'Unexpected `%c`. Expected ASCII whitespace instead'
     },
     missingWhitespaceAfterDoctypeSystemKeyword: {
       reason: 'Missing whitespace after system identifier in doctype',
       description: 'Unexpected `%c`. Expected ASCII whitespace instead'
     },
     missingWhitespaceBeforeDoctypeName: {
       reason: 'Missing whitespace before doctype name',
       description: 'Unexpected `%c`. Expected ASCII whitespace instead'
     },
     missingWhitespaceBetweenAttributes: {
       reason: 'Missing whitespace between attributes',
       description: 'Unexpected `%c`. Expected ASCII whitespace instead'
     },
     missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {
       reason:
         'Missing whitespace between public and system identifiers in doctype',
       description: 'Unexpected `%c`. Expected ASCII whitespace instead'
     },
     nestedComment: {
       reason: 'Unexpected nested comment',
       description: 'Unexpected `<!--`. Expected `-->`'
     },
     nestedNoscriptInHead: {
       reason: 'Unexpected nested `<noscript>` in `<head>`',
       description:
         'Unexpected `<noscript>`. Expected a closing tag or a meta element',
       url: false
     },
     nonConformingDoctype: {
       reason: 'Unexpected non-conforming doctype declaration',
       description:
         'Expected `<!doctype html>` or `<!doctype html system "about:legacy-compat">`',
       url: false
     },
     nonVoidHtmlElementStartTagWithTrailingSolidus: {
       reason: 'Unexpected trailing slash on start tag of non-void element',
       description: 'Unexpected `/`. Expected `>` instead'
     },
     noncharacterCharacterReference: {
       reason:
         'Unexpected noncharacter code point referenced by character reference',
       description: 'Unexpected code point. Do not use noncharacters in HTML'
     },
     noncharacterInInputStream: {
       reason: 'Unexpected noncharacter character',
       description: 'Unexpected code point `%x`. Do not use noncharacters in HTML'
     },
     nullCharacterReference: {
       reason: 'Unexpected NULL character referenced by character reference',
       description: 'Unexpected code point. Do not use NULL characters in HTML'
     },
     openElementsLeftAfterEof: {
       reason: 'Unexpected end of file',
       description: 'Unexpected end of file. Expected closing tag instead',
       url: false
     },
     surrogateCharacterReference: {
       reason: 'Unexpected surrogate character referenced by character reference',
       description:
         'Unexpected code point. Do not use lone surrogate characters in HTML'
     },
     surrogateInInputStream: {
       reason: 'Unexpected surrogate character',
       description:
         'Unexpected code point `%x`. Do not use lone surrogate characters in HTML'
     },
     unexpectedCharacterAfterDoctypeSystemIdentifier: {
       reason: 'Invalid character after system identifier in doctype',
       description: 'Unexpected character at `%c`. Expected `>`'
     },
     unexpectedCharacterInAttributeName: {
       reason: 'Unexpected character in attribute name',
       description:
         'Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter'
     },
     unexpectedCharacterInUnquotedAttributeValue: {
       reason: 'Unexpected character in unquoted attribute value',
       description: 'Unexpected `%c`. Quote the attribute value to include it'
     },
     unexpectedEqualsSignBeforeAttributeName: {
       reason: 'Unexpected equals sign before attribute name',
       description: 'Unexpected `%c`. Add an attribute name before it'
     },
     unexpectedNullCharacter: {
       reason: 'Unexpected NULL character',
       description:
         'Unexpected code point `%x`. Do not use NULL characters in HTML'
     },
     unexpectedQuestionMarkInsteadOfTagName: {
       reason: 'Unexpected question mark instead of tag name',
       description: 'Unexpected `%c`. Expected an ASCII letter instead'
     },
     unexpectedSolidusInTag: {
       reason: 'Unexpected slash in tag',
       description:
         'Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value'
     },
     unknownNamedCharacterReference: {
       reason: 'Unexpected unknown named character reference',
       description:
         'Unexpected character reference. Expected known named character references'
     }
   };

   /**
    * @typedef {import('hast').Root} Root
    * @typedef {import('vfile').VFileCompatible} VFileCompatible
    * @typedef {Pick<import('hast-util-from-parse5').Options, 'space'|'verbose'>} FromParse5Options
    *
    * @typedef {keyof errors} ErrorCode
    * @typedef {0|1|2|boolean|null|undefined} ErrorSeverity
    * @typedef {Partial<Record<ErrorCode, ErrorSeverity>>} ErrorFields
    *
    * @typedef Error
    * @property {string} code
    * @property {number} startLine
    * @property {number} startCol
    * @property {number} startOffset
    * @property {number} endLine
    * @property {number} endCol
    * @property {number} endOffset
    *
    * @callback OnError
    * @param {VFileMessage} error
    * @returns {void}
    *
    * @typedef ParseFields
    * @property {boolean|undefined} [fragment=false]
    *   Specify whether to parse a fragment, instead of a complete document.
    *   In document mode, unopened `html`, `head`, and `body` elements are opened
    *   in just the right places.
    * @property {OnError|undefined} [onerror=false]
    *   > 👉 **Note**: parse errors are currently being added to HTML.
    *   > Not all errors emitted by parse5 (or us) are specced yet.
    *   > Some documentation may still be missing.
    *
    *   Call `onerror` with parse errors while parsing.
    *
    *   Specific rules can be turned off by setting them to `false` (or `0`).
    *   The default, when `emitParseErrors: true`, is `true` (or `1`), and means
    *   that rules emit as warnings.
    *   Rules can also be configured with `2`, to turn them into fatal errors.
    *
    * @typedef {FromParse5Options & ParseFields & ErrorFields} Options
    */

   const base$1 = 'https://html.spec.whatwg.org/multipage/parsing.html#parse-error-';

   const fatalities = {2: true, 1: false, 0: null};

   /**
    * @param {VFileCompatible} value
    * @param {Options} [options={}]
    * @returns {Root}
    */
   function fromHtml(value, options = {}) {
     const warn = options.onerror || null;
     const file = value instanceof VFile ? value : new VFile(value);
     const fn = options.fragment ? parseFragment : parse$2;
     const doc = String(file);
     const p5doc = fn(doc, {
       sourceCodeLocationInfo: true,
       onParseError: options.onerror ? onerror : null,
       scriptingEnabled: false
     });

     // @ts-expect-error: `parse5` returns document or fragment, which are always
     // mapped to roots.
     return fromParse5(p5doc, {
       file,
       space: options.space,
       verbose: options.verbose
     })

     /**
      * @param {Error} error
      */
     function onerror(error) {
       const code = error.code;
       const name = camelcase(code);
       const setting = options[name];
       const config = setting === undefined || setting === null ? true : setting;
       const level = typeof config === 'number' ? config : config ? 1 : 0;
       const start = {
         line: error.startLine,
         column: error.startCol,
         offset: error.startOffset
       };
       const end = {
         line: error.endLine,
         column: error.endCol,
         offset: error.endOffset
       };

       if (level) {
         /* c8 ignore next */
         const info = errors[name] || {reason: '', description: '', url: ''};
         const message = new VFileMessage(format(info.reason), {start, end});

         if (file.path) {
           message.name = file.path + ':' + message.name;
           message.file = file.path;
         }

         message.source = 'parse-error';
         message.ruleId = code;
         message.fatal = fatalities[level];
         message.note = format(info.description);
         message.url = 'url' in info && info.url === false ? null : base$1 + code;
         // @ts-expect-error: `onerror` is not passed if `warn` is not set.
         warn(message);
       }

       /**
        * @param {string} value
        * @returns {string}
        */
       function format(value) {
         return value
           .replace(
             /%c(?:([-+])(\d+))?/g,
             (_, /** @type {string} */ $1, /** @type {string} */ $2) => {
               const offset =
                 ($2 ? Number.parseInt($2, 10) : 0) * ($1 === '-' ? -1 : 1);
               const char = doc.charAt(error.startOffset + offset);
               return char === '`' ? '` ` `' : char
             }
           )
           .replace(
             /%x/g,
             () =>
               '0x' + doc.charCodeAt(error.startOffset).toString(16).toUpperCase()
           )
       }
     }
   }

   /**
    * @param {string} value
    * @returns {ErrorCode}
    */
   function camelcase(value) {
     // @ts-expect-error: fine.
     return value.replace(/-[a-z]/g, ($0) => $0.charAt(1).toUpperCase())
   }

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Parent} Parent
    * @typedef {import('hast').Element} Element
    *
    * @typedef {string} TagName
    * @typedef {null|undefined|TagName|TestFunctionAnything|Array.<TagName|TestFunctionAnything>} Test
    */

   /**
    * @template {Element} T
    * @typedef {null|undefined|T['tagName']|TestFunctionPredicate<T>|Array.<T['tagName']|TestFunctionPredicate<T>>} PredicateTest
    */

   /**
    * Check if an element passes a test
    *
    * @callback TestFunctionAnything
    * @param {Element} element
    * @param {number|null|undefined} [index]
    * @param {Parent|null|undefined} [parent]
    * @returns {boolean|void}
    */

   /**
    * Check if an element passes a certain node test
    *
    * @template {Element} X
    * @callback TestFunctionPredicate
    * @param {Element} element
    * @param {number|null|undefined} [index]
    * @param {Parent|null|undefined} [parent]
    * @returns {element is X}
    */

   /**
    * Check if a node is an element and passes a certain node test
    *
    * @callback AssertAnything
    * @param {unknown} [node]
    * @param {number|null|undefined} [index]
    * @param {Parent|null|undefined} [parent]
    * @returns {boolean}
    */

   /**
    * Check if a node is an element and passes a certain node test
    *
    * @template {Element} Y
    * @callback AssertPredicate
    * @param {unknown} [node]
    * @param {number|null|undefined} [index]
    * @param {Parent|null|undefined} [parent]
    * @returns {node is Y}
    */

   // Check if `node` is an `element` and whether it passes the given test.
   const isElement =
     /**
      * Check if a node is an element and passes a test.
      * When a `parent` node is known the `index` of node should also be given.
      *
      * @type {(
      *   (() => false) &
      *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &
      *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)
      * )}
      */
     (
       /**
        * Check if a node passes a test.
        * When a `parent` node is known the `index` of node should also be given.
        *
        * @param {unknown} [node] Node to check
        * @param {Test} [test] When nullish, checks if `node` is a `Node`.
        * When `string`, works like passing `function (node) {return node.type === test}`.
        * When `function` checks if function passed the node is true.
        * When `array`, checks any one of the subtests pass.
        * @param {number} [index] Position of `node` in `parent`
        * @param {Parent} [parent] Parent of `node`
        * @param {unknown} [context] Context object to invoke `test` with
        * @returns {boolean} Whether test passed and `node` is an `Element` (object with `type` set to `element` and `tagName` set to a non-empty string).
        */
       // eslint-disable-next-line max-params
       function (node, test, index, parent, context) {
         const check = convertElement(test);

         if (
           index !== undefined &&
           index !== null &&
           (typeof index !== 'number' ||
             index < 0 ||
             index === Number.POSITIVE_INFINITY)
         ) {
           throw new Error('Expected positive finite index for child node')
         }

         if (
           parent !== undefined &&
           parent !== null &&
           (!parent.type || !parent.children)
         ) {
           throw new Error('Expected parent node')
         }

         // @ts-expect-error Looks like a node.
         if (!node || !node.type || typeof node.type !== 'string') {
           return false
         }

         if (
           (parent === undefined || parent === null) !==
           (index === undefined || index === null)
         ) {
           throw new Error('Expected both parent and index')
         }

         return check.call(context, node, index, parent)
       }
     );

   const convertElement =
     /**
      * @type {(
      *   (<T extends Element>(test: T['tagName']|TestFunctionPredicate<T>) => AssertPredicate<T>) &
      *   ((test?: Test) => AssertAnything)
      * )}
      */
     (
       /**
        * Generate an assertion from a check.
        * @param {Test} [test]
        * When nullish, checks if `node` is a `Node`.
        * When `string`, works like passing `function (node) {return node.type === test}`.
        * When `function` checks if function passed the node is true.
        * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
        * When `array`, checks any one of the subtests pass.
        * @returns {AssertAnything}
        */
       function (test) {
         if (test === undefined || test === null) {
           return element
         }

         if (typeof test === 'string') {
           return tagNameFactory(test)
         }

         if (typeof test === 'object') {
           return anyFactory$1(test)
         }

         if (typeof test === 'function') {
           return castFactory$1(test)
         }

         throw new Error('Expected function, string, or array as test')
       }
     );

   /**
    * @param {Array.<TagName|TestFunctionAnything>} tests
    * @returns {AssertAnything}
    */
   function anyFactory$1(tests) {
     /** @type {Array.<AssertAnything>} */
     const checks = [];
     let index = -1;

     while (++index < tests.length) {
       checks[index] = convertElement(tests[index]);
     }

     return castFactory$1(any)

     /**
      * @this {unknown}
      * @param {unknown[]} parameters
      * @returns {boolean}
      */
     function any(...parameters) {
       let index = -1;

       while (++index < checks.length) {
         if (checks[index].call(this, ...parameters)) {
           return true
         }
       }

       return false
     }
   }

   /**
    * Utility to convert a string into a function which checks a given node’s tag
    * name for said string.
    *
    * @param {TagName} check
    * @returns {AssertAnything}
    */
   function tagNameFactory(check) {
     return tagName

     /**
      * @param {unknown} node
      * @returns {boolean}
      */
     function tagName(node) {
       return element(node) && node.tagName === check
     }
   }

   /**
    * @param {TestFunctionAnything} check
    * @returns {AssertAnything}
    */
   function castFactory$1(check) {
     return assertion

     /**
      * @this {unknown}
      * @param {unknown} node
      * @param {Array.<unknown>} parameters
      * @returns {boolean}
      */
     function assertion(node, ...parameters) {
       // @ts-expect-error: fine.
       return element(node) && Boolean(check.call(this, node, ...parameters))
     }
   }

   /**
    * Utility to return true if this is an element.
    * @param {unknown} node
    * @returns {node is Element}
    */
   function element(node) {
     return Boolean(
       node &&
         typeof node === 'object' &&
         // @ts-expect-error Looks like a node.
         node.type === 'element' &&
         // @ts-expect-error Looks like an element.
         typeof node.tagName === 'string'
     )
   }

   /**
    * @typedef {import('hast').Element & {tagName: 'audio'|'canvas'|'embed'|'iframe'|'img'|'math'|'object'|'picture'|'svg'|'video'}} Embedded
    * @typedef {import('hast-util-is-element').AssertPredicate<Embedded>} AssertEmbedded
    */

   /**
    * Check if a node is an embedded element.
    * @type {AssertEmbedded}
    */
   // @ts-ignore Sure, the assertion matches.
   const embedded = convertElement([
     'audio',
     'canvas',
     'embed',
     'iframe',
     'img',
     'math',
     'object',
     'picture',
     'svg',
     'video'
   ]);

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Parent} Parent
    *
    * @typedef {string} Type
    * @typedef {Object<string, unknown>} Props
    *
    * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test
    */

   const convert =
     /**
      * @type {(
      *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &
      *   ((test?: Test) => AssertAnything)
      * )}
      */
     (
       /**
        * Generate an assertion from a check.
        * @param {Test} [test]
        * When nullish, checks if `node` is a `Node`.
        * When `string`, works like passing `function (node) {return node.type === test}`.
        * When `function` checks if function passed the node is true.
        * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
        * When `array`, checks any one of the subtests pass.
        * @returns {AssertAnything}
        */
       function (test) {
         if (test === undefined || test === null) {
           return ok
         }

         if (typeof test === 'string') {
           return typeFactory(test)
         }

         if (typeof test === 'object') {
           return Array.isArray(test) ? anyFactory(test) : propsFactory(test)
         }

         if (typeof test === 'function') {
           return castFactory(test)
         }

         throw new Error('Expected function, string, or object as test')
       }
     );
   /**
    * @param {Array.<Type|Props|TestFunctionAnything>} tests
    * @returns {AssertAnything}
    */
   function anyFactory(tests) {
     /** @type {Array.<AssertAnything>} */
     const checks = [];
     let index = -1;

     while (++index < tests.length) {
       checks[index] = convert(tests[index]);
     }

     return castFactory(any)

     /**
      * @this {unknown}
      * @param {unknown[]} parameters
      * @returns {boolean}
      */
     function any(...parameters) {
       let index = -1;

       while (++index < checks.length) {
         if (checks[index].call(this, ...parameters)) return true
       }

       return false
     }
   }

   /**
    * Utility to assert each property in `test` is represented in `node`, and each
    * values are strictly equal.
    *
    * @param {Props} check
    * @returns {AssertAnything}
    */
   function propsFactory(check) {
     return castFactory(all)

     /**
      * @param {Node} node
      * @returns {boolean}
      */
     function all(node) {
       /** @type {string} */
       let key;

       for (key in check) {
         // @ts-expect-error: hush, it sure works as an index.
         if (node[key] !== check[key]) return false
       }

       return true
     }
   }

   /**
    * Utility to convert a string into a function which checks a given node’s type
    * for said string.
    *
    * @param {Type} check
    * @returns {AssertAnything}
    */
   function typeFactory(check) {
     return castFactory(type)

     /**
      * @param {Node} node
      */
     function type(node) {
       return node && node.type === check
     }
   }

   /**
    * Utility to convert a string into a function which checks a given node’s type
    * for said string.
    * @param {TestFunctionAnything} check
    * @returns {AssertAnything}
    */
   function castFactory(check) {
     return assertion

     /**
      * @this {unknown}
      * @param {Array.<unknown>} parameters
      * @returns {boolean}
      */
     function assertion(...parameters) {
       // @ts-expect-error: spreading is fine.
       return Boolean(check.call(this, ...parameters))
     }
   }

   // Utility to return true.
   function ok() {
     return true
   }

   /**
    * @param {unknown} thing
    * @returns {boolean}
    */
   function whitespace(thing) {
     /** @type {string} */
     var value =
       // @ts-ignore looks like a node.
       thing && typeof thing === 'object' && thing.type === 'text'
         ? // @ts-ignore looks like a text.
           thing.value || ''
         : thing;

     // HTML whitespace expression.
     // See <https://html.spec.whatwg.org/#space-character>.
     return typeof value === 'string' && value.replace(/[ \t\n\f\r]/g, '') === ''
   }

   // See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
   const blocks = [
     'address', // Flow content.
     'article', // Sections and headings.
     'aside', // Sections and headings.
     'blockquote', // Flow content.
     'body', // Page.
     'br', // Contribute whitespace intrinsically.
     'caption', // Similar to block.
     'center', // Flow content, legacy.
     'col', // Similar to block.
     'colgroup', // Similar to block.
     'dd', // Lists.
     'dialog', // Flow content.
     'dir', // Lists, legacy.
     'div', // Flow content.
     'dl', // Lists.
     'dt', // Lists.
     'figcaption', // Flow content.
     'figure', // Flow content.
     'footer', // Flow content.
     'form', // Flow content.
     'h1', // Sections and headings.
     'h2', // Sections and headings.
     'h3', // Sections and headings.
     'h4', // Sections and headings.
     'h5', // Sections and headings.
     'h6', // Sections and headings.
     'head', // Page.
     'header', // Flow content.
     'hgroup', // Sections and headings.
     'hr', // Flow content.
     'html', // Page.
     'legend', // Flow content.
     'li', // Block-like.
     'li', // Similar to block.
     'listing', // Flow content, legacy
     'main', // Flow content.
     'menu', // Lists.
     'nav', // Sections and headings.
     'ol', // Lists.
     'optgroup', // Similar to block.
     'option', // Similar to block.
     'p', // Flow content.
     'plaintext', // Flow content, legacy
     'pre', // Flow content.
     'section', // Sections and headings.
     'summary', // Similar to block.
     'table', // Similar to block.
     'tbody', // Similar to block.
     'td', // Block-like.
     'td', // Similar to block.
     'tfoot', // Similar to block.
     'th', // Block-like.
     'th', // Similar to block.
     'thead', // Similar to block.
     'tr', // Similar to block.
     'ul', // Lists.
     'wbr', // Contribute whitespace intrinsically.
     'xmp' // Flow content, legacy
   ];

   const content$1 = [
     // Form.
     'button',
     'input',
     'select',
     'textarea'
   ];

   const skippable$1 = [
     'area',
     'base',
     'basefont',
     'dialog',
     'datalist',
     'head',
     'link',
     'meta',
     'noembed',
     'noframes',
     'param',
     'rp',
     'script',
     'source',
     'style',
     'template',
     'track',
     'title'
   ];

   /**
    * rehype plugin to minify whitespace between elements.
    *
    * ## What is this?
    *
    * This package is a plugin that can minify the whitespace between elements.
    *
    * ## When should I use this?
    *
    * You can use this plugin when you want to improve the size of HTML documents.
    *
    * ## API
    *
    * ### `unified().use(rehypeMinifyWhitespace[, options])`
    *
    * Minify whitespace.
    *
    * ##### `options`
    *
    * Configuration (optional).
    *
    * ##### `options.newlines`
    *
    * Whether to collapse runs of whitespace that include line endings to one
    * line ending (`boolean`, default: `false`).
    * The default is to collapse everything to one space.
    *
    * @example
    *   <h1>Heading</h1>
    *   <p><strong>This</strong> and <em>that</em></p>
    */

   const ignorableNode = convert(['doctype', 'comment']);

   /**
    * Minify whitespace.
    *
    * @type {import('unified').Plugin<[Options?]|Array<void>, Root>}
    */
   function rehypeMinifyWhitespace(options = {}) {
     const collapse = collapseFactory(
       options.newlines ? replaceNewlines : replaceWhitespace
     );

     return (tree) => {
       minify(tree, {collapse, whitespace: 'normal'});
     }
   }

   /**
    * @param {Node} node
    * @param {Context} context
    * @returns {Result}
    */
   function minify(node, context) {
     if ('children' in node) {
       const settings = Object.assign({}, context);

       if (node.type === 'root' || blocklike(node)) {
         settings.before = true;
         settings.after = true;
       }

       settings.whitespace = inferWhiteSpace(node, context);

       return all$4(node, settings)
     }

     if (node.type === 'text') {
       if (context.whitespace === 'normal') {
         return minifyText(node, context)
       }

       // Naïve collapse, but no trimming:
       if (context.whitespace === 'nowrap') {
         node.value = context.collapse(node.value);
       }

       // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor
       // trimmed.
     }

     return {remove: false, ignore: ignorableNode(node), stripAtStart: false}
   }

   /**
    * @param {Text} node
    * @param {Context} context
    * @returns {Result}
    */
   function minifyText(node, context) {
     const value = context.collapse(node.value);
     const result = {remove: false, ignore: false, stripAtStart: false};
     let start = 0;
     let end = value.length;

     if (context.before && removable(value.charAt(0))) {
       start++;
     }

     if (start !== end && removable(value.charAt(end - 1))) {
       if (context.after) {
         end--;
       } else {
         result.stripAtStart = true;
       }
     }

     if (start === end) {
       result.remove = true;
     } else {
       node.value = value.slice(start, end);
     }

     return result
   }

   /**
    * @param {Root|Element} parent
    * @param {Context} context
    * @returns {Result}
    */
   function all$4(parent, context) {
     let before = context.before;
     const after = context.after;
     const children = parent.children;
     let length = children.length;
     let index = -1;

     while (++index < length) {
       const result = minify(
         children[index],
         Object.assign({}, context, {
           before,
           after: collapsableAfter(children, index, after)
         })
       );

       if (result.remove) {
         children.splice(index, 1);
         index--;
         length--;
       } else if (!result.ignore) {
         before = result.stripAtStart;
       }

       // If this element, such as a `<select>` or `<img>`, contributes content
       // somehow, allow whitespace again.
       if (content(children[index])) {
         before = false;
       }
     }

     return {remove: false, ignore: false, stripAtStart: Boolean(before || after)}
   }

   /**
    * @param {Array<Node>} nodes
    * @param {number} index
    * @param {boolean|undefined} [after]
    * @returns {boolean|undefined}
    */
   function collapsableAfter(nodes, index, after) {
     while (++index < nodes.length) {
       const node = nodes[index];
       let result = inferBoundary(node);

       if (result === undefined && 'children' in node && !skippable(node)) {
         result = collapsableAfter(node.children, -1);
       }

       if (typeof result === 'boolean') {
         return result
       }
     }

     return after
   }

   /**
    * Infer two types of boundaries:
    *
    * 1. `true` — boundary for which whitespace around it does not contribute
    *    anything
    * 2. `false` — boundary for which whitespace around it *does* contribute
    *
    * No result (`undefined`) is returned if it is unknown.
    *
    * @param {Node} node
    * @returns {boolean|undefined}
    */
   function inferBoundary(node) {
     if (node.type === 'element') {
       if (content(node)) {
         return false
       }

       if (blocklike(node)) {
         return true
       }

       // Unknown: either depends on siblings if embedded or metadata, or on
       // children.
     } else if (node.type === 'text') {
       if (!whitespace(node)) {
         return false
       }
     } else if (!ignorableNode(node)) {
       return false
     }
   }

   /**
    * Infer whether a node is skippable.
    *
    * @param {Node} node
    * @returns {boolean}
    */
   function content(node) {
     return embedded(node) || isElement(node, content$1)
   }

   /**
    * See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
    *
    * @param {Element} node
    * @returns {boolean}
    */
   function blocklike(node) {
     return isElement(node, blocks)
   }

   /**
    * @param {Element|Root} node
    * @returns {boolean}
    */
   function skippable(node) {
     return (
       Boolean(
         'properties' in node && node.properties && node.properties.hidden
       ) ||
       ignorableNode(node) ||
       isElement(node, skippable$1)
     )
   }

   /**
    * @param {string} character
    * @returns {boolean}
    */
   function removable(character) {
     return character === ' ' || character === '\n'
   }

   /**
    * @param {string} value
    * @returns {string}
    */
   function replaceNewlines(value) {
     const match = /\r?\n|\r/.exec(value);
     return match ? match[0] : ' '
   }

   /**
    * @returns {string}
    */
   function replaceWhitespace() {
     return ' '
   }

   /**
    * @param {(value: string) => string} replace
    */
   function collapseFactory(replace) {
     return collapse

     /**
      * @param {string} value
      * @returns {string}
      */
     function collapse(value) {
       return String(value).replace(/[\t\n\v\f\r ]+/g, replace)
     }
   }

   /**
    * We don’t need to support void elements here (so `nobr wbr` -> `normal` is
    * ignored).
    *
    * @param {Root|Element} node
    * @param {Context} context
    * @returns {Whitespace}
    */
   function inferWhiteSpace(node, context) {
     if ('tagName' in node && node.properties) {
       switch (node.tagName) {
         // Whitespace in script/style, while not displayed by CSS as significant,
         // could have some meaning in JS/CSS, so we can’t touch them.
         case 'listing':
         case 'plaintext':
         case 'script':
         case 'style':
         case 'xmp':
           return 'pre'
         case 'nobr':
           return 'nowrap'
         case 'pre':
           return node.properties.wrap ? 'pre-wrap' : 'pre'
         case 'td':
         case 'th':
           return node.properties.noWrap ? 'nowrap' : context.whitespace
         case 'textarea':
           return 'pre-wrap'
       }
     }

     return context.whitespace
   }

   /**
    * @param {string} d
    * @returns {string}
    */
   function color(d) {
     return d
   }

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Parent} Parent
    * @typedef {import('unist-util-is').Test} Test
    * @typedef {import('./complex-types').Action} Action
    * @typedef {import('./complex-types').Index} Index
    * @typedef {import('./complex-types').ActionTuple} ActionTuple
    * @typedef {import('./complex-types').VisitorResult} VisitorResult
    * @typedef {import('./complex-types').Visitor} Visitor
    */

   /**
    * Continue traversing as normal
    */
   const CONTINUE = true;
   /**
    * Do not traverse this node’s children
    */
   const SKIP = 'skip';
   /**
    * Stop traversing immediately
    */
   const EXIT = false;

   /**
    * Visit children of tree which pass a test
    *
    * @param tree Abstract syntax tree to walk
    * @param test Test node, optional
    * @param visitor Function to run for each node
    * @param reverse Visit the tree in reverse order, defaults to false
    */
   const visitParents =
     /**
      * @type {(
      *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
      *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
      * )}
      */
     (
       /**
        * @param {Node} tree
        * @param {Test} test
        * @param {import('./complex-types').Visitor<Node>} visitor
        * @param {boolean} [reverse]
        */
       function (tree, test, visitor, reverse) {
         if (typeof test === 'function' && typeof visitor !== 'function') {
           reverse = visitor;
           // @ts-expect-error no visitor given, so `visitor` is test.
           visitor = test;
           test = null;
         }

         const is = convert(test);
         const step = reverse ? -1 : 1;

         factory(tree, null, [])();

         /**
          * @param {Node} node
          * @param {number?} index
          * @param {Array.<Parent>} parents
          */
         function factory(node, index, parents) {
           /** @type {Object.<string, unknown>} */
           // @ts-expect-error: hush
           const value = typeof node === 'object' && node !== null ? node : {};
           /** @type {string|undefined} */
           let name;

           if (typeof value.type === 'string') {
             name =
               typeof value.tagName === 'string'
                 ? value.tagName
                 : typeof value.name === 'string'
                 ? value.name
                 : undefined;

             Object.defineProperty(visit, 'name', {
               value:
                 'node (' +
                 color(value.type + (name ? '<' + name + '>' : '')) +
                 ')'
             });
           }

           return visit

           function visit() {
             /** @type {ActionTuple} */
             let result = [];
             /** @type {ActionTuple} */
             let subresult;
             /** @type {number} */
             let offset;
             /** @type {Array.<Parent>} */
             let grandparents;

             if (!test || is(node, index, parents[parents.length - 1] || null)) {
               result = toResult(visitor(node, parents));

               if (result[0] === EXIT) {
                 return result
               }
             }

             // @ts-expect-error looks like a parent.
             if (node.children && result[0] !== SKIP) {
               // @ts-expect-error looks like a parent.
               offset = (reverse ? node.children.length : -1) + step;
               // @ts-expect-error looks like a parent.
               grandparents = parents.concat(node);

               // @ts-expect-error looks like a parent.
               while (offset > -1 && offset < node.children.length) {
                 // @ts-expect-error looks like a parent.
                 subresult = factory(node.children[offset], offset, grandparents)();

                 if (subresult[0] === EXIT) {
                   return subresult
                 }

                 offset =
                   typeof subresult[1] === 'number' ? subresult[1] : offset + step;
               }
             }

             return result
           }
         }
       }
     );

   /**
    * @param {VisitorResult} value
    * @returns {ActionTuple}
    */
   function toResult(value) {
     if (Array.isArray(value)) {
       return value
     }

     if (typeof value === 'number') {
       return [CONTINUE, value]
     }

     return [value]
   }

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Parent} Parent
    * @typedef {import('unist-util-is').Test} Test
    * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
    * @typedef {import('./complex-types').Visitor} Visitor
    */

   /**
    * Visit children of tree which pass a test
    *
    * @param tree Abstract syntax tree to walk
    * @param test Test, optional
    * @param visitor Function to run for each node
    * @param reverse Fisit the tree in reverse, defaults to false
    */
   const visit =
     /**
      * @type {(
      *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
      *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
      * )}
      */
     (
       /**
        * @param {Node} tree
        * @param {Test} test
        * @param {import('./complex-types').Visitor} visitor
        * @param {boolean} [reverse]
        */
       function (tree, test, visitor, reverse) {
         if (typeof test === 'function' && typeof visitor !== 'function') {
           reverse = visitor;
           visitor = test;
           test = null;
         }

         visitParents(tree, test, overload, reverse);

         /**
          * @param {Node} node
          * @param {Array.<Parent>} parents
          */
         function overload(node, parents) {
           const parent = parents[parents.length - 1];
           return visitor(
             node,
             parent ? parent.children.indexOf(node) : null,
             parent
           )
         }
       }
     );

   /**
    * @typedef {import('./types.js').H} H
    * @typedef {import('./types.js').Node} Node
    * @typedef {import('./types.js').Parent} Parent
    * @typedef {import('./types.js').Handle} Handle
    * @typedef {import('./types.js').MdastNode} MdastNode
    */

   /**
    * @param {H} h
    * @param {Node} parent
    * @returns {Array.<MdastNode>}
    */
   function all$3(h, parent) {
     /** @type {Array.<Node>} */
     // @ts-expect-error Assume `parent` is a parent.
     const nodes = parent.children || [];
     /** @type {Array.<MdastNode>} */
     const values = [];
     let index = -1;
     let length = nodes.length;
     let child = nodes[index + 1];

     // Trim initial and final `<br>`s.
     // They’re not semantic per HTML, and they can’t be made in markdown things
     // like paragraphs or headings.
     while (child && child.type === 'element' && child.tagName === 'br') {
       index++;
       child = nodes[index + 1];
     }

     child = nodes[length - 1];

     while (
       length - 1 > index &&
       child &&
       child.type === 'element' &&
       child.tagName === 'br'
     ) {
       length--;
       child = nodes[length - 1];
     }

     while (++index < length) {
       // @ts-expect-error assume `parent` is a parent.
       const result = one$3(h, nodes[index], parent);

       if (Array.isArray(result)) {
         values.push(...result);
       } else if (result) {
         values.push(result);
       }
     }

     return values
   }

   const own$4 = {}.hasOwnProperty;

   /**
    * @typedef {import('../types.js').H} H
    */

   /**
    * @param {H} h
    * @param {string} value
    * @returns {string}
    */
   function wrapText$1(h, value) {
     return h.wrapText ? value : value.replace(/\r?\n|\r/g, ' ')
   }

   /**
    * @typedef {import('./types.js').H} H
    * @typedef {import('./types.js').Node} Node
    * @typedef {import('./types.js').Parent} Parent
    * @typedef {import('./types.js').Handle} Handle
    * @typedef {import('./types.js').MdastNode} MdastNode
    */

   /**
    * @param {H} h
    * @param {Node} node
    * @param {Parent|undefined} parent
    * @returns {MdastNode|Array.<MdastNode>|void}
    */
   function one$3(h, node, parent) {
     /** @type {Handle|undefined} */
     let fn;

     if (node.type === 'element') {
       if (node.properties && node.properties.dataMdast === 'ignore') {
         return
       }

       if (own$4.call(h.handlers, node.tagName)) {
         fn = h.handlers[node.tagName];
       }
     } else if (own$4.call(h.handlers, node.type)) {
       fn = h.handlers[node.type];
     }

     if (typeof fn === 'function') {
       return fn(h, node, parent)
     }

     return unknown$3(h, node)
   }

   /**
    * @type {Handle}
    * @param {Node} node
    */
   function unknown$3(h, node) {
     // @ts-expect-error: Looks like a literal.
     if (typeof node.value === 'string') {
       // @ts-expect-error: Looks like a literal.
       return h(node, 'text', wrapText$1(h, node.value))
     }

     return all$3(h, node)
   }

   var hasOwn = Object.prototype.hasOwnProperty;
   var toStr = Object.prototype.toString;
   var defineProperty = Object.defineProperty;
   var gOPD = Object.getOwnPropertyDescriptor;

   var isArray = function isArray(arr) {
   	if (typeof Array.isArray === 'function') {
   		return Array.isArray(arr);
   	}

   	return toStr.call(arr) === '[object Array]';
   };

   var isPlainObject = function isPlainObject(obj) {
   	if (!obj || toStr.call(obj) !== '[object Object]') {
   		return false;
   	}

   	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
   	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
   	// Not own constructor property must be Object
   	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
   		return false;
   	}

   	// Own properties are enumerated firstly, so to speed up,
   	// if last one is own, then all properties are own.
   	var key;
   	for (key in obj) { /**/ }

   	return typeof key === 'undefined' || hasOwn.call(obj, key);
   };

   // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
   var setProperty = function setProperty(target, options) {
   	if (defineProperty && options.name === '__proto__') {
   		defineProperty(target, options.name, {
   			enumerable: true,
   			configurable: true,
   			value: options.newValue,
   			writable: true
   		});
   	} else {
   		target[options.name] = options.newValue;
   	}
   };

   // Return undefined instead of __proto__ if '__proto__' is not an own property
   var getProperty = function getProperty(obj, name) {
   	if (name === '__proto__') {
   		if (!hasOwn.call(obj, name)) {
   			return void 0;
   		} else if (gOPD) {
   			// In early versions of node, obj['__proto__'] is buggy when obj has
   			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
   			return gOPD(obj, name).value;
   		}
   	}

   	return obj[name];
   };

   var extend = function extend() {
   	var options, name, src, copy, copyIsArray, clone;
   	var target = arguments[0];
   	var i = 1;
   	var length = arguments.length;
   	var deep = false;

   	// Handle a deep copy situation
   	if (typeof target === 'boolean') {
   		deep = target;
   		target = arguments[1] || {};
   		// skip the boolean and the target
   		i = 2;
   	}
   	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
   		target = {};
   	}

   	for (; i < length; ++i) {
   		options = arguments[i];
   		// Only deal with non-null/undefined values
   		if (options != null) {
   			// Extend the base object
   			for (name in options) {
   				src = getProperty(target, name);
   				copy = getProperty(options, name);

   				// Prevent never-ending loop
   				if (target !== copy) {
   					// Recurse if we're merging plain objects or arrays
   					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
   						if (copyIsArray) {
   							copyIsArray = false;
   							clone = src && isArray(src) ? src : [];
   						} else {
   							clone = src && isPlainObject(src) ? src : {};
   						}

   						// Never move original objects, clone them
   						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

   					// Don't bring in undefined values
   					} else if (typeof copy !== 'undefined') {
   						setProperty(target, { name: name, newValue: copy });
   					}
   				}
   			}
   		}
   	}

   	// Return the modified object
   	return target;
   };

   /**
    * @typedef {import('mdast').PhrasingContent} PhrasingContent
    * @typedef {import('unist-util-is').AssertPredicate<PhrasingContent>} AssertPredicatePhrasing
    */

   /**
    * @type {AssertPredicatePhrasing}
    */
   // @ts-ignore hush, it’s fine!
   const phrasing = convert([
     'break',
     'delete',
     'emphasis',
     'footnote',
     'footnoteReference',
     'image',
     'imageReference',
     'inlineCode',
     'link',
     'linkReference',
     'strong',
     'text'
   ]);

   /**
    * @typedef {import('../types.js').H} H
    * @typedef {import('../types.js').MdastNode} MdastNode
    * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent
    */

   /**
    * @param {Array.<MdastNode>} nodes
    */
   function wrap(nodes) {
     return runs(nodes, onphrasing)

     /**
      * @param {Array.<MdastPhrasingContent>} nodes
      * @returns {MdastNode|Array.<MdastNode>}
      */
     function onphrasing(nodes) {
       const head = nodes[0];

       if (
         nodes.length === 1 &&
         head.type === 'text' &&
         (head.value === ' ' || head.value === '\n')
       ) {
         return []
       }

       return {type: 'paragraph', children: nodes}
     }
   }

   /**
    * Check if there are non-phrasing mdast nodes returned.
    * This is needed if a fragment is given, which could just be a sentence, and
    * doesn’t need a wrapper paragraph.
    *
    * @param {Array.<MdastNode>} nodes
    * @returns {boolean}
    */
   function wrapNeeded(nodes) {
     let index = -1;
     /** @type {MdastNode} */
     let node;

     while (++index < nodes.length) {
       node = nodes[index];

       if (!phrasing(node) || ('children' in node && wrapNeeded(node.children))) {
         return true
       }
     }

     return false
   }

   /**
    * Wrap all runs of mdast phrasing content in `paragraph` nodes.
    *
    * @param {Array.<MdastNode>} nodes
    * @param {(nodes: Array.<MdastPhrasingContent>) => MdastNode|Array.<MdastNode>} onphrasing
    * @param {(node: MdastNode) => MdastNode} [onnonphrasing]
    */
   function runs(nodes, onphrasing, onnonphrasing) {
     const nonphrasing = onnonphrasing || identity;
     /** @type {Array.<MdastNode>} */
     const flattened = flatten(nodes);
     /** @type {Array.<MdastNode>} */
     let result = [];
     let index = -1;
     /** @type {Array.<MdastPhrasingContent>|undefined} */
     let queue;
     /** @type {MdastNode} */
     let node;

     while (++index < flattened.length) {
       node = flattened[index];

       if (phrasing(node)) {
         if (!queue) queue = [];
         queue.push(node);
       } else {
         if (queue) {
           result = result.concat(onphrasing(queue));
           queue = undefined;
         }

         result = result.concat(nonphrasing(node));
       }
     }

     if (queue) {
       result = result.concat(onphrasing(queue));
     }

     return result
   }

   /**
    * Flatten a list of nodes.
    *
    * @param {Array.<MdastNode>} nodes
    * @returns {Array.<MdastNode>}
    */
   function flatten(nodes) {
     /** @type {Array.<MdastNode>} */
     let flattened = [];
     let index = -1;
     /** @type {MdastNode} */
     let node;

     while (++index < nodes.length) {
       node = nodes[index];

       // Straddling: some elements are *weird*.
       // Namely: `map`, `ins`, `del`, and `a`, as they are hybrid elements.
       // See: <https://html.spec.whatwg.org/#paragraphs>.
       // Paragraphs are the weirdest of them all.
       // See the straddling fixture for more info!
       // `ins` is ignored in mdast, so we don’t need to worry about that.
       // `map` maps to its content, so we don’t need to worry about that either.
       // `del` maps to `delete` and `a` to `link`, so we do handle those.
       // What we’ll do is split `node` over each of its children.
       if (
         (node.type === 'delete' || node.type === 'link') &&
         wrapNeeded(node.children)
       ) {
         flattened = flattened.concat(split(node));
       } else {
         flattened.push(node);
       }
     }

     return flattened
   }

   /**
    * @param {MdastNode} node
    * @returns {Array.<MdastNode>}
    */
   function split(node) {
     // @ts-expect-error Assume parent.
     return runs(node.children, onphrasing, onnonphrasing)

     /**
      * Use `child`, add `parent` as its first child, put the original children
      * into `parent`.
      * If `child` is not a parent, `parent` will not be added.
      *
      * @param {MdastNode} child
      * @returns {MdastNode}
      */
     function onnonphrasing(child) {
       if ('children' in child && 'children' in node) {
         const {children, ...rest} = node;
         return {
           ...child,
           // @ts-expect-error: assume matching parent & child.
           children: [{...extend(true, {}, rest), children: child.children}]
         }
       }

       return {...child}
     }

     /**
      * Use `parent`, put the phrasing run inside it.
      *
      * @param {Array.<MdastPhrasingContent>} nodes
      * @returns {MdastNode}
      */
     function onphrasing(nodes) {
       // @ts-expect-error: assume parent.
       const {children, ...rest} = node;
       // @ts-expect-error: assume matching parent & child.
       return {...extend(true, {}, rest), children: nodes}
     }
   }

   /**
    * @template {unknown} T
    * @param {T} n
    * @returns {T}
    */
   function identity(n) {
     return n
   }

   /**
    * @typedef {import('../types.js').H} H
    * @typedef {import('../types.js').Node} Node
    * @typedef {import('../types.js').MdastNode} MdastNode
    */

   /**
    * @param {H} h
    * @param {Node} node
    * @returns {Array.<MdastNode>}
    */
   function wrapChildren(h, node) {
     return wrap(all$3(h, node))
   }

   /**
    * @typedef {import('../types.js').H} H
    */

   /**
    * @param {H} h
    * @param {string|null|undefined} url
    * @returns {string}
    */
   function resolve(h, url) {
     if (url === null || url === undefined) {
       return ''
     }

     if (h.frozenBaseUrl) {
       return String(new URL(url, h.frozenBaseUrl))
     }

     return url
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').Properties} Properties
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function a(h, node) {
     /** @type {Properties} */
     // @ts-expect-error: `props` are defined.
     const props = node.properties;
     return h(
       node,
       'link',
       {
         title: props.title || null,
         url: resolve(h, String(props.href || '') || null)
       },
       all$3(h, node)
     )
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function base(h, node) {
     if (!h.baseFound) {
       h.frozenBaseUrl =
         String((node.properties && node.properties.href) || '') || null;
       h.baseFound = true;
     }
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function blockquote$1(h, node) {
     return h(node, 'blockquote', wrapChildren(h, node))
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function br$1(h, node) {
     return h.wrapText ? h(node, 'break') : h(node, 'text', ' ')
   }

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Parent} Parent
    *
    * @typedef {import('unist-util-is').Type} Type
    * @typedef {import('unist-util-is').Props} Props
    * @typedef {import('unist-util-is').TestFunctionAnything} TestFunctionAnything
    */

   var findAfter =
     /**
      * @type {(
      *  (<T extends Node>(node: Parent, index: Node|number, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>) => T|null) &
      *  ((node: Parent, index: Node|number, test?: null|undefined|Type|Props|TestFunctionAnything|Array<Type|Props|TestFunctionAnything>) => Node|null)
      * )}
      */
     (
       /**
        * @param {Parent} parent Parent node
        * @param {Node|number} index Child of `parent`, or it’s index
        * @param {null|undefined|Type|Props|TestFunctionAnything|Array<Type|Props|TestFunctionAnything>} [test] is-compatible test (such as a type)
        * @returns {Node|null}
        */
       function (parent, index, test) {
         var is = convert(test);

         if (!parent || !parent.type || !parent.children) {
           throw new Error('Expected parent node')
         }

         if (typeof index === 'number') {
           if (index < 0 || index === Number.POSITIVE_INFINITY) {
             throw new Error('Expected positive finite number as index')
           }
         } else {
           index = parent.children.indexOf(index);

           if (index < 0) {
             throw new Error('Expected child node or index')
           }
         }

         while (++index < parent.children.length) {
           if (is(parent.children[index], index, parent)) {
             return parent.children[index]
           }
         }

         return null
       }
     );

   /**
    * @typedef {import('hast-util-is-element').TestFunctionAnything} TestFunctionAnything
    * @typedef {import('hast').Parent['children'][number]} HastChild
    * @typedef {import('hast').Text} HastText
    * @typedef {import('hast').Comment} HastComment
    * @typedef {import('hast').Root} HastRoot
    * @typedef {import('hast').Element} HastElement
    * @typedef {import('hast').Properties} HastProperties
    * @typedef {HastChild|HastRoot} HastNode
    * @typedef {HastRoot|HastElement} HastParent
    *
    * @typedef {'normal'|'pre'|'nowrap'|'pre-wrap'} Whitespace
    * @typedef {boolean} BreakValue
    * @typedef {1|2} BreakNumber
    * @typedef {'\n'} BreakForce
    * @typedef {BreakValue|BreakNumber|undefined} BreakBefore
    * @typedef {BreakValue|BreakNumber|BreakForce|undefined} BreakAfter
    *
    * @typedef CollectionOptions
    * @property {Whitespace} whitespace
    * @property {BreakBefore} breakBefore
    * @property {BreakAfter} breakAfter
    *
    * @typedef Options
    *   Configuration.
    * @property {Whitespace} [whitespace='normal']
    *   Initial CSS whitespace setting to use.
    */

   const searchLineFeeds = /\n/g;
   const searchTabOrSpaces = /[\t ]+/g;

   const br = convertElement('br');
   const p$2 = convertElement('p');
   const cell$2 = convertElement(['th', 'td']);
   const row = convertElement('tr');

   // Note that we don’t need to include void elements here as they don’t have text.
   // See: <https://github.com/wooorm/html-void-elements>
   const notRendered = convertElement([
     // List from: <https://html.spec.whatwg.org/#hidden-elements>
     'datalist',
     'head',
     'noembed',
     'noframes',
     'noscript', // Act as if we support scripting.
     'rp',
     'script',
     'style',
     'template',
     'title',
     // Hidden attribute.
     hidden,
     // From: <https://html.spec.whatwg.org/#flow-content-3>
     closedDialog
   ]);

   // See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
   const blockOrCaption = convertElement([
     'address', // Flow content
     'article', // Sections and headings
     'aside', // Sections and headings
     'blockquote', // Flow content
     'body', // Page
     'caption', // `table-caption`
     'center', // Flow content (legacy)
     'dd', // Lists
     'dialog', // Flow content
     'dir', // Lists (legacy)
     'dl', // Lists
     'dt', // Lists
     'div', // Flow content
     'figure', // Flow content
     'figcaption', // Flow content
     'footer', // Flow content
     'form,', // Flow content
     'h1', // Sections and headings
     'h2', // Sections and headings
     'h3', // Sections and headings
     'h4', // Sections and headings
     'h5', // Sections and headings
     'h6', // Sections and headings
     'header', // Flow content
     'hgroup', // Sections and headings
     'hr', // Flow content
     'html', // Page
     'legend', // Flow content
     'listing', // Flow content (legacy)
     'main', // Flow content
     'menu', // Lists
     'nav', // Sections and headings
     'ol', // Lists
     'p', // Flow content
     'plaintext', // Flow content (legacy)
     'pre', // Flow content
     'section', // Sections and headings
     'ul', // Lists
     'xmp' // Flow content (legacy)
   ]);

   /**
    * Implementation of the `innerText` getter:
    * <https://html.spec.whatwg.org/#the-innertext-idl-attribute>
    * Note that we act as if `node` is being rendered, and as if we’re a
    * CSS-supporting user agent.
    *
    * @param {HastNode} node
    * @param {Options} [options={}]
    * @returns {string}
    */
   function toText(node, options = {}) {
     /** @type {Array.<HastChild>} */
     // @ts-ignore looks like a parent.
     const children = node.children || [];
     const block = blockOrCaption(node);
     const whitespace = inferWhitespace(node, {
       whitespace: options.whitespace || 'normal',
       breakBefore: false,
       breakAfter: false
     });
     let index = -1;
     /** @type {Array.<string|BreakNumber>} */
     let results;
     /** @type {string|BreakNumber} */
     let value;
     /** @type {number|undefined} */
     let count;

     // Treat `text` and `comment` as having normal white-space.
     // This deviates from the spec as in the DOM the node’s `.data` has to be
     // returned.
     // If you want that behavior use `hast-util-to-string`.
     // All other nodes are later handled as if they are `element`s (so the
     // algorithm also works on a `root`).
     // Nodes without children are treated as a void element, so `doctype` is thus
     // ignored.
     if (node.type === 'text' || node.type === 'comment') {
       return collectText(node, {whitespace, breakBefore: true, breakAfter: true})
     }

     // 1.  If this element is not being rendered, or if the user agent is a
     //     non-CSS user agent, then return the same value as the textContent IDL
     //     attribute on this element.
     //
     //     Note: we’re not supporting stylesheets so we’re acting as if the node
     //     is rendered.
     //
     //     If you want that behavior use `hast-util-to-string`.
     //     Important: we’ll have to account for this later though.

     // 2.  Let results be a new empty list.
     results = [];

     // 3.  For each child node node of this element:
     while (++index < children.length) {
       // 3.1. Let current be the list resulting in running the inner text
       //      collection steps with node.
       //      Each item in results will either be a JavaScript string or a
       //      positive integer (a required line break count).
       // 3.2. For each item item in current, append item to results.
       results = results.concat(
         // @ts-ignore Looks like a parent.
         innerTextCollection(children[index], node, {
           whitespace,
           breakBefore: index ? null : block,
           breakAfter:
             index < children.length - 1 ? br(children[index + 1]) : block
         })
       );
     }

     // 4.  Remove any items from results that are the empty string.
     // 5.  Remove any runs of consecutive required line break count items at the
     //     start or end of results.
     // 6.  Replace each remaining run of consecutive required line break count
     //     items with a string consisting of as many U+000A LINE FEED (LF)
     //     characters as the maximum of the values in the required line break
     //     count items.
     index = -1;
     /** @type {Array.<string>} */
     const result = [];

     while (++index < results.length) {
       value = results[index];

       if (typeof value === 'number') {
         if (count !== undefined && value > count) count = value;
       } else if (value) {
         if (count) result.push('\n'.repeat(count));
         count = 0;
         result.push(value);
       }
     }

     // 7.  Return the concatenation of the string items in results.
     return result.join('')
   }

   /**
    * <https://html.spec.whatwg.org/#inner-text-collection-steps>
    *
    * @param {HastNode} node
    * @param {HastParent} parent
    * @param {CollectionOptions} options
    * @returns {Array.<string|BreakNumber>}
    */
   function innerTextCollection(node, parent, options) {
     if (node.type === 'element') {
       return collectElement(node, parent, options)
     }

     if (node.type === 'text') {
       return [
         options.whitespace === 'normal'
           ? collectText(node, options)
           : collectPreText(node)
       ]
     }

     return []
   }

   /**
    * Collect an element.
    *
    * @param {HastElement} node
    * @param {HastParent} parent
    * @param {CollectionOptions} options
    */
   function collectElement(node, parent, options) {
     // First we infer the `white-space` property.
     const whitespace = inferWhitespace(node, options);
     const children = node.children || [];
     let index = -1;
     /** @type {Array.<string|BreakNumber>} */
     let items = [];
     /** @type {BreakNumber|undefined} */
     let prefix;
     /** @type {BreakNumber|BreakForce|undefined} */
     let suffix;

     // We’re ignoring point 3, and exiting without any content here, because we
     // deviated from the spec in `toText` at step 3.
     if (notRendered(node)) {
       return items
     }

     // Note: we first detect if there is going to be a break before or after the
     // contents, as that changes the white-space handling.

     // 2.  If node’s computed value of `visibility` is not `visible`, then return
     //     items.
     //
     //     Note: Ignored, as everything is visible by default user agent styles.

     // 3.  If node is not being rendered, then return items. [...]
     //
     //     Note: We already did this above.

     // See `collectText` for step 4.

     // 5.  If node is a `<br>` element, then append a string containing a single
     //     U+000A LINE FEED (LF) character to items.
     if (br(node)) {
       suffix = '\n';
     }

     // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS
     //     box is not the last `table-row` box of the nearest ancestor `table`
     //     box, then append a string containing a single U+000A LINE FEED (LF)
     //     character to items.
     //
     //     See: <https://html.spec.whatwg.org/#tables-2>
     //     Note: needs further investigation as this does not account for implicit
     //     rows.
     else if (row(node) && findAfter(parent, node, row)) {
       suffix = '\n';
     }

     // 8.  If node is a `<p>` element, then append 2 (a required line break count)
     //     at the beginning and end of items.
     else if (p$2(node)) {
       prefix = 2;
       suffix = 2;
     }

     // 9.  If node’s used value of `display` is block-level or `table-caption`,
     //     then append 1 (a required line break count) at the beginning and end of
     //     items.
     else if (blockOrCaption(node)) {
       prefix = 1;
       suffix = 1;
     }

     // 1.  Let items be the result of running the inner text collection steps with
     //     each child node of node in tree order, and then concatenating the
     //     results to a single list.
     while (++index < children.length) {
       items = items.concat(
         innerTextCollection(children[index], node, {
           whitespace,
           breakBefore: index ? undefined : prefix,
           breakAfter:
             index < children.length - 1 ? br(children[index + 1]) : suffix
         })
       );
     }

     // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS
     //     box is not the last `table-cell` box of its enclosing `table-row` box,
     //     then append a string containing a single U+0009 CHARACTER TABULATION
     //     (tab) character to items.
     //
     //     See: <https://html.spec.whatwg.org/#tables-2>
     if (cell$2(node) && findAfter(parent, node, cell$2)) {
       items.push('\t');
     }

     // Add the pre- and suffix.
     if (prefix) items.unshift(prefix);
     if (suffix) items.push(suffix);

     return items
   }

   /**
    * 4.  If node is a Text node, then for each CSS text box produced by node,
    *     in content order, compute the text of the box after application of the
    *     CSS `white-space` processing rules and `text-transform` rules, set
    *     items to the list of the resulting strings, and return items.
    *     The CSS `white-space` processing rules are slightly modified:
    *     collapsible spaces at the end of lines are always collapsed, but they
    *     are only removed if the line is the last line of the block, or it ends
    *     with a br element.
    *     Soft hyphens should be preserved.
    *
    *     Note: See `collectText` and `collectPreText`.
    *     Note: we don’t deal with `text-transform`, no element has that by
    *     default.
    *
    * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>
    *
    * @param {HastText|HastComment} node
    * @param {CollectionOptions} options
    * @returns {string}
    */
   function collectText(node, options) {
     const value = String(node.value);
     /** @type {Array.<string>} */
     const lines = [];
     /** @type {Array.<string>} */
     const result = [];
     let start = 0;
     let index = -1;
     /** @type {RegExpMatchArray|null} */
     let match;
     /** @type {number} */
     let end;
     /** @type {string|undefined} */
     let join;

     while (start < value.length) {
       searchLineFeeds.lastIndex = start;
       match = searchLineFeeds.exec(value);
       // @ts-expect-error: `index` is set.
       end = match ? match.index : value.length;

       lines.push(
         // Any sequence of collapsible spaces and tabs immediately preceding or
         // following a segment break is removed.
         trimAndCollapseSpacesAndTabs(
           // [...] ignoring bidi formatting characters (characters with the
           // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if
           // they were not there.
           value
             .slice(start, end)
             .replace(/[\u061C\u200E\u200F\u202A-\u202E\u2066-\u2069]/g, ''),
           options.breakBefore,
           options.breakAfter
         )
       );

       start = end + 1;
     }

     // Collapsible segment breaks are transformed for rendering according to the
     // segment break transformation rules.
     // So here we jump to 4.1.2 of [CSSTEXT]:
     // Any collapsible segment break immediately following another collapsible
     // segment break is removed
     while (++index < lines.length) {
       // *   If the character immediately before or immediately after the segment
       //     break is the zero-width space character (U+200B), then the break is
       //     removed, leaving behind the zero-width space.
       if (
         lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ ||
         (index < lines.length - 1 &&
           lines[index + 1].charCodeAt(0) === 0x200b) /* ZWSP */
       ) {
         result.push(lines[index]);
         join = '';
       }

       // *   Otherwise, if the East Asian Width property [UAX11] of both the
       //     character before and after the segment break is Fullwidth, Wide, or
       //     Halfwidth (not Ambiguous), and neither side is Hangul, then the
       //     segment break is removed.
       //
       //     Note: ignored.
       // *   Otherwise, if the writing system of the segment break is Chinese,
       //     Japanese, or Yi, and the character before or after the segment break
       //     is punctuation or a symbol (Unicode general category P* or S*) and
       //     has an East Asian Width property of Ambiguous, and the character on
       //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,
       //     and not Hangul, then the segment break is removed.
       //
       //     Note: ignored.

       // *   Otherwise, the segment break is converted to a space (U+0020).
       else if (lines[index]) {
         if (join) result.push(join);
         result.push(lines[index]);
         join = ' ';
       }
     }

     return result.join('')
   }

   /**
    * @param {HastText|HastComment} node
    * @returns {string}
    */
   function collectPreText(node) {
     return String(node.value)
   }

   /**
    * 3.  Every collapsible tab is converted to a collapsible space (U+0020).
    * 4.  Any collapsible space immediately following another collapsible
    *     space—even one outside the boundary of the inline containing that
    *     space, provided both spaces are within the same inline formatting
    *     context—is collapsed to have zero advance width. (It is invisible,
    *     but retains its soft wrap opportunity, if any.)
    *
    * @param {string} value
    * @param {BreakBefore} breakBefore
    * @param {BreakAfter} breakAfter
    * @returns {string}
    */
   function trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {
     /** @type {Array.<string>} */
     const result = [];
     let start = 0;
     /** @type {RegExpMatchArray|null} */
     let match;
     /** @type {number} */
     let end;

     while (start < value.length) {
       searchTabOrSpaces.lastIndex = start;
       match = searchTabOrSpaces.exec(value);
       // @ts-expect-error: `index` is set.
       end = match ? match.index : value.length;

       // If we’re not directly after a segment break, but there was white space,
       // add an empty value that will be turned into a space.
       if (!start && !end && match && !breakBefore) {
         result.push('');
       }

       if (start !== end) {
         result.push(value.slice(start, end));
       }

       start = match ? end + match[0].length : end;
     }

     // If we reached the end, there was trailing white space, and there’s no
     // segment break after this node, add an empty value that will be turned
     // into a space.
     // @ts-expect-error: `end` is defined.
     if (start !== end && !breakAfter) {
       result.push('');
     }

     return result.join(' ')
   }

   /**
    * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).
    *
    * @param {HastNode} node
    * @param {CollectionOptions} options
    * @returns {Whitespace}
    */
   function inferWhitespace(node, options) {
     /** @type {HastProperties} */
     let props;

     if (node.type === 'element') {
       props = node.properties || {};
       switch (node.tagName) {
         case 'listing':
         case 'plaintext':
         case 'xmp':
           return 'pre'
         case 'nobr':
           return 'nowrap'
         case 'pre':
           return props.wrap ? 'pre-wrap' : 'pre'
         case 'td':
         case 'th':
           return props.noWrap ? 'nowrap' : options.whitespace
         case 'textarea':
           return 'pre-wrap'
       }
     }

     return options.whitespace
   }

   /** @type {TestFunctionAnything} */
   function hidden(node) {
     return Boolean((node.properties || {}).hidden)
   }

   /** @type {TestFunctionAnything} */
   function closedDialog(node) {
     return node.tagName === 'dialog' && !(node.properties || {}).open
   }

   /**
    * Remove final newline characters from `value`.
    *
    * @param {unknown} value Value with trailing line feeds, coerced to string.
    * @return {string} Value without trailing newlines.
    */
   function trimTrailingLines(value) {
     return String(value).replace(/\n+$/, '')
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').ElementChild} ElementChild
    */

   const prefix = 'language-';

   const pre = convertElement('pre');
   const isCode = convertElement('code');

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function code$1(h, node) {
     const children = node.children;
     let index = -1;
     /** @type {Array.<string|number>|undefined} */
     let classList;
     /** @type {string|undefined} */
     let lang;

     if (pre(node)) {
       while (++index < children.length) {
         const child = children[index];

         if (
           isCode(child) &&
           child.properties &&
           child.properties.className &&
           Array.isArray(child.properties.className)
         ) {
           classList = child.properties.className;
           break
         }
       }
     }

     if (classList) {
       index = -1;

       while (++index < classList.length) {
         if (String(classList[index]).slice(0, prefix.length) === prefix) {
           lang = String(classList[index]).slice(prefix.length);
           break
         }
       }
     }

     return h(
       node,
       'code',
       {lang: lang || null, meta: null},
       trimTrailingLines(wrapText$1(h, toText(node)))
     )
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Comment} Comment
    */

   /**
    * @type {Handle}
    * @param {Comment} node
    */
   function comment(h, node) {
     return h(node, 'html', '<!--' + wrapText$1(h, node.value) + '-->')
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function del(h, node) {
     return h(node, 'delete', all$3(h, node))
   }

   /**
    * @typedef {import('../types.js').MdastListContent} MdastListContent
    */

   /**
    * @param {Array.<MdastListContent>} children
    * @returns {boolean}
    */
   function listItemsSpread(children) {
     let index = -1;

     if (children.length > 1) {
       while (++index < children.length) {
         if (children[index].spread) {
           return true
         }
       }
     }

     return false
   }

   /**
    * @typedef {import('../types.js').H} H
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').Child} Child
    * @typedef {import('../types.js').MdastListContent} MdastListContent
    */

   /**
    * @param {H} h
    * @param {Child} node
    * @returns {Array.<MdastListContent>}
    */
   function wrapListItems(h, node) {
     const children = all$3(h, node);
     let index = -1;

     while (++index < children.length) {
       const child = children[index];
       if (child.type !== 'listItem') {
         children[index] = {
           type: 'listItem',
           spread: false,
           checked: null,
           // @ts-expect-error Assume `children[index]` is block content.
           children: [child]
         };
       }
     }

     // @ts-expect-error Assume all `listItem`s
     return children
   }

   /**
    * @typedef {import('../types.js').H} H
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').ElementChild} ElementChild
    * @typedef {import('../types.js').MdastNode} MdastNode
    * @typedef {import('../types.js').MdastListContent} MdastListContent
    * @typedef {import('../types.js').MdastBlockContent} MdastBlockContent
    * @typedef {import('../types.js').MdastDefinitionContent} MdastDefinitionContent
    *
    * @typedef Group
    * @property {Array.<Element>} titles
    * @property {Array.<ElementChild>} definitions
    */

   const div = convertElement('div');
   const dt = convertElement('dt');
   const dd = convertElement('dd');

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function dl(h, node) {
     const children = node.children;
     let index = -1;
     /** @type {Array.<ElementChild>} */
     let clean = [];
     /** @type {Array.<Group>} */
     const groups = [];
     /** @type {Group} */
     let group = {titles: [], definitions: []};
     /** @type {ElementChild} */
     let child;
     /** @type {Array.<MdastBlockContent|MdastDefinitionContent>} */
     let result;

     // Unwrap `<div>`s
     while (++index < children.length) {
       child = children[index];
       clean = clean.concat(div(child) ? child.children : child);
     }

     index = -1;

     // Group titles and definitions.
     while (++index < clean.length) {
       child = clean[index];

       if (dt(child)) {
         if (dd(clean[index - 1])) {
           groups.push(group);
           group = {titles: [], definitions: []};
         }

         group.titles.push(child);
       } else {
         group.definitions.push(child);
       }
     }

     groups.push(group);

     // Create items.
     index = -1;
     /** @type {Array.<MdastListContent>} */
     const content = [];

     while (++index < groups.length) {
       result = [
         ...handle$1(h, groups[index].titles),
         ...handle$1(h, groups[index].definitions)
       ];

       if (result.length > 0) {
         content.push({
           type: 'listItem',
           spread: result.length > 1,
           checked: null,
           children: result
         });
       }
     }

     // Create a list if there are items.
     if (content.length > 0) {
       return h(
         node,
         'list',
         {ordered: false, start: null, spread: listItemsSpread(content)},
         content
       )
     }
   }

   /**
    * @param {H} h
    * @param {Array.<ElementChild>} children
    * @returns {Array.<MdastBlockContent|MdastDefinitionContent>}
    */
   function handle$1(h, children) {
     const nodes = wrapListItems(h, {type: 'element', tagName: 'x', children});

     if (nodes.length === 0) {
       return []
     }

     if (nodes.length === 1) {
       return nodes[0].children
     }

     return [
       {
         type: 'list',
         ordered: false,
         start: null,
         spread: listItemsSpread(nodes),
         children: nodes
       }
     ]
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function em(h, node) {
     return h(node, 'emphasis', all$3(h, node))
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').MdastNode} MdastNode
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function heading$1(h, node) {
     // `else` shouldn’t happen, of course…
     /* c8 ignore next */
     const depth = Number(node.tagName.charAt(1)) || 1;
     const wrap = h.wrapText;

     h.wrapText = false;
     const result = h(node, 'heading', {depth}, all$3(h, node));
     h.wrapText = wrap;

     return result
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function hr(h, node) {
     return h(node, 'thematicBreak')
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').Properties} Properties
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function iframe(h, node) {
     /** @type {Properties} */
     // @ts-expect-error: `props` are defined.
     const props = node.properties;
     const src = String(props.src || '');
     const title = String(props.title || '');

     // Only create a link if there is a title.
     // We can’t use the content of the frame because conforming HTML parsers treat
     // it as text, whereas legacy parsers treat it as HTML, so it will likely
     // contain tags that will show up in text.
     if (src && title) {
       return {
         type: 'link',
         title: null,
         url: resolve(h, src),
         children: [{type: 'text', value: wrapText$1(h, title)}]
       }
     }
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').Properties} Properties
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function img(h, node) {
     /** @type {Properties} */
     // @ts-expect-error: `props` are defined.
     const props = node.properties;
     return h(node, 'image', {
       url: resolve(h, String(props.src || '') || null),
       title: props.title || null,
       alt: props.alt || ''
     })
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function inlineCode$1(h, node) {
     return h(node, 'inlineCode', wrapText$1(h, toText(node)))
   }

   var own$3 = {}.hasOwnProperty;

   /**
    * Check if `node` has a set `name` property.
    *
    * @param {unknown} node
    * @param {string} name
    * @returns {boolean}
    */
   function hasProperty(node, name) {
     /** @type {unknown} */
     var value =
       name &&
       node &&
       typeof node === 'object' &&
       // @ts-ignore Looks like a node.
       node.type === 'element' &&
       // @ts-ignore Looks like an element.
       node.properties &&
       // @ts-ignore Looks like an element.
       own$3.call(node.properties, name) &&
       // @ts-ignore Looks like an element.
       node.properties[name];

     return value !== null && value !== undefined && value !== false
   }

   /**
    * @typedef {import('../types.js').H} H
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').Child} Child
    * @typedef {import('../types.js').Properties} Properties
    */

   const option = convertElement('option');

   /**
    * @param {H} h
    * @param {Element} node
    * @param {Properties} [properties]
    * @returns {Array.<[string, string|null]>}
    */
   function findSelectedOptions(h, node, properties) {
     /** @type {Properties} */
     // @ts-expect-error: `props` exist.
     const props = properties || node.properties;
     let options = findOptions(node);
     const size =
       Math.min(Number.parseInt(String(props.size), 10), 0) ||
       (props.multiple ? 4 : 1);
     let index = -1;
     /** @type {Array.<Element>} */
     const selectedOptions = [];
     /** @type {Array.<[string, string|null]>} */
     const values = [];

     while (++index < options.length) {
       if (hasProperty(options[index], 'selected')) {
         selectedOptions.push(options[index]);
       }
     }

     const list = selectedOptions.length > 0 ? selectedOptions : options;
     options = list.slice(0, size);
     index = -1;

     while (++index < options.length) {
       const option = options[index];
       const content = wrapText$1(h, toText(option));
       /** @type {Properties} */
       // @ts-expect-error: `props` exist.
       const props = option.properties;
       const label = content || String(props.label || '');
       const value = String(props.value || '') || content;
       values.push([value, label === value ? null : label]);
     }

     return values
   }

   /**
    * @param {Parent} node
    */
   function findOptions(node) {
     const children = node.children;
     let index = -1;
     /** @type {Array.<Element>} */
     let results = [];
     /** @type {Child} */
     let child;

     while (++index < children.length) {
       child = children[index];

       // @ts-expect-error Looks like a parent.
       if (Array.isArray(child.children)) {
         // @ts-expect-error Looks like a parent.
         results = results.concat(findOptions(child));
       }

       if (option(child) && !hasProperty(child, 'disabled')) {
         results.push(child);
       }
     }

     return results
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').Properties} Properties
    * @typedef {import('../types.js').MdastNode} MdastNode
    */

   const datalist = convertElement('datalist');

   /**
    * @type {Handle}
    * @param {Element} node
    */
   // eslint-disable-next-line complexity
   function input$1(h, node) {
     /** @type {Properties} */
     // @ts-expect-error: `props` are defined.
     const props = node.properties;
     let value = String(props.value || props.placeholder || '');
     /** @type {Array.<MdastNode>} */
     const results = [];
     /** @type {Array.<string>} */
     const texts = [];
     /** @type {Array.<[string, string|null]>} */
     let values = [];
     let index = -1;
     /** @type {string} */
     let list;

     if (props.disabled || props.type === 'hidden' || props.type === 'file') {
       return
     }

     if (props.type === 'checkbox' || props.type === 'radio') {
       return h(
         node,
         'text',
         wrapText$1(h, h[props.checked ? 'checked' : 'unchecked'])
       )
     }

     if (props.type === 'image') {
       return props.alt || value
         ? h(node, 'image', {
             url: resolve(h, String(props.src || '') || null),
             title: wrapText$1(h, String(props.title || '')) || null,
             alt: wrapText$1(h, String(props.alt || value))
           })
         : []
     }

     if (value) {
       values = [[value, null]];
     } else if (
       // `list` is not supported on these types:
       props.type !== 'password' &&
       props.type !== 'file' &&
       props.type !== 'submit' &&
       props.type !== 'reset' &&
       props.type !== 'button' &&
       props.list
     ) {
       list = String(props.list).toUpperCase();

       if (own$4.call(h.nodeById, list) && datalist(h.nodeById[list])) {
         values = findSelectedOptions(h, h.nodeById[list], props);
       }
     }

     if (values.length === 0) {
       return
     }

     // Hide password value.
     if (props.type === 'password') {
       // Passwords don’t support `list`.
       values[0] = ['•'.repeat(values[0][0].length), null];
     }

     if (props.type === 'url' || props.type === 'email') {
       while (++index < values.length) {
         value = resolve(h, values[index][0]);

         results.push(
           h(
             node,
             'link',
             {
               title: null,
               url: wrapText$1(h, props.type === 'email' ? 'mailto:' + value : value)
             },
             [{type: 'text', value: wrapText$1(h, values[index][1] || value)}]
           )
         );

         if (index !== values.length - 1) {
           results.push({type: 'text', value: ', '});
         }
       }

       return results
     }

     while (++index < values.length) {
       texts.push(
         values[index][1]
           ? values[index][1] + ' (' + values[index][0] + ')'
           : values[index][0]
       );
     }

     return h(node, 'text', wrapText$1(h, texts.join(', ')))
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').ElementChild} ElementChild
    * @typedef {import('../types.js').MdastNode} MdastNode
    */

   const p$1 = convertElement('p');
   const input = convertElement('input');

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function li(h, node) {
     const head = node.children[0];
     /** @type {boolean|null} */
     let checked = null;
     /** @type {ElementChild} */
     let checkbox;
     /** @type {Element|undefined} */
     let clone;

     // Check if this node starts with a checkbox.
     if (p$1(head)) {
       checkbox = head.children[0];

       if (
         input(checkbox) &&
         checkbox.properties &&
         (checkbox.properties.type === 'checkbox' ||
           checkbox.properties.type === 'radio')
       ) {
         checked = Boolean(checkbox.properties.checked);
         clone = {
           ...node,
           children: [
             {...head, children: head.children.slice(1)},
             ...node.children.slice(1)
           ]
         };
       }
     }

     const content = wrapChildren(h, clone || node);

     return h(node, 'listItem', {spread: content.length > 1, checked}, content)
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   const ol = convertElement('ol');

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function list$1(h, node) {
     const ordered = ol(node);
     const children = wrapListItems(h, node);
     /** @type {number|null} */
     let start = null;

     if (ordered) {
       start = hasProperty(node, 'start')
         ? // @ts-expect-error: `props` exist.
           Number.parseInt(String(node.properties.start), 10)
         : 1;
     }

     return h(
       node,
       'list',
       {ordered, start, spread: listItemsSpread(children)},
       children
     )
   }

   /**
    * @typedef Options
    * @property {boolean} [includeImageAlt=true]
    */

   /**
    * Get the text content of a node.
    * Prefer the node’s plain-text fields, otherwise serialize its children,
    * and if the given value is an array, serialize the nodes in it.
    *
    * @param {unknown} node
    * @param {Options} [options]
    * @returns {string}
    */
   function toString(node, options) {
     var {includeImageAlt = true} = options || {};
     return one$2(node, includeImageAlt)
   }

   /**
    * @param {unknown} node
    * @param {boolean} includeImageAlt
    * @returns {string}
    */
   function one$2(node, includeImageAlt) {
     return (
       (node &&
         typeof node === 'object' &&
         // @ts-ignore looks like a literal.
         (node.value ||
           // @ts-ignore looks like an image.
           (includeImageAlt ? node.alt : '') ||
           // @ts-ignore looks like a parent.
           ('children' in node && all$2(node.children, includeImageAlt)) ||
           (Array.isArray(node) && all$2(node, includeImageAlt)))) ||
       ''
     )
   }

   /**
    * @param {Array.<unknown>} values
    * @param {boolean} includeImageAlt
    * @returns {string}
    */
   function all$2(values, includeImageAlt) {
     /** @type {Array.<string>} */
     var result = [];
     var index = -1;

     while (++index < values.length) {
       result[index] = one$2(values[index], includeImageAlt);
     }

     return result.join('')
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').Properties} Properties
    * @typedef {import('../types.js').ElementChild} ElementChild
    */

   const source = convertElement('source');
   const video = convertElement('video');

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function media(h, node) {
     let nodes = all$3(h, node);
     /** @type {Properties} */
     // @ts-expect-error: `props` are defined.
     const properties = node.properties;
     const poster = video(node) && String(properties.poster || '');
     let src = String(properties.src || '');
     let index = -1;
     /** @type {boolean} */
     let linkInFallbackContent = false;
     /** @type {ElementChild} */
     let child;

     visit({type: 'root', children: nodes}, 'link', findLink);

     // If the content links to something, or if it’s not phrasing…
     if (linkInFallbackContent || wrapNeeded(nodes)) {
       return nodes
     }

     // Find the source.
     while (!src && ++index < node.children.length) {
       child = node.children[index];
       if (source(child)) {
         // @ts-expect-error: `props` are defined.
         src = String(child.properties.src || '');
       }
     }

     // If there’s a poster defined on the video, create an image.
     if (poster) {
       nodes = [
         {
           type: 'image',
           title: null,
           url: resolve(h, poster),
           alt: toString({children: nodes})
         }
       ];
     }

     // Link to the media resource.
     return {
       type: 'link',
       // @ts-expect-error Types are broken.
       title: node.properties.title || null,
       url: resolve(h, src),
       // @ts-expect-error Assume phrasing content.
       children: nodes
     }

     function findLink() {
       linkInFallbackContent = true;
       return EXIT
     }
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function p(h, node) {
     const nodes = all$3(h, node);

     if (nodes.length > 0) {
       return h(node, 'paragraph', nodes)
     }
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').MdastNode} MdastNode
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function q(h, node) {
     const expected = h.quotes[h.qNesting % h.quotes.length];

     h.qNesting++;
     const contents = all$3(h, node);
     h.qNesting--;

     contents.unshift({type: 'text', value: expected.charAt(0)});

     contents.push({
       type: 'text',
       value: expected.length > 1 ? expected.charAt(1) : expected
     });

     return contents
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Root} Root
    */

   /**
    * @type {Handle}
    * @param {Root} node
    */
   function root$1(h, node) {
     let children = all$3(h, node);

     if (h.document || wrapNeeded(children)) {
       children = wrap(children);
     }

     return h(node, 'root', children)
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function select(h, node) {
     const values = findSelectedOptions(h, node);
     let index = -1;
     /** @type {Array.<string>} */
     const results = [];
     /** @type {[string, string|null]} */
     let value;

     while (++index < values.length) {
       value = values[index];
       results.push(value[1] ? value[1] + ' (' + value[0] + ')' : value[0]);
     }

     if (results.length > 0) {
       return h(node, 'text', wrapText$1(h, results.join(', ')))
     }
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function strong$1(h, node) {
     return h(node, 'strong', all$3(h, node))
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').MdastNode} MdastNode
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function tableCell(h, node) {
     const wrap = h.wrapText;

     h.wrapText = false;

     const result = h(node, 'tableCell', all$3(h, node));

     if (node.properties && (node.properties.rowSpan || node.properties.colSpan)) {
       const data = result.data || (result.data = {});
       if (node.properties.rowSpan) data.rowSpan = node.properties.rowSpan;
       if (node.properties.colSpan) data.colSpan = node.properties.colSpan;
     }

     h.wrapText = wrap;

     return result
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function tableRow(h, node) {
     return h(node, 'tableRow', all$3(h, node))
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').MdastNode} MdastNode
    * @typedef {import('../types.js').MdastTableContent} MdastTableContent
    * @typedef {import('../types.js').MdastRowContent} MdastRowContent
    * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent
    *
    * @typedef Info
    * @property {Array.<string|null>} align
    * @property {boolean} headless
    */

   const thead$1 = convertElement('thead');
   const tr$1 = convertElement('tr');
   const cell$1 = convertElement(['th', 'td']);

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function table(h, node) {
     if (h.inTable) {
       return h(node, 'text', wrapText$1(h, toText(node)))
     }

     h.inTable = true;

     const {headless, align} = inspect$1(node);
     const rows = toRows$1(all$3(h, node), headless);
     let columns = 1;
     let rowIndex = -1;

     while (++rowIndex < rows.length) {
       const cells = rows[rowIndex].children;
       let cellIndex = -1;

       while (++cellIndex < cells.length) {
         const cell = cells[cellIndex];

         if (cell.data) {
           const colSpan = Number.parseInt(String(cell.data.colSpan), 10) || 1;
           const rowSpan = Number.parseInt(String(cell.data.rowSpan), 10) || 1;

           if (colSpan > 1 || rowSpan > 1) {
             let otherRowIndex = rowIndex - 1;

             while (++otherRowIndex < rowIndex + rowSpan) {
               let colIndex = cellIndex - 1;

               while (++colIndex < cellIndex + colSpan) {
                 if (!rows[otherRowIndex]) {
                   // Don’t add rows that don’t exist.
                   // Browsers don’t render them either.
                   break
                 }

                 /** @type {Array.<MdastRowContent>} */
                 const newCells = [];

                 if (otherRowIndex !== rowIndex || colIndex !== cellIndex) {
                   newCells.push({type: 'tableCell', children: []});
                 }

                 rows[otherRowIndex].children.splice(colIndex, 0, ...newCells);
               }
             }
           }

           // Clean the data fields.
           if ('colSpan' in cell.data) delete cell.data.colSpan;
           if ('rowSpan' in cell.data) delete cell.data.rowSpan;
           if (Object.keys(cell.data).length === 0) delete cell.data;
         }
       }

       if (cells.length > columns) columns = cells.length;
     }

     // Add extra empty cells.
     rowIndex = -1;

     while (++rowIndex < rows.length) {
       const cells = rows[rowIndex].children;
       let cellIndex = cells.length - 1;
       while (++cellIndex < columns) {
         cells.push({type: 'tableCell', children: []});
       }
     }

     let alignIndex = align.length - 1;
     while (++alignIndex < columns) {
       align.push(null);
     }

     h.inTable = false;

     return h(node, 'table', {align}, rows)
   }

   /**
    * Infer whether the HTML table has a head and how it aligns.
    *
    * @param {Element} node
    * @returns {Info}
    */
   function inspect$1(node) {
     let headless = true;
     let rowIndex = 0;
     let cellIndex = 0;
     /** @type {Array.<string|null>} */
     const align = [null];

     visit(node, 'element', (child) => {
       if (child.tagName === 'table' && node !== child) {
         return SKIP
       }

       // If there is a `thead`, assume there is a header row.
       if (cell$1(child) && child.properties) {
         if (!align[cellIndex]) {
           align[cellIndex] = String(child.properties.align || '') || null;
         }

         // If there is a th in the first row, assume there is a header row.
         if (headless && rowIndex < 2 && child.tagName === 'th') {
           headless = false;
         }

         cellIndex++;
       } else if (thead$1(child)) {
         headless = false;
       } else if (tr$1(child)) {
         rowIndex++;
         cellIndex = 0;
       }
     });

     return {align, headless}
   }

   /**
    * Ensure the rows are properly structured.
    *
    * @param {Array.<MdastNode>} children
    * @param {boolean} headless
    * @returns {Array.<MdastTableContent>}
    */
   function toRows$1(children, headless) {
     let index = -1;
     /** @type {Array.<MdastTableContent>} */
     const nodes = [];
     /** @type {Array.<MdastRowContent>|undefined} */
     let queue;

     // Add an empty header row.
     if (headless) {
       nodes.push({type: 'tableRow', children: []});
     }

     while (++index < children.length) {
       const node = children[index];

       if (node.type === 'tableRow') {
         if (queue) {
           node.children.unshift(...queue);
           queue = undefined;
         }

         nodes.push(node);
       } else {
         if (!queue) queue = [];
         // @ts-expect-error Assume row content.
         queue.push(node);
       }
     }

     if (queue) {
       nodes[nodes.length - 1].children.push(...queue);
     }

     index = -1;

     while (++index < nodes.length) {
       nodes[index].children = toCells$1(nodes[index].children);
     }

     return nodes
   }

   /**
    * Ensure the cells in a row are properly structured.
    *
    * @param {Array.<MdastNode>} children
    * @returns {Array.<MdastRowContent>}
    */
   function toCells$1(children) {
     /** @type {Array.<MdastRowContent>} */
     const nodes = [];
     let index = -1;
     /** @type {MdastNode} */
     let node;
     /** @type {Array.<MdastPhrasingContent>|undefined} */
     let queue;

     while (++index < children.length) {
       node = children[index];

       if (node.type === 'tableCell') {
         if (queue) {
           node.children.unshift(...queue);
           queue = undefined;
         }

         nodes.push(node);
       } else {
         if (!queue) queue = [];
         // @ts-expect-error Assume phrasing content.
         queue.push(node);
       }
     }

     if (queue) {
       node = nodes[nodes.length - 1];

       if (!node) {
         node = {type: 'tableCell', children: []};
         nodes.push(node);
       }

       node.children.push(...queue);
     }

     return nodes
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Text} Text
    */

   /**
    * @type {Handle}
    * @param {Text} node
    */
   function text$1(h, node) {
     return h(node, 'text', wrapText$1(h, node.value))
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function textarea(h, node) {
     return h(node, 'text', wrapText$1(h, toText(node)))
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    */

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function wbr(h, node) {
     return h(node, 'text', '\u200B')
   }

   const handlers = {
     root: root$1,
     text: text$1,
     comment,
     doctype: ignore,

     applet: ignore,
     area: ignore,
     basefont: ignore,
     bgsound: ignore,
     caption: ignore,
     col: ignore,
     colgroup: ignore,
     command: ignore,
     content: ignore,
     datalist: ignore,
     dialog: ignore,
     element: ignore,
     embed: ignore,
     frame: ignore,
     frameset: ignore,
     isindex: ignore,
     keygen: ignore,
     link: ignore,
     math: ignore,
     menu: ignore,
     menuitem: ignore,
     meta: ignore,
     nextid: ignore,
     noembed: ignore,
     noframes: ignore,
     optgroup: ignore,
     option: ignore,
     param: ignore,
     script: ignore,
     shadow: ignore,
     source: ignore,
     spacer: ignore,
     style: ignore,
     svg: ignore,
     template: ignore,
     title: ignore,
     track: ignore,

     abbr: all$3,
     acronym: all$3,
     bdi: all$3,
     bdo: all$3,
     big: all$3,
     blink: all$3,
     button: all$3,
     canvas: all$3,
     cite: all$3,
     data: all$3,
     details: all$3,
     dfn: all$3,
     font: all$3,
     ins: all$3,
     label: all$3,
     map: all$3,
     marquee: all$3,
     meter: all$3,
     nobr: all$3,
     noscript: all$3,
     object: all$3,
     output: all$3,
     progress: all$3,
     rb: all$3,
     rbc: all$3,
     rp: all$3,
     rt: all$3,
     rtc: all$3,
     ruby: all$3,
     slot: all$3,
     small: all$3,
     span: all$3,
     sup: all$3,
     sub: all$3,
     tbody: all$3,
     tfoot: all$3,
     thead: all$3,
     time: all$3,

     address: wrapChildren,
     article: wrapChildren,
     aside: wrapChildren,
     body: wrapChildren,
     center: wrapChildren,
     div: wrapChildren,
     fieldset: wrapChildren,
     figcaption: wrapChildren,
     figure: wrapChildren,
     form: wrapChildren,
     footer: wrapChildren,
     header: wrapChildren,
     hgroup: wrapChildren,
     html: wrapChildren,
     legend: wrapChildren,
     main: wrapChildren,
     multicol: wrapChildren,
     nav: wrapChildren,
     picture: wrapChildren,
     section: wrapChildren,

     a,
     audio: media,
     b: strong$1,
     base,
     blockquote: blockquote$1,
     br: br$1,
     code: inlineCode$1,
     dir: list$1,
     dl,
     dt: li,
     dd: li,
     del,
     em,
     h1: heading$1,
     h2: heading$1,
     h3: heading$1,
     h4: heading$1,
     h5: heading$1,
     h6: heading$1,
     hr,
     i: em,
     iframe,
     img,
     image: img,
     input: input$1,
     kbd: inlineCode$1,
     li,
     listing: code$1,
     mark: em,
     ol: list$1,
     p,
     plaintext: code$1,
     pre: code$1,
     q,
     s: del,
     samp: inlineCode$1,
     select,
     strike: del,
     strong: strong$1,
     summary: p,
     table,
     td: tableCell,
     textarea,
     th: tableCell,
     tr: tableRow,
     tt: inlineCode$1,
     u: em,
     ul: list$1,
     var: inlineCode$1,
     video: media,
     wbr,
     xmp: code$1
   };

   function ignore() {}

   /**
    * @typedef {import('./types.js').Node} Node
    * @typedef {import('./types.js').Element} Element
    * @typedef {import('./types.js').Text} Text
    * @typedef {import('./types.js').Options} Options
    * @typedef {import('./types.js').Context} Context
    * @typedef {import('./types.js').Properties} Properties
    * @typedef {import('./types.js').H} H
    * @typedef {import('./types.js').HWithoutProps} HWithoutProps
    * @typedef {import('./types.js').HWithProps} HWithProps
    * @typedef {import('./types.js').MdastNode} MdastNode
    * @typedef {import('./types.js').MdastRoot} MdastRoot
    */

   const block = convert(['heading', 'paragraph', 'root']);

   /**
    * @param {Node} tree
    * @param {Options} [options]
    */
   function toMdast(tree, options = {}) {
     /** @type {Object.<string, Element>} */
     const byId = {};
     /** @type {MdastNode|MdastRoot} */
     let mdast;

     /**
      * @type {H}
      */
     const h = Object.assign(
       /**
        * @type {HWithProps & HWithoutProps}
        */
       (
         /**
          * @param {Node} node
          * @param {string} type
          * @param {Properties|string|Array.<Node>} [props]
          * @param {string|Array.<Node>} [children]
          */
         (node, type, props, children) => {
           /** @type {Properties|undefined} */
           let properties;

           if (typeof props === 'string' || Array.isArray(props)) {
             children = props;
             properties = {};
           } else {
             properties = props;
           }

           /** @type {Node} */
           // @ts-expect-error Assume valid `type` and `children`/`value`.
           const result = {type, ...properties};

           if (typeof children === 'string') {
             // @ts-expect-error: Looks like a literal.
             result.value = children;
           } else if (children) {
             // @ts-expect-error: Looks like a parent.
             result.children = children;
           }

           if (node.position) {
             result.position = node.position;
           }

           return result
         }
       ),
       {
         nodeById: byId,
         baseFound: false,
         inTable: false,
         wrapText: true,
         /** @type {string|null} */
         frozenBaseUrl: null,
         qNesting: 0,
         handlers: options.handlers
           ? {...handlers, ...options.handlers}
           : handlers,
         document: options.document,
         checked: options.checked || '[x]',
         unchecked: options.unchecked || '[ ]',
         quotes: options.quotes || ['"']
       }
     );

     visit(tree, 'element', (node) => {
       const id =
         node.properties &&
         'id' in node.properties &&
         String(node.properties.id).toUpperCase();

       if (id && !own$4.call(byId, id)) {
         byId[id] = node;
       }
     });

     // @ts-expect-error: does return a transformer, that does accept any node.
     rehypeMinifyWhitespace({newlines: options.newlines === true})(tree);

     const result = one$3(h, tree, undefined);

     if (!result) {
       mdast = {type: 'root', children: []};
     } else if (Array.isArray(result)) {
       mdast = {type: 'root', children: result};
     } else {
       mdast = result;
     }

     visit(mdast, 'text', ontext);

     return mdast

     /**
      * Collapse text nodes, and fix whitespace.
      * Most of this is taken care of by `rehype-minify-whitespace`, but
      * we’re generating some whitespace too, and some nodes are in the end
      * ignored.
      * So clean up.
      *
      * @type {import('unist-util-visit/complex-types').BuildVisitor<MdastRoot, 'text'>}
      */
     function ontext(node, index, parent) {
       /* c8 ignore next 3 */
       if (index === null || !parent) {
         return
       }

       const previous = parent.children[index - 1];

       if (previous && previous.type === node.type) {
         previous.value += node.value;
         parent.children.splice(index, 1);

         if (previous.position && node.position) {
           previous.position.end = node.position.end;
         }

         // Iterate over the previous node again, to handle its total value.
         return index - 1
       }

       node.value = node.value.replace(/[\t ]*(\r?\n|\r)[\t ]*/, '$1');

       // We don’t care about other phrasing nodes in between (e.g., `[ asd ]()`),
       // as there the whitespace matters.
       if (parent && block(parent)) {
         if (!index) {
           node.value = node.value.replace(/^[\t ]+/, '');
         }

         if (index === parent.children.length - 1) {
           node.value = node.value.replace(/[\t ]+$/, '');
         }
       }

       if (!node.value) {
         parent.children.splice(index, 1);
         return index
       }
     }
   }

   var own$2 = {}.hasOwnProperty;

   /**
    * @callback Handler
    * @param {...unknown} value
    * @return {unknown}
    *
    * @typedef {Record<string, Handler>} Handlers
    *
    * @typedef {Object} Options
    * @property {Handler} [unknown]
    * @property {Handler} [invalid]
    * @property {Handlers} [handlers]
    */

   /**
    * Handle values based on a property.
    *
    * @param {string} key
    * @param {Options} [options]
    */
   function zwitch(key, options) {
     var settings = options || {};

     /**
      * Handle one value.
      * Based on the bound `key`, a respective handler will be called.
      * If `value` is not an object, or doesn’t have a `key` property, the special
      * “invalid” handler will be called.
      * If `value` has an unknown `key`, the special “unknown” handler will be
      * called.
      *
      * All arguments, and the context object, are passed through to the handler,
      * and it’s result is returned.
      *
      * @param {...unknown} [value]
      * @this {unknown}
      * @returns {unknown}
      * @property {Handler} invalid
      * @property {Handler} unknown
      * @property {Handlers} handlers
      */
     function one(value) {
       var fn = one.invalid;
       var handlers = one.handlers;

       if (value && own$2.call(value, key)) {
         fn = own$2.call(handlers, value[key]) ? handlers[value[key]] : one.unknown;
       }

       if (fn) {
         return fn.apply(this, arguments)
       }
     }

     one.handlers = settings.handlers || {};
     one.invalid = settings.invalid;
     one.unknown = settings.unknown;

     return one
   }

   /**
    * @typedef {import('./types.js').Options} Options
    * @typedef {import('./types.js').Context} Context
    */

   /**
    * @param {Context} base
    * @param {Options} extension
    * @returns {Context}
    */
   function configure$1(base, extension) {
     let index = -1;
     /** @type {string} */
     let key;

     // First do subextensions.
     if (extension.extensions) {
       while (++index < extension.extensions.length) {
         configure$1(base, extension.extensions[index]);
       }
     }

     for (key in extension) {
       if (key === 'extensions') ; else if (key === 'unsafe' || key === 'join') {
         /* c8 ignore next 2 */
         // @ts-expect-error: hush.
         base[key] = [...(base[key] || []), ...(extension[key] || [])];
       } else if (key === 'handlers') {
         base[key] = Object.assign(base[key], extension[key] || {});
       } else {
         // @ts-expect-error: hush.
         base.options[key] = extension[key];
       }
     }

     return base
   }

   /**
    * @typedef {import('unist').Point} Point
    * @typedef {import('../types.js').TrackFields} TrackFields
    */

   /**
    * Functions to track output positions.
    * This info isn’t used yet but suchs functionality allows line wrapping,
    * and theoretically source maps (though, is there practical use in that?).
    *
    * @param {TrackFields} options_
    */
   function track(options_) {
     // Defaults are used to prevent crashes when older utilities somehow activate
     // this code.
     /* c8 ignore next 5 */
     const options = options_ || {};
     const now = options.now || {};
     let lineShift = options.lineShift || 0;
     let line = now.line || 1;
     let column = now.column || 1;

     return {move, current, shift}

     /**
      * Get the current tracked info.
      *
      * @returns {{now: Point, lineShift: number}}
      */
     function current() {
       return {now: {line, column}, lineShift}
     }

     /**
      * Define an increased line shift (the typical indent for lines).
      *
      * @param {number} value
      */
     function shift(value) {
       lineShift += value;
     }

     /**
      * Move past a string.
      *
      * @param {string} value
      * @returns {string}
      */
     function move(value = '') {
       const chunks = value.split(/\r?\n|\r/g);
       const tail = chunks[chunks.length - 1];
       line += chunks.length - 1;
       column =
         chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;
       return value
     }
   }

   /**
    * @typedef {import('../types.js').Node} Node
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').Join} Join
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').TrackFields} TrackFields
    */

   /**
    * @param {Parent} parent
    * @param {Context} context
    * @param {TrackFields} safeOptions
    * @returns {string}
    */
   function containerFlow(parent, context, safeOptions) {
     const indexStack = context.indexStack;
     const children = parent.children || [];
     const tracker = track(safeOptions);
     /** @type {Array<string>} */
     const results = [];
     let index = -1;

     indexStack.push(-1);

     while (++index < children.length) {
       const child = children[index];

       indexStack[indexStack.length - 1] = index;

       results.push(
         tracker.move(
           context.handle(child, parent, context, {
             before: '\n',
             after: '\n',
             ...tracker.current()
           })
         )
       );

       if (child.type !== 'list') {
         context.bulletLastUsed = undefined;
       }

       if (index < children.length - 1) {
         results.push(tracker.move(between(child, children[index + 1])));
       }
     }

     indexStack.pop();

     return results.join('')

     /**
      * @param {Node} left
      * @param {Node} right
      * @returns {string}
      */
     function between(left, right) {
       let index = context.join.length;

       while (index--) {
         const result = context.join[index](left, right, parent, context);

         if (result === true || result === 1) {
           break
         }

         if (typeof result === 'number') {
           return '\n'.repeat(1 + result)
         }

         if (result === false) {
           return '\n\n<!---->\n\n'
         }
       }

       return '\n\n'
     }
   }

   /**
    * @callback Map
    * @param {string} value
    * @param {number} line
    * @param {boolean} blank
    * @returns {string}
    */

   const eol = /\r?\n|\r/g;

   /**
    * @param {string} value
    * @param {Map} map
    * @returns {string}
    */
   function indentLines(value, map) {
     /** @type {Array<string>} */
     const result = [];
     let start = 0;
     let line = 0;
     /** @type {RegExpExecArray|null} */
     let match;

     while ((match = eol.exec(value))) {
       one(value.slice(start, match.index));
       result.push(match[0]);
       start = match.index + match[0].length;
       line++;
     }

     one(value.slice(start));

     return result.join('')

     /**
      * @param {string} value
      */
     function one(value) {
       result.push(map(value, line, !value));
     }
   }

   /**
    * @typedef {import('mdast').Blockquote} Blockquote
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../util/indent-lines.js').Map} Map
    */

   /**
    * @type {Handle}
    * @param {Blockquote} node
    */
   function blockquote(node, _, context, safeOptions) {
     const exit = context.enter('blockquote');
     const tracker = track(safeOptions);
     tracker.move('> ');
     tracker.shift(2);
     const value = indentLines(
       containerFlow(node, context, tracker.current()),
       map$1
     );
     exit();
     return value
   }

   /** @type {Map} */
   function map$1(line, _, blank) {
     return '>' + (blank ? '' : ' ') + line
   }

   /**
    * @typedef {import('../types.js').Unsafe} Unsafe
    */

   /**
    * @param {Array<string>} stack
    * @param {Unsafe} pattern
    * @returns {boolean}
    */
   function patternInScope(stack, pattern) {
     return (
       listInScope(stack, pattern.inConstruct, true) &&
       !listInScope(stack, pattern.notInConstruct, false)
     )
   }

   /**
    * @param {Array<string>} stack
    * @param {Unsafe['inConstruct']} list
    * @param {boolean} none
    * @returns {boolean}
    */
   function listInScope(stack, list, none) {
     if (!list) {
       return none
     }

     if (typeof list === 'string') {
       list = [list];
     }

     let index = -1;

     while (++index < list.length) {
       if (stack.includes(list[index])) {
         return true
       }
     }

     return false
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('mdast').Break} Break
    */

   /**
    * @type {Handle}
    * @param {Break} _
    */
   function hardBreak(_, _1, context, safe) {
     let index = -1;

     while (++index < context.unsafe.length) {
       // If we can’t put eols in this construct (setext headings, tables), use a
       // space instead.
       if (
         context.unsafe[index].character === '\n' &&
         patternInScope(context.stack, context.unsafe[index])
       ) {
         return /[ \t]/.test(safe.before) ? '' : ' '
       }
     }

     return '\\\n'
   }

   /**
    * Get the count of the longest repeating streak of `character` in `value`.
    *
    * @param {string} value
    *   Content to search in.
    * @param {string} character
    *   Single character to look for.
    * @returns {number}
    *   Count of most frequent adjacent `character`s in `value`.
    */
   function longestStreak(value, character) {
     const source = String(value);
     let index = source.indexOf(character);
     let expected = index;
     let count = 0;
     let max = 0;

     if (typeof character !== 'string' || character.length !== 1) {
       throw new Error('Expected character')
     }

     while (index !== -1) {
       if (index === expected) {
         if (++count > max) {
           max = count;
         }
       } else {
         count = 1;
       }

       expected = index + 1;
       index = source.indexOf(character, expected);
     }

     return max
   }

   /**
    * @typedef {import('mdast').Code} Code
    * @typedef {import('../types.js').Context} Context
    */

   /**
    * @param {Code} node
    * @param {Context} context
    * @returns {boolean}
    */
   function formatCodeAsIndented(node, context) {
     return Boolean(
       !context.options.fences &&
         node.value &&
         // If there’s no info…
         !node.lang &&
         // And there’s a non-whitespace character…
         /[^ \r\n]/.test(node.value) &&
         // And the value doesn’t start or end in a blank…
         !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node.value)
     )
   }

   /**
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {Context} context
    * @returns {Exclude<Options['fence'], undefined>}
    */
   function checkFence(context) {
     const marker = context.options.fence || '`';

     if (marker !== '`' && marker !== '~') {
       throw new Error(
         'Cannot serialize code with `' +
           marker +
           '` for `options.fence`, expected `` ` `` or `~`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('../types.js').Unsafe} Unsafe
    */

   /**
    * @param {Unsafe} pattern
    * @returns {RegExp}
    */
   function patternCompile(pattern) {
     if (!pattern._compiled) {
       const before =
         (pattern.atBreak ? '[\\r\\n][\\t ]*' : '') +
         (pattern.before ? '(?:' + pattern.before + ')' : '');

       pattern._compiled = new RegExp(
         (before ? '(' + before + ')' : '') +
           (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? '\\' : '') +
           pattern.character +
           (pattern.after ? '(?:' + pattern.after + ')' : ''),
         'g'
       );
     }

     return pattern._compiled
   }

   /**
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').SafeOptions} SafeOptions
    */

   /**
    * @param {Context} context
    * @param {string|null|undefined} input
    * @param {SafeOptions & {encode?: Array<string>}} config
    * @returns {string}
    */
   function safe(context, input, config) {
     const value = (config.before || '') + (input || '') + (config.after || '');
     /** @type {Array<number>} */
     const positions = [];
     /** @type {Array<string>} */
     const result = [];
     /** @type {Record<number, {before: boolean, after: boolean}>} */
     const infos = {};
     let index = -1;

     while (++index < context.unsafe.length) {
       const pattern = context.unsafe[index];

       if (!patternInScope(context.stack, pattern)) {
         continue
       }

       const expression = patternCompile(pattern);
       /** @type {RegExpExecArray|null} */
       let match;

       while ((match = expression.exec(value))) {
         const before = 'before' in pattern || Boolean(pattern.atBreak);
         const after = 'after' in pattern;
         const position = match.index + (before ? match[1].length : 0);

         if (positions.includes(position)) {
           if (infos[position].before && !before) {
             infos[position].before = false;
           }

           if (infos[position].after && !after) {
             infos[position].after = false;
           }
         } else {
           positions.push(position);
           infos[position] = {before, after};
         }
       }
     }

     positions.sort(numerical);

     let start = config.before ? config.before.length : 0;
     const end = value.length - (config.after ? config.after.length : 0);
     index = -1;

     while (++index < positions.length) {
       const position = positions[index];

       // Character before or after matched:
       if (position < start || position >= end) {
         continue
       }

       // If this character is supposed to be escaped because it has a condition on
       // the next character, and the next character is definitly being escaped,
       // then skip this escape.
       if (
         (position + 1 < end &&
           positions[index + 1] === position + 1 &&
           infos[position].after &&
           !infos[position + 1].before &&
           !infos[position + 1].after) ||
         (positions[index - 1] === position - 1 &&
           infos[position].before &&
           !infos[position - 1].before &&
           !infos[position - 1].after)
       ) {
         continue
       }

       if (start !== position) {
         // If we have to use a character reference, an ampersand would be more
         // correct, but as backslashes only care about punctuation, either will
         // do the trick
         result.push(escapeBackslashes(value.slice(start, position), '\\'));
       }

       start = position;

       if (
         /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&
         (!config.encode || !config.encode.includes(value.charAt(position)))
       ) {
         // Character escape.
         result.push('\\');
       } else {
         // Character reference.
         result.push(
           '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'
         );
         start++;
       }
     }

     result.push(escapeBackslashes(value.slice(start, end), config.after));

     return result.join('')
   }

   /**
    * @param {number} a
    * @param {number} b
    * @returns {number}
    */
   function numerical(a, b) {
     return a - b
   }

   /**
    * @param {string} value
    * @param {string} after
    * @returns {string}
    */
   function escapeBackslashes(value, after) {
     const expression = /\\(?=[!-/:-@[-`{-~])/g;
     /** @type {Array<number>} */
     const positions = [];
     /** @type {Array<string>} */
     const results = [];
     const whole = value + after;
     let index = -1;
     let start = 0;
     /** @type {RegExpExecArray|null} */
     let match;

     while ((match = expression.exec(whole))) {
       positions.push(match.index);
     }

     while (++index < positions.length) {
       if (start !== positions[index]) {
         results.push(value.slice(start, positions[index]));
       }

       results.push('\\');
       start = positions[index];
     }

     results.push(value.slice(start));

     return results.join('')
   }

   /**
    * @typedef {import('mdast').Code} Code
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Exit} Exit
    * @typedef {import('../util/indent-lines.js').Map} Map
    */

   /**
    * @type {Handle}
    * @param {Code} node
    */
   function code(node, _, context, safeOptions) {
     const marker = checkFence(context);
     const raw = node.value || '';
     const suffix = marker === '`' ? 'GraveAccent' : 'Tilde';

     if (formatCodeAsIndented(node, context)) {
       const exit = context.enter('codeIndented');
       const value = indentLines(raw, map);
       exit();
       return value
     }

     const tracker = track(safeOptions);
     const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));
     const exit = context.enter('codeFenced');
     let value = tracker.move(sequence);

     if (node.lang) {
       const subexit = context.enter('codeFencedLang' + suffix);
       value += tracker.move(
         safe(context, node.lang, {
           before: value,
           after: ' ',
           encode: ['`'],
           ...tracker.current()
         })
       );
       subexit();
     }

     if (node.lang && node.meta) {
       const subexit = context.enter('codeFencedMeta' + suffix);
       value += tracker.move(' ');
       value += tracker.move(
         safe(context, node.meta, {
           before: value,
           after: '\n',
           encode: ['`'],
           ...tracker.current()
         })
       );
       subexit();
     }

     value += tracker.move('\n');

     if (raw) {
       value += tracker.move(raw + '\n');
     }

     value += tracker.move(sequence);
     exit();
     return value
   }

   /** @type {Map} */
   function map(line, _, blank) {
     return (blank ? '' : '    ') + line
   }

   const characterEscapeOrReference =
     /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
   /**
    * Utility to decode markdown strings (which occur in places such as fenced
    * code info strings, destinations, labels, and titles).
    * The “string” content type allows character escapes and -references.
    * This decodes those.
    *
    * @param {string} value
    * @returns {string}
    */

   function decodeString(value) {
     return value.replace(characterEscapeOrReference, decode)
   }
   /**
    * @param {string} $0
    * @param {string} $1
    * @param {string} $2
    * @returns {string}
    */

   function decode($0, $1, $2) {
     if ($1) {
       // Escape.
       return $1
     } // Reference.

     const head = $2.charCodeAt(0);

     if (head === 35) {
       const head = $2.charCodeAt(1);
       const hex = head === 120 || head === 88;
       return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)
     }

     return decodeNamedCharacterReference($2) || $0
   }

   /**
    * @typedef {import('mdast').Association} Association
    */

   /**
    * The `label` of an association is the string value: character escapes and
    * references work, and casing is intact.
    * The `identifier` is used to match one association to another: controversially,
    * character escapes and references don’t work in this matching: `&copy;` does
    * not match `©`, and `\+` does not match `+`.
    * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\nb`
    * matches `a b`.
    * So, we do prefer the label when figuring out how we’re going to serialize:
    * it has whitespace, casing, and we can ignore most useless character escapes
    * and all character references.
    *
    * @param {Association} node
    * @returns {string}
    */
   function association(node) {
     if (node.label || !node.identifier) {
       return node.label || ''
     }

     return decodeString(node.identifier)
   }

   /**
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {Context} context
    * @returns {Exclude<Options['quote'], undefined>}
    */
   function checkQuote(context) {
     const marker = context.options.quote || '"';

     if (marker !== '"' && marker !== "'") {
       throw new Error(
         'Cannot serialize title with `' +
           marker +
           '` for `options.quote`, expected `"`, or `\'`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('mdast').Definition} Definition
    * @typedef {import('../types.js').Handle} Handle
    */

   /**
    * @type {Handle}
    * @param {Definition} node
    */
   function definition(node, _, context, safeOptions) {
     const quote = checkQuote(context);
     const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
     const exit = context.enter('definition');
     let subexit = context.enter('label');
     const tracker = track(safeOptions);
     let value = tracker.move('[');
     value += tracker.move(
       safe(context, association(node), {
         before: value,
         after: ']',
         ...tracker.current()
       })
     );
     value += tracker.move(']: ');

     subexit();

     if (
       // If there’s no url, or…
       !node.url ||
       // If there are control characters or whitespace.
       /[\0- \u007F]/.test(node.url)
     ) {
       subexit = context.enter('destinationLiteral');
       value += tracker.move('<');
       value += tracker.move(
         safe(context, node.url, {before: value, after: '>', ...tracker.current()})
       );
       value += tracker.move('>');
     } else {
       // No whitespace, raw is prettier.
       subexit = context.enter('destinationRaw');
       value += tracker.move(
         safe(context, node.url, {
           before: value,
           after: node.title ? ' ' : '\n',
           ...tracker.current()
         })
       );
     }

     subexit();

     if (node.title) {
       subexit = context.enter('title' + suffix);
       value += tracker.move(' ' + quote);
       value += tracker.move(
         safe(context, node.title, {
           before: value,
           after: quote,
           ...tracker.current()
         })
       );
       value += tracker.move(quote);
       subexit();
     }

     exit();

     return value
   }

   /**
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {Context} context
    * @returns {Exclude<Options['emphasis'], undefined>}
    */
   function checkEmphasis(context) {
     const marker = context.options.emphasis || '*';

     if (marker !== '*' && marker !== '_') {
       throw new Error(
         'Cannot serialize emphasis with `' +
           marker +
           '` for `options.emphasis`, expected `*`, or `_`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('../types.js').Node} Node
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').SafeOptions} SafeOptions
    * @typedef {import('../types.js').Context} Context
    */

   /**
    * @param {Parent} parent
    * @param {Context} context
    * @param {SafeOptions} safeOptions
    * @returns {string}
    */
   function containerPhrasing(parent, context, safeOptions) {
     const indexStack = context.indexStack;
     const children = parent.children || [];
     /** @type {Array<string>} */
     const results = [];
     let index = -1;
     let before = safeOptions.before;

     indexStack.push(-1);
     let tracker = track(safeOptions);

     while (++index < children.length) {
       const child = children[index];
       /** @type {string} */
       let after;

       indexStack[indexStack.length - 1] = index;

       if (index + 1 < children.length) {
         // @ts-expect-error: hush, it’s actually a `zwitch`.
         let handle = context.handle.handlers[children[index + 1].type];
         if (handle && handle.peek) handle = handle.peek;
         after = handle
           ? handle(children[index + 1], parent, context, {
               before: '',
               after: '',
               ...tracker.current()
             }).charAt(0)
           : '';
       } else {
         after = safeOptions.after;
       }

       // In some cases, html (text) can be found in phrasing right after an eol.
       // When we’d serialize that, in most cases that would be seen as html
       // (flow).
       // As we can’t escape or so to prevent it from happening, we take a somewhat
       // reasonable approach: replace that eol with a space.
       // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>
       if (
         results.length > 0 &&
         (before === '\r' || before === '\n') &&
         child.type === 'html'
       ) {
         results[results.length - 1] = results[results.length - 1].replace(
           /(\r?\n|\r)$/,
           ' '
         );
         before = ' ';

         // To do: does this work to reset tracker?
         tracker = track(safeOptions);
         tracker.move(results.join(''));
       }

       results.push(
         tracker.move(
           context.handle(child, parent, context, {
             ...tracker.current(),
             before,
             after
           })
         )
       );

       before = results[results.length - 1].slice(-1);
     }

     indexStack.pop();

     return results.join('')
   }

   /**
    * @typedef {import('mdast').Emphasis} Emphasis
    * @typedef {import('../types.js').Handle} Handle
    */

   emphasis.peek = emphasisPeek;

   // To do: there are cases where emphasis cannot “form” depending on the
   // previous or next character of sequences.
   // There’s no way around that though, except for injecting zero-width stuff.
   // Do we need to safeguard against that?
   /**
    * @type {Handle}
    * @param {Emphasis} node
    */
   function emphasis(node, _, context, safeOptions) {
     const marker = checkEmphasis(context);
     const exit = context.enter('emphasis');
     const tracker = track(safeOptions);
     let value = tracker.move(marker);
     value += tracker.move(
       containerPhrasing(node, context, {
         before: value,
         after: marker,
         ...tracker.current()
       })
     );
     value += tracker.move(marker);
     exit();
     return value
   }

   /**
    * @type {Handle}
    * @param {Emphasis} _
    */
   function emphasisPeek(_, _1, context) {
     return context.options.emphasis || '*'
   }

   /**
    * @typedef {import('mdast').Heading} Heading
    * @typedef {import('../types.js').Context} Context
    */

   /**
    * @param {Heading} node
    * @param {Context} context
    * @returns {boolean}
    */
   function formatHeadingAsSetext(node, context) {
     let literalWithBreak = false;

     // Look for literals with a line break.
     // Note that this also
     visit(node, (node) => {
       if (
         ('value' in node && /\r?\n|\r/.test(node.value)) ||
         node.type === 'break'
       ) {
         literalWithBreak = true;
         return EXIT
       }
     });

     return Boolean(
       (!node.depth || node.depth < 3) &&
         toString(node) &&
         (context.options.setext || literalWithBreak)
     )
   }

   /**
    * @typedef {import('mdast').Heading} Heading
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Exit} Exit
    */

   /**
    * @type {Handle}
    * @param {Heading} node
    */
   function heading(node, _, context, safeOptions) {
     const rank = Math.max(Math.min(6, node.depth || 1), 1);
     const tracker = track(safeOptions);

     if (formatHeadingAsSetext(node, context)) {
       const exit = context.enter('headingSetext');
       const subexit = context.enter('phrasing');
       const value = containerPhrasing(node, context, {
         ...tracker.current(),
         before: '\n',
         after: '\n'
       });
       subexit();
       exit();

       return (
         value +
         '\n' +
         (rank === 1 ? '=' : '-').repeat(
           // The whole size…
           value.length -
             // Minus the position of the character after the last EOL (or
             // 0 if there is none)…
             (Math.max(value.lastIndexOf('\r'), value.lastIndexOf('\n')) + 1)
         )
       )
     }

     const sequence = '#'.repeat(rank);
     const exit = context.enter('headingAtx');
     const subexit = context.enter('phrasing');

     // Note: for proper tracking, we should reset the output positions when there
     // is no content returned, because then the space is not output.
     // Practically, in that case, there is no content, so it doesn’t matter that
     // we’ve tracked one too many characters.
     tracker.move(sequence + ' ');

     let value = containerPhrasing(node, context, {
       before: '# ',
       after: '\n',
       ...tracker.current()
     });

     if (/^[\t ]/.test(value)) {
       // To do: what effect has the character reference on tracking?
       value =
         '&#x' +
         value.charCodeAt(0).toString(16).toUpperCase() +
         ';' +
         value.slice(1);
     }

     value = value ? sequence + ' ' + value : sequence;

     if (context.options.closeAtx) {
       value += ' ' + sequence;
     }

     subexit();
     exit();

     return value
   }

   /**
    * @typedef {import('mdast').HTML} HTML
    * @typedef {import('../types.js').Handle} Handle
    */

   html.peek = htmlPeek;

   /**
    * @type {Handle}
    * @param {HTML} node
    */
   function html(node) {
     return node.value || ''
   }

   /**
    * @type {Handle}
    */
   function htmlPeek() {
     return '<'
   }

   /**
    * @typedef {import('mdast').Image} Image
    * @typedef {import('../types.js').Handle} Handle
    */

   image.peek = imagePeek;

   /**
    * @type {Handle}
    * @param {Image} node
    */
   function image(node, _, context, safeOptions) {
     const quote = checkQuote(context);
     const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
     const exit = context.enter('image');
     let subexit = context.enter('label');
     const tracker = track(safeOptions);
     let value = tracker.move('![');
     value += tracker.move(
       safe(context, node.alt, {before: value, after: ']', ...tracker.current()})
     );
     value += tracker.move('](');

     subexit();

     if (
       // If there’s no url but there is a title…
       (!node.url && node.title) ||
       // If there are control characters or whitespace.
       /[\0- \u007F]/.test(node.url)
     ) {
       subexit = context.enter('destinationLiteral');
       value += tracker.move('<');
       value += tracker.move(
         safe(context, node.url, {before: value, after: '>', ...tracker.current()})
       );
       value += tracker.move('>');
     } else {
       // No whitespace, raw is prettier.
       subexit = context.enter('destinationRaw');
       value += tracker.move(
         safe(context, node.url, {
           before: value,
           after: node.title ? ' ' : ')',
           ...tracker.current()
         })
       );
     }

     subexit();

     if (node.title) {
       subexit = context.enter('title' + suffix);
       value += tracker.move(' ' + quote);
       value += tracker.move(
         safe(context, node.title, {
           before: value,
           after: quote,
           ...tracker.current()
         })
       );
       value += tracker.move(quote);
       subexit();
     }

     value += tracker.move(')');
     exit();

     return value
   }

   /**
    * @type {Handle}
    */
   function imagePeek() {
     return '!'
   }

   /**
    * @typedef {import('mdast').ImageReference} ImageReference
    * @typedef {import('../types.js').Handle} Handle
    */

   imageReference.peek = imageReferencePeek;

   /**
    * @type {Handle}
    * @param {ImageReference} node
    */
   function imageReference(node, _, context, safeOptions) {
     const type = node.referenceType;
     const exit = context.enter('imageReference');
     let subexit = context.enter('label');
     const tracker = track(safeOptions);
     let value = tracker.move('![');
     const alt = safe(context, node.alt, {
       before: value,
       after: ']',
       ...tracker.current()
     });
     value += tracker.move(alt + '][');

     subexit();
     // Hide the fact that we’re in phrasing, because escapes don’t work.
     const stack = context.stack;
     context.stack = [];
     subexit = context.enter('reference');
     // Note: for proper tracking, we should reset the output positions when we end
     // up making a `shortcut` reference, because then there is no brace output.
     // Practically, in that case, there is no content, so it doesn’t matter that
     // we’ve tracked one too many characters.
     const reference = safe(context, association(node), {
       before: value,
       after: ']',
       ...tracker.current()
     });
     subexit();
     context.stack = stack;
     exit();

     if (type === 'full' || !alt || alt !== reference) {
       value += tracker.move(reference + ']');
     } else if (type === 'shortcut') {
       // Remove the unwanted `[`.
       value = value.slice(0, -1);
     } else {
       value += tracker.move(']');
     }

     return value
   }

   /**
    * @type {Handle}
    */
   function imageReferencePeek() {
     return '!'
   }

   /**
    * @typedef {import('mdast').InlineCode} InlineCode
    * @typedef {import('../types.js').Handle} Handle
    */

   inlineCode.peek = inlineCodePeek;

   /**
    * @type {Handle}
    * @param {InlineCode} node
    */
   function inlineCode(node, _, context) {
     let value = node.value || '';
     let sequence = '`';
     let index = -1;

     // If there is a single grave accent on its own in the code, use a fence of
     // two.
     // If there are two in a row, use one.
     while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {
       sequence += '`';
     }

     // If this is not just spaces or eols (tabs don’t count), and either the
     // first or last character are a space, eol, or tick, then pad with spaces.
     if (
       /[^ \r\n]/.test(value) &&
       ((/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value)) || /^`|`$/.test(value))
     ) {
       value = ' ' + value + ' ';
     }

     // We have a potential problem: certain characters after eols could result in
     // blocks being seen.
     // For example, if someone injected the string `'\n# b'`, then that would
     // result in an ATX heading.
     // We can’t escape characters in `inlineCode`, but because eols are
     // transformed to spaces when going from markdown to HTML anyway, we can swap
     // them out.
     while (++index < context.unsafe.length) {
       const pattern = context.unsafe[index];
       const expression = patternCompile(pattern);
       /** @type {RegExpExecArray|null} */
       let match;

       // Only look for `atBreak`s.
       // Btw: note that `atBreak` patterns will always start the regex at LF or
       // CR.
       if (!pattern.atBreak) continue

       while ((match = expression.exec(value))) {
         let position = match.index;

         // Support CRLF (patterns only look for one of the characters).
         if (
           value.charCodeAt(position) === 10 /* `\n` */ &&
           value.charCodeAt(position - 1) === 13 /* `\r` */
         ) {
           position--;
         }

         value = value.slice(0, position) + ' ' + value.slice(match.index + 1);
       }
     }

     return sequence + value + sequence
   }

   /**
    * @type {Handle}
    */
   function inlineCodePeek() {
     return '`'
   }

   /**
    * @typedef {import('mdast').Link} Link
    * @typedef {import('../types.js').Context} Context
    */

   /**
    * @param {Link} node
    * @param {Context} context
    * @returns {boolean}
    */
   function formatLinkAsAutolink(node, context) {
     const raw = toString(node);

     return Boolean(
       !context.options.resourceLink &&
         // If there’s a url…
         node.url &&
         // And there’s a no title…
         !node.title &&
         // And the content of `node` is a single text node…
         node.children &&
         node.children.length === 1 &&
         node.children[0].type === 'text' &&
         // And if the url is the same as the content…
         (raw === node.url || 'mailto:' + raw === node.url) &&
         // And that starts w/ a protocol…
         /^[a-z][a-z+.-]+:/i.test(node.url) &&
         // And that doesn’t contain ASCII control codes (character escapes and
         // references don’t work), space, or angle brackets…
         !/[\0- <>\u007F]/.test(node.url)
     )
   }

   /**
    * @typedef {import('mdast').Link} Link
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Exit} Exit
    */

   link.peek = linkPeek;

   /**
    * @type {Handle}
    * @param {Link} node
    */
   function link(node, _, context, safeOptions) {
     const quote = checkQuote(context);
     const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
     const tracker = track(safeOptions);
     /** @type {Exit} */
     let exit;
     /** @type {Exit} */
     let subexit;

     if (formatLinkAsAutolink(node, context)) {
       // Hide the fact that we’re in phrasing, because escapes don’t work.
       const stack = context.stack;
       context.stack = [];
       exit = context.enter('autolink');
       let value = tracker.move('<');
       value += tracker.move(
         containerPhrasing(node, context, {
           before: value,
           after: '>',
           ...tracker.current()
         })
       );
       value += tracker.move('>');
       exit();
       context.stack = stack;
       return value
     }

     exit = context.enter('link');
     subexit = context.enter('label');
     let value = tracker.move('[');
     value += tracker.move(
       containerPhrasing(node, context, {
         before: value,
         after: '](',
         ...tracker.current()
       })
     );
     value += tracker.move('](');
     subexit();

     if (
       // If there’s no url but there is a title…
       (!node.url && node.title) ||
       // If there are control characters or whitespace.
       /[\0- \u007F]/.test(node.url)
     ) {
       subexit = context.enter('destinationLiteral');
       value += tracker.move('<');
       value += tracker.move(
         safe(context, node.url, {before: value, after: '>', ...tracker.current()})
       );
       value += tracker.move('>');
     } else {
       // No whitespace, raw is prettier.
       subexit = context.enter('destinationRaw');
       value += tracker.move(
         safe(context, node.url, {
           before: value,
           after: node.title ? ' ' : ')',
           ...tracker.current()
         })
       );
     }

     subexit();

     if (node.title) {
       subexit = context.enter('title' + suffix);
       value += tracker.move(' ' + quote);
       value += tracker.move(
         safe(context, node.title, {
           before: value,
           after: quote,
           ...tracker.current()
         })
       );
       value += tracker.move(quote);
       subexit();
     }

     value += tracker.move(')');

     exit();
     return value
   }

   /**
    * @type {Handle}
    * @param {Link} node
    */
   function linkPeek(node, _, context) {
     return formatLinkAsAutolink(node, context) ? '<' : '['
   }

   /**
    * @typedef {import('mdast').LinkReference} LinkReference
    * @typedef {import('../types.js').Handle} Handle
    */

   linkReference.peek = linkReferencePeek;

   /**
    * @type {Handle}
    * @param {LinkReference} node
    */
   function linkReference(node, _, context, safeOptions) {
     const type = node.referenceType;
     const exit = context.enter('linkReference');
     let subexit = context.enter('label');
     const tracker = track(safeOptions);
     let value = tracker.move('[');
     const text = containerPhrasing(node, context, {
       before: value,
       after: ']',
       ...tracker.current()
     });
     value += tracker.move(text + '][');

     subexit();
     // Hide the fact that we’re in phrasing, because escapes don’t work.
     const stack = context.stack;
     context.stack = [];
     subexit = context.enter('reference');
     // Note: for proper tracking, we should reset the output positions when we end
     // up making a `shortcut` reference, because then there is no brace output.
     // Practically, in that case, there is no content, so it doesn’t matter that
     // we’ve tracked one too many characters.
     const reference = safe(context, association(node), {
       before: value,
       after: ']',
       ...tracker.current()
     });
     subexit();
     context.stack = stack;
     exit();

     if (type === 'full' || !text || text !== reference) {
       value += tracker.move(reference + ']');
     } else if (type === 'shortcut') {
       // Remove the unwanted `[`.
       value = value.slice(0, -1);
     } else {
       value += tracker.move(']');
     }

     return value
   }

   /**
    * @type {Handle}
    */
   function linkReferencePeek() {
     return '['
   }

   /**
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {Context} context
    * @returns {Exclude<Options['bullet'], undefined>}
    */
   function checkBullet(context) {
     const marker = context.options.bullet || '*';

     if (marker !== '*' && marker !== '+' && marker !== '-') {
       throw new Error(
         'Cannot serialize items with `' +
           marker +
           '` for `options.bullet`, expected `*`, `+`, or `-`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {Context} context
    * @returns {Exclude<Options['bullet'], undefined>}
    */
   function checkBulletOther(context) {
     const bullet = checkBullet(context);
     const bulletOther = context.options.bulletOther;

     if (!bulletOther) {
       return bullet === '*' ? '-' : '*'
     }

     if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {
       throw new Error(
         'Cannot serialize items with `' +
           bulletOther +
           '` for `options.bulletOther`, expected `*`, `+`, or `-`'
       )
     }

     if (bulletOther === bullet) {
       throw new Error(
         'Expected `bullet` (`' +
           bullet +
           '`) and `bulletOther` (`' +
           bulletOther +
           '`) to be different'
       )
     }

     return bulletOther
   }

   /**
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {Context} context
    * @returns {Exclude<Options['bulletOrdered'], undefined>}
    */
   function checkBulletOrdered(context) {
     const marker = context.options.bulletOrdered || '.';

     if (marker !== '.' && marker !== ')') {
       throw new Error(
         'Cannot serialize items with `' +
           marker +
           '` for `options.bulletOrdered`, expected `.` or `)`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {Context} context
    * @returns {Exclude<Options['bulletOrdered'], undefined>}
    */
   function checkBulletOrderedOther(context) {
     const bulletOrdered = checkBulletOrdered(context);
     const bulletOrderedOther = context.options.bulletOrderedOther;

     if (!bulletOrderedOther) {
       return bulletOrdered === '.' ? ')' : '.'
     }

     if (bulletOrderedOther !== '.' && bulletOrderedOther !== ')') {
       throw new Error(
         'Cannot serialize items with `' +
           bulletOrderedOther +
           '` for `options.bulletOrderedOther`, expected `*`, `+`, or `-`'
       )
     }

     if (bulletOrderedOther === bulletOrdered) {
       throw new Error(
         'Expected `bulletOrdered` (`' +
           bulletOrdered +
           '`) and `bulletOrderedOther` (`' +
           bulletOrderedOther +
           '`) to be different'
       )
     }

     return bulletOrderedOther
   }

   /**
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {Context} context
    * @returns {Exclude<Options['rule'], undefined>}
    */
   function checkRule(context) {
     const marker = context.options.rule || '*';

     if (marker !== '*' && marker !== '-' && marker !== '_') {
       throw new Error(
         'Cannot serialize rules with `' +
           marker +
           '` for `options.rule`, expected `*`, `-`, or `_`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('mdast').List} List
    * @typedef {import('../types.js').Handle} Handle
    */

   /**
    * @type {Handle}
    * @param {List} node
    */
   function list(node, parent, context, safeOptions) {
     const exit = context.enter('list');
     const bulletCurrent = context.bulletCurrent;
     /** @type {string} */
     let bullet = node.ordered ? checkBulletOrdered(context) : checkBullet(context);
     /** @type {string} */
     const bulletOther = node.ordered
       ? checkBulletOrderedOther(context)
       : checkBulletOther(context);
     const bulletLastUsed = context.bulletLastUsed;
     let useDifferentMarker = false;

     if (
       parent &&
       // Explicit `other` set.
       (node.ordered
         ? context.options.bulletOrderedOther
         : context.options.bulletOther) &&
       bulletLastUsed &&
       bullet === bulletLastUsed
     ) {
       useDifferentMarker = true;
     }

     if (!node.ordered) {
       const firstListItem = node.children ? node.children[0] : undefined;

       // If there’s an empty first list item directly in two list items,
       // we have to use a different bullet:
       //
       // ```markdown
       // * - *
       // ```
       //
       // …because otherwise it would become one big thematic break.
       if (
         // Bullet could be used as a thematic break marker:
         (bullet === '*' || bullet === '-') &&
         // Empty first list item:
         firstListItem &&
         (!firstListItem.children || !firstListItem.children[0]) &&
         // Directly in two other list items:
         context.stack[context.stack.length - 1] === 'list' &&
         context.stack[context.stack.length - 2] === 'listItem' &&
         context.stack[context.stack.length - 3] === 'list' &&
         context.stack[context.stack.length - 4] === 'listItem' &&
         // That are each the first child.
         context.indexStack[context.indexStack.length - 1] === 0 &&
         context.indexStack[context.indexStack.length - 2] === 0 &&
         context.indexStack[context.indexStack.length - 3] === 0
       ) {
         useDifferentMarker = true;
       }

       // If there’s a thematic break at the start of the first list item,
       // we have to use a different bullet:
       //
       // ```markdown
       // * ---
       // ```
       //
       // …because otherwise it would become one big thematic break.
       if (checkRule(context) === bullet && firstListItem) {
         let index = -1;

         while (++index < node.children.length) {
           const item = node.children[index];

           if (
             item &&
             item.type === 'listItem' &&
             item.children &&
             item.children[0] &&
             item.children[0].type === 'thematicBreak'
           ) {
             useDifferentMarker = true;
             break
           }
         }
       }
     }

     if (useDifferentMarker) {
       bullet = bulletOther;
     }

     context.bulletCurrent = bullet;
     const value = containerFlow(node, context, safeOptions);
     context.bulletLastUsed = bullet;
     context.bulletCurrent = bulletCurrent;
     exit();
     return value
   }

   /**
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {Context} context
    * @returns {Exclude<Options['listItemIndent'], undefined>}
    */
   function checkListItemIndent(context) {
     const style = context.options.listItemIndent || 'tab';

     // To do: remove in a major.
     // @ts-expect-error: deprecated.
     if (style === 1 || style === '1') {
       return 'one'
     }

     if (style !== 'tab' && style !== 'one' && style !== 'mixed') {
       throw new Error(
         'Cannot serialize items with `' +
           style +
           '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'
       )
     }

     return style
   }

   /**
    * @typedef {import('mdast').ListItem} ListItem
    * @typedef {import('mdast').List} List
    * @typedef {import('../util/indent-lines.js').Map} Map
    * @typedef {import('../types.js').Options} Options
    * @typedef {import('../types.js').Handle} Handle
    */

   /**
    * @type {Handle}
    * @param {ListItem} node
    */
   function listItem(node, parent, context, safeOptions) {
     const listItemIndent = checkListItemIndent(context);
     let bullet = context.bulletCurrent || checkBullet(context);

     // Add the marker value for ordered lists.
     if (parent && parent.type === 'list' && parent.ordered) {
       bullet =
         (typeof parent.start === 'number' && parent.start > -1
           ? parent.start
           : 1) +
         (context.options.incrementListMarker === false
           ? 0
           : parent.children.indexOf(node)) +
         bullet;
     }

     let size = bullet.length + 1;

     if (
       listItemIndent === 'tab' ||
       (listItemIndent === 'mixed' &&
         ((parent && parent.type === 'list' && parent.spread) || node.spread))
     ) {
       size = Math.ceil(size / 4) * 4;
     }

     const tracker = track(safeOptions);
     tracker.move(bullet + ' '.repeat(size - bullet.length));
     tracker.shift(size);
     const exit = context.enter('listItem');
     const value = indentLines(
       containerFlow(node, context, tracker.current()),
       map
     );
     exit();

     return value

     /** @type {Map} */
     function map(line, index, blank) {
       if (index) {
         return (blank ? '' : ' '.repeat(size)) + line
       }

       return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line
     }
   }

   /**
    * @typedef {import('mdast').Paragraph} Paragraph
    * @typedef {import('../types.js').Handle} Handle
    */

   /**
    * @type {Handle}
    * @param {Paragraph} node
    */
   function paragraph(node, _, context, safeOptions) {
     const exit = context.enter('paragraph');
     const subexit = context.enter('phrasing');
     const value = containerPhrasing(node, context, safeOptions);
     subexit();
     exit();
     return value
   }

   /**
    * @typedef {import('mdast').Root} Root
    * @typedef {import('../types.js').Handle} Handle
    */

   /**
    * @type {Handle}
    * @param {Root} node
    */
   function root(node, _, context, safeOptions) {
     return containerFlow(node, context, safeOptions)
   }

   /**
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {Context} context
    * @returns {Exclude<Options['strong'], undefined>}
    */
   function checkStrong(context) {
     const marker = context.options.strong || '*';

     if (marker !== '*' && marker !== '_') {
       throw new Error(
         'Cannot serialize strong with `' +
           marker +
           '` for `options.strong`, expected `*`, or `_`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('mdast').Strong} Strong
    * @typedef {import('../types.js').Handle} Handle
    */

   strong.peek = strongPeek;

   // To do: there are cases where emphasis cannot “form” depending on the
   // previous or next character of sequences.
   // There’s no way around that though, except for injecting zero-width stuff.
   // Do we need to safeguard against that?
   /**
    * @type {Handle}
    * @param {Strong} node
    */
   function strong(node, _, context, safeOptions) {
     const marker = checkStrong(context);
     const exit = context.enter('strong');
     const tracker = track(safeOptions);
     let value = tracker.move(marker + marker);
     value += tracker.move(
       containerPhrasing(node, context, {
         before: value,
         after: marker,
         ...tracker.current()
       })
     );
     value += tracker.move(marker + marker);
     exit();
     return value
   }

   /**
    * @type {Handle}
    * @param {Strong} _
    */
   function strongPeek(_, _1, context) {
     return context.options.strong || '*'
   }

   /**
    * @typedef {import('mdast').Text} Text
    * @typedef {import('../types.js').Handle} Handle
    */

   /**
    * @type {Handle}
    * @param {Text} node
    */
   function text(node, _, context, safeOptions) {
     return safe(context, node.value, safeOptions)
   }

   /**
    * @typedef {import('../types.js').Context} Context
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {Context} context
    * @returns {Exclude<Options['ruleRepetition'], undefined>}
    */
   function checkRuleRepetition(context) {
     const repetition = context.options.ruleRepetition || 3;

     if (repetition < 3) {
       throw new Error(
         'Cannot serialize rules with repetition `' +
           repetition +
           '` for `options.ruleRepetition`, expected `3` or more'
       )
     }

     return repetition
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('mdast').ThematicBreak} ThematicBreak
    */

   /**
    * @type {Handle}
    * @param {ThematicBreak} _
    */
   function thematicBreak(_, _1, context) {
     const value = (
       checkRule(context) + (context.options.ruleSpaces ? ' ' : '')
     ).repeat(checkRuleRepetition(context));

     return context.options.ruleSpaces ? value.slice(0, -1) : value
   }

   const handle = {
     blockquote,
     break: hardBreak,
     code,
     definition,
     emphasis,
     hardBreak,
     heading,
     html,
     image,
     imageReference,
     inlineCode,
     link,
     linkReference,
     list,
     listItem,
     paragraph,
     root,
     strong,
     text,
     thematicBreak
   };

   /**
    * @typedef {import('./types.js').Join} Join
    */

   /** @type {Array<Join>} */
   const join = [joinDefaults];

   /** @type {Join} */
   function joinDefaults(left, right, parent, context) {
     // Indented code after list or another indented code.
     if (
       right.type === 'code' &&
       formatCodeAsIndented(right, context) &&
       (left.type === 'list' ||
         (left.type === right.type && formatCodeAsIndented(left, context)))
     ) {
       return false
     }

     // Two lists with the same marker.
     if (
       left.type === 'list' &&
       left.type === right.type &&
       Boolean(left.ordered) === Boolean(right.ordered) &&
       !(left.ordered
         ? context.options.bulletOrderedOther
         : context.options.bulletOther)
     ) {
       return false
     }

     // Join children of a list or an item.
     // In which case, `parent` has a `spread` field.
     if ('spread' in parent && typeof parent.spread === 'boolean') {
       if (
         left.type === 'paragraph' &&
         // Two paragraphs.
         (left.type === right.type ||
           right.type === 'definition' ||
           // Paragraph followed by a setext heading.
           (right.type === 'heading' && formatHeadingAsSetext(right, context)))
       ) {
         return
       }

       return parent.spread ? 1 : 0
     }
   }

   /**
    * @typedef {import('./types.js').Unsafe} Unsafe
    */

   /**
    * List of constructs that occur in phrasing (paragraphs, headings), but cannot
    * contain things like attention (emphasis, strong), images, or links.
    * So they sort of cancel each other out.
    * Note: could use a better name.
    */
   const fullPhrasingSpans = [
     'autolink',
     'destinationLiteral',
     'destinationRaw',
     'reference',
     'titleQuote',
     'titleApostrophe'
   ];

   /** @type {Array<Unsafe>} */
   const unsafe = [
     {character: '\t', after: '[\\r\\n]', inConstruct: 'phrasing'},
     {character: '\t', before: '[\\r\\n]', inConstruct: 'phrasing'},
     {
       character: '\t',
       inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']
     },
     {
       character: '\r',
       inConstruct: [
         'codeFencedLangGraveAccent',
         'codeFencedLangTilde',
         'codeFencedMetaGraveAccent',
         'codeFencedMetaTilde',
         'destinationLiteral',
         'headingAtx'
       ]
     },
     {
       character: '\n',
       inConstruct: [
         'codeFencedLangGraveAccent',
         'codeFencedLangTilde',
         'codeFencedMetaGraveAccent',
         'codeFencedMetaTilde',
         'destinationLiteral',
         'headingAtx'
       ]
     },
     {character: ' ', after: '[\\r\\n]', inConstruct: 'phrasing'},
     {character: ' ', before: '[\\r\\n]', inConstruct: 'phrasing'},
     {
       character: ' ',
       inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']
     },
     // An exclamation mark can start an image, if it is followed by a link or
     // a link reference.
     {
       character: '!',
       after: '\\[',
       inConstruct: 'phrasing',
       notInConstruct: fullPhrasingSpans
     },
     // A quote can break out of a title.
     {character: '"', inConstruct: 'titleQuote'},
     // A number sign could start an ATX heading if it starts a line.
     {atBreak: true, character: '#'},
     {character: '#', inConstruct: 'headingAtx', after: '(?:[\r\n]|$)'},
     // Dollar sign and percentage are not used in markdown.
     // An ampersand could start a character reference.
     {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},
     // An apostrophe can break out of a title.
     {character: "'", inConstruct: 'titleApostrophe'},
     // A left paren could break out of a destination raw.
     {character: '(', inConstruct: 'destinationRaw'},
     // A left paren followed by `]` could make something into a link or image.
     {
       before: '\\]',
       character: '(',
       inConstruct: 'phrasing',
       notInConstruct: fullPhrasingSpans
     },
     // A right paren could start a list item or break out of a destination
     // raw.
     {atBreak: true, before: '\\d+', character: ')'},
     {character: ')', inConstruct: 'destinationRaw'},
     // An asterisk can start thematic breaks, list items, emphasis, strong.
     {atBreak: true, character: '*'},
     {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},
     // A plus sign could start a list item.
     {atBreak: true, character: '+'},
     // A dash can start thematic breaks, list items, and setext heading
     // underlines.
     {atBreak: true, character: '-'},
     // A dot could start a list item.
     {atBreak: true, before: '\\d+', character: '.', after: '(?:[ \t\r\n]|$)'},
     // Slash, colon, and semicolon are not used in markdown for constructs.
     // A less than can start html (flow or text) or an autolink.
     // HTML could start with an exclamation mark (declaration, cdata, comment),
     // slash (closing tag), question mark (instruction), or a letter (tag).
     // An autolink also starts with a letter.
     // Finally, it could break out of a destination literal.
     {atBreak: true, character: '<', after: '[!/?A-Za-z]'},
     {
       character: '<',
       after: '[!/?A-Za-z]',
       inConstruct: 'phrasing',
       notInConstruct: fullPhrasingSpans
     },
     {character: '<', inConstruct: 'destinationLiteral'},
     // An equals to can start setext heading underlines.
     {atBreak: true, character: '='},
     // A greater than can start block quotes and it can break out of a
     // destination literal.
     {atBreak: true, character: '>'},
     {character: '>', inConstruct: 'destinationLiteral'},
     // Question mark and at sign are not used in markdown for constructs.
     // A left bracket can start definitions, references, labels,
     {atBreak: true, character: '['},
     {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},
     {character: '[', inConstruct: ['label', 'reference']},
     // A backslash can start an escape (when followed by punctuation) or a
     // hard break (when followed by an eol).
     // Note: typical escapes are handled in `safe`!
     {character: '\\', after: '[\\r\\n]', inConstruct: 'phrasing'},
     // A right bracket can exit labels.
     {character: ']', inConstruct: ['label', 'reference']},
     // Caret is not used in markdown for constructs.
     // An underscore can start emphasis, strong, or a thematic break.
     {atBreak: true, character: '_'},
     {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},
     // A grave accent can start code (fenced or text), or it can break out of
     // a grave accent code fence.
     {atBreak: true, character: '`'},
     {
       character: '`',
       inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']
     },
     {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},
     // Left brace, vertical bar, right brace are not used in markdown for
     // constructs.
     // A tilde can start code (fenced).
     {atBreak: true, character: '~'}
   ];

   /**
    * @typedef {import('./types.js').Node} Node
    * @typedef {import('./types.js').Options} Options
    * @typedef {import('./types.js').Context} Context
    * @typedef {import('./types.js').Handle} Handle
    * @typedef {import('./types.js').Join} Join
    * @typedef {import('./types.js').Unsafe} Unsafe
    */

   /**
    * @param {Node} tree
    * @param {Options} [options]
    * @returns {string}
    */
   function toMarkdown(tree, options = {}) {
     /** @type {Context} */
     // @ts-expect-error: we’ll add `handle` later.
     const context = {
       enter,
       stack: [],
       unsafe: [],
       join: [],
       handlers: {},
       options: {},
       indexStack: []
     };

     configure$1(context, {unsafe, join, handlers: handle});
     configure$1(context, options);

     if (context.options.tightDefinitions) {
       configure$1(context, {join: [joinDefinition]});
     }

     /** @type {Handle} */
     context.handle = zwitch('type', {
       invalid,
       // @ts-expect-error: hush.
       unknown: unknown$2,
       // @ts-expect-error: hush.
       handlers: context.handlers
     });

     let result = context.handle(tree, null, context, {
       before: '\n',
       after: '\n',
       now: {line: 1, column: 1},
       lineShift: 0
     });

     if (
       result &&
       result.charCodeAt(result.length - 1) !== 10 &&
       result.charCodeAt(result.length - 1) !== 13
     ) {
       result += '\n';
     }

     return result

     /** @type {Context['enter']} */
     function enter(name) {
       context.stack.push(name);
       return exit

       function exit() {
         context.stack.pop();
       }
     }
   }

   /**
    * @type {Handle}
    * @param {unknown} value
    */
   function invalid(value) {
     throw new Error('Cannot handle value `' + value + '`, expected node')
   }

   /**
    * @type {Handle}
    * @param {Node} node
    */
   function unknown$2(node) {
     throw new Error('Cannot handle unknown node `' + node.type + '`')
   }

   /** @type {Join} */
   function joinDefinition(left, right) {
     // No blank line between adjacent definitions.
     if (left.type === 'definition' && left.type === right.type) {
       return 0
     }
   }

   /**
    * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
    * @typedef {import('./syntax.js').Align} Align
    */

   const alignment = {
     none: '',
     left: ' align="left"',
     right: ' align="right"',
     center: ' align="center"'
   };

   /**
    * HTML extension for micromark (passed in `htmlExtensions`).
    *
    * @type {HtmlExtension}
    */
   const extendedTableHtml = {
     enter: {
       table(token) {
         /** @type {Array<Align>} */
         // @ts-expect-error Custom.
         const tableAlign = token._align;
         this.lineEndingIfNeeded();
         this.tag('<table>');
         this.setData('tableAlign', tableAlign);
       },
       tableBody() {
         // Clear slurping line ending from the delimiter row.
         this.setData('slurpOneLineEnding');
         this.tag('<tbody>');
       },
       tableData() {
         const tableAlign = /** @type {Array<Align>} */ (
           this.getData('tableAlign')
         );
         const tableColumn = /** @type {number} */ (this.getData('tableColumn'));
         const align = alignment[tableAlign[tableColumn]];

         if (align === undefined) {
           // Capture results to ignore them.
           this.buffer();
         } else {
           this.lineEndingIfNeeded();
           this.tag('<td' + align + '>');
         }
       },
       tableHead() {
         this.lineEndingIfNeeded();
         this.tag('<thead>');
       },
       tableHeader() {
         const tableAlign = /** @type {Array<Align>} */ (
           this.getData('tableAlign')
         );
         const tableColumn = /** @type {number} */ (this.getData('tableColumn'));
         const align = alignment[tableAlign[tableColumn]];

         this.lineEndingIfNeeded();
         this.tag('<th' + align + '>');
       },
       tableRow() {
         this.setData('tableColumn', 0);
         this.lineEndingIfNeeded();
         this.tag('<tr>');
       },
       tableHeaderRow() {
         this.setData('tableColumn', 0);
         this.lineEndingIfNeeded();
         this.tag('<tr>');
       }
     },
     exit: {
       // Overwrite the default code text data handler to unescape escaped pipes when
       // they are in tables.
       codeTextData(token) {
         let value = this.sliceSerialize(token);

         if (this.getData('tableAlign')) {
           value = value.replace(/\\([\\|])/g, replace);
         }

         this.raw(this.encode(value));
       },
       table() {
         this.setData('tableAlign');
         // If there was no table body, make sure the slurping from the delimiter row
         // is cleared.
         this.setData('slurpAllLineEndings');
         this.lineEndingIfNeeded();
         this.tag('</table>');
       },
       tableBody() {
         this.lineEndingIfNeeded();
         this.tag('</tbody>');
       },
       tableData() {
         const tableAlign = /** @type {Array<Align>} */ (
           this.getData('tableAlign')
         );
         const tableColumn = /** @type {number} */ (this.getData('tableColumn'));

         if (tableColumn in tableAlign) {
           this.tag('</td>');
           this.setData('tableColumn', tableColumn + 1);
         } else {
           // Stop capturing.
           this.resume();
         }
       },
       tableHead() {
         this.lineEndingIfNeeded();
         this.tag('</thead>');
         this.setData('slurpOneLineEnding', true);
         // Slurp the line ending from the delimiter row.
       },
       tableHeader() {
         const tableColumn = /** @type {number} */ (this.getData('tableColumn'));
         this.tag('</th>');
         this.setData('tableColumn', tableColumn + 1);
       },
       tableRow() {
         const tableAlign = /** @type {Array<Align>} */ (
           this.getData('tableAlign')
         );
         let tableColumn = /** @type {number} */ (this.getData('tableColumn'));

         while (tableColumn < tableAlign.length) {
           this.lineEndingIfNeeded();
           this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>');
           tableColumn++;
         }

         this.setData('tableColumn', tableColumn);
         this.lineEndingIfNeeded();
         this.tag('</tr>');
       },
       tableHeaderRow() {
         const tableAlign = /** @type {Array<Align>} */ (
           this.getData('tableAlign')
         );
         let tableColumn = /** @type {number} */ (this.getData('tableColumn'));

         while (tableColumn < tableAlign.length) {
           this.lineEndingIfNeeded();
           this.tag('<th' + alignment[tableAlign[tableColumn]] + '></th>');
           tableColumn++;
         }
         
         this.setData('tableColumn', tableColumn);
         this.lineEndingIfNeeded();
         this.tag('</tr>');

       } 
     }
   };

   /**
    * @param {string} $0
    * @param {string} $1
    * @returns {string}
    */
   function replace($0, $1) {
     // Pipes work, backslashes don’t (but can’t escape pipes).
     return $1 === '|' ? $1 : $0
   }

   /**
    * @typedef {import('micromark-util-types').Extension} Extension
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').Code} Code
    */

   /**
    * Syntax extension for micromark (passed in `extensions`).
    *
    * @type {Extension}
    */
   const extendedTable$1 = {
     // @ts-ignore - FIXME: why does this all of a sudden cause typing error?
     flow: {null: {tokenize: tokenizeTable, resolve: resolveTable}}
   };

   /**
    * @param {Code} code 
    * @returns {boolean}
    */
   function markdownTableCellContent(code) {
     return !markdownSpace(code) && code !== codes.verticalBar && !markdownLineEnding(code) && code !== codes.eof;
   }

   /** @type {Resolver} */
   // eslint-disable-next-line complexity
   function resolveTable(events, context) {
     let index = -1;
     /** @type {boolean|undefined} */
     let inHead;
     /** @type {boolean|undefined} */
     let inDelimiterRow;
     /** @type {boolean|undefined} */
     let inRow;
     /** @type {number|undefined} */
     let contentStart;
     /** @type {number|undefined} */
     let contentEnd;
     /** @type {number|undefined} */
     let cellStart;
     /** @type {boolean|undefined} */
     let seenCellInRow;

     while (++index < events.length) {
       const token = events[index][1];

       if (inRow) {
         if (token.type === 'temporaryTableCellContent') {
           contentStart = contentStart || index;
           contentEnd = index;
         }

         if (
           // Combine separate content parts into one.
           (token.type === 'tableCellDivider' || token.type === 'tableRow' || token.type === 'tableHeaderRow') &&
           contentEnd
         ) {
           ok$1(
             contentStart,
             'expected `contentStart` to be defined if `contentEnd` is'
           );
           const content = {
             type: 'tableContent',
             start: events[contentStart][1].start,
             end: events[contentEnd][1].end
           };
           /** @type {Token} */
           const text = {
             type: types$1.chunkText,
             start: content.start,
             end: content.end,
             // @ts-expect-error It’s fine.
             contentType: constants.contentTypeText
           };

           ok$1(
             contentStart,
             'expected `contentStart` to be defined if `contentEnd` is'
           );

           events.splice(
             contentStart,
             contentEnd - contentStart + 1,
             ['enter', content, context],
             ['enter', text, context],
             ['exit', text, context],
             ['exit', content, context]
           );

           index -= contentEnd - contentStart - 3;
           contentStart = undefined;
           contentEnd = undefined;
         }
       }

       if (
         events[index][0] === 'exit' &&
         cellStart !== undefined &&
         cellStart + (seenCellInRow ? 0 : 1) < index &&
         (token.type === 'tableCellDivider' ||
           ((token.type === 'tableRow' || token.type === 'tableHeaderRow') &&
             (cellStart + 3 < index ||
               events[cellStart][1].type !== types$1.whitespace)))
       ) {
         const cell = {
           type: inDelimiterRow
             ? 'tableDelimiter'
             : inHead
             ? 'tableHeader'
             : 'tableData',
           start: events[cellStart][1].start,
           end: events[index][1].end
         };
         events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, [
           'exit',
           cell,
           context
         ]);
         events.splice(cellStart, 0, ['enter', cell, context]);
         index += 2;
         cellStart = index + 1;
         seenCellInRow = true;
       }

       if (token.type === 'tableRow' || token.type === 'tableHeaderRow') {
         inRow = events[index][0] === 'enter';

         if (inRow) {
           cellStart = index + 1;
           seenCellInRow = false;
         }
       }

       if (token.type === 'tableDelimiterRow') {
         inDelimiterRow = events[index][0] === 'enter';

         if (inDelimiterRow) {
           cellStart = index + 1;
           seenCellInRow = false;
         }
       }

       if (token.type === 'tableHead') {
         inHead = events[index][0] === 'enter';
       }
     }

     return events
   }

   /***********************************************
    * Create tokenizer for entire table (will use subtokenizers
    * for header, delimiter and body rows
    * @type {Tokenizer}
    */
   function tokenizeTable(effects, ok, nok) {
     let self = this;
     // Need to save these to call in right scope
     self.nok = nok;
     self.ok = ok;
     /** @type {Array<Align>} */
     const align = [];
     /** @type {number} */
     let lastColCount; // # of cols in last header or body row (not delimiter)
     /** @type {'gfm'|'delimiter'|'body'|undefined} */
     let tableType;
     return tableStart

     /**
      * Attempt to tokenize as GFM-table, then headerless table with and
      * delimiter/alignment, then table body only
      * @type {State}
      */
     function tableStart(code) {
       // @ts-ignore
       effects.enter('table')._align = align;
       return effects.attempt([ // Will attempt seuqentially until one ok's
           { tokenize: tokenizeHeader, partial: true },
           { tokenize: tokenizeDelimiter, partial: true },
           { tokenize: tokenizeBody, partial: true },
         ],
         function (code) { // On success close table and done
           self.ok = ok;
           self.nok = nok;
           return tableClose(code);
         },      
         nok // No table pattern found
       )(code);
     }

     /**
      * Create tokenizer for header row
      * @type {Tokenizer}
      */
     function tokenizeHeader(effects, ok, nok) {
       // @ts-ignore
       self = this; // Has to be set as tokenizers are called with an object
       self.nok = nok;
       self.ok = ok;
       align.length = 0;
       tableType = 'gfm';
       return header;
     }

     /***********************************************
      * Tokenize line as head, chain to delimiter row if successful or nok()
      * @type {State}
      */
     function header(code) {
       effects.enter('tableHead');
       effects.enter('tableHeaderRow');
       return nonDelimiterRow(rowEnd, code);

       /***********************************************
       * End of head row - close and check that table is not
       * interrupted on next line then chain to delimiter row
       * @type {State}
       */
        function rowEnd(code) {
         // No cols found (i.e. not a table) or eof (header only tables not allowed)
         if (!lastColCount || code === codes.eof) {
           return self.nok(code);
         }
         effects.exit('tableHeaderRow');
         effects.exit('tableHead');
         effects.enter(types$1.lineEnding);
         effects.consume(code);
         effects.exit(types$1.lineEnding);
         return nextLine;

         /** @type {State} */
         function nextLine(code) {
           if (tableContinues(self, code)) { return delimiter(code); }
           return self.nok(code); // No header row only tables
         }
       }
     }

     /** @type {Tokenizer} */
     function tokenizeDelimiter(effects, ok, nok) {
       // @ts-ignore
       self = this; // Has to be set as tokenizers are called with an object
       self.nok = nok;
       self.ok = ok;
       align.length = 0;
       tableType = 'delimiter';
       return delimiter;
     }

     /** @type {State} */
     function delimiter(code) {
       /** @type {Align} */
       let _align = 'none';
       effects.enter('tableDelimiterRow');
       if (code === codes.verticalBar) {
         return divider(code);
       }
       return cellStart(code);

       /***********************************************
        * Tokenize and consume divider, continue to space or line end
        * @type {State}
        */
       function divider(code) {
         effects.enter('tableCellDivider');
         effects.consume(code);
         effects.exit('tableCellDivider');
         return cellStart;
       }

       /***********************************************
        * Tokenize any left space and continue to content
        * @type {State}
        */
       function cellStart(code) {
         if (markdownLineEnding(code) || code === codes.eof) {
           return rowEnd(code);
         }

         if (markdownSpace(code)) {
           effects.enter(types$1.whitespace);
           return eatSpace(code);
         }

         return contentStart(code);

         /** @type {State} */
         function eatSpace(code) {
           if (markdownSpace(code)) {
             effects.consume(code);
             return eatSpace;
           }
           effects.exit(types$1.whitespace);
           return cellStart(code);
         }
       }

       /** @type {State} */
       function contentStart(code) {
         if (code === codes.dash) {
           _align = 'none';
           return fillerStart(code);
         }

         if (code === codes.colon) {
           effects.enter('tableDelimiterAlignment');
           effects.consume(code);
           effects.exit('tableDelimiterAlignment');
           _align = 'left';
           return fillerStart;
         }

         return self.nok(code);
       }

       /** @type {State} */
       function fillerStart(code) {
         if (code === codes.dash) {
           effects.enter('tableDelimiterFiller');
           effects.consume(code);
           return eatFiller;
         }
         return self.nok(code);

         /** @type {State} */
         function eatFiller(code) {
           if (code === codes.dash) {
             effects.consume(code);
             return eatFiller;
           }

           effects.exit('tableDelimiterFiller');
           return fillerEnd(code);
         }
       }

       /** @type {State} */
       function fillerEnd(code) {
         if (code === codes.colon) {
           effects.enter('tableDelimiterAlignment');
           effects.consume(code);
           _align = _align === 'left' ? 'center' : 'right';
           effects.exit('tableDelimiterAlignment');
           return contentEnd;
         }
         return contentEnd(code);
       }

       /** @type {State} */
       function contentEnd(code) {
         return cellEnd(code);
       }

       /** @type {State} */
       function cellEnd(code) {
         if (markdownSpace(code)) {
           effects.enter(types$1.whitespace);
           return eatSpace(code);
         }

         align.push(_align);
         if (markdownLineEnding(code) || code === codes.eof) {
           return rowEnd(code);
         }

         if (code === codes.verticalBar) {
           return divider(code);
         }

         return self.nok(code);

         /** @type {State} */
         function eatSpace(code) {
           if (markdownSpace(code)) {
             effects.consume(code);
             return eatSpace;
           }
           effects.exit(types$1.whitespace);
           return cellEnd(code);
         }
       }

       /***********************************************
       * End of delimiter row - close and check that delimiters match
       * cols if GFM format
       * @type {State}
       */
       function rowEnd(code) {
         if (!lastColCount && code === codes.eof) return self.nok(code);
         if (lastColCount && lastColCount !== align.length) return self.nok(code);
         effects.exit('tableDelimiterRow');
         effects.enter(types$1.lineEnding);
         effects.consume(code);
         effects.exit(types$1.lineEnding);
         return nextLine;

         /** @type {State} */
         function nextLine(code) {
           if (tableContinues(self, code)) return body(code);
           return lastColCount ? self.ok(code) : self.nok(code);
         }
       }

     }

     /** @type {Tokenizer} */
     function tokenizeBody(effects, ok, nok) {
       // @ts-ignore
       self = this; // Has to be set as tokenizers are called with an object
       self.nok = nok;
       self.ok = ok;
       align.length = 0;
       tableType = 'body';
       return body;
     }

     /** @type {State} */
     function body(code) {
       effects.enter('tableBody');
       return bodyRow(code);
     }

     /***********************************************
      * Tokenize line as body
      * @type {State}
      */
     function bodyRow(code) {
       effects.enter('tableRow');
       return nonDelimiterRow(rowEnd, code);

       /***********************************************
       * End of body row - close and check that table is not
       * interrupted on next line
       * @type {State}
       */
       function rowEnd(code) {
         effects.exit('tableRow');
         if (!lastColCount) return self.nok(code);
         if (tableType === 'body') {
           while (lastColCount > align.length) align.push('none');
         }
         if (code === codes.eof) return bodyClose(code);
         effects.enter(types$1.lineEnding);
         effects.consume(code);
         effects.exit(types$1.lineEnding);
         return nextLine;

         /** @type {State} */
         function nextLine(code) {
           if (tableContinues(self, code)) { return bodyRow(code); }
           return bodyClose(code);
         }

       }

       /** @type {State} */
       function bodyClose(code) {
         effects.exit('tableBody');
         return self.ok(code);
       }
     }

     /***********************************************
      * Tokenize header or body row (row internal logic is identical)
      * @param {State} rowEnd function to be called at end of row
      * @param {Code} code first code in row
      * @returns {void|State}
      */
     function nonDelimiterRow(rowEnd, code) {
       let leadingDivider = 0; // 0 or 1 leading dividers
       let dividerCount = 0; // total # of dividers
       let trailingDivider = 0; // 0 or 1 trailing dividers
       if (code === codes.verticalBar) {
         leadingDivider = 1;
         return divider(code);
       }
       return cell(code);

       /***********************************************
        * Tokenize and consume divider, continue to cell start
        * @type {State}
        */
       function divider(code) {
         effects.enter('tableCellDivider');
         effects.consume(code);
         effects.exit('tableCellDivider');
         dividerCount++;
         trailingDivider = 1; // Set to 0 when nonWhitespace discovered in cell
         return cell;
       }

       /***********************************************
        * Tokenize any left space and continue to content
        * @type {State}
        */
       function cell(code) {
         if(code === codes.verticalBar || markdownLineEnding(code) || code === codes.eof) {
           return cellEnd(code);
         }
         if (markdownSpace(code)) {
           effects.enter(types$1.whitespace);
           return eatSpace(code);
         }
         trailingDivider = 0;
         effects.enter('temporaryTableCellContent');
         if (code === codes.backslash) {
           effects.consume(code);
           return eatEscapedContent;
         }
         return eatContent(code);  

         /** @type {State} */
         function eatSpace(code) {
           if (markdownSpace(code)) {
             effects.consume(code);
             return eatSpace;
           }
           effects.exit(types$1.whitespace);
           return cell(code);
         }

         /** @type {State} */
         function eatContent(code) {
           if (markdownTableCellContent(code)) {
             effects.consume(code);
             return eatContent;
           }
           effects.exit('temporaryTableCellContent');
           return cell(code);
         }

         /** @type {State} */
         function eatEscapedContent(code) {
           if (code === codes.backslash || code === codes.verticalBar) {
             effects.consume(code);
             return eatContent;
           }
           return eatContent(code);
         }
       }

       /**
        * End of cell, continue to next
        * @type {State}
        */
       function cellEnd(code) {
         if (markdownLineEnding(code) || code === codes.eof) {
           lastColCount = dividerCount > (leadingDivider + trailingDivider) || (leadingDivider && trailingDivider)
             ? lastColCount = dividerCount + 1 - (leadingDivider + trailingDivider)
             : 0;
           return rowEnd(code);
         }
         return divider(code);
       }
     }

     /***********************************************
      * Close table and return self.ok()
      * @type {State}
      */
     function tableClose(code) {
       effects.exit('table');
       return self.ok(code);
     }

     /***********************************************
      * Tokenize line ending and return whether the table continues.
      * @param {*} self 
      * @param {Code} code 
      * @returns {Boolean}
      */
     function tableContinues(self, code) {
       // Blank lines interrupts table (and can have no chars).
       if (self.parser.lazy[self.now().line] || markdownLineEnding(code) || code === codes.eof) {
         return false;
       }

       // Indented code interrupts table.
       const tail = self.events[self.events.length - 1];
       if (!self.parser.constructs.disable.null.includes('codeIndented')
         && tail
         && tail[1].type === types$1.linePrefix
         && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize) {
         return false;
       }

       // Block level constructs interupts table
       if (self.parser.constructs.flow?.code) {
         return false;
       }

       return true;
     }
   }

   /**
    * @typedef Options
    *   Configuration (optional).
    * @property {string|null|Array<string|null|undefined>} [align]
    *   One style for all columns, or styles for their respective columns.
    *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).
    *   Other values are treated as `''`, which doesn’t place the colon in the
    *   alignment row but does align left.
    *   *Only the lowercased first character is used, so `Right` is fine.*
    * @property {boolean} [padding=true]
    *   Whether to add a space of padding between delimiters and cells.
    *
    *   When `true`, there is padding:
    *
    *   ```markdown
    *   | Alpha | B     |
    *   | ----- | ----- |
    *   | C     | Delta |
    *   ```
    *
    *   When `false`, there is no padding:
    *
    *   ```markdown
    *   |Alpha|B    |
    *   |-----|-----|
    *   |C    |Delta|
    *   ```
    * @property {boolean} [delimiterStart=true]
    *   Whether to begin each row with the delimiter.
    *
    *   > 👉 **Note**: please don’t use this: it could create fragile structures
    *   > that aren’t understandable to some markdown parsers.
    *
    *   When `true`, there are starting delimiters:
    *
    *   ```markdown
    *   | Alpha | B     |
    *   | ----- | ----- |
    *   | C     | Delta |
    *   ```
    *
    *   When `false`, there are no starting delimiters:
    *
    *   ```markdown
    *   Alpha | B     |
    *   ----- | ----- |
    *   C     | Delta |
    *   ```
    * @property {boolean} [delimiterEnd=true]
    *   Whether to end each row with the delimiter.
    *
    *   > 👉 **Note**: please don’t use this: it could create fragile structures
    *   > that aren’t understandable to some markdown parsers.
    *
    *   When `true`, there are ending delimiters:
    *
    *   ```markdown
    *   | Alpha | B     |
    *   | ----- | ----- |
    *   | C     | Delta |
    *   ```
    *
    *   When `false`, there are no ending delimiters:
    *
    *   ```markdown
    *   | Alpha | B
    *   | ----- | -----
    *   | C     | Delta
    *   ```
    * @property {boolean} [alignDelimiters=true]
    *   Whether to align the delimiters.
    *   By default, they are aligned:
    *
    *   ```markdown
    *   | Alpha | B     |
    *   | ----- | ----- |
    *   | C     | Delta |
    *   ```
    *
    *   Pass `false` to make them staggered:
    *
    *   ```markdown
    *   | Alpha | B |
    *   | - | - |
    *   | C | Delta |
    *   ```
    * @property {(value: string) => number} [stringLength]
    *   Function to detect the length of table cell content.
    *   This is used when aligning the delimiters (`|`) between table cells.
    *   Full-width characters and emoji mess up delimiter alignment when viewing
    *   the markdown source.
    *   To fix this, you can pass this function, which receives the cell content
    *   and returns its “visible” size.
    *   Note that what is and isn’t visible depends on where the text is displayed.
    *
    *   Without such a function, the following:
    *
    *   ```js
    *   markdownTable([
    *     ['Alpha', 'Bravo'],
    *     ['中文', 'Charlie'],
    *     ['👩‍❤️‍👩', 'Delta']
    *   ])
    *   ```
    *
    *   Yields:
    *
    *   ```markdown
    *   | Alpha | Bravo |
    *   | - | - |
    *   | 中文 | Charlie |
    *   | 👩‍❤️‍👩 | Delta |
    *   ```
    *
    *   With [`string-width`](https://github.com/sindresorhus/string-width):
    *
    *   ```js
    *   import stringWidth from 'string-width'
    *
    *   markdownTable(
    *     [
    *       ['Alpha', 'Bravo'],
    *       ['中文', 'Charlie'],
    *       ['👩‍❤️‍👩', 'Delta']
    *     ],
    *     {stringLength: stringWidth}
    *   )
    *   ```
    *
    *   Yields:
    *
    *   ```markdown
    *   | Alpha | Bravo   |
    *   | ----- | ------- |
    *   | 中文  | Charlie |
    *   | 👩‍❤️‍👩    | Delta   |
    *   ```
    */

   /**
    * @typedef {Options} MarkdownTableOptions
    * @todo
    *   Remove next major.
    */

   /**
    * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..
    *
    * @param {Array<Array<string|null|undefined>>} table
    *   Table data (matrix of strings).
    * @param {Options} [options]
    *   Configuration (optional).
    * @returns {string}
    */
   function markdownTable(table, options = {}) {
     const align = (options.align || []).concat();
     const stringLength = options.stringLength || defaultStringLength;
     /** @type {Array<number>} Character codes as symbols for alignment per column. */
     const alignments = [];
     /** @type {Array<Array<string>>} Cells per row. */
     const cellMatrix = [];
     /** @type {Array<Array<number>>} Sizes of each cell per row. */
     const sizeMatrix = [];
     /** @type {Array<number>} */
     const longestCellByColumn = [];
     let mostCellsPerRow = 0;
     let rowIndex = -1;

     // This is a superfluous loop if we don’t align delimiters, but otherwise we’d
     // do superfluous work when aligning, so optimize for aligning.
     while (++rowIndex < table.length) {
       /** @type {Array<string>} */
       const row = [];
       /** @type {Array<number>} */
       const sizes = [];
       let columnIndex = -1;

       if (table[rowIndex].length > mostCellsPerRow) {
         mostCellsPerRow = table[rowIndex].length;
       }

       while (++columnIndex < table[rowIndex].length) {
         const cell = serialize(table[rowIndex][columnIndex]);

         if (options.alignDelimiters !== false) {
           const size = stringLength(cell);
           sizes[columnIndex] = size;

           if (
             longestCellByColumn[columnIndex] === undefined ||
             size > longestCellByColumn[columnIndex]
           ) {
             longestCellByColumn[columnIndex] = size;
           }
         }

         row.push(cell);
       }

       cellMatrix[rowIndex] = row;
       sizeMatrix[rowIndex] = sizes;
     }

     // Figure out which alignments to use.
     let columnIndex = -1;

     if (typeof align === 'object' && 'length' in align) {
       while (++columnIndex < mostCellsPerRow) {
         alignments[columnIndex] = toAlignment(align[columnIndex]);
       }
     } else {
       const code = toAlignment(align);

       while (++columnIndex < mostCellsPerRow) {
         alignments[columnIndex] = code;
       }
     }

     // Inject the alignment row.
     columnIndex = -1;
     /** @type {Array<string>} */
     const row = [];
     /** @type {Array<number>} */
     const sizes = [];

     while (++columnIndex < mostCellsPerRow) {
       const code = alignments[columnIndex];
       let before = '';
       let after = '';

       if (code === 99 /* `c` */) {
         before = ':';
         after = ':';
       } else if (code === 108 /* `l` */) {
         before = ':';
       } else if (code === 114 /* `r` */) {
         after = ':';
       }

       // There *must* be at least one hyphen-minus in each alignment cell.
       let size =
         options.alignDelimiters === false
           ? 1
           : Math.max(
               1,
               longestCellByColumn[columnIndex] - before.length - after.length
             );

       const cell = before + '-'.repeat(size) + after;

       if (options.alignDelimiters !== false) {
         size = before.length + size + after.length;

         if (size > longestCellByColumn[columnIndex]) {
           longestCellByColumn[columnIndex] = size;
         }

         sizes[columnIndex] = size;
       }

       row[columnIndex] = cell;
     }

     // Inject the alignment row.
     cellMatrix.splice(1, 0, row);
     sizeMatrix.splice(1, 0, sizes);

     rowIndex = -1;
     /** @type {Array<string>} */
     const lines = [];

     while (++rowIndex < cellMatrix.length) {
       const row = cellMatrix[rowIndex];
       const sizes = sizeMatrix[rowIndex];
       columnIndex = -1;
       /** @type {Array<string>} */
       const line = [];

       while (++columnIndex < mostCellsPerRow) {
         const cell = row[columnIndex] || '';
         let before = '';
         let after = '';

         if (options.alignDelimiters !== false) {
           const size =
             longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);
           const code = alignments[columnIndex];

           if (code === 114 /* `r` */) {
             before = ' '.repeat(size);
           } else if (code === 99 /* `c` */) {
             if (size % 2) {
               before = ' '.repeat(size / 2 + 0.5);
               after = ' '.repeat(size / 2 - 0.5);
             } else {
               before = ' '.repeat(size / 2);
               after = before;
             }
           } else {
             after = ' '.repeat(size);
           }
         }

         if (options.delimiterStart !== false && !columnIndex) {
           line.push('|');
         }

         if (
           options.padding !== false &&
           // Don’t add the opening space if we’re not aligning and the cell is
           // empty: there will be a closing space.
           !(options.alignDelimiters === false && cell === '') &&
           (options.delimiterStart !== false || columnIndex)
         ) {
           line.push(' ');
         }

         if (options.alignDelimiters !== false) {
           line.push(before);
         }

         line.push(cell);

         if (options.alignDelimiters !== false) {
           line.push(after);
         }

         if (options.padding !== false) {
           line.push(' ');
         }

         if (
           options.delimiterEnd !== false ||
           columnIndex !== mostCellsPerRow - 1
         ) {
           line.push('|');
         }
       }

       lines.push(
         options.delimiterEnd === false
           ? line.join('').replace(/ +$/, '')
           : line.join('')
       );
     }

     return lines.join('\n')
   }

   /**
    * @param {string|null|undefined} [value]
    * @returns {string}
    */
   function serialize(value) {
     return value === null || value === undefined ? '' : String(value)
   }

   /**
    * @param {string} value
    * @returns {number}
    */
   function defaultStringLength(value) {
     return value.length
   }

   /**
    * @param {string|null|undefined} value
    * @returns {number}
    */
   function toAlignment(value) {
     const code = typeof value === 'string' ? value.codePointAt(0) : 0;

     return code === 67 /* `C` */ || code === 99 /* `c` */
       ? 99 /* `c` */
       : code === 76 /* `L` */ || code === 108 /* `l` */
       ? 108 /* `l` */
       : code === 82 /* `R` */ || code === 114 /* `r` */
       ? 114 /* `r` */
       : 0
   }

   /**
    * @typedef {import('mdast').AlignType} AlignType
    * @typedef {import('mdast').Table} Table
    * @typedef {import('mdast').TableRow} TableRow
    * @typedef {import('mdast').TableCell} TableCell
    * @typedef {import('mdast').InlineCode} InlineCode
    * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions
    * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
    * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
    * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
    * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
    * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext
    * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions
    *
    * @typedef Options
    * @property {boolean} [tableCellPadding=true]
    * @property {boolean} [tablePipeAlign=true]
    * @property {MarkdownTableOptions['stringLength']} [stringLength]
    */

   /**
    * @param {Options} [options]
    * @returns {ToMarkdownExtension}
    */
   function extendedTableToMarkdown(options) {
     const settings = options || {};
     const padding = settings.tableCellPadding;
     const alignDelimiters = settings.tablePipeAlign;
     const stringLength = settings.stringLength;
     const around = padding ? ' ' : '|';

     return {
       unsafe: [
         {character: '\r', inConstruct: 'tableCell'},
         {character: '\n', inConstruct: 'tableCell'},
         // A pipe, when followed by a tab or space (padding), or a dash or colon
         // (unpadded delimiter row), could result in a table.
         {atBreak: true, character: '|', after: '[\t :-]'},
         // A pipe in a cell must be encoded.
         {character: '|', inConstruct: 'tableCell'},
         // A colon must be followed by a dash, in which case it could start a
         // delimiter row.
         {atBreak: true, character: ':', after: '-'},
         // A delimiter row can also start with a dash, when followed by more
         // dashes, a colon, or a pipe.
         // This is a stricter version than the built in check for lists, thematic
         // breaks, and setex heading underlines though:
         // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
         {atBreak: true, character: '-', after: '[:|-]'}
       ],
       handlers: {
         table: handleTable,
         tableRow: handleTableRow,
         tableCell: handleTableCell,
         inlineCode: inlineCodeWithTable
       }
     }

     /**
      * @type {ToMarkdownHandle}
      * @param {Table} node
      */
     function handleTable(node, _, context, safeOptions) {
       let serial = serializeData(
         handleTableAsData(node, context, safeOptions),
         // @ts-expect-error: fixed in `markdown-table@3.0.1`.
         node.align
       );
       if (node.children[0].type === 'tableRow') {
         const rows = serial.split('\n');
         const first = String(rows.shift());
         const align = String(rows.shift());
         rows.unshift(first);
         if (node.align?.some((el) => { return !!el; })) {
             rows.unshift(align);
         }
         serial = rows.join('\n');
       }
       return serial;
     }

     /**
      * This function isn’t really used normally, because we handle rows at the
      * table level.
      * But, if someone passes in a table row, this ensures we make somewhat sense.
      *
      * @type {ToMarkdownHandle}
      * @param {TableRow} node
      */
     function handleTableRow(node, _, context, safeOptions) {
       // FIXME: No tableHeaderRow support (but this function is currently unused)
       const row = handleTableRowAsData(node, context, safeOptions);
       // `markdown-table` will always add an align row
       const value = serializeData([row]);
       return value.slice(0, value.indexOf('\n'))
     }

     /**
      * @type {ToMarkdownHandle}
      * @param {TableCell} node
      */
     function handleTableCell(node, _, context, safeOptions) {
       const exit = context.enter('tableCell');
       const subexit = context.enter('phrasing');
       const value = containerPhrasing(node, context, {
         ...safeOptions,
         before: around,
         after: around
       });
       subexit();
       exit();
       return value
     }

     /**
      * @param {Array<Array<string>>} matrix
      * @param {Array<string>} [align]
      */
     function serializeData(matrix, align) {
       return markdownTable(matrix, {
         align,
         alignDelimiters,
         padding,
         stringLength
       })
     }

     /**
      * @param {Table} node
      * @param {ToMarkdownContext} context
      * @param {SafeOptions} safeOptions
      */
     function handleTableAsData(node, context, safeOptions) {
       const children = node.children;
       let index = -1;
       /** @type {Array<Array<string>>} */
       const result = [];
       const subexit = context.enter('table');

       while (++index < children.length) {
         result[index] = handleTableRowAsData(
           // @ts-ignore - FIXME: How to interface-extend and declare in JSDoc
           children[index],
           context,
           safeOptions
         );
       }

       subexit();

       return result
     }

     /**
      * @param {TableRow} node
      * @param {ToMarkdownContext} context
      * @param {SafeOptions} safeOptions
      */
     function handleTableRowAsData(node, context, safeOptions) {
       const children = node.children;
       let index = -1;
       /** @type {Array<string>} */
       const result = [];
       const subexit = context.enter('tableRow');

       while (++index < children.length) {
         // Note: the positional info as used here is incorrect.
         // Making it correct would be impossible due to aligning cells?
         // And it would need copy/pasting `markdown-table` into this project.
         result[index] = handleTableCell(
           children[index],
           node,
           context,
           safeOptions
         );
       }

       subexit();

       return result
     }

     /**
      * @type {ToMarkdownHandle}
      * @param {InlineCode} node
      */
     function inlineCodeWithTable(node, parent, context) {
       let value = inlineCode(node, parent, context);

       if (context.stack.includes('tableCell')) {
         value = value.replace(/\|/g, '\\$&');
       }

       return value
     }
   }

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Parent} Parent
    * @typedef {import('unist').Literal} Literal
    * @typedef {Object.<string, unknown>} Props
    * @typedef {Array.<Node>|string} ChildrenOrValue
    *
    * @typedef {(<T extends string, P extends Record<string, unknown>, C extends Node[]>(type: T, props: P, children: C) => {type: T, children: C} & P)} BuildParentWithProps
    * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P, value: string) => {type: T, value: string} & P)} BuildLiteralWithProps
    * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P) => {type: T} & P)} BuildVoidWithProps
    * @typedef {(<T extends string, C extends Node[]>(type: T, children: C) => {type: T, children: C})} BuildParent
    * @typedef {(<T extends string>(type: T, value: string) => {type: T, value: string})} BuildLiteral
    * @typedef {(<T extends string>(type: T) => {type: T})} BuildVoid
    */

   var u = /**
    * @type {BuildVoid & BuildVoidWithProps & BuildLiteral & BuildLiteralWithProps & BuildParent & BuildParentWithProps}
    */ (
     /**
      * @param {string} type Type of node
      * @param {Props|ChildrenOrValue} [props] Additional properties for node (or `children` or `value`)
      * @param {ChildrenOrValue} [value] `children` or `value` of node
      * @returns {Node}
      */
     function (type, props, value) {
       /** @type {Node} */
       var node = {type: String(type)};

       if (
         (value === undefined || value === null) &&
         (typeof props === 'string' || Array.isArray(props))
       ) {
         value = props;
       } else {
         Object.assign(node, props);
       }

       if (Array.isArray(value)) {
         node.children = value;
       } else if (value !== undefined && value !== null) {
         node.value = String(value);
       }

       return node
     }
   );

   /**
    * @typedef {import('../types.js').H} H
    */

   /**
    * @param {H} h
    * @param {string} value
    * @returns {string}
    */
   function wrapText(h, value) {
     return h.wrapText ? value : value.replace(/\r?\n|\r/g, ' ')
   }

   const own$1 = {}.hasOwnProperty;

   /**
    * @typedef {import('./types.js').H} H
    * @typedef {import('./types.js').Node} Node
    * @typedef {import('./types.js').Parent} Parent
    * @typedef {import('./types.js').Handle} Handle
    * @typedef {import('./types.js').MdastNode} MdastNode
    */

   /**
    * @param {H} h
    * @param {Node} node
    * @param {Parent|undefined} parent
    * @returns {MdastNode|Array.<MdastNode>|void}
    */
   function one$1(h, node, parent) {
     /** @type {Handle|undefined} */
     let fn;

     if (node.type === 'element') {
       if (node.properties && node.properties.dataMdast === 'ignore') {
         return
       }

       if (own$1.call(h.handlers, node.tagName)) {
         fn = h.handlers[node.tagName];
       }
     } else if (own$1.call(h.handlers, node.type)) {
       fn = h.handlers[node.type];
     }

     if (typeof fn === 'function') {
       return fn(h, node, parent)
     }

     return unknown$1(h, node)
   }

   /**
    * @type {Handle}
    * @param {Node} node
    */
   function unknown$1(h, node) {
     // @ts-expect-error: Looks like a literal.
     if (typeof node.value === 'string') {
       // @ts-expect-error: Looks like a literal.
       return h(node, 'text', wrapText(h, node.value))
     }

     return all$1(h, node)
   }

   /**
    * @typedef {import('./types.js').H} H
    * @typedef {import('./types.js').Node} Node
    * @typedef {import('./types.js').Parent} Parent
    * @typedef {import('./types.js').Handle} Handle
    * @typedef {import('./types.js').MdastNode} MdastNode
    */

   /**
    * @param {H} h
    * @param {Node} parent
    * @returns {Array.<MdastNode>}
    */
   function all$1(h, parent) {
     /** @type {Array.<Node>} */
     // @ts-expect-error Assume `parent` is a parent.
     const nodes = parent.children || [];
     /** @type {Array.<MdastNode>} */
     const values = [];
     let index = -1;
     let length = nodes.length;
     let child = nodes[index + 1];

     // Trim initial and final `<br>`s.
     // They’re not semantic per HTML, and they can’t be made in markdown things
     // like paragraphs or headings.
     while (child && child.type === 'element' && child.tagName === 'br') {
       index++;
       child = nodes[index + 1];
     }

     child = nodes[length - 1];

     while (
       length - 1 > index &&
       child &&
       child.type === 'element' &&
       child.tagName === 'br'
     ) {
       length--;
       child = nodes[length - 1];
     }

     while (++index < length) {
       // @ts-expect-error assume `parent` is a parent.
       const result = one$1(h, nodes[index], parent);

       if (Array.isArray(result)) {
         values.push(...result);
       } else if (result) {
         values.push(result);
       }
     }

     return values
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').MdastNode} MdastNode
    * @typedef {import('../types.js').MdastTableContent} MdastTableContent
    * @typedef {import('../types.js').MdastRowContent} MdastRowContent
    * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent
    *
    * @typedef Info
    * @property {Array.<string|null>} align
    * @property {boolean} headless
    */

   const thead = convertElement('thead');
   const tr = convertElement('tr');
   const cell = convertElement(['th', 'td']);

   /**
    * @type {Handle}
    * @param {Element} node
    */
   function extendedTable(h, node) {
     if (h.inTable) {
       return h(node, 'text', wrapText(h, toText(node)))
     }

     h.inTable = true;

     const {headless, align} = inspect(node);
     const rows = toRows(all$1(h, node), headless);
     if (!headless) {
       // @ts-ignore - FIXME: find out how to JSDoc extend Content
       rows[0].type = 'tableHeaderRow';
     }
     let columns = 1;
     let rowIndex = -1;

     while (++rowIndex < rows.length) {
       const cells = rows[rowIndex].children;
       let cellIndex = -1;

       while (++cellIndex < cells.length) {
         const cell = cells[cellIndex];

         if (cell.data) {
           const colSpan = Number.parseInt(String(cell.data.colSpan), 10) || 1;
           const rowSpan = Number.parseInt(String(cell.data.rowSpan), 10) || 1;

           if (colSpan > 1 || rowSpan > 1) {
             let otherRowIndex = rowIndex - 1;

             while (++otherRowIndex < rowIndex + rowSpan) {
               let colIndex = cellIndex - 1;

               while (++colIndex < cellIndex + colSpan) {
                 if (!rows[otherRowIndex]) {
                   // Don’t add rows that don’t exist.
                   // Browsers don’t render them either.
                   break
                 }

                 /** @type {Array.<MdastRowContent>} */
                 const newCells = [];

                 if (otherRowIndex !== rowIndex || colIndex !== cellIndex) {
                   newCells.push({type: 'tableCell', children: []});
                 }

                 rows[otherRowIndex].children.splice(colIndex, 0, ...newCells);
               }
             }
           }

           // Clean the data fields.
           if ('colSpan' in cell.data) delete cell.data.colSpan;
           if ('rowSpan' in cell.data) delete cell.data.rowSpan;
           if (Object.keys(cell.data).length === 0) delete cell.data;
         }
       }

       if (cells.length > columns) columns = cells.length;
     }

     // Add extra empty cells.
     rowIndex = -1;

     while (++rowIndex < rows.length) {
       const cells = rows[rowIndex].children;
       let cellIndex = cells.length - 1;
       while (++cellIndex < columns) {
         cells.push({type: 'tableCell', children: []});
       }
     }

     let alignIndex = align.length - 1;
     while (++alignIndex < columns) {
       align.push(null);
     }

     h.inTable = false;

     return h(node, 'table', {align}, rows)
   }

   /**
    * Infer whether the HTML table has a head and how it aligns.
    *
    * @param {Element} node
    * @returns {Info}
    */
   function inspect(node) {
     let headless = true;
     let rowIndex = 0;
     let cellIndex = 0;
     /** @type {Array.<string|null>} */
     const align = [null];

     visit(node, 'element', (child) => {
       if (child.tagName === 'table' && node !== child) {
         return SKIP
       }

       // If there is a `thead`, assume there is a header row.
       if (cell(child) && child.properties) {
         if (!align[cellIndex]) {
           align[cellIndex] = String(child.properties.align || '') || null;
         }

         // If there is a th in the first row, assume there is a header row.
         if (headless && rowIndex < 2 && child.tagName === 'th') {
           headless = false;
         }

         cellIndex++;
       } else if (thead(child)) {
         headless = false;
       } else if (tr(child)) {
         rowIndex++;
         cellIndex = 0;
       }
     });

     return {align, headless}
   }

   /**
    * Ensure the rows are properly structured.
    *
    * @param {Array.<MdastNode>} children
    * @param {boolean} headless
    * @returns {Array.<MdastTableContent>}
    */
   function toRows(children, headless) {
     let index = -1;
     /** @type {Array.<MdastTableContent>} */
     const nodes = [];
     /** @type {Array.<MdastRowContent>|undefined} */
     let queue;

     // Add an empty header row.
     if (headless) {
       nodes.push({type: 'tableRow', children: []});
     }

     while (++index < children.length) {
       const node = children[index];

       if (node.type === 'tableRow') {
         if (queue) {
           node.children.unshift(...queue);
           queue = undefined;
         }

         nodes.push(node);
       } else {
         if (!queue) queue = [];
         // @ts-expect-error Assume row content.
         queue.push(node);
       }
     }

     if (queue) {
       nodes[nodes.length - 1].children.push(...queue);
     }

     index = -1;

     while (++index < nodes.length) {
       nodes[index].children = toCells(nodes[index].children);
     }

     return nodes
   }

   /**
    * Ensure the cells in a row are properly structured.
    *
    * @param {Array.<MdastNode>} children
    * @returns {Array.<MdastRowContent>}
    */
   function toCells(children) {
     /** @type {Array.<MdastRowContent>} */
     const nodes = [];
     let index = -1;
     /** @type {MdastNode} */
     let node;
     /** @type {Array.<MdastPhrasingContent>|undefined} */
     let queue;

     while (++index < children.length) {
       node = children[index];

       if (node.type === 'tableCell') {
         if (queue) {
           node.children.unshift(...queue);
           queue = undefined;
         }

         nodes.push(node);
       } else {
         if (!queue) queue = [];
         // @ts-expect-error Assume phrasing content.
         queue.push(node);
       }
     }

     if (queue) {
       node = nodes[nodes.length - 1];

       if (!node) {
         node = {type: 'tableCell', children: []};
         nodes.push(node);
       }

       node.children.push(...queue);
     }

     return nodes
   }

   /**
    * @typedef {import('mdast').Delete} Delete
    * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
    * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
    * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
    * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
    */

   /**
    * Generate mdast node insertion extension for tag
    * @param {{mdastNode: string}} cfg
    * @returns {FromMarkdownExtension}
    */
   function emphasisFactoryFromMarkdown(cfg) {
   /** @type {FromMarkdownExtension} */
     const tmp = {
       canContainEols: [cfg.mdastNode],
       enter: {},
       exit: {}
     };
     // @ts-ignore - FIXME: How to JSDoc cast as we know it is not undefined
     tmp.enter[cfg.mdastNode] = enterEmphasis;
     // @ts-ignore - FIXME: How to JSDoc cast as we know it is not undefined
     tmp.exit[cfg.mdastNode] = exitEmphasis;
     return tmp;

     /** @type {FromMarkdownHandle} */
     function enterEmphasis(token) {
       // @ts-ignore - FIXME: How to JSDoc extend typedef
       this.enter({type: cfg.mdastNode, children: []}, token);
     }

     /** @type {FromMarkdownHandle} */
     function exitEmphasis(token) {
       this.exit(token);
     }
   }

   /**
    * Generate mdast node serialization extension for tag
    * @param {{mdastNode: string, markdownSymbol: string}} cfg
    * @returns {ToMarkdownExtension} 
    */
   function emphasisFactoryToMarkdown(cfg) {
     const tmp = {
       unsafe: [{character: cfg.markdownSymbol, inConstruct: 'phrasing'}],
       handlers: {}
     };
     // @ts-ignore - FIXME: How to JSDoc cast as we know it is not undefined
     tmp.handlers[cfg.mdastNode] = handleEmphasis;
     // @ts-ignore - FIXME: How to JSDoc cast as we know it is not undefined
     tmp.handlers[cfg.mdastNode]['peek'] = peekEmphasis;
     return tmp;

     /**
      * @type {ToMarkdownHandle}
      * @param {Emphasis} node
      */
     function handleEmphasis(node, _, context, safeOptions) {
       const tracker = track(safeOptions);
       const exit = context.enter('emphasis');
       let value = tracker.move(cfg.markdownSymbol);
       value += containerPhrasing(node, context, {
         ...tracker.current(),
         before: value,
         after: cfg.markdownSymbol[0]
       });
       value += tracker.move(cfg.markdownSymbol);
       exit();
       return value
     }

     /** @type {ToMarkdownHandle} */
     function peekEmphasis() {
       return cfg.markdownSymbol[0]
     }
   }

   /**
    * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
    * @typedef {import('micromark-util-types').Handles} Handles
    * 
    * @typedef Configuration
    *   Configuration for emphasis type to generate.
    * @property {string} mdastNode
    *   Mdast node name
    * @property {string} htmlNode
    *   HTML node (tag) name, eg 'sup' for a '<sup>' tag
    */

   /**
    * Generates HTML extension for micromark (passed in `htmlExtensions`).
    * @param {Configuration} cfg
    * @returns {HtmlExtension}
    */
   function emphasisFactoryHtml(cfg) {
     /** @type {{enter: Handles, exit: Handles}} */
     const tmp = { enter: {}, exit: {} };
     tmp.enter[cfg.mdastNode] = function () { this.tag(`<${cfg.htmlNode}>`); };
     tmp.exit[cfg.mdastNode] = function () { this.tag(`</${cfg.htmlNode}>`); };
     return tmp;
   }

   /**
    * @typedef {import('micromark-util-types').Extension} Extension
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Code} Code
    *
    * @typedef Configuration
    *   Configuration for emphasis type to generate.
    * @property {Code} code
    *   Character code for one or the symbols
    * @property {string} mdastNode
    *   Mdast node name
    * @property {string} sequence
    *   Internal unique denominator
    * @property {string} tempSequence
    *   Internal unique denominator
    * @property {string} typeText
    *   Internal unique denominator
    * @property {number} symbolLen
    *   Length of symbol(s), e.g. 2 for '~~'
    */

   /**
    * Function that can be called to get a syntax extension for micromark (passed
    * in `extensions`).
    *
    * @param {Configuration} cfg
    *   Configuration
    * @returns {Extension}
    *   Syntax extension for micromark (passed in `extensions`).
    */
   function emphasisFactory(cfg) {
     const {code, mdastNode, sequence, tempSequence, typeText, symbolLen} = {...cfg};
     const tokenizer = {
       tokenize: tokenizeEmphasis,
       resolveAll: resolveAllEmphasis
     };
     return {
       text: {[Number(code)]: tokenizer},
       insideSpan: {null: [tokenizer]},
       attentionMarkers: {null: [code]}
     };

     /**
      * Take events and resolve emphasis.
      *
      * @type {Resolver}
      */
     function resolveAllEmphasis(events, context) {
       let index = -1;

       // Walk through all events.
       while (++index < events.length) {
         // Find a token that can close.
         if (
           events[index][0] === 'enter' &&
           events[index][1].type === tempSequence &&
           events[index][1]._close
         ) {
           let open = index;

           // Now walk back to find an opener.
           while (open--) {
             // Find a token that can open the closer.
             if (
               events[open][0] === 'exit' &&
               events[open][1].type === tempSequence &&
               events[open][1]._open &&
               // If the sizes are the same:
               events[index][1].end.offset - events[index][1].start.offset ===
                 events[open][1].end.offset - events[open][1].start.offset
             ) {
               events[index][1].type = sequence;
               events[open][1].type = sequence;

               const emphasis = {
                 type: mdastNode,
                 start: Object.assign({}, events[open][1].start),
                 end: Object.assign({}, events[index][1].end)
               };

               const text = {
                 type: typeText,
                 start: Object.assign({}, events[open][1].end),
                 end: Object.assign({}, events[index][1].start)
               };

               // Opening.
               const nextEvents = [
                 ['enter', emphasis, context],
                 ['enter', events[open][1], context],
                 ['exit', events[open][1], context],
                 ['enter', text, context]
               ];

               // Between.
               splice(
                 nextEvents,
                 nextEvents.length,
                 0,
                 resolveAll(
                   context.parser.constructs.insideSpan.null,
                   events.slice(open + 1, index),
                   context
                 )
               );

               // Closing.
               splice(nextEvents, nextEvents.length, 0, [
                 ['exit', text, context],
                 ['enter', events[index][1], context],
                 ['exit', events[index][1], context],
                 ['exit', emphasis, context]
               ]);

               splice(events, open - 1, index - open + 3, nextEvents);

               index = open + nextEvents.length - 2;
               break
             }
           }
         }
       }

       index = -1;

       while (++index < events.length) {
         if (events[index][1].type === tempSequence) {
           events[index][1].type = types$1.data;
         }
       }

       return events
     }

     /** @type {Tokenizer} */
     function tokenizeEmphasis(effects, ok, nok) {
       const previous = this.previous;
       const events = this.events;
       let size = 0;

       return start

       /** @type {State} */
       function start(_code) {
         ok$1(_code === code, `expected '${code}'`);

         if (
           previous === code &&
           events[events.length - 1][1].type !== types$1.characterEscape
         ) {
           return nok(_code)
         }

         effects.enter(tempSequence);
         return more(_code)
       }

       /** @type {State} */
       function more(_code) {
         const before = classifyCharacter(previous);

         if (_code === code) {
           if (size >= symbolLen) return nok(_code)
           effects.consume(_code);
           size++;
           return more
         }

         if (size < symbolLen) return nok(_code)
         const token = effects.exit(tempSequence);
         const after = classifyCharacter(_code);
         token._open =
           !after || (after === constants.attentionSideAfter && Boolean(before));
         token._close =
           !before || (before === constants.attentionSideAfter && Boolean(after));
         return ok(_code)
       }
     }
   }

   /**
    * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode
    * @typedef {import('./index.js').H} H
    * @typedef {import('./index.js').Handler} Handler
    * @typedef {import('./index.js').Content} Content
    */

   const own = {}.hasOwnProperty;

   /**
    * Transform an unknown node.
    * @type {Handler}
    * @param {MdastNode} node
    */
   function unknown(h, node) {
     const data = node.data || {};

     if (
       'value' in node &&
       !(
         own.call(data, 'hName') ||
         own.call(data, 'hProperties') ||
         own.call(data, 'hChildren')
       )
     ) {
       return h.augment(node, u('text', node.value))
     }

     return h(node, 'div', all(h, node))
   }

   /**
    * @type {Handler}
    * @param {MdastNode} node
    */
   function one(h, node, parent) {
     const type = node && node.type;
     /** @type {Handler} */
     let fn;

     // Fail on non-nodes.
     if (!type) {
       throw new Error('Expected node, got `' + node + '`')
     }

     if (own.call(h.handlers, type)) {
       fn = h.handlers[type];
     } else if (h.passThrough && h.passThrough.includes(type)) {
       fn = returnNode;
     } else {
       fn = h.unknownHandler;
     }

     return (typeof fn === 'function' ? fn : unknown)(h, node, parent)
   }

   /**
    * @type {Handler}
    * @param {MdastNode} node
    */
   function returnNode(h, node) {
     // @ts-expect-error: Pass through custom node.
     return 'children' in node ? {...node, children: all(h, node)} : node
   }

   /**
    * @param {H} h
    * @param {MdastNode} parent
    */
   function all(h, parent) {
     /** @type {Array<Content>} */
     const values = [];

     if ('children' in parent) {
       const nodes = parent.children;
       let index = -1;

       while (++index < nodes.length) {
         const result = one(h, nodes[index], parent);

         if (result) {
           if (index && nodes[index - 1].type === 'break') {
             if (!Array.isArray(result) && result.type === 'text') {
               result.value = result.value.replace(/^\s+/, '');
             }

             if (!Array.isArray(result) && result.type === 'element') {
               const head = result.children[0];

               if (head && head.type === 'text') {
                 head.value = head.value.replace(/^\s+/, '');
               }
             }
           }

           if (Array.isArray(result)) {
             values.push(...result);
           } else {
             values.push(result);
           }
         }
       }
     }

     return values
   }

   /**
    * @typedef {import('micromark-util-types').Extension} MicromarkExtension
    * @typedef {import('micromark-util-types').HtmlExtension} MicromarkHtmlExtension
    * @typedef {import('mdast-util-from-markdown').Extension} MdastExtension
    * @typedef {import('mdast-util-to-markdown').Options} MdastSerializationOptions
    * @typedef {import('mdast-util-to-hast').H} MdastHandle
    * @typedef {import('mdast-util-to-hast').Handlers} MdastHandlers
    * @typedef {import('hast-util-to-mdast').Handle} HastHandle
    * @typedef {import('hast-util-to-mdast').H} HastH
    * @typedef {{[x: string]: HastHandle}} HastHandlers
    * @typedef {import('mdast-util-to-hast/lib').Element} MdastElement
    * @typedef {import('mdast-util-to-hast/lib').MdastNode} MdastNode
    * @typedef {import('./lib/mdast-util-emphasis-factory').Emphasis} Emphasis
    */

   /**
    * Create object with all extensions from configuration.
    * FIXME: Split into separate creators to reduce overhead?
    * @param {Configuration} cfg 
    * @returns {Extensions}
    */
   function createEmphasis(cfg) {
       // @ts-ignore - FIXME: how to cast Configuration to _Configuration
       const /** @type {_Configuration} */ _cfg = cfg;
       _cfg.code = cfg.markdownSymbol.charCodeAt(0);
       _cfg.sequence = `${cfg.mdastNode}Sequence`;
       _cfg.tempSequence = `${cfg.mdastNode}TempSequence`;
       _cfg.typeText = `${cfg.mdastNode}Text`;
       _cfg.symbolLen = cfg.markdownSymbol.length;

       /** @type {Extensions} */
       const out = {
           markdownSyntax: emphasisFactory(_cfg),
           micromarkHtml: emphasisFactoryHtml(_cfg),
           mdastNodeInsertion: emphasisFactoryFromMarkdown(_cfg),
           mdastSerialization: emphasisFactoryToMarkdown(_cfg),
           mdastHandler: {},
           hastHandler: {},
           htmlNode: _cfg.htmlNode
       };
       out.mdastHandler[_cfg.mdastNode] = function (h, node) {
           return h(node, _cfg.htmlNode, all(h, node));
       };
       out.hastHandler[_cfg.htmlNode] = function (h, node) {
           return h(node, _cfg.mdastNode, all$3(h, node));
       };
       return out;
   }

   const underline = createEmphasis({
       markdownSymbol: '_',
       mdastNode: 'underline',
       htmlNode: 'u'
   });
   const superscript = createEmphasis({
       markdownSymbol: '^',
       mdastNode: 'superscript',
       htmlNode: 'sup'
   });
   const subscript = createEmphasis({
       markdownSymbol: '~',
       mdastNode: 'subscript',
       htmlNode: 'sub'
   });
   const strikethrough = createEmphasis({
       markdownSymbol: '~~',
       mdastNode: 'strikethrough',
       htmlNode: 'del'
   });
   /////////////////////////////////////////////////////////////////////////////
   // Parse out current cloze ordinal from string, 0 if none (i.e. increment one for next)
   const CLOZE_ORD_RE = new RegExp(String.raw `{{c(\d+)::`, 'g');
   function parse_cloze(str) {
       let ord = 0;
       let match;
       while ((match = CLOZE_ORD_RE.exec(str)) !== null) {
           const o = parseInt(match[1]);
           if (o > ord)
               ord = o;
       }
       return ord;
   }
   /////////////////////////////////////////////////////////////////////////////
   // Convert HTML to markdown, including preparsing
   const MOVE_CLOZE_IN_RE = new RegExp(`({{c\d+::)(.*?)}}`, 'gsi');
   const TAIL_OPEN_RE = new RegExp(String.raw `<(?:ol|ul)[^>]*>`, 'gi');
   const TAIL_CLOSE_RE = new RegExp(String.raw `<\/(?:ol|ul)[^>]*>`, 'gi');
   const TAIL_LIST_SEARCH_RE = new RegExp(String.raw `((?:<\/li>\s*<\/(?:ul|ol)>\s*)+)$`, 'si');
   async function html_to_markdown(html) {
       // Move trailing list close-clozes to last item
       html = html.replace(MOVE_CLOZE_IN_RE, (match, cont, tail) => {
           var _a, _b;
           const opn = ((_a = tail.match(TAIL_OPEN_RE)) === null || _a === void 0 ? void 0 : _a.length) || -1;
           const close = ((_b = tail.match(TAIL_CLOSE_RE)) === null || _b === void 0 ? void 0 : _b.length) || -1;
           if (opn > 0 && opn === close) {
               const search = tail.search(TAIL_LIST_SEARCH_RE);
               if (search > -1) {
                   const pre = tail.slice(0, search);
                   const post = search < tail.length ? tail.slice(search) : '';
                   return `${cont}${pre}}}${post}`;
               }
           }
           return match;
       });
       const hast = fromHtml(html, {
           fragment: true
       });
       const mdast = toMdast(hast, {
           handlers: {
               table: extendedTable,
               ...underline.hastHandler,
               ...superscript.hastHandler,
               ...subscript.hastHandler,
               ...strikethrough.hastHandler
           }
       });
       const md = toMarkdown(mdast, {
           extensions: [
               extendedTableToMarkdown(),
               underline.mdastSerialization,
               superscript.mdastSerialization,
               subscript.mdastSerialization,
               strikethrough.mdastSerialization
           ],
           bullet: '-',
           listItemIndent: 'one',
           ruleRepetition: 10,
           tightDefinitions: true
       });
       const ord = parse_cloze(md);
       return [md, ord];
   }
   /////////////////////////////////////////////////////////////////////////////
   // Convert markdown to HTML, including postprocessing
   const P_TO_BR_RE = new RegExp(String.raw `<\/p>\s*<p>`, 'gsi');
   const STRIP_P_RE = new RegExp(String.raw `<\/?p>`, 'gi');
   const MOVE_CLOZE_OUT_RE = new RegExp(String.raw `({{c\d+::)(.*?)}}((?:\s*<\/li>\s*<\/(?:ol|ul)>)+)`, 'gsi');
   const LIST_END_RE = new RegExp(String.raw `<\/(ol|ul)>`, 'gi');
   async function markdown_to_html(md) {
       let html = micromark(md, 'utf-8', {
           extensions: [
               extendedTable$1,
               underline.markdownSyntax,
               superscript.markdownSyntax,
               subscript.markdownSyntax,
               strikethrough.markdownSyntax
           ],
           htmlExtensions: [
               extendedTableHtml,
               underline.micromarkHtml,
               superscript.micromarkHtml,
               subscript.micromarkHtml,
               strikethrough.micromarkHtml
           ],
           allowDangerousHtml: true,
           noNonRenderedNewline: true
       });
       html = html.replace(P_TO_BR_RE, '<br><br>');
       html = html.replace(STRIP_P_RE, '');
       // Fix clozes that look like they should surround an entire list
       html = html.replace(MOVE_CLOZE_OUT_RE, (repl, cloze, cont, tail) => {
           var _a, _b;
           const opn = ((_a = cont.match(TAIL_OPEN_RE)) === null || _a === void 0 ? void 0 : _a.length) || -1;
           const close = ((_b = cont.match(TAIL_CLOSE_RE)) === null || _b === void 0 ? void 0 : _b.length) || -1;
           if (opn > close) {
               const n = close - opn + 1;
               let res = repl;
               let match;
               while ((match = LIST_END_RE.exec(tail)) !== null) {
                   if (match.index === n) {
                       const nn = (match.index || 0) + match[0].length;
                       const pre = tail.slice(0, nn);
                       const post = nn < tail.length ? tail.slice(nn) : '';
                       res = `${cloze}${cont}${pre}}}<br>${post}`;
                       break;
                   }
               }
               return res;
           }
           return repl;
       });
       return html;
   }
   async function configure(cfg) {
   }

   let _codemirror = undefined;
   async function set_html(html) {
       const [md, ord] = await html_to_markdown(html);
       if (!_codemirror)
           _codemirror = create$2(document.body, md, ord);
       _codemirror.focus();
   }
   async function get_html() {
       return await markdown_to_html(_codemirror.state.doc.toString());
   }

   exports.converter_configure = configure;
   exports.editor_configure = configure$2;
   exports.get_html = get_html;
   exports.set_html = set_html;

   Object.defineProperty(exports, '__esModule', { value: true });

   return exports;

})({});
